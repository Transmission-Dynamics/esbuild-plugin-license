// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`esbuildPluginLicense should generate dependencies and inject banner 1`] = `
Array [
  Object {
    "content": "/*! esbuild-plugin-license-test v1.0.0 | MIT */
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, \\"__esModule\\", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === \\"object\\" || typeof module2 === \\"function\\") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \\"default\\"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \\"default\\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== \\"undefined\\" ? /* @__PURE__ */ new WeakMap() : 0);

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/utils/shallowEqual.js
var require_shallowEqual = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/utils/shallowEqual.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = shallowEqual;
    function shallowEqual(actual, expected) {
      const keys = Object.keys(expected);
      for (const key of keys) {
        if (actual[key] !== expected[key]) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/generated/index.js
var require_generated = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/generated/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.isAnyTypeAnnotation = isAnyTypeAnnotation;
    exports.isArgumentPlaceholder = isArgumentPlaceholder;
    exports.isArrayExpression = isArrayExpression;
    exports.isArrayPattern = isArrayPattern;
    exports.isArrayTypeAnnotation = isArrayTypeAnnotation;
    exports.isArrowFunctionExpression = isArrowFunctionExpression;
    exports.isAssignmentExpression = isAssignmentExpression;
    exports.isAssignmentPattern = isAssignmentPattern;
    exports.isAwaitExpression = isAwaitExpression;
    exports.isBigIntLiteral = isBigIntLiteral;
    exports.isBinary = isBinary;
    exports.isBinaryExpression = isBinaryExpression;
    exports.isBindExpression = isBindExpression;
    exports.isBlock = isBlock;
    exports.isBlockParent = isBlockParent;
    exports.isBlockStatement = isBlockStatement;
    exports.isBooleanLiteral = isBooleanLiteral;
    exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
    exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
    exports.isBreakStatement = isBreakStatement;
    exports.isCallExpression = isCallExpression;
    exports.isCatchClause = isCatchClause;
    exports.isClass = isClass;
    exports.isClassBody = isClassBody;
    exports.isClassDeclaration = isClassDeclaration;
    exports.isClassExpression = isClassExpression;
    exports.isClassImplements = isClassImplements;
    exports.isClassMethod = isClassMethod;
    exports.isClassPrivateMethod = isClassPrivateMethod;
    exports.isClassPrivateProperty = isClassPrivateProperty;
    exports.isClassProperty = isClassProperty;
    exports.isCompletionStatement = isCompletionStatement;
    exports.isConditional = isConditional;
    exports.isConditionalExpression = isConditionalExpression;
    exports.isContinueStatement = isContinueStatement;
    exports.isDebuggerStatement = isDebuggerStatement;
    exports.isDecimalLiteral = isDecimalLiteral;
    exports.isDeclaration = isDeclaration;
    exports.isDeclareClass = isDeclareClass;
    exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
    exports.isDeclareExportDeclaration = isDeclareExportDeclaration;
    exports.isDeclareFunction = isDeclareFunction;
    exports.isDeclareInterface = isDeclareInterface;
    exports.isDeclareModule = isDeclareModule;
    exports.isDeclareModuleExports = isDeclareModuleExports;
    exports.isDeclareOpaqueType = isDeclareOpaqueType;
    exports.isDeclareTypeAlias = isDeclareTypeAlias;
    exports.isDeclareVariable = isDeclareVariable;
    exports.isDeclaredPredicate = isDeclaredPredicate;
    exports.isDecorator = isDecorator;
    exports.isDirective = isDirective;
    exports.isDirectiveLiteral = isDirectiveLiteral;
    exports.isDoExpression = isDoExpression;
    exports.isDoWhileStatement = isDoWhileStatement;
    exports.isEmptyStatement = isEmptyStatement;
    exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
    exports.isEnumBody = isEnumBody;
    exports.isEnumBooleanBody = isEnumBooleanBody;
    exports.isEnumBooleanMember = isEnumBooleanMember;
    exports.isEnumDeclaration = isEnumDeclaration;
    exports.isEnumDefaultedMember = isEnumDefaultedMember;
    exports.isEnumMember = isEnumMember;
    exports.isEnumNumberBody = isEnumNumberBody;
    exports.isEnumNumberMember = isEnumNumberMember;
    exports.isEnumStringBody = isEnumStringBody;
    exports.isEnumStringMember = isEnumStringMember;
    exports.isEnumSymbolBody = isEnumSymbolBody;
    exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
    exports.isExportAllDeclaration = isExportAllDeclaration;
    exports.isExportDeclaration = isExportDeclaration;
    exports.isExportDefaultDeclaration = isExportDefaultDeclaration;
    exports.isExportDefaultSpecifier = isExportDefaultSpecifier;
    exports.isExportNamedDeclaration = isExportNamedDeclaration;
    exports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
    exports.isExportSpecifier = isExportSpecifier;
    exports.isExpression = isExpression;
    exports.isExpressionStatement = isExpressionStatement;
    exports.isExpressionWrapper = isExpressionWrapper;
    exports.isFile = isFile;
    exports.isFlow = isFlow;
    exports.isFlowBaseAnnotation = isFlowBaseAnnotation;
    exports.isFlowDeclaration = isFlowDeclaration;
    exports.isFlowPredicate = isFlowPredicate;
    exports.isFlowType = isFlowType;
    exports.isFor = isFor;
    exports.isForInStatement = isForInStatement;
    exports.isForOfStatement = isForOfStatement;
    exports.isForStatement = isForStatement;
    exports.isForXStatement = isForXStatement;
    exports.isFunction = isFunction;
    exports.isFunctionDeclaration = isFunctionDeclaration;
    exports.isFunctionExpression = isFunctionExpression;
    exports.isFunctionParent = isFunctionParent;
    exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
    exports.isFunctionTypeParam = isFunctionTypeParam;
    exports.isGenericTypeAnnotation = isGenericTypeAnnotation;
    exports.isIdentifier = isIdentifier;
    exports.isIfStatement = isIfStatement;
    exports.isImmutable = isImmutable;
    exports.isImport = isImport;
    exports.isImportAttribute = isImportAttribute;
    exports.isImportDeclaration = isImportDeclaration;
    exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
    exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
    exports.isImportSpecifier = isImportSpecifier;
    exports.isIndexedAccessType = isIndexedAccessType;
    exports.isInferredPredicate = isInferredPredicate;
    exports.isInterfaceDeclaration = isInterfaceDeclaration;
    exports.isInterfaceExtends = isInterfaceExtends;
    exports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
    exports.isInterpreterDirective = isInterpreterDirective;
    exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
    exports.isJSX = isJSX;
    exports.isJSXAttribute = isJSXAttribute;
    exports.isJSXClosingElement = isJSXClosingElement;
    exports.isJSXClosingFragment = isJSXClosingFragment;
    exports.isJSXElement = isJSXElement;
    exports.isJSXEmptyExpression = isJSXEmptyExpression;
    exports.isJSXExpressionContainer = isJSXExpressionContainer;
    exports.isJSXFragment = isJSXFragment;
    exports.isJSXIdentifier = isJSXIdentifier;
    exports.isJSXMemberExpression = isJSXMemberExpression;
    exports.isJSXNamespacedName = isJSXNamespacedName;
    exports.isJSXOpeningElement = isJSXOpeningElement;
    exports.isJSXOpeningFragment = isJSXOpeningFragment;
    exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
    exports.isJSXSpreadChild = isJSXSpreadChild;
    exports.isJSXText = isJSXText;
    exports.isLVal = isLVal;
    exports.isLabeledStatement = isLabeledStatement;
    exports.isLiteral = isLiteral;
    exports.isLogicalExpression = isLogicalExpression;
    exports.isLoop = isLoop;
    exports.isMemberExpression = isMemberExpression;
    exports.isMetaProperty = isMetaProperty;
    exports.isMethod = isMethod;
    exports.isMiscellaneous = isMiscellaneous;
    exports.isMixedTypeAnnotation = isMixedTypeAnnotation;
    exports.isModuleDeclaration = isModuleDeclaration;
    exports.isModuleExpression = isModuleExpression;
    exports.isModuleSpecifier = isModuleSpecifier;
    exports.isNewExpression = isNewExpression;
    exports.isNoop = isNoop;
    exports.isNullLiteral = isNullLiteral;
    exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
    exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
    exports.isNumberLiteral = isNumberLiteral;
    exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
    exports.isNumberTypeAnnotation = isNumberTypeAnnotation;
    exports.isNumericLiteral = isNumericLiteral;
    exports.isObjectExpression = isObjectExpression;
    exports.isObjectMember = isObjectMember;
    exports.isObjectMethod = isObjectMethod;
    exports.isObjectPattern = isObjectPattern;
    exports.isObjectProperty = isObjectProperty;
    exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
    exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
    exports.isObjectTypeIndexer = isObjectTypeIndexer;
    exports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
    exports.isObjectTypeProperty = isObjectTypeProperty;
    exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
    exports.isOpaqueType = isOpaqueType;
    exports.isOptionalCallExpression = isOptionalCallExpression;
    exports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
    exports.isOptionalMemberExpression = isOptionalMemberExpression;
    exports.isParenthesizedExpression = isParenthesizedExpression;
    exports.isPattern = isPattern;
    exports.isPatternLike = isPatternLike;
    exports.isPipelineBareFunction = isPipelineBareFunction;
    exports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
    exports.isPipelineTopicExpression = isPipelineTopicExpression;
    exports.isPlaceholder = isPlaceholder;
    exports.isPrivate = isPrivate;
    exports.isPrivateName = isPrivateName;
    exports.isProgram = isProgram;
    exports.isProperty = isProperty;
    exports.isPureish = isPureish;
    exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
    exports.isRecordExpression = isRecordExpression;
    exports.isRegExpLiteral = isRegExpLiteral;
    exports.isRegexLiteral = isRegexLiteral;
    exports.isRestElement = isRestElement;
    exports.isRestProperty = isRestProperty;
    exports.isReturnStatement = isReturnStatement;
    exports.isScopable = isScopable;
    exports.isSequenceExpression = isSequenceExpression;
    exports.isSpreadElement = isSpreadElement;
    exports.isSpreadProperty = isSpreadProperty;
    exports.isStandardized = isStandardized;
    exports.isStatement = isStatement;
    exports.isStaticBlock = isStaticBlock;
    exports.isStringLiteral = isStringLiteral;
    exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
    exports.isStringTypeAnnotation = isStringTypeAnnotation;
    exports.isSuper = isSuper;
    exports.isSwitchCase = isSwitchCase;
    exports.isSwitchStatement = isSwitchStatement;
    exports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
    exports.isTSAnyKeyword = isTSAnyKeyword;
    exports.isTSArrayType = isTSArrayType;
    exports.isTSAsExpression = isTSAsExpression;
    exports.isTSBaseType = isTSBaseType;
    exports.isTSBigIntKeyword = isTSBigIntKeyword;
    exports.isTSBooleanKeyword = isTSBooleanKeyword;
    exports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
    exports.isTSConditionalType = isTSConditionalType;
    exports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
    exports.isTSConstructorType = isTSConstructorType;
    exports.isTSDeclareFunction = isTSDeclareFunction;
    exports.isTSDeclareMethod = isTSDeclareMethod;
    exports.isTSEntityName = isTSEntityName;
    exports.isTSEnumDeclaration = isTSEnumDeclaration;
    exports.isTSEnumMember = isTSEnumMember;
    exports.isTSExportAssignment = isTSExportAssignment;
    exports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
    exports.isTSExternalModuleReference = isTSExternalModuleReference;
    exports.isTSFunctionType = isTSFunctionType;
    exports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
    exports.isTSImportType = isTSImportType;
    exports.isTSIndexSignature = isTSIndexSignature;
    exports.isTSIndexedAccessType = isTSIndexedAccessType;
    exports.isTSInferType = isTSInferType;
    exports.isTSInterfaceBody = isTSInterfaceBody;
    exports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
    exports.isTSIntersectionType = isTSIntersectionType;
    exports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
    exports.isTSLiteralType = isTSLiteralType;
    exports.isTSMappedType = isTSMappedType;
    exports.isTSMethodSignature = isTSMethodSignature;
    exports.isTSModuleBlock = isTSModuleBlock;
    exports.isTSModuleDeclaration = isTSModuleDeclaration;
    exports.isTSNamedTupleMember = isTSNamedTupleMember;
    exports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
    exports.isTSNeverKeyword = isTSNeverKeyword;
    exports.isTSNonNullExpression = isTSNonNullExpression;
    exports.isTSNullKeyword = isTSNullKeyword;
    exports.isTSNumberKeyword = isTSNumberKeyword;
    exports.isTSObjectKeyword = isTSObjectKeyword;
    exports.isTSOptionalType = isTSOptionalType;
    exports.isTSParameterProperty = isTSParameterProperty;
    exports.isTSParenthesizedType = isTSParenthesizedType;
    exports.isTSPropertySignature = isTSPropertySignature;
    exports.isTSQualifiedName = isTSQualifiedName;
    exports.isTSRestType = isTSRestType;
    exports.isTSStringKeyword = isTSStringKeyword;
    exports.isTSSymbolKeyword = isTSSymbolKeyword;
    exports.isTSThisType = isTSThisType;
    exports.isTSTupleType = isTSTupleType;
    exports.isTSType = isTSType;
    exports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
    exports.isTSTypeAnnotation = isTSTypeAnnotation;
    exports.isTSTypeAssertion = isTSTypeAssertion;
    exports.isTSTypeElement = isTSTypeElement;
    exports.isTSTypeLiteral = isTSTypeLiteral;
    exports.isTSTypeOperator = isTSTypeOperator;
    exports.isTSTypeParameter = isTSTypeParameter;
    exports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
    exports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
    exports.isTSTypePredicate = isTSTypePredicate;
    exports.isTSTypeQuery = isTSTypeQuery;
    exports.isTSTypeReference = isTSTypeReference;
    exports.isTSUndefinedKeyword = isTSUndefinedKeyword;
    exports.isTSUnionType = isTSUnionType;
    exports.isTSUnknownKeyword = isTSUnknownKeyword;
    exports.isTSVoidKeyword = isTSVoidKeyword;
    exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
    exports.isTemplateElement = isTemplateElement;
    exports.isTemplateLiteral = isTemplateLiteral;
    exports.isTerminatorless = isTerminatorless;
    exports.isThisExpression = isThisExpression;
    exports.isThisTypeAnnotation = isThisTypeAnnotation;
    exports.isThrowStatement = isThrowStatement;
    exports.isTopicReference = isTopicReference;
    exports.isTryStatement = isTryStatement;
    exports.isTupleExpression = isTupleExpression;
    exports.isTupleTypeAnnotation = isTupleTypeAnnotation;
    exports.isTypeAlias = isTypeAlias;
    exports.isTypeAnnotation = isTypeAnnotation;
    exports.isTypeCastExpression = isTypeCastExpression;
    exports.isTypeParameter = isTypeParameter;
    exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
    exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
    exports.isTypeScript = isTypeScript;
    exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
    exports.isUnaryExpression = isUnaryExpression;
    exports.isUnaryLike = isUnaryLike;
    exports.isUnionTypeAnnotation = isUnionTypeAnnotation;
    exports.isUpdateExpression = isUpdateExpression;
    exports.isUserWhitespacable = isUserWhitespacable;
    exports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
    exports.isVariableDeclaration = isVariableDeclaration;
    exports.isVariableDeclarator = isVariableDeclarator;
    exports.isVariance = isVariance;
    exports.isVoidTypeAnnotation = isVoidTypeAnnotation;
    exports.isWhile = isWhile;
    exports.isWhileStatement = isWhileStatement;
    exports.isWithStatement = isWithStatement;
    exports.isYieldExpression = isYieldExpression;
    var _shallowEqual = require_shallowEqual();
    function isArrayExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ArrayExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isAssignmentExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"AssignmentExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBinaryExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BinaryExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isInterpreterDirective(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"InterpreterDirective\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDirective(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Directive\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDirectiveLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DirectiveLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBlockStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BlockStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBreakStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BreakStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isCallExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"CallExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isCatchClause(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"CatchClause\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isConditionalExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ConditionalExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isContinueStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ContinueStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDebuggerStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DebuggerStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDoWhileStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DoWhileStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEmptyStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EmptyStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExpressionStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExpressionStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFile(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"File\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isForInStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ForInStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isForStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ForStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFunctionDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"FunctionDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFunctionExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"FunctionExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isIdentifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Identifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isIfStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"IfStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isLabeledStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"LabeledStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isStringLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"StringLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNumericLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"NumericLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNullLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"NullLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBooleanLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BooleanLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isRegExpLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"RegExpLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isLogicalExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"LogicalExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isMemberExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"MemberExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNewExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"NewExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isProgram(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Program\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectMethod(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectMethod\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isRestElement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"RestElement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isReturnStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ReturnStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isSequenceExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"SequenceExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isParenthesizedExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ParenthesizedExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isSwitchCase(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"SwitchCase\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isSwitchStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"SwitchStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isThisExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ThisExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isThrowStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ThrowStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTryStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TryStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isUnaryExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"UnaryExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isUpdateExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"UpdateExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isVariableDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"VariableDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isVariableDeclarator(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"VariableDeclarator\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isWhileStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"WhileStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isWithStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"WithStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isAssignmentPattern(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"AssignmentPattern\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isArrayPattern(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ArrayPattern\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isArrowFunctionExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ArrowFunctionExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClassBody(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassBody\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClassExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClassDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExportAllDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportAllDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExportDefaultDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportDefaultDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExportNamedDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportNamedDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExportSpecifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportSpecifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isForOfStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ForOfStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isImportDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ImportDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isImportDefaultSpecifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ImportDefaultSpecifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isImportNamespaceSpecifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ImportNamespaceSpecifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isImportSpecifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ImportSpecifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isMetaProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"MetaProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClassMethod(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassMethod\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectPattern(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectPattern\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isSpreadElement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"SpreadElement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isSuper(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Super\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTaggedTemplateExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TaggedTemplateExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTemplateElement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TemplateElement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTemplateLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TemplateLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isYieldExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"YieldExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isAwaitExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"AwaitExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isImport(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Import\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBigIntLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BigIntLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExportNamespaceSpecifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportNamespaceSpecifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isOptionalMemberExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"OptionalMemberExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isOptionalCallExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"OptionalCallExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClassProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClassPrivateProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassPrivateProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClassPrivateMethod(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassPrivateMethod\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPrivateName(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"PrivateName\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isStaticBlock(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"StaticBlock\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isAnyTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"AnyTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isArrayTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ArrayTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBooleanTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BooleanTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBooleanLiteralTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BooleanLiteralTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNullLiteralTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"NullLiteralTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClassImplements(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassImplements\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareClass(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareClass\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareFunction(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareFunction\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareInterface(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareInterface\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareModule(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareModule\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareModuleExports(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareModuleExports\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareTypeAlias(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareTypeAlias\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareOpaqueType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareOpaqueType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareVariable(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareVariable\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareExportDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareExportDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclareExportAllDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareExportAllDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclaredPredicate(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclaredPredicate\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExistsTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExistsTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFunctionTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"FunctionTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFunctionTypeParam(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"FunctionTypeParam\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isGenericTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"GenericTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isInferredPredicate(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"InferredPredicate\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isInterfaceExtends(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"InterfaceExtends\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isInterfaceDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"InterfaceDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isInterfaceTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"InterfaceTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isIntersectionTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"IntersectionTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isMixedTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"MixedTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEmptyTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EmptyTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNullableTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"NullableTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNumberLiteralTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"NumberLiteralTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNumberTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"NumberTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectTypeInternalSlot(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectTypeInternalSlot\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectTypeCallProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectTypeCallProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectTypeIndexer(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectTypeIndexer\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectTypeProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectTypeProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectTypeSpreadProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectTypeSpreadProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isOpaqueType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"OpaqueType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isQualifiedTypeIdentifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"QualifiedTypeIdentifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isStringLiteralTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"StringLiteralTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isStringTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"StringTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isSymbolTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"SymbolTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isThisTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ThisTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTupleTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TupleTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTypeofTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TypeofTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTypeAlias(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TypeAlias\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTypeCastExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TypeCastExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTypeParameter(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TypeParameter\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTypeParameterDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TypeParameterDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTypeParameterInstantiation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TypeParameterInstantiation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isUnionTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"UnionTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isVariance(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Variance\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isVoidTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"VoidTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumBooleanBody(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumBooleanBody\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumNumberBody(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumNumberBody\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumStringBody(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumStringBody\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumSymbolBody(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumSymbolBody\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumBooleanMember(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumBooleanMember\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumNumberMember(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumNumberMember\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumStringMember(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumStringMember\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumDefaultedMember(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumDefaultedMember\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isIndexedAccessType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"IndexedAccessType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isOptionalIndexedAccessType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"OptionalIndexedAccessType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXAttribute(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXAttribute\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXClosingElement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXClosingElement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXElement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXElement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXEmptyExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXEmptyExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXExpressionContainer(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXExpressionContainer\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXSpreadChild(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXSpreadChild\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXIdentifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXIdentifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXMemberExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXMemberExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXNamespacedName(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXNamespacedName\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXOpeningElement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXOpeningElement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXSpreadAttribute(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXSpreadAttribute\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXText(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXText\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXFragment(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXFragment\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXOpeningFragment(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXOpeningFragment\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSXClosingFragment(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXClosingFragment\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNoop(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Noop\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPlaceholder(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Placeholder\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isV8IntrinsicIdentifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"V8IntrinsicIdentifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isArgumentPlaceholder(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ArgumentPlaceholder\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBindExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BindExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isImportAttribute(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ImportAttribute\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDecorator(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Decorator\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDoExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DoExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExportDefaultSpecifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportDefaultSpecifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isRecordExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"RecordExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTupleExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TupleExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDecimalLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DecimalLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isModuleExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ModuleExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTopicReference(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TopicReference\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPipelineTopicExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"PipelineTopicExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPipelineBareFunction(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"PipelineBareFunction\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPipelinePrimaryTopicReference(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"PipelinePrimaryTopicReference\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSParameterProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSParameterProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSDeclareFunction(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSDeclareFunction\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSDeclareMethod(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSDeclareMethod\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSQualifiedName(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSQualifiedName\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSCallSignatureDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSCallSignatureDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSConstructSignatureDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSConstructSignatureDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSPropertySignature(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSPropertySignature\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSMethodSignature(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSMethodSignature\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSIndexSignature(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSIndexSignature\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSAnyKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSAnyKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSBooleanKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSBooleanKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSBigIntKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSBigIntKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSIntrinsicKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSIntrinsicKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSNeverKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSNeverKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSNullKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSNullKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSNumberKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSNumberKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSObjectKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSObjectKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSStringKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSStringKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSSymbolKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSSymbolKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSUndefinedKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSUndefinedKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSUnknownKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSUnknownKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSVoidKeyword(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSVoidKeyword\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSThisType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSThisType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSFunctionType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSFunctionType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSConstructorType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSConstructorType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeReference(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeReference\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypePredicate(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypePredicate\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeQuery(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeQuery\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSArrayType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSArrayType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTupleType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTupleType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSOptionalType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSOptionalType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSRestType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSRestType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSNamedTupleMember(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSNamedTupleMember\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSUnionType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSUnionType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSIntersectionType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSIntersectionType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSConditionalType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSConditionalType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSInferType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSInferType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSParenthesizedType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSParenthesizedType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeOperator(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeOperator\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSIndexedAccessType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSIndexedAccessType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSMappedType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSMappedType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSLiteralType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSLiteralType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSExpressionWithTypeArguments(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSExpressionWithTypeArguments\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSInterfaceDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSInterfaceDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSInterfaceBody(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSInterfaceBody\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeAliasDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeAliasDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSAsExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSAsExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeAssertion(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeAssertion\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSEnumDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSEnumDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSEnumMember(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSEnumMember\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSModuleDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSModuleDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSModuleBlock(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSModuleBlock\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSImportType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSImportType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSImportEqualsDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSImportEqualsDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSExternalModuleReference(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSExternalModuleReference\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSNonNullExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSNonNullExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSExportAssignment(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSExportAssignment\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSNamespaceExportDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSNamespaceExportDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeParameterInstantiation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeParameterInstantiation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeParameterDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeParameterDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeParameter(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSTypeParameter\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isStandardized(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ArrayExpression\\" || nodeType === \\"AssignmentExpression\\" || nodeType === \\"BinaryExpression\\" || nodeType === \\"InterpreterDirective\\" || nodeType === \\"Directive\\" || nodeType === \\"DirectiveLiteral\\" || nodeType === \\"BlockStatement\\" || nodeType === \\"BreakStatement\\" || nodeType === \\"CallExpression\\" || nodeType === \\"CatchClause\\" || nodeType === \\"ConditionalExpression\\" || nodeType === \\"ContinueStatement\\" || nodeType === \\"DebuggerStatement\\" || nodeType === \\"DoWhileStatement\\" || nodeType === \\"EmptyStatement\\" || nodeType === \\"ExpressionStatement\\" || nodeType === \\"File\\" || nodeType === \\"ForInStatement\\" || nodeType === \\"ForStatement\\" || nodeType === \\"FunctionDeclaration\\" || nodeType === \\"FunctionExpression\\" || nodeType === \\"Identifier\\" || nodeType === \\"IfStatement\\" || nodeType === \\"LabeledStatement\\" || nodeType === \\"StringLiteral\\" || nodeType === \\"NumericLiteral\\" || nodeType === \\"NullLiteral\\" || nodeType === \\"BooleanLiteral\\" || nodeType === \\"RegExpLiteral\\" || nodeType === \\"LogicalExpression\\" || nodeType === \\"MemberExpression\\" || nodeType === \\"NewExpression\\" || nodeType === \\"Program\\" || nodeType === \\"ObjectExpression\\" || nodeType === \\"ObjectMethod\\" || nodeType === \\"ObjectProperty\\" || nodeType === \\"RestElement\\" || nodeType === \\"ReturnStatement\\" || nodeType === \\"SequenceExpression\\" || nodeType === \\"ParenthesizedExpression\\" || nodeType === \\"SwitchCase\\" || nodeType === \\"SwitchStatement\\" || nodeType === \\"ThisExpression\\" || nodeType === \\"ThrowStatement\\" || nodeType === \\"TryStatement\\" || nodeType === \\"UnaryExpression\\" || nodeType === \\"UpdateExpression\\" || nodeType === \\"VariableDeclaration\\" || nodeType === \\"VariableDeclarator\\" || nodeType === \\"WhileStatement\\" || nodeType === \\"WithStatement\\" || nodeType === \\"AssignmentPattern\\" || nodeType === \\"ArrayPattern\\" || nodeType === \\"ArrowFunctionExpression\\" || nodeType === \\"ClassBody\\" || nodeType === \\"ClassExpression\\" || nodeType === \\"ClassDeclaration\\" || nodeType === \\"ExportAllDeclaration\\" || nodeType === \\"ExportDefaultDeclaration\\" || nodeType === \\"ExportNamedDeclaration\\" || nodeType === \\"ExportSpecifier\\" || nodeType === \\"ForOfStatement\\" || nodeType === \\"ImportDeclaration\\" || nodeType === \\"ImportDefaultSpecifier\\" || nodeType === \\"ImportNamespaceSpecifier\\" || nodeType === \\"ImportSpecifier\\" || nodeType === \\"MetaProperty\\" || nodeType === \\"ClassMethod\\" || nodeType === \\"ObjectPattern\\" || nodeType === \\"SpreadElement\\" || nodeType === \\"Super\\" || nodeType === \\"TaggedTemplateExpression\\" || nodeType === \\"TemplateElement\\" || nodeType === \\"TemplateLiteral\\" || nodeType === \\"YieldExpression\\" || nodeType === \\"AwaitExpression\\" || nodeType === \\"Import\\" || nodeType === \\"BigIntLiteral\\" || nodeType === \\"ExportNamespaceSpecifier\\" || nodeType === \\"OptionalMemberExpression\\" || nodeType === \\"OptionalCallExpression\\" || nodeType === \\"ClassProperty\\" || nodeType === \\"ClassPrivateProperty\\" || nodeType === \\"ClassPrivateMethod\\" || nodeType === \\"PrivateName\\" || nodeType === \\"StaticBlock\\" || nodeType === \\"Placeholder\\" && (node.expectedNode === \\"Identifier\\" || node.expectedNode === \\"StringLiteral\\" || node.expectedNode === \\"BlockStatement\\" || node.expectedNode === \\"ClassBody\\")) {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExpression(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ArrayExpression\\" || nodeType === \\"AssignmentExpression\\" || nodeType === \\"BinaryExpression\\" || nodeType === \\"CallExpression\\" || nodeType === \\"ConditionalExpression\\" || nodeType === \\"FunctionExpression\\" || nodeType === \\"Identifier\\" || nodeType === \\"StringLiteral\\" || nodeType === \\"NumericLiteral\\" || nodeType === \\"NullLiteral\\" || nodeType === \\"BooleanLiteral\\" || nodeType === \\"RegExpLiteral\\" || nodeType === \\"LogicalExpression\\" || nodeType === \\"MemberExpression\\" || nodeType === \\"NewExpression\\" || nodeType === \\"ObjectExpression\\" || nodeType === \\"SequenceExpression\\" || nodeType === \\"ParenthesizedExpression\\" || nodeType === \\"ThisExpression\\" || nodeType === \\"UnaryExpression\\" || nodeType === \\"UpdateExpression\\" || nodeType === \\"ArrowFunctionExpression\\" || nodeType === \\"ClassExpression\\" || nodeType === \\"MetaProperty\\" || nodeType === \\"Super\\" || nodeType === \\"TaggedTemplateExpression\\" || nodeType === \\"TemplateLiteral\\" || nodeType === \\"YieldExpression\\" || nodeType === \\"AwaitExpression\\" || nodeType === \\"Import\\" || nodeType === \\"BigIntLiteral\\" || nodeType === \\"OptionalMemberExpression\\" || nodeType === \\"OptionalCallExpression\\" || nodeType === \\"TypeCastExpression\\" || nodeType === \\"JSXElement\\" || nodeType === \\"JSXFragment\\" || nodeType === \\"BindExpression\\" || nodeType === \\"DoExpression\\" || nodeType === \\"RecordExpression\\" || nodeType === \\"TupleExpression\\" || nodeType === \\"DecimalLiteral\\" || nodeType === \\"ModuleExpression\\" || nodeType === \\"TopicReference\\" || nodeType === \\"PipelineTopicExpression\\" || nodeType === \\"PipelineBareFunction\\" || nodeType === \\"PipelinePrimaryTopicReference\\" || nodeType === \\"TSAsExpression\\" || nodeType === \\"TSTypeAssertion\\" || nodeType === \\"TSNonNullExpression\\" || nodeType === \\"Placeholder\\" && (node.expectedNode === \\"Expression\\" || node.expectedNode === \\"Identifier\\" || node.expectedNode === \\"StringLiteral\\")) {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBinary(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BinaryExpression\\" || nodeType === \\"LogicalExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isScopable(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BlockStatement\\" || nodeType === \\"CatchClause\\" || nodeType === \\"DoWhileStatement\\" || nodeType === \\"ForInStatement\\" || nodeType === \\"ForStatement\\" || nodeType === \\"FunctionDeclaration\\" || nodeType === \\"FunctionExpression\\" || nodeType === \\"Program\\" || nodeType === \\"ObjectMethod\\" || nodeType === \\"SwitchStatement\\" || nodeType === \\"WhileStatement\\" || nodeType === \\"ArrowFunctionExpression\\" || nodeType === \\"ClassExpression\\" || nodeType === \\"ClassDeclaration\\" || nodeType === \\"ForOfStatement\\" || nodeType === \\"ClassMethod\\" || nodeType === \\"ClassPrivateMethod\\" || nodeType === \\"StaticBlock\\" || nodeType === \\"TSModuleBlock\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"BlockStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBlockParent(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BlockStatement\\" || nodeType === \\"CatchClause\\" || nodeType === \\"DoWhileStatement\\" || nodeType === \\"ForInStatement\\" || nodeType === \\"ForStatement\\" || nodeType === \\"FunctionDeclaration\\" || nodeType === \\"FunctionExpression\\" || nodeType === \\"Program\\" || nodeType === \\"ObjectMethod\\" || nodeType === \\"SwitchStatement\\" || nodeType === \\"WhileStatement\\" || nodeType === \\"ArrowFunctionExpression\\" || nodeType === \\"ForOfStatement\\" || nodeType === \\"ClassMethod\\" || nodeType === \\"ClassPrivateMethod\\" || nodeType === \\"StaticBlock\\" || nodeType === \\"TSModuleBlock\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"BlockStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isBlock(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BlockStatement\\" || nodeType === \\"Program\\" || nodeType === \\"TSModuleBlock\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"BlockStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BlockStatement\\" || nodeType === \\"BreakStatement\\" || nodeType === \\"ContinueStatement\\" || nodeType === \\"DebuggerStatement\\" || nodeType === \\"DoWhileStatement\\" || nodeType === \\"EmptyStatement\\" || nodeType === \\"ExpressionStatement\\" || nodeType === \\"ForInStatement\\" || nodeType === \\"ForStatement\\" || nodeType === \\"FunctionDeclaration\\" || nodeType === \\"IfStatement\\" || nodeType === \\"LabeledStatement\\" || nodeType === \\"ReturnStatement\\" || nodeType === \\"SwitchStatement\\" || nodeType === \\"ThrowStatement\\" || nodeType === \\"TryStatement\\" || nodeType === \\"VariableDeclaration\\" || nodeType === \\"WhileStatement\\" || nodeType === \\"WithStatement\\" || nodeType === \\"ClassDeclaration\\" || nodeType === \\"ExportAllDeclaration\\" || nodeType === \\"ExportDefaultDeclaration\\" || nodeType === \\"ExportNamedDeclaration\\" || nodeType === \\"ForOfStatement\\" || nodeType === \\"ImportDeclaration\\" || nodeType === \\"DeclareClass\\" || nodeType === \\"DeclareFunction\\" || nodeType === \\"DeclareInterface\\" || nodeType === \\"DeclareModule\\" || nodeType === \\"DeclareModuleExports\\" || nodeType === \\"DeclareTypeAlias\\" || nodeType === \\"DeclareOpaqueType\\" || nodeType === \\"DeclareVariable\\" || nodeType === \\"DeclareExportDeclaration\\" || nodeType === \\"DeclareExportAllDeclaration\\" || nodeType === \\"InterfaceDeclaration\\" || nodeType === \\"OpaqueType\\" || nodeType === \\"TypeAlias\\" || nodeType === \\"EnumDeclaration\\" || nodeType === \\"TSDeclareFunction\\" || nodeType === \\"TSInterfaceDeclaration\\" || nodeType === \\"TSTypeAliasDeclaration\\" || nodeType === \\"TSEnumDeclaration\\" || nodeType === \\"TSModuleDeclaration\\" || nodeType === \\"TSImportEqualsDeclaration\\" || nodeType === \\"TSExportAssignment\\" || nodeType === \\"TSNamespaceExportDeclaration\\" || nodeType === \\"Placeholder\\" && (node.expectedNode === \\"Statement\\" || node.expectedNode === \\"Declaration\\" || node.expectedNode === \\"BlockStatement\\")) {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTerminatorless(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BreakStatement\\" || nodeType === \\"ContinueStatement\\" || nodeType === \\"ReturnStatement\\" || nodeType === \\"ThrowStatement\\" || nodeType === \\"YieldExpression\\" || nodeType === \\"AwaitExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isCompletionStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"BreakStatement\\" || nodeType === \\"ContinueStatement\\" || nodeType === \\"ReturnStatement\\" || nodeType === \\"ThrowStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isConditional(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ConditionalExpression\\" || nodeType === \\"IfStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isLoop(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DoWhileStatement\\" || nodeType === \\"ForInStatement\\" || nodeType === \\"ForStatement\\" || nodeType === \\"WhileStatement\\" || nodeType === \\"ForOfStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isWhile(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DoWhileStatement\\" || nodeType === \\"WhileStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExpressionWrapper(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExpressionStatement\\" || nodeType === \\"ParenthesizedExpression\\" || nodeType === \\"TypeCastExpression\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFor(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ForInStatement\\" || nodeType === \\"ForStatement\\" || nodeType === \\"ForOfStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isForXStatement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ForInStatement\\" || nodeType === \\"ForOfStatement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFunction(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"FunctionDeclaration\\" || nodeType === \\"FunctionExpression\\" || nodeType === \\"ObjectMethod\\" || nodeType === \\"ArrowFunctionExpression\\" || nodeType === \\"ClassMethod\\" || nodeType === \\"ClassPrivateMethod\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFunctionParent(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"FunctionDeclaration\\" || nodeType === \\"FunctionExpression\\" || nodeType === \\"ObjectMethod\\" || nodeType === \\"ArrowFunctionExpression\\" || nodeType === \\"ClassMethod\\" || nodeType === \\"ClassPrivateMethod\\" || nodeType === \\"StaticBlock\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPureish(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"FunctionDeclaration\\" || nodeType === \\"FunctionExpression\\" || nodeType === \\"StringLiteral\\" || nodeType === \\"NumericLiteral\\" || nodeType === \\"NullLiteral\\" || nodeType === \\"BooleanLiteral\\" || nodeType === \\"RegExpLiteral\\" || nodeType === \\"ArrowFunctionExpression\\" || nodeType === \\"BigIntLiteral\\" || nodeType === \\"DecimalLiteral\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"StringLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"FunctionDeclaration\\" || nodeType === \\"VariableDeclaration\\" || nodeType === \\"ClassDeclaration\\" || nodeType === \\"ExportAllDeclaration\\" || nodeType === \\"ExportDefaultDeclaration\\" || nodeType === \\"ExportNamedDeclaration\\" || nodeType === \\"ImportDeclaration\\" || nodeType === \\"DeclareClass\\" || nodeType === \\"DeclareFunction\\" || nodeType === \\"DeclareInterface\\" || nodeType === \\"DeclareModule\\" || nodeType === \\"DeclareModuleExports\\" || nodeType === \\"DeclareTypeAlias\\" || nodeType === \\"DeclareOpaqueType\\" || nodeType === \\"DeclareVariable\\" || nodeType === \\"DeclareExportDeclaration\\" || nodeType === \\"DeclareExportAllDeclaration\\" || nodeType === \\"InterfaceDeclaration\\" || nodeType === \\"OpaqueType\\" || nodeType === \\"TypeAlias\\" || nodeType === \\"EnumDeclaration\\" || nodeType === \\"TSDeclareFunction\\" || nodeType === \\"TSInterfaceDeclaration\\" || nodeType === \\"TSTypeAliasDeclaration\\" || nodeType === \\"TSEnumDeclaration\\" || nodeType === \\"TSModuleDeclaration\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"Declaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPatternLike(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Identifier\\" || nodeType === \\"RestElement\\" || nodeType === \\"AssignmentPattern\\" || nodeType === \\"ArrayPattern\\" || nodeType === \\"ObjectPattern\\" || nodeType === \\"Placeholder\\" && (node.expectedNode === \\"Pattern\\" || node.expectedNode === \\"Identifier\\")) {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isLVal(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Identifier\\" || nodeType === \\"MemberExpression\\" || nodeType === \\"RestElement\\" || nodeType === \\"AssignmentPattern\\" || nodeType === \\"ArrayPattern\\" || nodeType === \\"ObjectPattern\\" || nodeType === \\"TSParameterProperty\\" || nodeType === \\"Placeholder\\" && (node.expectedNode === \\"Pattern\\" || node.expectedNode === \\"Identifier\\")) {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSEntityName(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Identifier\\" || nodeType === \\"TSQualifiedName\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"Identifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isLiteral(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"StringLiteral\\" || nodeType === \\"NumericLiteral\\" || nodeType === \\"NullLiteral\\" || nodeType === \\"BooleanLiteral\\" || nodeType === \\"RegExpLiteral\\" || nodeType === \\"TemplateLiteral\\" || nodeType === \\"BigIntLiteral\\" || nodeType === \\"DecimalLiteral\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"StringLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isImmutable(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"StringLiteral\\" || nodeType === \\"NumericLiteral\\" || nodeType === \\"NullLiteral\\" || nodeType === \\"BooleanLiteral\\" || nodeType === \\"BigIntLiteral\\" || nodeType === \\"JSXAttribute\\" || nodeType === \\"JSXClosingElement\\" || nodeType === \\"JSXElement\\" || nodeType === \\"JSXExpressionContainer\\" || nodeType === \\"JSXSpreadChild\\" || nodeType === \\"JSXOpeningElement\\" || nodeType === \\"JSXText\\" || nodeType === \\"JSXFragment\\" || nodeType === \\"JSXOpeningFragment\\" || nodeType === \\"JSXClosingFragment\\" || nodeType === \\"DecimalLiteral\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"StringLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isUserWhitespacable(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectMethod\\" || nodeType === \\"ObjectProperty\\" || nodeType === \\"ObjectTypeInternalSlot\\" || nodeType === \\"ObjectTypeCallProperty\\" || nodeType === \\"ObjectTypeIndexer\\" || nodeType === \\"ObjectTypeProperty\\" || nodeType === \\"ObjectTypeSpreadProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isMethod(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectMethod\\" || nodeType === \\"ClassMethod\\" || nodeType === \\"ClassPrivateMethod\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isObjectMember(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectMethod\\" || nodeType === \\"ObjectProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isProperty(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ObjectProperty\\" || nodeType === \\"ClassProperty\\" || nodeType === \\"ClassPrivateProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isUnaryLike(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"UnaryExpression\\" || nodeType === \\"SpreadElement\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPattern(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"AssignmentPattern\\" || nodeType === \\"ArrayPattern\\" || nodeType === \\"ObjectPattern\\" || nodeType === \\"Placeholder\\" && node.expectedNode === \\"Pattern\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isClass(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassExpression\\" || nodeType === \\"ClassDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isModuleDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportAllDeclaration\\" || nodeType === \\"ExportDefaultDeclaration\\" || nodeType === \\"ExportNamedDeclaration\\" || nodeType === \\"ImportDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isExportDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportAllDeclaration\\" || nodeType === \\"ExportDefaultDeclaration\\" || nodeType === \\"ExportNamedDeclaration\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isModuleSpecifier(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ExportSpecifier\\" || nodeType === \\"ImportDefaultSpecifier\\" || nodeType === \\"ImportNamespaceSpecifier\\" || nodeType === \\"ImportSpecifier\\" || nodeType === \\"ExportNamespaceSpecifier\\" || nodeType === \\"ExportDefaultSpecifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isPrivate(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"ClassPrivateProperty\\" || nodeType === \\"ClassPrivateMethod\\" || nodeType === \\"PrivateName\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFlow(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"AnyTypeAnnotation\\" || nodeType === \\"ArrayTypeAnnotation\\" || nodeType === \\"BooleanTypeAnnotation\\" || nodeType === \\"BooleanLiteralTypeAnnotation\\" || nodeType === \\"NullLiteralTypeAnnotation\\" || nodeType === \\"ClassImplements\\" || nodeType === \\"DeclareClass\\" || nodeType === \\"DeclareFunction\\" || nodeType === \\"DeclareInterface\\" || nodeType === \\"DeclareModule\\" || nodeType === \\"DeclareModuleExports\\" || nodeType === \\"DeclareTypeAlias\\" || nodeType === \\"DeclareOpaqueType\\" || nodeType === \\"DeclareVariable\\" || nodeType === \\"DeclareExportDeclaration\\" || nodeType === \\"DeclareExportAllDeclaration\\" || nodeType === \\"DeclaredPredicate\\" || nodeType === \\"ExistsTypeAnnotation\\" || nodeType === \\"FunctionTypeAnnotation\\" || nodeType === \\"FunctionTypeParam\\" || nodeType === \\"GenericTypeAnnotation\\" || nodeType === \\"InferredPredicate\\" || nodeType === \\"InterfaceExtends\\" || nodeType === \\"InterfaceDeclaration\\" || nodeType === \\"InterfaceTypeAnnotation\\" || nodeType === \\"IntersectionTypeAnnotation\\" || nodeType === \\"MixedTypeAnnotation\\" || nodeType === \\"EmptyTypeAnnotation\\" || nodeType === \\"NullableTypeAnnotation\\" || nodeType === \\"NumberLiteralTypeAnnotation\\" || nodeType === \\"NumberTypeAnnotation\\" || nodeType === \\"ObjectTypeAnnotation\\" || nodeType === \\"ObjectTypeInternalSlot\\" || nodeType === \\"ObjectTypeCallProperty\\" || nodeType === \\"ObjectTypeIndexer\\" || nodeType === \\"ObjectTypeProperty\\" || nodeType === \\"ObjectTypeSpreadProperty\\" || nodeType === \\"OpaqueType\\" || nodeType === \\"QualifiedTypeIdentifier\\" || nodeType === \\"StringLiteralTypeAnnotation\\" || nodeType === \\"StringTypeAnnotation\\" || nodeType === \\"SymbolTypeAnnotation\\" || nodeType === \\"ThisTypeAnnotation\\" || nodeType === \\"TupleTypeAnnotation\\" || nodeType === \\"TypeofTypeAnnotation\\" || nodeType === \\"TypeAlias\\" || nodeType === \\"TypeAnnotation\\" || nodeType === \\"TypeCastExpression\\" || nodeType === \\"TypeParameter\\" || nodeType === \\"TypeParameterDeclaration\\" || nodeType === \\"TypeParameterInstantiation\\" || nodeType === \\"UnionTypeAnnotation\\" || nodeType === \\"Variance\\" || nodeType === \\"VoidTypeAnnotation\\" || nodeType === \\"EnumDeclaration\\" || nodeType === \\"EnumBooleanBody\\" || nodeType === \\"EnumNumberBody\\" || nodeType === \\"EnumStringBody\\" || nodeType === \\"EnumSymbolBody\\" || nodeType === \\"EnumBooleanMember\\" || nodeType === \\"EnumNumberMember\\" || nodeType === \\"EnumStringMember\\" || nodeType === \\"EnumDefaultedMember\\" || nodeType === \\"IndexedAccessType\\" || nodeType === \\"OptionalIndexedAccessType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFlowType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"AnyTypeAnnotation\\" || nodeType === \\"ArrayTypeAnnotation\\" || nodeType === \\"BooleanTypeAnnotation\\" || nodeType === \\"BooleanLiteralTypeAnnotation\\" || nodeType === \\"NullLiteralTypeAnnotation\\" || nodeType === \\"ExistsTypeAnnotation\\" || nodeType === \\"FunctionTypeAnnotation\\" || nodeType === \\"GenericTypeAnnotation\\" || nodeType === \\"InterfaceTypeAnnotation\\" || nodeType === \\"IntersectionTypeAnnotation\\" || nodeType === \\"MixedTypeAnnotation\\" || nodeType === \\"EmptyTypeAnnotation\\" || nodeType === \\"NullableTypeAnnotation\\" || nodeType === \\"NumberLiteralTypeAnnotation\\" || nodeType === \\"NumberTypeAnnotation\\" || nodeType === \\"ObjectTypeAnnotation\\" || nodeType === \\"StringLiteralTypeAnnotation\\" || nodeType === \\"StringTypeAnnotation\\" || nodeType === \\"SymbolTypeAnnotation\\" || nodeType === \\"ThisTypeAnnotation\\" || nodeType === \\"TupleTypeAnnotation\\" || nodeType === \\"TypeofTypeAnnotation\\" || nodeType === \\"UnionTypeAnnotation\\" || nodeType === \\"VoidTypeAnnotation\\" || nodeType === \\"IndexedAccessType\\" || nodeType === \\"OptionalIndexedAccessType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFlowBaseAnnotation(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"AnyTypeAnnotation\\" || nodeType === \\"BooleanTypeAnnotation\\" || nodeType === \\"NullLiteralTypeAnnotation\\" || nodeType === \\"MixedTypeAnnotation\\" || nodeType === \\"EmptyTypeAnnotation\\" || nodeType === \\"NumberTypeAnnotation\\" || nodeType === \\"StringTypeAnnotation\\" || nodeType === \\"SymbolTypeAnnotation\\" || nodeType === \\"ThisTypeAnnotation\\" || nodeType === \\"VoidTypeAnnotation\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFlowDeclaration(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclareClass\\" || nodeType === \\"DeclareFunction\\" || nodeType === \\"DeclareInterface\\" || nodeType === \\"DeclareModule\\" || nodeType === \\"DeclareModuleExports\\" || nodeType === \\"DeclareTypeAlias\\" || nodeType === \\"DeclareOpaqueType\\" || nodeType === \\"DeclareVariable\\" || nodeType === \\"DeclareExportDeclaration\\" || nodeType === \\"DeclareExportAllDeclaration\\" || nodeType === \\"InterfaceDeclaration\\" || nodeType === \\"OpaqueType\\" || nodeType === \\"TypeAlias\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isFlowPredicate(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"DeclaredPredicate\\" || nodeType === \\"InferredPredicate\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumBody(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumBooleanBody\\" || nodeType === \\"EnumNumberBody\\" || nodeType === \\"EnumStringBody\\" || nodeType === \\"EnumSymbolBody\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isEnumMember(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"EnumBooleanMember\\" || nodeType === \\"EnumNumberMember\\" || nodeType === \\"EnumStringMember\\" || nodeType === \\"EnumDefaultedMember\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isJSX(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"JSXAttribute\\" || nodeType === \\"JSXClosingElement\\" || nodeType === \\"JSXElement\\" || nodeType === \\"JSXEmptyExpression\\" || nodeType === \\"JSXExpressionContainer\\" || nodeType === \\"JSXSpreadChild\\" || nodeType === \\"JSXIdentifier\\" || nodeType === \\"JSXMemberExpression\\" || nodeType === \\"JSXNamespacedName\\" || nodeType === \\"JSXOpeningElement\\" || nodeType === \\"JSXSpreadAttribute\\" || nodeType === \\"JSXText\\" || nodeType === \\"JSXFragment\\" || nodeType === \\"JSXOpeningFragment\\" || nodeType === \\"JSXClosingFragment\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isMiscellaneous(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"Noop\\" || nodeType === \\"Placeholder\\" || nodeType === \\"V8IntrinsicIdentifier\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTypeScript(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSParameterProperty\\" || nodeType === \\"TSDeclareFunction\\" || nodeType === \\"TSDeclareMethod\\" || nodeType === \\"TSQualifiedName\\" || nodeType === \\"TSCallSignatureDeclaration\\" || nodeType === \\"TSConstructSignatureDeclaration\\" || nodeType === \\"TSPropertySignature\\" || nodeType === \\"TSMethodSignature\\" || nodeType === \\"TSIndexSignature\\" || nodeType === \\"TSAnyKeyword\\" || nodeType === \\"TSBooleanKeyword\\" || nodeType === \\"TSBigIntKeyword\\" || nodeType === \\"TSIntrinsicKeyword\\" || nodeType === \\"TSNeverKeyword\\" || nodeType === \\"TSNullKeyword\\" || nodeType === \\"TSNumberKeyword\\" || nodeType === \\"TSObjectKeyword\\" || nodeType === \\"TSStringKeyword\\" || nodeType === \\"TSSymbolKeyword\\" || nodeType === \\"TSUndefinedKeyword\\" || nodeType === \\"TSUnknownKeyword\\" || nodeType === \\"TSVoidKeyword\\" || nodeType === \\"TSThisType\\" || nodeType === \\"TSFunctionType\\" || nodeType === \\"TSConstructorType\\" || nodeType === \\"TSTypeReference\\" || nodeType === \\"TSTypePredicate\\" || nodeType === \\"TSTypeQuery\\" || nodeType === \\"TSTypeLiteral\\" || nodeType === \\"TSArrayType\\" || nodeType === \\"TSTupleType\\" || nodeType === \\"TSOptionalType\\" || nodeType === \\"TSRestType\\" || nodeType === \\"TSNamedTupleMember\\" || nodeType === \\"TSUnionType\\" || nodeType === \\"TSIntersectionType\\" || nodeType === \\"TSConditionalType\\" || nodeType === \\"TSInferType\\" || nodeType === \\"TSParenthesizedType\\" || nodeType === \\"TSTypeOperator\\" || nodeType === \\"TSIndexedAccessType\\" || nodeType === \\"TSMappedType\\" || nodeType === \\"TSLiteralType\\" || nodeType === \\"TSExpressionWithTypeArguments\\" || nodeType === \\"TSInterfaceDeclaration\\" || nodeType === \\"TSInterfaceBody\\" || nodeType === \\"TSTypeAliasDeclaration\\" || nodeType === \\"TSAsExpression\\" || nodeType === \\"TSTypeAssertion\\" || nodeType === \\"TSEnumDeclaration\\" || nodeType === \\"TSEnumMember\\" || nodeType === \\"TSModuleDeclaration\\" || nodeType === \\"TSModuleBlock\\" || nodeType === \\"TSImportType\\" || nodeType === \\"TSImportEqualsDeclaration\\" || nodeType === \\"TSExternalModuleReference\\" || nodeType === \\"TSNonNullExpression\\" || nodeType === \\"TSExportAssignment\\" || nodeType === \\"TSNamespaceExportDeclaration\\" || nodeType === \\"TSTypeAnnotation\\" || nodeType === \\"TSTypeParameterInstantiation\\" || nodeType === \\"TSTypeParameterDeclaration\\" || nodeType === \\"TSTypeParameter\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSTypeElement(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSCallSignatureDeclaration\\" || nodeType === \\"TSConstructSignatureDeclaration\\" || nodeType === \\"TSPropertySignature\\" || nodeType === \\"TSMethodSignature\\" || nodeType === \\"TSIndexSignature\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSAnyKeyword\\" || nodeType === \\"TSBooleanKeyword\\" || nodeType === \\"TSBigIntKeyword\\" || nodeType === \\"TSIntrinsicKeyword\\" || nodeType === \\"TSNeverKeyword\\" || nodeType === \\"TSNullKeyword\\" || nodeType === \\"TSNumberKeyword\\" || nodeType === \\"TSObjectKeyword\\" || nodeType === \\"TSStringKeyword\\" || nodeType === \\"TSSymbolKeyword\\" || nodeType === \\"TSUndefinedKeyword\\" || nodeType === \\"TSUnknownKeyword\\" || nodeType === \\"TSVoidKeyword\\" || nodeType === \\"TSThisType\\" || nodeType === \\"TSFunctionType\\" || nodeType === \\"TSConstructorType\\" || nodeType === \\"TSTypeReference\\" || nodeType === \\"TSTypePredicate\\" || nodeType === \\"TSTypeQuery\\" || nodeType === \\"TSTypeLiteral\\" || nodeType === \\"TSArrayType\\" || nodeType === \\"TSTupleType\\" || nodeType === \\"TSOptionalType\\" || nodeType === \\"TSRestType\\" || nodeType === \\"TSUnionType\\" || nodeType === \\"TSIntersectionType\\" || nodeType === \\"TSConditionalType\\" || nodeType === \\"TSInferType\\" || nodeType === \\"TSParenthesizedType\\" || nodeType === \\"TSTypeOperator\\" || nodeType === \\"TSIndexedAccessType\\" || nodeType === \\"TSMappedType\\" || nodeType === \\"TSLiteralType\\" || nodeType === \\"TSExpressionWithTypeArguments\\" || nodeType === \\"TSImportType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isTSBaseType(node, opts) {
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"TSAnyKeyword\\" || nodeType === \\"TSBooleanKeyword\\" || nodeType === \\"TSBigIntKeyword\\" || nodeType === \\"TSIntrinsicKeyword\\" || nodeType === \\"TSNeverKeyword\\" || nodeType === \\"TSNullKeyword\\" || nodeType === \\"TSNumberKeyword\\" || nodeType === \\"TSObjectKeyword\\" || nodeType === \\"TSStringKeyword\\" || nodeType === \\"TSSymbolKeyword\\" || nodeType === \\"TSUndefinedKeyword\\" || nodeType === \\"TSUnknownKeyword\\" || nodeType === \\"TSVoidKeyword\\" || nodeType === \\"TSThisType\\" || nodeType === \\"TSLiteralType\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isNumberLiteral(node, opts) {
      console.trace(\\"The node type NumberLiteral has been renamed to NumericLiteral\\");
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"NumberLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isRegexLiteral(node, opts) {
      console.trace(\\"The node type RegexLiteral has been renamed to RegExpLiteral\\");
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"RegexLiteral\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isRestProperty(node, opts) {
      console.trace(\\"The node type RestProperty has been renamed to RestElement\\");
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"RestProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
    function isSpreadProperty(node, opts) {
      console.trace(\\"The node type SpreadProperty has been renamed to SpreadElement\\");
      if (!node)
        return false;
      const nodeType = node.type;
      if (nodeType === \\"SpreadProperty\\") {
        if (typeof opts === \\"undefined\\") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
      return false;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/matchesPattern.js
var require_matchesPattern = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/matchesPattern.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = matchesPattern;
    var _generated = require_generated();
    function matchesPattern(member, match, allowPartial) {
      if (!(0, _generated.isMemberExpression)(member))
        return false;
      const parts = Array.isArray(match) ? match : match.split(\\".\\");
      const nodes = [];
      let node;
      for (node = member; (0, _generated.isMemberExpression)(node); node = node.object) {
        nodes.push(node.property);
      }
      nodes.push(node);
      if (nodes.length < parts.length)
        return false;
      if (!allowPartial && nodes.length > parts.length)
        return false;
      for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
        const node2 = nodes[j];
        let value;
        if ((0, _generated.isIdentifier)(node2)) {
          value = node2.name;
        } else if ((0, _generated.isStringLiteral)(node2)) {
          value = node2.value;
        } else if ((0, _generated.isThisExpression)(node2)) {
          value = \\"this\\";
        } else {
          return false;
        }
        if (parts[i] !== value)
          return false;
      }
      return true;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js
var require_buildMatchMemberExpression = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = buildMatchMemberExpression;
    var _matchesPattern = require_matchesPattern();
    function buildMatchMemberExpression(match, allowPartial) {
      const parts = match.split(\\".\\");
      return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/react/isReactComponent.js
var require_isReactComponent = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/react/isReactComponent.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _buildMatchMemberExpression = require_buildMatchMemberExpression();
    var isReactComponent = (0, _buildMatchMemberExpression.default)(\\"React.Component\\");
    var _default = isReactComponent;
    exports.default = _default;
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/react/isCompatTag.js
var require_isCompatTag = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/react/isCompatTag.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isCompatTag;
    function isCompatTag(tagName) {
      return !!tagName && /^[a-z]/.test(tagName);
    }
  }
});

// node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js
var require_to_fast_properties = __commonJS({
  \\"node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js\\"(exports, module2) {
    \\"use strict\\";
    var fastProto = null;
    function FastObject(o) {
      if (fastProto !== null && typeof fastProto.property) {
        const result = fastProto;
        fastProto = FastObject.prototype = null;
        return result;
      }
      fastProto = FastObject.prototype = o == null ? /* @__PURE__ */ Object.create(null) : o;
      return new FastObject();
    }
    FastObject();
    module2.exports = function toFastproperties(o) {
      return FastObject(o);
    };
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isType.js
var require_isType = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isType.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isType;
    var _definitions = require_definitions();
    function isType(nodeType, targetType) {
      if (nodeType === targetType)
        return true;
      if (_definitions.ALIAS_KEYS[targetType])
        return false;
      const aliases = _definitions.FLIPPED_ALIAS_KEYS[targetType];
      if (aliases) {
        if (aliases[0] === nodeType)
          return true;
        for (const alias of aliases) {
          if (nodeType === alias)
            return true;
        }
      }
      return false;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isPlaceholderType.js
var require_isPlaceholderType = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isPlaceholderType.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isPlaceholderType;
    var _definitions = require_definitions();
    function isPlaceholderType(placeholderType, targetType) {
      if (placeholderType === targetType)
        return true;
      const aliases = _definitions.PLACEHOLDERS_ALIAS[placeholderType];
      if (aliases) {
        for (const alias of aliases) {
          if (targetType === alias)
            return true;
        }
      }
      return false;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/is.js
var require_is = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/is.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = is;
    var _shallowEqual = require_shallowEqual();
    var _isType = require_isType();
    var _isPlaceholderType = require_isPlaceholderType();
    var _definitions = require_definitions();
    function is(type, node, opts) {
      if (!node)
        return false;
      const matches = (0, _isType.default)(node.type, type);
      if (!matches) {
        if (!opts && node.type === \\"Placeholder\\" && type in _definitions.FLIPPED_ALIAS_KEYS) {
          return (0, _isPlaceholderType.default)(node.expectedNode, type);
        }
        return false;
      }
      if (typeof opts === \\"undefined\\") {
        return true;
      } else {
        return (0, _shallowEqual.default)(node, opts);
      }
    }
  }
});

// node_modules/.pnpm/@babel+helper-validator-identifier@7.16.7/node_modules/@babel/helper-validator-identifier/lib/identifier.js
var require_identifier = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-validator-identifier@7.16.7/node_modules/@babel/helper-validator-identifier/lib/identifier.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.isIdentifierChar = isIdentifierChar;
    exports.isIdentifierName = isIdentifierName;
    exports.isIdentifierStart = isIdentifierStart;
    var nonASCIIidentifierStartChars = \\"\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0560-\\\\u0588\\\\u05D0-\\\\u05EA\\\\u05EF-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u0860-\\\\u086A\\\\u0870-\\\\u0887\\\\u0889-\\\\u088E\\\\u08A0-\\\\u08C9\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u09FC\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0AF9\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58-\\\\u0C5A\\\\u0C5D\\\\u0C60\\\\u0C61\\\\u0C80\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D04-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D54-\\\\u0D56\\\\u0D5F-\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E86-\\\\u0E8A\\\\u0E8C-\\\\u0EA3\\\\u0EA5\\\\u0EA7-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F5\\\\u13F8-\\\\u13FD\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u1711\\\\u171F-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1878\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4C\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1C80-\\\\u1C88\\\\u1C90-\\\\u1CBA\\\\u1CBD-\\\\u1CBF\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF3\\\\u1CF5\\\\u1CF6\\\\u1CFA\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2118-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309B-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312F\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BF\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DBF\\\\u4E00-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA7CA\\\\uA7D0\\\\uA7D1\\\\uA7D3\\\\uA7D5-\\\\uA7D9\\\\uA7F2-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA8FD\\\\uA8FE\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB69\\\\uAB70-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC\\";
    var nonASCIIidentifierChars = \\"\\\\u200C\\\\u200D\\\\xB7\\\\u0300-\\\\u036F\\\\u0387\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u0669\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u06F0-\\\\u06F9\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07C0-\\\\u07C9\\\\u07EB-\\\\u07F3\\\\u07FD\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0859-\\\\u085B\\\\u0898-\\\\u089F\\\\u08CA-\\\\u08E1\\\\u08E3-\\\\u0903\\\\u093A-\\\\u093C\\\\u093E-\\\\u094F\\\\u0951-\\\\u0957\\\\u0962\\\\u0963\\\\u0966-\\\\u096F\\\\u0981-\\\\u0983\\\\u09BC\\\\u09BE-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CD\\\\u09D7\\\\u09E2\\\\u09E3\\\\u09E6-\\\\u09EF\\\\u09FE\\\\u0A01-\\\\u0A03\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A66-\\\\u0A71\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0ABC\\\\u0ABE-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0AFA-\\\\u0AFF\\\\u0B01-\\\\u0B03\\\\u0B3C\\\\u0B3E-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B55-\\\\u0B57\\\\u0B62\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B82\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C04\\\\u0C3C\\\\u0C3E-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0CBC\\\\u0CBE-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CE2\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0D00-\\\\u0D03\\\\u0D3B\\\\u0D3C\\\\u0D3E-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4D\\\\u0D57\\\\u0D62\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D81-\\\\u0D83\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0EB1\\\\u0EB4-\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E\\\\u0F3F\\\\u0F71-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F8D-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102B-\\\\u103E\\\\u1040-\\\\u1049\\\\u1056-\\\\u1059\\\\u105E-\\\\u1060\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1071-\\\\u1074\\\\u1082-\\\\u108D\\\\u108F-\\\\u109D\\\\u135D-\\\\u135F\\\\u1369-\\\\u1371\\\\u1712-\\\\u1715\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B4-\\\\u17D3\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u180F-\\\\u1819\\\\u18A9\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19DA\\\\u1A17-\\\\u1A1B\\\\u1A55-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AB0-\\\\u1ABD\\\\u1ABF-\\\\u1ACE\\\\u1B00-\\\\u1B04\\\\u1B34-\\\\u1B44\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1B82\\\\u1BA1-\\\\u1BAD\\\\u1BB0-\\\\u1BB9\\\\u1BE6-\\\\u1BF3\\\\u1C24-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE8\\\\u1CED\\\\u1CF4\\\\u1CF7-\\\\u1CF9\\\\u1DC0-\\\\u1DFF\\\\u203F\\\\u2040\\\\u2054\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2D7F\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA620-\\\\uA629\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA69E\\\\uA69F\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA823-\\\\uA827\\\\uA82C\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C5\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F1\\\\uA8FF-\\\\uA909\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA953\\\\uA980-\\\\uA983\\\\uA9B3-\\\\uA9C0\\\\uA9D0-\\\\uA9D9\\\\uA9E5\\\\uA9F0-\\\\uA9F9\\\\uAA29-\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA7B-\\\\uAA7D\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uAAEB-\\\\uAAEF\\\\uAAF5\\\\uAAF6\\\\uABE3-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2F\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF10-\\\\uFF19\\\\uFF3F\\";
    var nonASCIIidentifierStart = new RegExp(\\"[\\" + nonASCIIidentifierStartChars + \\"]\\");
    var nonASCIIidentifier = new RegExp(\\"[\\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \\"]\\");
    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
    var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
    var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
    function isInAstralSet(code, set) {
      let pos = 65536;
      for (let i = 0, length = set.length; i < length; i += 2) {
        pos += set[i];
        if (pos > code)
          return false;
        pos += set[i + 1];
        if (pos >= code)
          return true;
      }
      return false;
    }
    function isIdentifierStart(code) {
      if (code < 65)
        return code === 36;
      if (code <= 90)
        return true;
      if (code < 97)
        return code === 95;
      if (code <= 122)
        return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
      }
      return isInAstralSet(code, astralIdentifierStartCodes);
    }
    function isIdentifierChar(code) {
      if (code < 48)
        return code === 36;
      if (code < 58)
        return true;
      if (code < 65)
        return false;
      if (code <= 90)
        return true;
      if (code < 97)
        return code === 95;
      if (code <= 122)
        return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
      }
      return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
    }
    function isIdentifierName(name) {
      let isFirst = true;
      for (let i = 0; i < name.length; i++) {
        let cp = name.charCodeAt(i);
        if ((cp & 64512) === 55296 && i + 1 < name.length) {
          const trail = name.charCodeAt(++i);
          if ((trail & 64512) === 56320) {
            cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
          }
        }
        if (isFirst) {
          isFirst = false;
          if (!isIdentifierStart(cp)) {
            return false;
          }
        } else if (!isIdentifierChar(cp)) {
          return false;
        }
      }
      return !isFirst;
    }
  }
});

// node_modules/.pnpm/@babel+helper-validator-identifier@7.16.7/node_modules/@babel/helper-validator-identifier/lib/keyword.js
var require_keyword = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-validator-identifier@7.16.7/node_modules/@babel/helper-validator-identifier/lib/keyword.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.isKeyword = isKeyword;
    exports.isReservedWord = isReservedWord;
    exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
    exports.isStrictBindReservedWord = isStrictBindReservedWord;
    exports.isStrictReservedWord = isStrictReservedWord;
    var reservedWords = {
      keyword: [\\"break\\", \\"case\\", \\"catch\\", \\"continue\\", \\"debugger\\", \\"default\\", \\"do\\", \\"else\\", \\"finally\\", \\"for\\", \\"function\\", \\"if\\", \\"return\\", \\"switch\\", \\"throw\\", \\"try\\", \\"var\\", \\"const\\", \\"while\\", \\"with\\", \\"new\\", \\"this\\", \\"super\\", \\"class\\", \\"extends\\", \\"export\\", \\"import\\", \\"null\\", \\"true\\", \\"false\\", \\"in\\", \\"instanceof\\", \\"typeof\\", \\"void\\", \\"delete\\"],
      strict: [\\"implements\\", \\"interface\\", \\"let\\", \\"package\\", \\"private\\", \\"protected\\", \\"public\\", \\"static\\", \\"yield\\"],
      strictBind: [\\"eval\\", \\"arguments\\"]
    };
    var keywords = new Set(reservedWords.keyword);
    var reservedWordsStrictSet = new Set(reservedWords.strict);
    var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
    function isReservedWord(word, inModule) {
      return inModule && word === \\"await\\" || word === \\"enum\\";
    }
    function isStrictReservedWord(word, inModule) {
      return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
    }
    function isStrictBindOnlyReservedWord(word) {
      return reservedWordsStrictBindSet.has(word);
    }
    function isStrictBindReservedWord(word, inModule) {
      return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
    }
    function isKeyword(word) {
      return keywords.has(word);
    }
  }
});

// node_modules/.pnpm/@babel+helper-validator-identifier@7.16.7/node_modules/@babel/helper-validator-identifier/lib/index.js
var require_lib = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-validator-identifier@7.16.7/node_modules/@babel/helper-validator-identifier/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports, \\"isIdentifierChar\\", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierChar;
      }
    });
    Object.defineProperty(exports, \\"isIdentifierName\\", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierName;
      }
    });
    Object.defineProperty(exports, \\"isIdentifierStart\\", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierStart;
      }
    });
    Object.defineProperty(exports, \\"isKeyword\\", {
      enumerable: true,
      get: function() {
        return _keyword.isKeyword;
      }
    });
    Object.defineProperty(exports, \\"isReservedWord\\", {
      enumerable: true,
      get: function() {
        return _keyword.isReservedWord;
      }
    });
    Object.defineProperty(exports, \\"isStrictBindOnlyReservedWord\\", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindOnlyReservedWord;
      }
    });
    Object.defineProperty(exports, \\"isStrictBindReservedWord\\", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindReservedWord;
      }
    });
    Object.defineProperty(exports, \\"isStrictReservedWord\\", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictReservedWord;
      }
    });
    var _identifier = require_identifier();
    var _keyword = require_keyword();
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isValidIdentifier.js
var require_isValidIdentifier = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isValidIdentifier.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isValidIdentifier;
    var _helperValidatorIdentifier = require_lib();
    function isValidIdentifier(name, reserved = true) {
      if (typeof name !== \\"string\\")
        return false;
      if (reserved) {
        if ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)) {
          return false;
        }
      }
      return (0, _helperValidatorIdentifier.isIdentifierName)(name);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/constants/index.js
var require_constants = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/constants/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.UPDATE_OPERATORS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.STATEMENT_OR_BLOCK_KEYS = exports.NUMBER_UNARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.NOT_LOCAL_BINDING = exports.LOGICAL_OPERATORS = exports.INHERIT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.EQUALITY_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.COMMENT_KEYS = exports.BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.BLOCK_SCOPED_SYMBOL = exports.BINARY_OPERATORS = exports.ASSIGNMENT_OPERATORS = void 0;
    var STATEMENT_OR_BLOCK_KEYS = [\\"consequent\\", \\"body\\", \\"alternate\\"];
    exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
    var FLATTENABLE_KEYS = [\\"body\\", \\"expressions\\"];
    exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
    var FOR_INIT_KEYS = [\\"left\\", \\"init\\"];
    exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
    var COMMENT_KEYS = [\\"leadingComments\\", \\"trailingComments\\", \\"innerComments\\"];
    exports.COMMENT_KEYS = COMMENT_KEYS;
    var LOGICAL_OPERATORS = [\\"||\\", \\"&&\\", \\"??\\"];
    exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
    var UPDATE_OPERATORS = [\\"++\\", \\"--\\"];
    exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
    var BOOLEAN_NUMBER_BINARY_OPERATORS = [\\">\\", \\"<\\", \\">=\\", \\"<=\\"];
    exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
    var EQUALITY_BINARY_OPERATORS = [\\"==\\", \\"===\\", \\"!=\\", \\"!==\\"];
    exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
    var COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, \\"in\\", \\"instanceof\\"];
    exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
    var BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
    exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
    var NUMBER_BINARY_OPERATORS = [\\"-\\", \\"/\\", \\"%\\", \\"*\\", \\"**\\", \\"&\\", \\"|\\", \\">>\\", \\">>>\\", \\"<<\\", \\"^\\"];
    exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
    var BINARY_OPERATORS = [\\"+\\", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS];
    exports.BINARY_OPERATORS = BINARY_OPERATORS;
    var ASSIGNMENT_OPERATORS = [\\"=\\", \\"+=\\", ...NUMBER_BINARY_OPERATORS.map((op) => op + \\"=\\"), ...LOGICAL_OPERATORS.map((op) => op + \\"=\\")];
    exports.ASSIGNMENT_OPERATORS = ASSIGNMENT_OPERATORS;
    var BOOLEAN_UNARY_OPERATORS = [\\"delete\\", \\"!\\"];
    exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
    var NUMBER_UNARY_OPERATORS = [\\"+\\", \\"-\\", \\"~\\"];
    exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
    var STRING_UNARY_OPERATORS = [\\"typeof\\"];
    exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
    var UNARY_OPERATORS = [\\"void\\", \\"throw\\", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
    exports.UNARY_OPERATORS = UNARY_OPERATORS;
    var INHERIT_KEYS = {
      optional: [\\"typeAnnotation\\", \\"typeParameters\\", \\"returnType\\"],
      force: [\\"start\\", \\"loc\\", \\"end\\"]
    };
    exports.INHERIT_KEYS = INHERIT_KEYS;
    var BLOCK_SCOPED_SYMBOL = Symbol.for(\\"var used to be block scoped\\");
    exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
    var NOT_LOCAL_BINDING = Symbol.for(\\"should not be considered a local binding\\");
    exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/validate.js
var require_validate = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/validate.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = validate;
    exports.validateChild = validateChild;
    exports.validateField = validateField;
    var _definitions = require_definitions();
    function validate(node, key, val) {
      if (!node)
        return;
      const fields = _definitions.NODE_FIELDS[node.type];
      if (!fields)
        return;
      const field = fields[key];
      validateField(node, key, val, field);
      validateChild(node, key, val);
    }
    function validateField(node, key, val, field) {
      if (!(field != null && field.validate))
        return;
      if (field.optional && val == null)
        return;
      field.validate(node, key, val);
    }
    function validateChild(node, key, val) {
      if (val == null)
        return;
      const validate2 = _definitions.NODE_PARENT_VALIDATIONS[val.type];
      if (!validate2)
        return;
      validate2(node, key, val);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/utils.js
var require_utils = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/utils.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;
    exports.arrayOf = arrayOf;
    exports.arrayOfType = arrayOfType;
    exports.assertEach = assertEach;
    exports.assertNodeOrValueType = assertNodeOrValueType;
    exports.assertNodeType = assertNodeType;
    exports.assertOneOf = assertOneOf;
    exports.assertOptionalChainStart = assertOptionalChainStart;
    exports.assertShape = assertShape;
    exports.assertValueType = assertValueType;
    exports.chain = chain;
    exports.default = defineType;
    exports.defineAliasedType = defineAliasedType;
    exports.typeIs = typeIs;
    exports.validate = validate;
    exports.validateArrayOfType = validateArrayOfType;
    exports.validateOptional = validateOptional;
    exports.validateOptionalType = validateOptionalType;
    exports.validateType = validateType;
    var _is = require_is();
    var _validate = require_validate();
    var VISITOR_KEYS = {};
    exports.VISITOR_KEYS = VISITOR_KEYS;
    var ALIAS_KEYS = {};
    exports.ALIAS_KEYS = ALIAS_KEYS;
    var FLIPPED_ALIAS_KEYS = {};
    exports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;
    var NODE_FIELDS = {};
    exports.NODE_FIELDS = NODE_FIELDS;
    var BUILDER_KEYS = {};
    exports.BUILDER_KEYS = BUILDER_KEYS;
    var DEPRECATED_KEYS = {};
    exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
    var NODE_PARENT_VALIDATIONS = {};
    exports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;
    function getType(val) {
      if (Array.isArray(val)) {
        return \\"array\\";
      } else if (val === null) {
        return \\"null\\";
      } else {
        return typeof val;
      }
    }
    function validate(validate2) {
      return {
        validate: validate2
      };
    }
    function typeIs(typeName) {
      return typeof typeName === \\"string\\" ? assertNodeType(typeName) : assertNodeType(...typeName);
    }
    function validateType(typeName) {
      return validate(typeIs(typeName));
    }
    function validateOptional(validate2) {
      return {
        validate: validate2,
        optional: true
      };
    }
    function validateOptionalType(typeName) {
      return {
        validate: typeIs(typeName),
        optional: true
      };
    }
    function arrayOf(elementType) {
      return chain(assertValueType(\\"array\\"), assertEach(elementType));
    }
    function arrayOfType(typeName) {
      return arrayOf(typeIs(typeName));
    }
    function validateArrayOfType(typeName) {
      return validate(arrayOfType(typeName));
    }
    function assertEach(callback) {
      function validator(node, key, val) {
        if (!Array.isArray(val))
          return;
        for (let i = 0; i < val.length; i++) {
          const subkey = \`\${key}[\${i}]\`;
          const v = val[i];
          callback(node, subkey, v);
          if (process.env.BABEL_TYPES_8_BREAKING)
            (0, _validate.validateChild)(node, subkey, v);
        }
      }
      validator.each = callback;
      return validator;
    }
    function assertOneOf(...values) {
      function validate2(node, key, val) {
        if (values.indexOf(val) < 0) {
          throw new TypeError(\`Property \${key} expected value to be one of \${JSON.stringify(values)} but got \${JSON.stringify(val)}\`);
        }
      }
      validate2.oneOf = values;
      return validate2;
    }
    function assertNodeType(...types) {
      function validate2(node, key, val) {
        for (const type of types) {
          if ((0, _is.default)(type, val)) {
            (0, _validate.validateChild)(node, key, val);
            return;
          }
        }
        throw new TypeError(\`Property \${key} of \${node.type} expected node to be of a type \${JSON.stringify(types)} but instead got \${JSON.stringify(val == null ? void 0 : val.type)}\`);
      }
      validate2.oneOfNodeTypes = types;
      return validate2;
    }
    function assertNodeOrValueType(...types) {
      function validate2(node, key, val) {
        for (const type of types) {
          if (getType(val) === type || (0, _is.default)(type, val)) {
            (0, _validate.validateChild)(node, key, val);
            return;
          }
        }
        throw new TypeError(\`Property \${key} of \${node.type} expected node to be of a type \${JSON.stringify(types)} but instead got \${JSON.stringify(val == null ? void 0 : val.type)}\`);
      }
      validate2.oneOfNodeOrValueTypes = types;
      return validate2;
    }
    function assertValueType(type) {
      function validate2(node, key, val) {
        const valid = getType(val) === type;
        if (!valid) {
          throw new TypeError(\`Property \${key} expected type of \${type} but got \${getType(val)}\`);
        }
      }
      validate2.type = type;
      return validate2;
    }
    function assertShape(shape) {
      function validate2(node, key, val) {
        const errors = [];
        for (const property of Object.keys(shape)) {
          try {
            (0, _validate.validateField)(node, property, val[property], shape[property]);
          } catch (error) {
            if (error instanceof TypeError) {
              errors.push(error.message);
              continue;
            }
            throw error;
          }
        }
        if (errors.length) {
          throw new TypeError(\`Property \${key} of \${node.type} expected to have the following:
\${errors.join(\\"\\\\n\\")}\`);
        }
      }
      validate2.shapeOf = shape;
      return validate2;
    }
    function assertOptionalChainStart() {
      function validate2(node) {
        var _current;
        let current = node;
        while (node) {
          const {
            type
          } = current;
          if (type === \\"OptionalCallExpression\\") {
            if (current.optional)
              return;
            current = current.callee;
            continue;
          }
          if (type === \\"OptionalMemberExpression\\") {
            if (current.optional)
              return;
            current = current.object;
            continue;
          }
          break;
        }
        throw new TypeError(\`Non-optional \${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from \${(_current = current) == null ? void 0 : _current.type}\`);
      }
      return validate2;
    }
    function chain(...fns) {
      function validate2(...args) {
        for (const fn of fns) {
          fn(...args);
        }
      }
      validate2.chainOf = fns;
      if (fns.length >= 2 && \\"type\\" in fns[0] && fns[0].type === \\"array\\" && !(\\"each\\" in fns[1])) {
        throw new Error(\`An assertValueType(\\"array\\") validator can only be followed by an assertEach(...) validator.\`);
      }
      return validate2;
    }
    var validTypeOpts = [\\"aliases\\", \\"builder\\", \\"deprecatedAlias\\", \\"fields\\", \\"inherits\\", \\"visitor\\", \\"validate\\"];
    var validFieldKeys = [\\"default\\", \\"optional\\", \\"validate\\"];
    function defineAliasedType(...aliases) {
      return (type, opts = {}) => {
        let defined = opts.aliases;
        if (!defined) {
          var _store$opts$inherits$, _defined;
          if (opts.inherits)
            defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();
          (_defined = defined) != null ? _defined : defined = [];
          opts.aliases = defined;
        }
        const additional = aliases.filter((a2) => !defined.includes(a2));
        defined.unshift(...additional);
        return defineType(type, opts);
      };
    }
    function defineType(type, opts = {}) {
      const inherits = opts.inherits && store[opts.inherits] || {};
      let fields = opts.fields;
      if (!fields) {
        fields = {};
        if (inherits.fields) {
          const keys = Object.getOwnPropertyNames(inherits.fields);
          for (const key of keys) {
            const field = inherits.fields[key];
            const def = field.default;
            if (Array.isArray(def) ? def.length > 0 : def && typeof def === \\"object\\") {
              throw new Error(\\"field defaults can only be primitives or empty arrays currently\\");
            }
            fields[key] = {
              default: Array.isArray(def) ? [] : def,
              optional: field.optional,
              validate: field.validate
            };
          }
        }
      }
      const visitor = opts.visitor || inherits.visitor || [];
      const aliases = opts.aliases || inherits.aliases || [];
      const builder = opts.builder || inherits.builder || opts.visitor || [];
      for (const k of Object.keys(opts)) {
        if (validTypeOpts.indexOf(k) === -1) {
          throw new Error(\`Unknown type option \\"\${k}\\" on \${type}\`);
        }
      }
      if (opts.deprecatedAlias) {
        DEPRECATED_KEYS[opts.deprecatedAlias] = type;
      }
      for (const key of visitor.concat(builder)) {
        fields[key] = fields[key] || {};
      }
      for (const key of Object.keys(fields)) {
        const field = fields[key];
        if (field.default !== void 0 && builder.indexOf(key) === -1) {
          field.optional = true;
        }
        if (field.default === void 0) {
          field.default = null;
        } else if (!field.validate && field.default != null) {
          field.validate = assertValueType(getType(field.default));
        }
        for (const k of Object.keys(field)) {
          if (validFieldKeys.indexOf(k) === -1) {
            throw new Error(\`Unknown field key \\"\${k}\\" on \${type}.\${key}\`);
          }
        }
      }
      VISITOR_KEYS[type] = opts.visitor = visitor;
      BUILDER_KEYS[type] = opts.builder = builder;
      NODE_FIELDS[type] = opts.fields = fields;
      ALIAS_KEYS[type] = opts.aliases = aliases;
      aliases.forEach((alias) => {
        FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
        FLIPPED_ALIAS_KEYS[alias].push(type);
      });
      if (opts.validate) {
        NODE_PARENT_VALIDATIONS[type] = opts.validate;
      }
      store[type] = opts;
    }
    var store = {};
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/core.js
var require_core = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/core.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.patternLikeCommon = exports.functionTypeAnnotationCommon = exports.functionDeclarationCommon = exports.functionCommon = exports.classMethodOrPropertyCommon = exports.classMethodOrDeclareMethodCommon = void 0;
    var _is = require_is();
    var _isValidIdentifier = require_isValidIdentifier();
    var _helperValidatorIdentifier = require_lib();
    var _constants = require_constants();
    var _utils = require_utils();
    var defineType = (0, _utils.defineAliasedType)(\\"Standardized\\");
    defineType(\\"ArrayExpression\\", {
      fields: {
        elements: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)(\\"null\\", \\"Expression\\", \\"SpreadElement\\"))),
          default: !process.env.BABEL_TYPES_8_BREAKING ? [] : void 0
        }
      },
      visitor: [\\"elements\\"],
      aliases: [\\"Expression\\"]
    });
    defineType(\\"AssignmentExpression\\", {
      fields: {
        operator: {
          validate: function() {
            if (!process.env.BABEL_TYPES_8_BREAKING) {
              return (0, _utils.assertValueType)(\\"string\\");
            }
            const identifier = (0, _utils.assertOneOf)(..._constants.ASSIGNMENT_OPERATORS);
            const pattern = (0, _utils.assertOneOf)(\\"=\\");
            return function(node, key, val) {
              const validator = (0, _is.default)(\\"Pattern\\", node.left) ? pattern : identifier;
              validator(node, key, val);
            };
          }()
        },
        left: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\\"LVal\\") : (0, _utils.assertNodeType)(\\"Identifier\\", \\"MemberExpression\\", \\"ArrayPattern\\", \\"ObjectPattern\\")
        },
        right: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      },
      builder: [\\"operator\\", \\"left\\", \\"right\\"],
      visitor: [\\"left\\", \\"right\\"],
      aliases: [\\"Expression\\"]
    });
    defineType(\\"BinaryExpression\\", {
      builder: [\\"operator\\", \\"left\\", \\"right\\"],
      fields: {
        operator: {
          validate: (0, _utils.assertOneOf)(..._constants.BINARY_OPERATORS)
        },
        left: {
          validate: function() {
            const expression = (0, _utils.assertNodeType)(\\"Expression\\");
            const inOp = (0, _utils.assertNodeType)(\\"Expression\\", \\"PrivateName\\");
            const validator = function(node, key, val) {
              const validator2 = node.operator === \\"in\\" ? inOp : expression;
              validator2(node, key, val);
            };
            validator.oneOfNodeTypes = [\\"Expression\\", \\"PrivateName\\"];
            return validator;
          }()
        },
        right: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      },
      visitor: [\\"left\\", \\"right\\"],
      aliases: [\\"Binary\\", \\"Expression\\"]
    });
    defineType(\\"InterpreterDirective\\", {
      builder: [\\"value\\"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        }
      }
    });
    defineType(\\"Directive\\", {
      visitor: [\\"value\\"],
      fields: {
        value: {
          validate: (0, _utils.assertNodeType)(\\"DirectiveLiteral\\")
        }
      }
    });
    defineType(\\"DirectiveLiteral\\", {
      builder: [\\"value\\"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        }
      }
    });
    defineType(\\"BlockStatement\\", {
      builder: [\\"body\\", \\"directives\\"],
      visitor: [\\"directives\\", \\"body\\"],
      fields: {
        directives: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Directive\\"))),
          default: []
        },
        body: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Statement\\")))
        }
      },
      aliases: [\\"Scopable\\", \\"BlockParent\\", \\"Block\\", \\"Statement\\"]
    });
    defineType(\\"BreakStatement\\", {
      visitor: [\\"label\\"],
      fields: {
        label: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\"),
          optional: true
        }
      },
      aliases: [\\"Statement\\", \\"Terminatorless\\", \\"CompletionStatement\\"]
    });
    defineType(\\"CallExpression\\", {
      visitor: [\\"callee\\", \\"arguments\\", \\"typeParameters\\", \\"typeArguments\\"],
      builder: [\\"callee\\", \\"arguments\\"],
      aliases: [\\"Expression\\"],
      fields: Object.assign({
        callee: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\", \\"V8IntrinsicIdentifier\\")
        },
        arguments: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Expression\\", \\"SpreadElement\\", \\"JSXNamespacedName\\", \\"ArgumentPlaceholder\\")))
        }
      }, !process.env.BABEL_TYPES_8_BREAKING ? {
        optional: {
          validate: (0, _utils.assertOneOf)(true, false),
          optional: true
        }
      } : {}, {
        typeArguments: {
          validate: (0, _utils.assertNodeType)(\\"TypeParameterInstantiation\\"),
          optional: true
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)(\\"TSTypeParameterInstantiation\\"),
          optional: true
        }
      })
    });
    defineType(\\"CatchClause\\", {
      visitor: [\\"param\\", \\"body\\"],
      fields: {
        param: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\", \\"ArrayPattern\\", \\"ObjectPattern\\"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\")
        }
      },
      aliases: [\\"Scopable\\", \\"BlockParent\\"]
    });
    defineType(\\"ConditionalExpression\\", {
      visitor: [\\"test\\", \\"consequent\\", \\"alternate\\"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        consequent: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        alternate: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      },
      aliases: [\\"Expression\\", \\"Conditional\\"]
    });
    defineType(\\"ContinueStatement\\", {
      visitor: [\\"label\\"],
      fields: {
        label: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\"),
          optional: true
        }
      },
      aliases: [\\"Statement\\", \\"Terminatorless\\", \\"CompletionStatement\\"]
    });
    defineType(\\"DebuggerStatement\\", {
      aliases: [\\"Statement\\"]
    });
    defineType(\\"DoWhileStatement\\", {
      visitor: [\\"test\\", \\"body\\"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        }
      },
      aliases: [\\"Statement\\", \\"BlockParent\\", \\"Loop\\", \\"While\\", \\"Scopable\\"]
    });
    defineType(\\"EmptyStatement\\", {
      aliases: [\\"Statement\\"]
    });
    defineType(\\"ExpressionStatement\\", {
      visitor: [\\"expression\\"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      },
      aliases: [\\"Statement\\", \\"ExpressionWrapper\\"]
    });
    defineType(\\"File\\", {
      builder: [\\"program\\", \\"comments\\", \\"tokens\\"],
      visitor: [\\"program\\"],
      fields: {
        program: {
          validate: (0, _utils.assertNodeType)(\\"Program\\")
        },
        comments: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {
          }, {
            each: {
              oneOfNodeTypes: [\\"CommentBlock\\", \\"CommentLine\\"]
            }
          }) : (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"CommentBlock\\", \\"CommentLine\\")),
          optional: true
        },
        tokens: {
          validate: (0, _utils.assertEach)(Object.assign(() => {
          }, {
            type: \\"any\\"
          })),
          optional: true
        }
      }
    });
    defineType(\\"ForInStatement\\", {
      visitor: [\\"left\\", \\"right\\", \\"body\\"],
      aliases: [\\"Scopable\\", \\"Statement\\", \\"For\\", \\"BlockParent\\", \\"Loop\\", \\"ForXStatement\\"],
      fields: {
        left: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\\"VariableDeclaration\\", \\"LVal\\") : (0, _utils.assertNodeType)(\\"VariableDeclaration\\", \\"Identifier\\", \\"MemberExpression\\", \\"ArrayPattern\\", \\"ObjectPattern\\")
        },
        right: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        }
      }
    });
    defineType(\\"ForStatement\\", {
      visitor: [\\"init\\", \\"test\\", \\"update\\", \\"body\\"],
      aliases: [\\"Scopable\\", \\"Statement\\", \\"For\\", \\"BlockParent\\", \\"Loop\\"],
      fields: {
        init: {
          validate: (0, _utils.assertNodeType)(\\"VariableDeclaration\\", \\"Expression\\"),
          optional: true
        },
        test: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\"),
          optional: true
        },
        update: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        }
      }
    });
    var functionCommon = {
      params: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Identifier\\", \\"Pattern\\", \\"RestElement\\")))
      },
      generator: {
        default: false
      },
      async: {
        default: false
      }
    };
    exports.functionCommon = functionCommon;
    var functionTypeAnnotationCommon = {
      returnType: {
        validate: (0, _utils.assertNodeType)(\\"TypeAnnotation\\", \\"TSTypeAnnotation\\", \\"Noop\\"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)(\\"TypeParameterDeclaration\\", \\"TSTypeParameterDeclaration\\", \\"Noop\\"),
        optional: true
      }
    };
    exports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
    var functionDeclarationCommon = Object.assign({}, functionCommon, {
      declare: {
        validate: (0, _utils.assertValueType)(\\"boolean\\"),
        optional: true
      },
      id: {
        validate: (0, _utils.assertNodeType)(\\"Identifier\\"),
        optional: true
      }
    });
    exports.functionDeclarationCommon = functionDeclarationCommon;
    defineType(\\"FunctionDeclaration\\", {
      builder: [\\"id\\", \\"params\\", \\"body\\", \\"generator\\", \\"async\\"],
      visitor: [\\"id\\", \\"params\\", \\"body\\", \\"returnType\\", \\"typeParameters\\"],
      fields: Object.assign({}, functionDeclarationCommon, functionTypeAnnotationCommon, {
        body: {
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\")
        }
      }),
      aliases: [\\"Scopable\\", \\"Function\\", \\"BlockParent\\", \\"FunctionParent\\", \\"Statement\\", \\"Pureish\\", \\"Declaration\\"],
      validate: function() {
        if (!process.env.BABEL_TYPES_8_BREAKING)
          return () => {
          };
        const identifier = (0, _utils.assertNodeType)(\\"Identifier\\");
        return function(parent, key, node) {
          if (!(0, _is.default)(\\"ExportDefaultDeclaration\\", parent)) {
            identifier(node, \\"id\\", node.id);
          }
        };
      }()
    });
    defineType(\\"FunctionExpression\\", {
      inherits: \\"FunctionDeclaration\\",
      aliases: [\\"Scopable\\", \\"Function\\", \\"BlockParent\\", \\"FunctionParent\\", \\"Expression\\", \\"Pureish\\"],
      fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
        id: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\")
        }
      })
    });
    var patternLikeCommon = {
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)(\\"TypeAnnotation\\", \\"TSTypeAnnotation\\", \\"Noop\\"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\")))
      }
    };
    exports.patternLikeCommon = patternLikeCommon;
    defineType(\\"Identifier\\", {
      builder: [\\"name\\"],
      visitor: [\\"typeAnnotation\\", \\"decorators\\"],
      aliases: [\\"Expression\\", \\"PatternLike\\", \\"LVal\\", \\"TSEntityName\\"],
      fields: Object.assign({}, patternLikeCommon, {
        name: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"string\\"), Object.assign(function(node, key, val) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            if (!(0, _isValidIdentifier.default)(val, false)) {
              throw new TypeError(\`\\"\${val}\\" is not a valid identifier name\`);
            }
          }, {
            type: \\"string\\"
          }))
        },
        optional: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        }
      }),
      validate(parent, key, node) {
        if (!process.env.BABEL_TYPES_8_BREAKING)
          return;
        const match = /\\\\.(\\\\w+)$/.exec(key);
        if (!match)
          return;
        const [, parentKey] = match;
        const nonComp = {
          computed: false
        };
        if (parentKey === \\"property\\") {
          if ((0, _is.default)(\\"MemberExpression\\", parent, nonComp))
            return;
          if ((0, _is.default)(\\"OptionalMemberExpression\\", parent, nonComp))
            return;
        } else if (parentKey === \\"key\\") {
          if ((0, _is.default)(\\"Property\\", parent, nonComp))
            return;
          if ((0, _is.default)(\\"Method\\", parent, nonComp))
            return;
        } else if (parentKey === \\"exported\\") {
          if ((0, _is.default)(\\"ExportSpecifier\\", parent))
            return;
        } else if (parentKey === \\"imported\\") {
          if ((0, _is.default)(\\"ImportSpecifier\\", parent, {
            imported: node
          }))
            return;
        } else if (parentKey === \\"meta\\") {
          if ((0, _is.default)(\\"MetaProperty\\", parent, {
            meta: node
          }))
            return;
        }
        if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && node.name !== \\"this\\") {
          throw new TypeError(\`\\"\${node.name}\\" is not a valid identifier\`);
        }
      }
    });
    defineType(\\"IfStatement\\", {
      visitor: [\\"test\\", \\"consequent\\", \\"alternate\\"],
      aliases: [\\"Statement\\", \\"Conditional\\"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        consequent: {
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        },
        alternate: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        }
      }
    });
    defineType(\\"LabeledStatement\\", {
      visitor: [\\"label\\", \\"body\\"],
      aliases: [\\"Statement\\"],
      fields: {
        label: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        }
      }
    });
    defineType(\\"StringLiteral\\", {
      builder: [\\"value\\"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        }
      },
      aliases: [\\"Expression\\", \\"Pureish\\", \\"Literal\\", \\"Immutable\\"]
    });
    defineType(\\"NumericLiteral\\", {
      builder: [\\"value\\"],
      deprecatedAlias: \\"NumberLiteral\\",
      fields: {
        value: {
          validate: (0, _utils.assertValueType)(\\"number\\")
        }
      },
      aliases: [\\"Expression\\", \\"Pureish\\", \\"Literal\\", \\"Immutable\\"]
    });
    defineType(\\"NullLiteral\\", {
      aliases: [\\"Expression\\", \\"Pureish\\", \\"Literal\\", \\"Immutable\\"]
    });
    defineType(\\"BooleanLiteral\\", {
      builder: [\\"value\\"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)(\\"boolean\\")
        }
      },
      aliases: [\\"Expression\\", \\"Pureish\\", \\"Literal\\", \\"Immutable\\"]
    });
    defineType(\\"RegExpLiteral\\", {
      builder: [\\"pattern\\", \\"flags\\"],
      deprecatedAlias: \\"RegexLiteral\\",
      aliases: [\\"Expression\\", \\"Pureish\\", \\"Literal\\"],
      fields: {
        pattern: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        },
        flags: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"string\\"), Object.assign(function(node, key, val) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            const invalid = /[^gimsuy]/.exec(val);
            if (invalid) {
              throw new TypeError(\`\\"\${invalid[0]}\\" is not a valid RegExp flag\`);
            }
          }, {
            type: \\"string\\"
          })),
          default: \\"\\"
        }
      }
    });
    defineType(\\"LogicalExpression\\", {
      builder: [\\"operator\\", \\"left\\", \\"right\\"],
      visitor: [\\"left\\", \\"right\\"],
      aliases: [\\"Binary\\", \\"Expression\\"],
      fields: {
        operator: {
          validate: (0, _utils.assertOneOf)(..._constants.LOGICAL_OPERATORS)
        },
        left: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        right: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"MemberExpression\\", {
      builder: [\\"object\\", \\"property\\", \\"computed\\", ...!process.env.BABEL_TYPES_8_BREAKING ? [\\"optional\\"] : []],
      visitor: [\\"object\\", \\"property\\"],
      aliases: [\\"Expression\\", \\"LVal\\"],
      fields: Object.assign({
        object: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        property: {
          validate: function() {
            const normal = (0, _utils.assertNodeType)(\\"Identifier\\", \\"PrivateName\\");
            const computed = (0, _utils.assertNodeType)(\\"Expression\\");
            const validator = function(node, key, val) {
              const validator2 = node.computed ? computed : normal;
              validator2(node, key, val);
            };
            validator.oneOfNodeTypes = [\\"Expression\\", \\"Identifier\\", \\"PrivateName\\"];
            return validator;
          }()
        },
        computed: {
          default: false
        }
      }, !process.env.BABEL_TYPES_8_BREAKING ? {
        optional: {
          validate: (0, _utils.assertOneOf)(true, false),
          optional: true
        }
      } : {})
    });
    defineType(\\"NewExpression\\", {
      inherits: \\"CallExpression\\"
    });
    defineType(\\"Program\\", {
      visitor: [\\"directives\\", \\"body\\"],
      builder: [\\"body\\", \\"directives\\", \\"sourceType\\", \\"interpreter\\"],
      fields: {
        sourceFile: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        },
        sourceType: {
          validate: (0, _utils.assertOneOf)(\\"script\\", \\"module\\"),
          default: \\"script\\"
        },
        interpreter: {
          validate: (0, _utils.assertNodeType)(\\"InterpreterDirective\\"),
          default: null,
          optional: true
        },
        directives: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Directive\\"))),
          default: []
        },
        body: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Statement\\")))
        }
      },
      aliases: [\\"Scopable\\", \\"BlockParent\\", \\"Block\\"]
    });
    defineType(\\"ObjectExpression\\", {
      visitor: [\\"properties\\"],
      aliases: [\\"Expression\\"],
      fields: {
        properties: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"ObjectMethod\\", \\"ObjectProperty\\", \\"SpreadElement\\")))
        }
      }
    });
    defineType(\\"ObjectMethod\\", {
      builder: [\\"kind\\", \\"key\\", \\"params\\", \\"body\\", \\"computed\\", \\"generator\\", \\"async\\"],
      fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
        kind: Object.assign({
          validate: (0, _utils.assertOneOf)(\\"method\\", \\"get\\", \\"set\\")
        }, !process.env.BABEL_TYPES_8_BREAKING ? {
          default: \\"method\\"
        } : {}),
        computed: {
          default: false
        },
        key: {
          validate: function() {
            const normal = (0, _utils.assertNodeType)(\\"Identifier\\", \\"StringLiteral\\", \\"NumericLiteral\\");
            const computed = (0, _utils.assertNodeType)(\\"Expression\\");
            const validator = function(node, key, val) {
              const validator2 = node.computed ? computed : normal;
              validator2(node, key, val);
            };
            validator.oneOfNodeTypes = [\\"Expression\\", \\"Identifier\\", \\"StringLiteral\\", \\"NumericLiteral\\"];
            return validator;
          }()
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\")
        }
      }),
      visitor: [\\"key\\", \\"params\\", \\"body\\", \\"decorators\\", \\"returnType\\", \\"typeParameters\\"],
      aliases: [\\"UserWhitespacable\\", \\"Function\\", \\"Scopable\\", \\"BlockParent\\", \\"FunctionParent\\", \\"Method\\", \\"ObjectMember\\"]
    });
    defineType(\\"ObjectProperty\\", {
      builder: [\\"key\\", \\"value\\", \\"computed\\", \\"shorthand\\", ...!process.env.BABEL_TYPES_8_BREAKING ? [\\"decorators\\"] : []],
      fields: {
        computed: {
          default: false
        },
        key: {
          validate: function() {
            const normal = (0, _utils.assertNodeType)(\\"Identifier\\", \\"StringLiteral\\", \\"NumericLiteral\\");
            const computed = (0, _utils.assertNodeType)(\\"Expression\\");
            const validator = function(node, key, val) {
              const validator2 = node.computed ? computed : normal;
              validator2(node, key, val);
            };
            validator.oneOfNodeTypes = [\\"Expression\\", \\"Identifier\\", \\"StringLiteral\\", \\"NumericLiteral\\"];
            return validator;
          }()
        },
        value: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\", \\"PatternLike\\")
        },
        shorthand: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"boolean\\"), Object.assign(function(node, key, val) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            if (val && node.computed) {
              throw new TypeError(\\"Property shorthand of ObjectProperty cannot be true if computed is true\\");
            }
          }, {
            type: \\"boolean\\"
          }), function(node, key, val) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            if (val && !(0, _is.default)(\\"Identifier\\", node.key)) {
              throw new TypeError(\\"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\\");
            }
          }),
          default: false
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        }
      },
      visitor: [\\"key\\", \\"value\\", \\"decorators\\"],
      aliases: [\\"UserWhitespacable\\", \\"Property\\", \\"ObjectMember\\"],
      validate: function() {
        const pattern = (0, _utils.assertNodeType)(\\"Identifier\\", \\"Pattern\\");
        const expression = (0, _utils.assertNodeType)(\\"Expression\\");
        return function(parent, key, node) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const validator = (0, _is.default)(\\"ObjectPattern\\", parent) ? pattern : expression;
          validator(node, \\"value\\", node.value);
        };
      }()
    });
    defineType(\\"RestElement\\", {
      visitor: [\\"argument\\", \\"typeAnnotation\\"],
      builder: [\\"argument\\"],
      aliases: [\\"LVal\\", \\"PatternLike\\"],
      deprecatedAlias: \\"RestProperty\\",
      fields: Object.assign({}, patternLikeCommon, {
        argument: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\\"LVal\\") : (0, _utils.assertNodeType)(\\"Identifier\\", \\"ArrayPattern\\", \\"ObjectPattern\\", \\"MemberExpression\\")
        },
        optional: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        }
      }),
      validate(parent, key) {
        if (!process.env.BABEL_TYPES_8_BREAKING)
          return;
        const match = /(\\\\w+)\\\\[(\\\\d+)\\\\]/.exec(key);
        if (!match)
          throw new Error(\\"Internal Babel error: malformed key.\\");
        const [, listKey, index] = match;
        if (parent[listKey].length > index + 1) {
          throw new TypeError(\`RestElement must be last element of \${listKey}\`);
        }
      }
    });
    defineType(\\"ReturnStatement\\", {
      visitor: [\\"argument\\"],
      aliases: [\\"Statement\\", \\"Terminatorless\\", \\"CompletionStatement\\"],
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\"),
          optional: true
        }
      }
    });
    defineType(\\"SequenceExpression\\", {
      visitor: [\\"expressions\\"],
      fields: {
        expressions: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Expression\\")))
        }
      },
      aliases: [\\"Expression\\"]
    });
    defineType(\\"ParenthesizedExpression\\", {
      visitor: [\\"expression\\"],
      aliases: [\\"Expression\\", \\"ExpressionWrapper\\"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"SwitchCase\\", {
      visitor: [\\"test\\", \\"consequent\\"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\"),
          optional: true
        },
        consequent: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Statement\\")))
        }
      }
    });
    defineType(\\"SwitchStatement\\", {
      visitor: [\\"discriminant\\", \\"cases\\"],
      aliases: [\\"Statement\\", \\"BlockParent\\", \\"Scopable\\"],
      fields: {
        discriminant: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        cases: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"SwitchCase\\")))
        }
      }
    });
    defineType(\\"ThisExpression\\", {
      aliases: [\\"Expression\\"]
    });
    defineType(\\"ThrowStatement\\", {
      visitor: [\\"argument\\"],
      aliases: [\\"Statement\\", \\"Terminatorless\\", \\"CompletionStatement\\"],
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"TryStatement\\", {
      visitor: [\\"block\\", \\"handler\\", \\"finalizer\\"],
      aliases: [\\"Statement\\"],
      fields: {
        block: {
          validate: (0, _utils.chain)((0, _utils.assertNodeType)(\\"BlockStatement\\"), Object.assign(function(node) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            if (!node.handler && !node.finalizer) {
              throw new TypeError(\\"TryStatement expects either a handler or finalizer, or both\\");
            }
          }, {
            oneOfNodeTypes: [\\"BlockStatement\\"]
          }))
        },
        handler: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"CatchClause\\")
        },
        finalizer: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\")
        }
      }
    });
    defineType(\\"UnaryExpression\\", {
      builder: [\\"operator\\", \\"argument\\", \\"prefix\\"],
      fields: {
        prefix: {
          default: true
        },
        argument: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        operator: {
          validate: (0, _utils.assertOneOf)(..._constants.UNARY_OPERATORS)
        }
      },
      visitor: [\\"argument\\"],
      aliases: [\\"UnaryLike\\", \\"Expression\\"]
    });
    defineType(\\"UpdateExpression\\", {
      builder: [\\"operator\\", \\"argument\\", \\"prefix\\"],
      fields: {
        prefix: {
          default: false
        },
        argument: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\\"Expression\\") : (0, _utils.assertNodeType)(\\"Identifier\\", \\"MemberExpression\\")
        },
        operator: {
          validate: (0, _utils.assertOneOf)(..._constants.UPDATE_OPERATORS)
        }
      },
      visitor: [\\"argument\\"],
      aliases: [\\"Expression\\"]
    });
    defineType(\\"VariableDeclaration\\", {
      builder: [\\"kind\\", \\"declarations\\"],
      visitor: [\\"declarations\\"],
      aliases: [\\"Statement\\", \\"Declaration\\"],
      fields: {
        declare: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        kind: {
          validate: (0, _utils.assertOneOf)(\\"var\\", \\"let\\", \\"const\\")
        },
        declarations: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"VariableDeclarator\\")))
        }
      },
      validate(parent, key, node) {
        if (!process.env.BABEL_TYPES_8_BREAKING)
          return;
        if (!(0, _is.default)(\\"ForXStatement\\", parent, {
          left: node
        }))
          return;
        if (node.declarations.length !== 1) {
          throw new TypeError(\`Exactly one VariableDeclarator is required in the VariableDeclaration of a \${parent.type}\`);
        }
      }
    });
    defineType(\\"VariableDeclarator\\", {
      visitor: [\\"id\\", \\"init\\"],
      fields: {
        id: {
          validate: function() {
            if (!process.env.BABEL_TYPES_8_BREAKING) {
              return (0, _utils.assertNodeType)(\\"LVal\\");
            }
            const normal = (0, _utils.assertNodeType)(\\"Identifier\\", \\"ArrayPattern\\", \\"ObjectPattern\\");
            const without = (0, _utils.assertNodeType)(\\"Identifier\\");
            return function(node, key, val) {
              const validator = node.init ? normal : without;
              validator(node, key, val);
            };
          }()
        },
        definite: {
          optional: true,
          validate: (0, _utils.assertValueType)(\\"boolean\\")
        },
        init: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"WhileStatement\\", {
      visitor: [\\"test\\", \\"body\\"],
      aliases: [\\"Statement\\", \\"BlockParent\\", \\"Loop\\", \\"While\\", \\"Scopable\\"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        }
      }
    });
    defineType(\\"WithStatement\\", {
      visitor: [\\"object\\", \\"body\\"],
      aliases: [\\"Statement\\"],
      fields: {
        object: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        }
      }
    });
    defineType(\\"AssignmentPattern\\", {
      visitor: [\\"left\\", \\"right\\", \\"decorators\\"],
      builder: [\\"left\\", \\"right\\"],
      aliases: [\\"Pattern\\", \\"PatternLike\\", \\"LVal\\"],
      fields: Object.assign({}, patternLikeCommon, {
        left: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\", \\"ObjectPattern\\", \\"ArrayPattern\\", \\"MemberExpression\\")
        },
        right: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        }
      })
    });
    defineType(\\"ArrayPattern\\", {
      visitor: [\\"elements\\", \\"typeAnnotation\\"],
      builder: [\\"elements\\"],
      aliases: [\\"Pattern\\", \\"PatternLike\\", \\"LVal\\"],
      fields: Object.assign({}, patternLikeCommon, {
        elements: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)(\\"null\\", \\"PatternLike\\")))
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        },
        optional: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        }
      })
    });
    defineType(\\"ArrowFunctionExpression\\", {
      builder: [\\"params\\", \\"body\\", \\"async\\"],
      visitor: [\\"params\\", \\"body\\", \\"returnType\\", \\"typeParameters\\"],
      aliases: [\\"Scopable\\", \\"Function\\", \\"BlockParent\\", \\"FunctionParent\\", \\"Expression\\", \\"Pureish\\"],
      fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
        expression: {
          validate: (0, _utils.assertValueType)(\\"boolean\\")
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\", \\"Expression\\")
        }
      })
    });
    defineType(\\"ClassBody\\", {
      visitor: [\\"body\\"],
      fields: {
        body: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"ClassMethod\\", \\"ClassPrivateMethod\\", \\"ClassProperty\\", \\"ClassPrivateProperty\\", \\"TSDeclareMethod\\", \\"TSIndexSignature\\")))
        }
      }
    });
    defineType(\\"ClassExpression\\", {
      builder: [\\"id\\", \\"superClass\\", \\"body\\", \\"decorators\\"],
      visitor: [\\"id\\", \\"body\\", \\"superClass\\", \\"mixins\\", \\"typeParameters\\", \\"superTypeParameters\\", \\"implements\\", \\"decorators\\"],
      aliases: [\\"Scopable\\", \\"Class\\", \\"Expression\\"],
      fields: {
        id: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\"),
          optional: true
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)(\\"TypeParameterDeclaration\\", \\"TSTypeParameterDeclaration\\", \\"Noop\\"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"ClassBody\\")
        },
        superClass: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        superTypeParameters: {
          validate: (0, _utils.assertNodeType)(\\"TypeParameterInstantiation\\", \\"TSTypeParameterInstantiation\\"),
          optional: true
        },
        implements: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"TSExpressionWithTypeArguments\\", \\"ClassImplements\\"))),
          optional: true
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        },
        mixins: {
          validate: (0, _utils.assertNodeType)(\\"InterfaceExtends\\"),
          optional: true
        }
      }
    });
    defineType(\\"ClassDeclaration\\", {
      inherits: \\"ClassExpression\\",
      aliases: [\\"Scopable\\", \\"Class\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        id: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)(\\"TypeParameterDeclaration\\", \\"TSTypeParameterDeclaration\\", \\"Noop\\"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"ClassBody\\")
        },
        superClass: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        superTypeParameters: {
          validate: (0, _utils.assertNodeType)(\\"TypeParameterInstantiation\\", \\"TSTypeParameterInstantiation\\"),
          optional: true
        },
        implements: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"TSExpressionWithTypeArguments\\", \\"ClassImplements\\"))),
          optional: true
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        },
        mixins: {
          validate: (0, _utils.assertNodeType)(\\"InterfaceExtends\\"),
          optional: true
        },
        declare: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        abstract: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        }
      },
      validate: function() {
        const identifier = (0, _utils.assertNodeType)(\\"Identifier\\");
        return function(parent, key, node) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          if (!(0, _is.default)(\\"ExportDefaultDeclaration\\", parent)) {
            identifier(node, \\"id\\", node.id);
          }
        };
      }()
    });
    defineType(\\"ExportAllDeclaration\\", {
      visitor: [\\"source\\"],
      aliases: [\\"Statement\\", \\"Declaration\\", \\"ModuleDeclaration\\", \\"ExportDeclaration\\"],
      fields: {
        source: {
          validate: (0, _utils.assertNodeType)(\\"StringLiteral\\")
        },
        exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\\"type\\", \\"value\\")),
        assertions: {
          optional: true,
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"ImportAttribute\\")))
        }
      }
    });
    defineType(\\"ExportDefaultDeclaration\\", {
      visitor: [\\"declaration\\"],
      aliases: [\\"Statement\\", \\"Declaration\\", \\"ModuleDeclaration\\", \\"ExportDeclaration\\"],
      fields: {
        declaration: {
          validate: (0, _utils.assertNodeType)(\\"FunctionDeclaration\\", \\"TSDeclareFunction\\", \\"ClassDeclaration\\", \\"Expression\\")
        },
        exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\\"value\\"))
      }
    });
    defineType(\\"ExportNamedDeclaration\\", {
      visitor: [\\"declaration\\", \\"specifiers\\", \\"source\\"],
      aliases: [\\"Statement\\", \\"Declaration\\", \\"ModuleDeclaration\\", \\"ExportDeclaration\\"],
      fields: {
        declaration: {
          optional: true,
          validate: (0, _utils.chain)((0, _utils.assertNodeType)(\\"Declaration\\"), Object.assign(function(node, key, val) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            if (val && node.specifiers.length) {
              throw new TypeError(\\"Only declaration or specifiers is allowed on ExportNamedDeclaration\\");
            }
          }, {
            oneOfNodeTypes: [\\"Declaration\\"]
          }), function(node, key, val) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            if (val && node.source) {
              throw new TypeError(\\"Cannot export a declaration from a source\\");
            }
          })
        },
        assertions: {
          optional: true,
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"ImportAttribute\\")))
        },
        specifiers: {
          default: [],
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)(function() {
            const sourced = (0, _utils.assertNodeType)(\\"ExportSpecifier\\", \\"ExportDefaultSpecifier\\", \\"ExportNamespaceSpecifier\\");
            const sourceless = (0, _utils.assertNodeType)(\\"ExportSpecifier\\");
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return sourced;
            return function(node, key, val) {
              const validator = node.source ? sourced : sourceless;
              validator(node, key, val);
            };
          }()))
        },
        source: {
          validate: (0, _utils.assertNodeType)(\\"StringLiteral\\"),
          optional: true
        },
        exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\\"type\\", \\"value\\"))
      }
    });
    defineType(\\"ExportSpecifier\\", {
      visitor: [\\"local\\", \\"exported\\"],
      aliases: [\\"ModuleSpecifier\\"],
      fields: {
        local: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        },
        exported: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\", \\"StringLiteral\\")
        },
        exportKind: {
          validate: (0, _utils.assertOneOf)(\\"type\\", \\"value\\"),
          optional: true
        }
      }
    });
    defineType(\\"ForOfStatement\\", {
      visitor: [\\"left\\", \\"right\\", \\"body\\"],
      builder: [\\"left\\", \\"right\\", \\"body\\", \\"await\\"],
      aliases: [\\"Scopable\\", \\"Statement\\", \\"For\\", \\"BlockParent\\", \\"Loop\\", \\"ForXStatement\\"],
      fields: {
        left: {
          validate: function() {
            if (!process.env.BABEL_TYPES_8_BREAKING) {
              return (0, _utils.assertNodeType)(\\"VariableDeclaration\\", \\"LVal\\");
            }
            const declaration = (0, _utils.assertNodeType)(\\"VariableDeclaration\\");
            const lval = (0, _utils.assertNodeType)(\\"Identifier\\", \\"MemberExpression\\", \\"ArrayPattern\\", \\"ObjectPattern\\");
            return function(node, key, val) {
              if ((0, _is.default)(\\"VariableDeclaration\\", val)) {
                declaration(node, key, val);
              } else {
                lval(node, key, val);
              }
            };
          }()
        },
        right: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"Statement\\")
        },
        await: {
          default: false
        }
      }
    });
    defineType(\\"ImportDeclaration\\", {
      visitor: [\\"specifiers\\", \\"source\\"],
      aliases: [\\"Statement\\", \\"Declaration\\", \\"ModuleDeclaration\\"],
      fields: {
        assertions: {
          optional: true,
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"ImportAttribute\\")))
        },
        specifiers: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"ImportSpecifier\\", \\"ImportDefaultSpecifier\\", \\"ImportNamespaceSpecifier\\")))
        },
        source: {
          validate: (0, _utils.assertNodeType)(\\"StringLiteral\\")
        },
        importKind: {
          validate: (0, _utils.assertOneOf)(\\"type\\", \\"typeof\\", \\"value\\"),
          optional: true
        }
      }
    });
    defineType(\\"ImportDefaultSpecifier\\", {
      visitor: [\\"local\\"],
      aliases: [\\"ModuleSpecifier\\"],
      fields: {
        local: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        }
      }
    });
    defineType(\\"ImportNamespaceSpecifier\\", {
      visitor: [\\"local\\"],
      aliases: [\\"ModuleSpecifier\\"],
      fields: {
        local: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        }
      }
    });
    defineType(\\"ImportSpecifier\\", {
      visitor: [\\"local\\", \\"imported\\"],
      aliases: [\\"ModuleSpecifier\\"],
      fields: {
        local: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        },
        imported: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\", \\"StringLiteral\\")
        },
        importKind: {
          validate: (0, _utils.assertOneOf)(\\"type\\", \\"typeof\\", \\"value\\"),
          optional: true
        }
      }
    });
    defineType(\\"MetaProperty\\", {
      visitor: [\\"meta\\", \\"property\\"],
      aliases: [\\"Expression\\"],
      fields: {
        meta: {
          validate: (0, _utils.chain)((0, _utils.assertNodeType)(\\"Identifier\\"), Object.assign(function(node, key, val) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            let property;
            switch (val.name) {
              case \\"function\\":
                property = \\"sent\\";
                break;
              case \\"new\\":
                property = \\"target\\";
                break;
              case \\"import\\":
                property = \\"meta\\";
                break;
            }
            if (!(0, _is.default)(\\"Identifier\\", node.property, {
              name: property
            })) {
              throw new TypeError(\\"Unrecognised MetaProperty\\");
            }
          }, {
            oneOfNodeTypes: [\\"Identifier\\"]
          }))
        },
        property: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        }
      }
    });
    var classMethodOrPropertyCommon = {
      abstract: {
        validate: (0, _utils.assertValueType)(\\"boolean\\"),
        optional: true
      },
      accessibility: {
        validate: (0, _utils.assertOneOf)(\\"public\\", \\"private\\", \\"protected\\"),
        optional: true
      },
      static: {
        default: false
      },
      override: {
        default: false
      },
      computed: {
        default: false
      },
      optional: {
        validate: (0, _utils.assertValueType)(\\"boolean\\"),
        optional: true
      },
      key: {
        validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)(\\"Identifier\\", \\"StringLiteral\\", \\"NumericLiteral\\");
          const computed = (0, _utils.assertNodeType)(\\"Expression\\");
          return function(node, key, val) {
            const validator = node.computed ? computed : normal;
            validator(node, key, val);
          };
        }(), (0, _utils.assertNodeType)(\\"Identifier\\", \\"StringLiteral\\", \\"NumericLiteral\\", \\"Expression\\"))
      }
    };
    exports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
    var classMethodOrDeclareMethodCommon = Object.assign({}, functionCommon, classMethodOrPropertyCommon, {
      params: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Identifier\\", \\"Pattern\\", \\"RestElement\\", \\"TSParameterProperty\\")))
      },
      kind: {
        validate: (0, _utils.assertOneOf)(\\"get\\", \\"set\\", \\"method\\", \\"constructor\\"),
        default: \\"method\\"
      },
      access: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"string\\"), (0, _utils.assertOneOf)(\\"public\\", \\"private\\", \\"protected\\")),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
        optional: true
      }
    });
    exports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
    defineType(\\"ClassMethod\\", {
      aliases: [\\"Function\\", \\"Scopable\\", \\"BlockParent\\", \\"FunctionParent\\", \\"Method\\"],
      builder: [\\"kind\\", \\"key\\", \\"params\\", \\"body\\", \\"computed\\", \\"static\\", \\"generator\\", \\"async\\"],
      visitor: [\\"key\\", \\"params\\", \\"body\\", \\"decorators\\", \\"returnType\\", \\"typeParameters\\"],
      fields: Object.assign({}, classMethodOrDeclareMethodCommon, functionTypeAnnotationCommon, {
        body: {
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\")
        }
      })
    });
    defineType(\\"ObjectPattern\\", {
      visitor: [\\"properties\\", \\"typeAnnotation\\", \\"decorators\\"],
      builder: [\\"properties\\"],
      aliases: [\\"Pattern\\", \\"PatternLike\\", \\"LVal\\"],
      fields: Object.assign({}, patternLikeCommon, {
        properties: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"RestElement\\", \\"ObjectProperty\\")))
        }
      })
    });
    defineType(\\"SpreadElement\\", {
      visitor: [\\"argument\\"],
      aliases: [\\"UnaryLike\\"],
      deprecatedAlias: \\"SpreadProperty\\",
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"Super\\", {
      aliases: [\\"Expression\\"]
    });
    defineType(\\"TaggedTemplateExpression\\", {
      visitor: [\\"tag\\", \\"quasi\\", \\"typeParameters\\"],
      builder: [\\"tag\\", \\"quasi\\"],
      aliases: [\\"Expression\\"],
      fields: {
        tag: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        quasi: {
          validate: (0, _utils.assertNodeType)(\\"TemplateLiteral\\")
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)(\\"TypeParameterInstantiation\\", \\"TSTypeParameterInstantiation\\"),
          optional: true
        }
      }
    });
    defineType(\\"TemplateElement\\", {
      builder: [\\"value\\", \\"tail\\"],
      fields: {
        value: {
          validate: (0, _utils.assertShape)({
            raw: {
              validate: (0, _utils.assertValueType)(\\"string\\")
            },
            cooked: {
              validate: (0, _utils.assertValueType)(\\"string\\"),
              optional: true
            }
          })
        },
        tail: {
          default: false
        }
      }
    });
    defineType(\\"TemplateLiteral\\", {
      visitor: [\\"quasis\\", \\"expressions\\"],
      aliases: [\\"Expression\\", \\"Literal\\"],
      fields: {
        quasis: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"TemplateElement\\")))
        },
        expressions: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Expression\\", \\"TSType\\")), function(node, key, val) {
            if (node.quasis.length !== val.length + 1) {
              throw new TypeError(\`Number of \${node.type} quasis should be exactly one more than the number of expressions.
Expected \${val.length + 1} quasis but got \${node.quasis.length}\`);
            }
          })
        }
      }
    });
    defineType(\\"YieldExpression\\", {
      builder: [\\"argument\\", \\"delegate\\"],
      visitor: [\\"argument\\"],
      aliases: [\\"Expression\\", \\"Terminatorless\\"],
      fields: {
        delegate: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"boolean\\"), Object.assign(function(node, key, val) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            if (val && !node.argument) {
              throw new TypeError(\\"Property delegate of YieldExpression cannot be true if there is no argument\\");
            }
          }, {
            type: \\"boolean\\"
          })),
          default: false
        },
        argument: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"AwaitExpression\\", {
      builder: [\\"argument\\"],
      visitor: [\\"argument\\"],
      aliases: [\\"Expression\\", \\"Terminatorless\\"],
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"Import\\", {
      aliases: [\\"Expression\\"]
    });
    defineType(\\"BigIntLiteral\\", {
      builder: [\\"value\\"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        }
      },
      aliases: [\\"Expression\\", \\"Pureish\\", \\"Literal\\", \\"Immutable\\"]
    });
    defineType(\\"ExportNamespaceSpecifier\\", {
      visitor: [\\"exported\\"],
      aliases: [\\"ModuleSpecifier\\"],
      fields: {
        exported: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        }
      }
    });
    defineType(\\"OptionalMemberExpression\\", {
      builder: [\\"object\\", \\"property\\", \\"computed\\", \\"optional\\"],
      visitor: [\\"object\\", \\"property\\"],
      aliases: [\\"Expression\\"],
      fields: {
        object: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        property: {
          validate: function() {
            const normal = (0, _utils.assertNodeType)(\\"Identifier\\");
            const computed = (0, _utils.assertNodeType)(\\"Expression\\");
            const validator = function(node, key, val) {
              const validator2 = node.computed ? computed : normal;
              validator2(node, key, val);
            };
            validator.oneOfNodeTypes = [\\"Expression\\", \\"Identifier\\"];
            return validator;
          }()
        },
        computed: {
          default: false
        },
        optional: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)(\\"boolean\\") : (0, _utils.chain)((0, _utils.assertValueType)(\\"boolean\\"), (0, _utils.assertOptionalChainStart)())
        }
      }
    });
    defineType(\\"OptionalCallExpression\\", {
      visitor: [\\"callee\\", \\"arguments\\", \\"typeParameters\\", \\"typeArguments\\"],
      builder: [\\"callee\\", \\"arguments\\", \\"optional\\"],
      aliases: [\\"Expression\\"],
      fields: {
        callee: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        arguments: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Expression\\", \\"SpreadElement\\", \\"JSXNamespacedName\\", \\"ArgumentPlaceholder\\")))
        },
        optional: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)(\\"boolean\\") : (0, _utils.chain)((0, _utils.assertValueType)(\\"boolean\\"), (0, _utils.assertOptionalChainStart)())
        },
        typeArguments: {
          validate: (0, _utils.assertNodeType)(\\"TypeParameterInstantiation\\"),
          optional: true
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)(\\"TSTypeParameterInstantiation\\"),
          optional: true
        }
      }
    });
    defineType(\\"ClassProperty\\", {
      visitor: [\\"key\\", \\"value\\", \\"typeAnnotation\\", \\"decorators\\"],
      builder: [\\"key\\", \\"value\\", \\"typeAnnotation\\", \\"decorators\\", \\"computed\\", \\"static\\"],
      aliases: [\\"Property\\"],
      fields: Object.assign({}, classMethodOrPropertyCommon, {
        value: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\"),
          optional: true
        },
        definite: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        typeAnnotation: {
          validate: (0, _utils.assertNodeType)(\\"TypeAnnotation\\", \\"TSTypeAnnotation\\", \\"Noop\\"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        },
        readonly: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        declare: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        variance: {
          validate: (0, _utils.assertNodeType)(\\"Variance\\"),
          optional: true
        }
      })
    });
    defineType(\\"ClassPrivateProperty\\", {
      visitor: [\\"key\\", \\"value\\", \\"decorators\\", \\"typeAnnotation\\"],
      builder: [\\"key\\", \\"value\\", \\"decorators\\", \\"static\\"],
      aliases: [\\"Property\\", \\"Private\\"],
      fields: {
        key: {
          validate: (0, _utils.assertNodeType)(\\"PrivateName\\")
        },
        value: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\"),
          optional: true
        },
        typeAnnotation: {
          validate: (0, _utils.assertNodeType)(\\"TypeAnnotation\\", \\"TSTypeAnnotation\\", \\"Noop\\"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        },
        readonly: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        definite: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        variance: {
          validate: (0, _utils.assertNodeType)(\\"Variance\\"),
          optional: true
        }
      }
    });
    defineType(\\"ClassPrivateMethod\\", {
      builder: [\\"kind\\", \\"key\\", \\"params\\", \\"body\\", \\"static\\"],
      visitor: [\\"key\\", \\"params\\", \\"body\\", \\"decorators\\", \\"returnType\\", \\"typeParameters\\"],
      aliases: [\\"Function\\", \\"Scopable\\", \\"BlockParent\\", \\"FunctionParent\\", \\"Method\\", \\"Private\\"],
      fields: Object.assign({}, classMethodOrDeclareMethodCommon, functionTypeAnnotationCommon, {
        key: {
          validate: (0, _utils.assertNodeType)(\\"PrivateName\\")
        },
        body: {
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\")
        }
      })
    });
    defineType(\\"PrivateName\\", {
      visitor: [\\"id\\"],
      aliases: [\\"Private\\"],
      fields: {
        id: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        }
      }
    });
    defineType(\\"StaticBlock\\", {
      visitor: [\\"body\\"],
      fields: {
        body: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Statement\\")))
        }
      },
      aliases: [\\"Scopable\\", \\"BlockParent\\", \\"FunctionParent\\"]
    });
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/flow.js
var require_flow = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/flow.js\\"() {
    \\"use strict\\";
    var _utils = require_utils();
    var defineType = (0, _utils.defineAliasedType)(\\"Flow\\");
    var defineInterfaceishType = (name, typeParameterType = \\"TypeParameterDeclaration\\") => {
      defineType(name, {
        builder: [\\"id\\", \\"typeParameters\\", \\"extends\\", \\"body\\"],
        visitor: [\\"id\\", \\"typeParameters\\", \\"extends\\", \\"mixins\\", \\"implements\\", \\"body\\"],
        aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
        fields: {
          id: (0, _utils.validateType)(\\"Identifier\\"),
          typeParameters: (0, _utils.validateOptionalType)(typeParameterType),
          extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\\"InterfaceExtends\\")),
          mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\\"InterfaceExtends\\")),
          implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\\"ClassImplements\\")),
          body: (0, _utils.validateType)(\\"ObjectTypeAnnotation\\")
        }
      });
    };
    defineType(\\"AnyTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"ArrayTypeAnnotation\\", {
      visitor: [\\"elementType\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        elementType: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"BooleanTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"BooleanLiteralTypeAnnotation\\", {
      builder: [\\"value\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        value: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"NullLiteralTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"ClassImplements\\", {
      visitor: [\\"id\\", \\"typeParameters\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TypeParameterInstantiation\\")
      }
    });
    defineInterfaceishType(\\"DeclareClass\\");
    defineType(\\"DeclareFunction\\", {
      visitor: [\\"id\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        predicate: (0, _utils.validateOptionalType)(\\"DeclaredPredicate\\")
      }
    });
    defineInterfaceishType(\\"DeclareInterface\\");
    defineType(\\"DeclareModule\\", {
      builder: [\\"id\\", \\"body\\", \\"kind\\"],
      visitor: [\\"id\\", \\"body\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        id: (0, _utils.validateType)([\\"Identifier\\", \\"StringLiteral\\"]),
        body: (0, _utils.validateType)(\\"BlockStatement\\"),
        kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\\"CommonJS\\", \\"ES\\"))
      }
    });
    defineType(\\"DeclareModuleExports\\", {
      visitor: [\\"typeAnnotation\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        typeAnnotation: (0, _utils.validateType)(\\"TypeAnnotation\\")
      }
    });
    defineType(\\"DeclareTypeAlias\\", {
      visitor: [\\"id\\", \\"typeParameters\\", \\"right\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TypeParameterDeclaration\\"),
        right: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"DeclareOpaqueType\\", {
      visitor: [\\"id\\", \\"typeParameters\\", \\"supertype\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TypeParameterDeclaration\\"),
        supertype: (0, _utils.validateOptionalType)(\\"FlowType\\"),
        impltype: (0, _utils.validateOptionalType)(\\"FlowType\\")
      }
    });
    defineType(\\"DeclareVariable\\", {
      visitor: [\\"id\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\")
      }
    });
    defineType(\\"DeclareExportDeclaration\\", {
      visitor: [\\"declaration\\", \\"specifiers\\", \\"source\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        declaration: (0, _utils.validateOptionalType)(\\"Flow\\"),
        specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)([\\"ExportSpecifier\\", \\"ExportNamespaceSpecifier\\"])),
        source: (0, _utils.validateOptionalType)(\\"StringLiteral\\"),
        default: (0, _utils.validateOptional)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"DeclareExportAllDeclaration\\", {
      visitor: [\\"source\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        source: (0, _utils.validateType)(\\"StringLiteral\\"),
        exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\\"type\\", \\"value\\"))
      }
    });
    defineType(\\"DeclaredPredicate\\", {
      visitor: [\\"value\\"],
      aliases: [\\"FlowPredicate\\"],
      fields: {
        value: (0, _utils.validateType)(\\"Flow\\")
      }
    });
    defineType(\\"ExistsTypeAnnotation\\", {
      aliases: [\\"FlowType\\"]
    });
    defineType(\\"FunctionTypeAnnotation\\", {
      visitor: [\\"typeParameters\\", \\"params\\", \\"rest\\", \\"returnType\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        typeParameters: (0, _utils.validateOptionalType)(\\"TypeParameterDeclaration\\"),
        params: (0, _utils.validate)((0, _utils.arrayOfType)(\\"FunctionTypeParam\\")),
        rest: (0, _utils.validateOptionalType)(\\"FunctionTypeParam\\"),
        this: (0, _utils.validateOptionalType)(\\"FunctionTypeParam\\"),
        returnType: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"FunctionTypeParam\\", {
      visitor: [\\"name\\", \\"typeAnnotation\\"],
      fields: {
        name: (0, _utils.validateOptionalType)(\\"Identifier\\"),
        typeAnnotation: (0, _utils.validateType)(\\"FlowType\\"),
        optional: (0, _utils.validateOptional)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"GenericTypeAnnotation\\", {
      visitor: [\\"id\\", \\"typeParameters\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        id: (0, _utils.validateType)([\\"Identifier\\", \\"QualifiedTypeIdentifier\\"]),
        typeParameters: (0, _utils.validateOptionalType)(\\"TypeParameterInstantiation\\")
      }
    });
    defineType(\\"InferredPredicate\\", {
      aliases: [\\"FlowPredicate\\"]
    });
    defineType(\\"InterfaceExtends\\", {
      visitor: [\\"id\\", \\"typeParameters\\"],
      fields: {
        id: (0, _utils.validateType)([\\"Identifier\\", \\"QualifiedTypeIdentifier\\"]),
        typeParameters: (0, _utils.validateOptionalType)(\\"TypeParameterInstantiation\\")
      }
    });
    defineInterfaceishType(\\"InterfaceDeclaration\\");
    defineType(\\"InterfaceTypeAnnotation\\", {
      visitor: [\\"extends\\", \\"body\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\\"InterfaceExtends\\")),
        body: (0, _utils.validateType)(\\"ObjectTypeAnnotation\\")
      }
    });
    defineType(\\"IntersectionTypeAnnotation\\", {
      visitor: [\\"types\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        types: (0, _utils.validate)((0, _utils.arrayOfType)(\\"FlowType\\"))
      }
    });
    defineType(\\"MixedTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"EmptyTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"NullableTypeAnnotation\\", {
      visitor: [\\"typeAnnotation\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        typeAnnotation: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"NumberLiteralTypeAnnotation\\", {
      builder: [\\"value\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        value: (0, _utils.validate)((0, _utils.assertValueType)(\\"number\\"))
      }
    });
    defineType(\\"NumberTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"ObjectTypeAnnotation\\", {
      visitor: [\\"properties\\", \\"indexers\\", \\"callProperties\\", \\"internalSlots\\"],
      aliases: [\\"FlowType\\"],
      builder: [\\"properties\\", \\"indexers\\", \\"callProperties\\", \\"internalSlots\\", \\"exact\\"],
      fields: {
        properties: (0, _utils.validate)((0, _utils.arrayOfType)([\\"ObjectTypeProperty\\", \\"ObjectTypeSpreadProperty\\"])),
        indexers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\\"ObjectTypeIndexer\\")),
        callProperties: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\\"ObjectTypeCallProperty\\")),
        internalSlots: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\\"ObjectTypeInternalSlot\\")),
        exact: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          default: false
        },
        inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"ObjectTypeInternalSlot\\", {
      visitor: [\\"id\\", \\"value\\", \\"optional\\", \\"static\\", \\"method\\"],
      aliases: [\\"UserWhitespacable\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        value: (0, _utils.validateType)(\\"FlowType\\"),
        optional: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        static: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        method: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"ObjectTypeCallProperty\\", {
      visitor: [\\"value\\"],
      aliases: [\\"UserWhitespacable\\"],
      fields: {
        value: (0, _utils.validateType)(\\"FlowType\\"),
        static: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"ObjectTypeIndexer\\", {
      visitor: [\\"id\\", \\"key\\", \\"value\\", \\"variance\\"],
      aliases: [\\"UserWhitespacable\\"],
      fields: {
        id: (0, _utils.validateOptionalType)(\\"Identifier\\"),
        key: (0, _utils.validateType)(\\"FlowType\\"),
        value: (0, _utils.validateType)(\\"FlowType\\"),
        static: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        variance: (0, _utils.validateOptionalType)(\\"Variance\\")
      }
    });
    defineType(\\"ObjectTypeProperty\\", {
      visitor: [\\"key\\", \\"value\\", \\"variance\\"],
      aliases: [\\"UserWhitespacable\\"],
      fields: {
        key: (0, _utils.validateType)([\\"Identifier\\", \\"StringLiteral\\"]),
        value: (0, _utils.validateType)(\\"FlowType\\"),
        kind: (0, _utils.validate)((0, _utils.assertOneOf)(\\"init\\", \\"get\\", \\"set\\")),
        static: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        proto: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        optional: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        variance: (0, _utils.validateOptionalType)(\\"Variance\\"),
        method: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"ObjectTypeSpreadProperty\\", {
      visitor: [\\"argument\\"],
      aliases: [\\"UserWhitespacable\\"],
      fields: {
        argument: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"OpaqueType\\", {
      visitor: [\\"id\\", \\"typeParameters\\", \\"supertype\\", \\"impltype\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TypeParameterDeclaration\\"),
        supertype: (0, _utils.validateOptionalType)(\\"FlowType\\"),
        impltype: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"QualifiedTypeIdentifier\\", {
      visitor: [\\"id\\", \\"qualification\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        qualification: (0, _utils.validateType)([\\"Identifier\\", \\"QualifiedTypeIdentifier\\"])
      }
    });
    defineType(\\"StringLiteralTypeAnnotation\\", {
      builder: [\\"value\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        value: (0, _utils.validate)((0, _utils.assertValueType)(\\"string\\"))
      }
    });
    defineType(\\"StringTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"SymbolTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"ThisTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"TupleTypeAnnotation\\", {
      visitor: [\\"types\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        types: (0, _utils.validate)((0, _utils.arrayOfType)(\\"FlowType\\"))
      }
    });
    defineType(\\"TypeofTypeAnnotation\\", {
      visitor: [\\"argument\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        argument: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"TypeAlias\\", {
      visitor: [\\"id\\", \\"typeParameters\\", \\"right\\"],
      aliases: [\\"FlowDeclaration\\", \\"Statement\\", \\"Declaration\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TypeParameterDeclaration\\"),
        right: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"TypeAnnotation\\", {
      visitor: [\\"typeAnnotation\\"],
      fields: {
        typeAnnotation: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"TypeCastExpression\\", {
      visitor: [\\"expression\\", \\"typeAnnotation\\"],
      aliases: [\\"ExpressionWrapper\\", \\"Expression\\"],
      fields: {
        expression: (0, _utils.validateType)(\\"Expression\\"),
        typeAnnotation: (0, _utils.validateType)(\\"TypeAnnotation\\")
      }
    });
    defineType(\\"TypeParameter\\", {
      visitor: [\\"bound\\", \\"default\\", \\"variance\\"],
      fields: {
        name: (0, _utils.validate)((0, _utils.assertValueType)(\\"string\\")),
        bound: (0, _utils.validateOptionalType)(\\"TypeAnnotation\\"),
        default: (0, _utils.validateOptionalType)(\\"FlowType\\"),
        variance: (0, _utils.validateOptionalType)(\\"Variance\\")
      }
    });
    defineType(\\"TypeParameterDeclaration\\", {
      visitor: [\\"params\\"],
      fields: {
        params: (0, _utils.validate)((0, _utils.arrayOfType)(\\"TypeParameter\\"))
      }
    });
    defineType(\\"TypeParameterInstantiation\\", {
      visitor: [\\"params\\"],
      fields: {
        params: (0, _utils.validate)((0, _utils.arrayOfType)(\\"FlowType\\"))
      }
    });
    defineType(\\"UnionTypeAnnotation\\", {
      visitor: [\\"types\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        types: (0, _utils.validate)((0, _utils.arrayOfType)(\\"FlowType\\"))
      }
    });
    defineType(\\"Variance\\", {
      builder: [\\"kind\\"],
      fields: {
        kind: (0, _utils.validate)((0, _utils.assertOneOf)(\\"minus\\", \\"plus\\"))
      }
    });
    defineType(\\"VoidTypeAnnotation\\", {
      aliases: [\\"FlowType\\", \\"FlowBaseAnnotation\\"]
    });
    defineType(\\"EnumDeclaration\\", {
      aliases: [\\"Statement\\", \\"Declaration\\"],
      visitor: [\\"id\\", \\"body\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        body: (0, _utils.validateType)([\\"EnumBooleanBody\\", \\"EnumNumberBody\\", \\"EnumStringBody\\", \\"EnumSymbolBody\\"])
      }
    });
    defineType(\\"EnumBooleanBody\\", {
      aliases: [\\"EnumBody\\"],
      visitor: [\\"members\\"],
      fields: {
        explicitType: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        members: (0, _utils.validateArrayOfType)(\\"EnumBooleanMember\\"),
        hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"EnumNumberBody\\", {
      aliases: [\\"EnumBody\\"],
      visitor: [\\"members\\"],
      fields: {
        explicitType: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        members: (0, _utils.validateArrayOfType)(\\"EnumNumberMember\\"),
        hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"EnumStringBody\\", {
      aliases: [\\"EnumBody\\"],
      visitor: [\\"members\\"],
      fields: {
        explicitType: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\")),
        members: (0, _utils.validateArrayOfType)([\\"EnumStringMember\\", \\"EnumDefaultedMember\\"]),
        hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"EnumSymbolBody\\", {
      aliases: [\\"EnumBody\\"],
      visitor: [\\"members\\"],
      fields: {
        members: (0, _utils.validateArrayOfType)(\\"EnumDefaultedMember\\"),
        hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
    defineType(\\"EnumBooleanMember\\", {
      aliases: [\\"EnumMember\\"],
      visitor: [\\"id\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        init: (0, _utils.validateType)(\\"BooleanLiteral\\")
      }
    });
    defineType(\\"EnumNumberMember\\", {
      aliases: [\\"EnumMember\\"],
      visitor: [\\"id\\", \\"init\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        init: (0, _utils.validateType)(\\"NumericLiteral\\")
      }
    });
    defineType(\\"EnumStringMember\\", {
      aliases: [\\"EnumMember\\"],
      visitor: [\\"id\\", \\"init\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\"),
        init: (0, _utils.validateType)(\\"StringLiteral\\")
      }
    });
    defineType(\\"EnumDefaultedMember\\", {
      aliases: [\\"EnumMember\\"],
      visitor: [\\"id\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\")
      }
    });
    defineType(\\"IndexedAccessType\\", {
      visitor: [\\"objectType\\", \\"indexType\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        objectType: (0, _utils.validateType)(\\"FlowType\\"),
        indexType: (0, _utils.validateType)(\\"FlowType\\")
      }
    });
    defineType(\\"OptionalIndexedAccessType\\", {
      visitor: [\\"objectType\\", \\"indexType\\"],
      aliases: [\\"FlowType\\"],
      fields: {
        objectType: (0, _utils.validateType)(\\"FlowType\\"),
        indexType: (0, _utils.validateType)(\\"FlowType\\"),
        optional: (0, _utils.validate)((0, _utils.assertValueType)(\\"boolean\\"))
      }
    });
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/jsx.js
var require_jsx = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/jsx.js\\"() {
    \\"use strict\\";
    var _utils = require_utils();
    var defineType = (0, _utils.defineAliasedType)(\\"JSX\\");
    defineType(\\"JSXAttribute\\", {
      visitor: [\\"name\\", \\"value\\"],
      aliases: [\\"Immutable\\"],
      fields: {
        name: {
          validate: (0, _utils.assertNodeType)(\\"JSXIdentifier\\", \\"JSXNamespacedName\\")
        },
        value: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"JSXElement\\", \\"JSXFragment\\", \\"StringLiteral\\", \\"JSXExpressionContainer\\")
        }
      }
    });
    defineType(\\"JSXClosingElement\\", {
      visitor: [\\"name\\"],
      aliases: [\\"Immutable\\"],
      fields: {
        name: {
          validate: (0, _utils.assertNodeType)(\\"JSXIdentifier\\", \\"JSXMemberExpression\\", \\"JSXNamespacedName\\")
        }
      }
    });
    defineType(\\"JSXElement\\", {
      builder: [\\"openingElement\\", \\"closingElement\\", \\"children\\", \\"selfClosing\\"],
      visitor: [\\"openingElement\\", \\"children\\", \\"closingElement\\"],
      aliases: [\\"Immutable\\", \\"Expression\\"],
      fields: {
        openingElement: {
          validate: (0, _utils.assertNodeType)(\\"JSXOpeningElement\\")
        },
        closingElement: {
          optional: true,
          validate: (0, _utils.assertNodeType)(\\"JSXClosingElement\\")
        },
        children: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"JSXText\\", \\"JSXExpressionContainer\\", \\"JSXSpreadChild\\", \\"JSXElement\\", \\"JSXFragment\\")))
        },
        selfClosing: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        }
      }
    });
    defineType(\\"JSXEmptyExpression\\", {});
    defineType(\\"JSXExpressionContainer\\", {
      visitor: [\\"expression\\"],
      aliases: [\\"Immutable\\"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\", \\"JSXEmptyExpression\\")
        }
      }
    });
    defineType(\\"JSXSpreadChild\\", {
      visitor: [\\"expression\\"],
      aliases: [\\"Immutable\\"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"JSXIdentifier\\", {
      builder: [\\"name\\"],
      fields: {
        name: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        }
      }
    });
    defineType(\\"JSXMemberExpression\\", {
      visitor: [\\"object\\", \\"property\\"],
      fields: {
        object: {
          validate: (0, _utils.assertNodeType)(\\"JSXMemberExpression\\", \\"JSXIdentifier\\")
        },
        property: {
          validate: (0, _utils.assertNodeType)(\\"JSXIdentifier\\")
        }
      }
    });
    defineType(\\"JSXNamespacedName\\", {
      visitor: [\\"namespace\\", \\"name\\"],
      fields: {
        namespace: {
          validate: (0, _utils.assertNodeType)(\\"JSXIdentifier\\")
        },
        name: {
          validate: (0, _utils.assertNodeType)(\\"JSXIdentifier\\")
        }
      }
    });
    defineType(\\"JSXOpeningElement\\", {
      builder: [\\"name\\", \\"attributes\\", \\"selfClosing\\"],
      visitor: [\\"name\\", \\"attributes\\"],
      aliases: [\\"Immutable\\"],
      fields: {
        name: {
          validate: (0, _utils.assertNodeType)(\\"JSXIdentifier\\", \\"JSXMemberExpression\\", \\"JSXNamespacedName\\")
        },
        selfClosing: {
          default: false
        },
        attributes: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"JSXAttribute\\", \\"JSXSpreadAttribute\\")))
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)(\\"TypeParameterInstantiation\\", \\"TSTypeParameterInstantiation\\"),
          optional: true
        }
      }
    });
    defineType(\\"JSXSpreadAttribute\\", {
      visitor: [\\"argument\\"],
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    defineType(\\"JSXText\\", {
      aliases: [\\"Immutable\\"],
      builder: [\\"value\\"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        }
      }
    });
    defineType(\\"JSXFragment\\", {
      builder: [\\"openingFragment\\", \\"closingFragment\\", \\"children\\"],
      visitor: [\\"openingFragment\\", \\"children\\", \\"closingFragment\\"],
      aliases: [\\"Immutable\\", \\"Expression\\"],
      fields: {
        openingFragment: {
          validate: (0, _utils.assertNodeType)(\\"JSXOpeningFragment\\")
        },
        closingFragment: {
          validate: (0, _utils.assertNodeType)(\\"JSXClosingFragment\\")
        },
        children: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"JSXText\\", \\"JSXExpressionContainer\\", \\"JSXSpreadChild\\", \\"JSXElement\\", \\"JSXFragment\\")))
        }
      }
    });
    defineType(\\"JSXOpeningFragment\\", {
      aliases: [\\"Immutable\\"]
    });
    defineType(\\"JSXClosingFragment\\", {
      aliases: [\\"Immutable\\"]
    });
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/placeholders.js
var require_placeholders = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/placeholders.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS = void 0;
    var _utils = require_utils();
    var PLACEHOLDERS = [\\"Identifier\\", \\"StringLiteral\\", \\"Expression\\", \\"Statement\\", \\"Declaration\\", \\"BlockStatement\\", \\"ClassBody\\", \\"Pattern\\"];
    exports.PLACEHOLDERS = PLACEHOLDERS;
    var PLACEHOLDERS_ALIAS = {
      Declaration: [\\"Statement\\"],
      Pattern: [\\"PatternLike\\", \\"LVal\\"]
    };
    exports.PLACEHOLDERS_ALIAS = PLACEHOLDERS_ALIAS;
    for (const type of PLACEHOLDERS) {
      const alias = _utils.ALIAS_KEYS[type];
      if (alias != null && alias.length)
        PLACEHOLDERS_ALIAS[type] = alias;
    }
    var PLACEHOLDERS_FLIPPED_ALIAS = {};
    exports.PLACEHOLDERS_FLIPPED_ALIAS = PLACEHOLDERS_FLIPPED_ALIAS;
    Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
      PLACEHOLDERS_ALIAS[type].forEach((alias) => {
        if (!Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {
          PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
        }
        PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
      });
    });
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/misc.js
var require_misc = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/misc.js\\"() {
    \\"use strict\\";
    var _utils = require_utils();
    var _placeholders = require_placeholders();
    var defineType = (0, _utils.defineAliasedType)(\\"Miscellaneous\\");
    {
      defineType(\\"Noop\\", {
        visitor: []
      });
    }
    defineType(\\"Placeholder\\", {
      visitor: [],
      builder: [\\"expectedNode\\", \\"name\\"],
      fields: {
        name: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        },
        expectedNode: {
          validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)
        }
      }
    });
    defineType(\\"V8IntrinsicIdentifier\\", {
      builder: [\\"name\\"],
      fields: {
        name: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        }
      }
    });
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/experimental.js
var require_experimental = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/experimental.js\\"() {
    \\"use strict\\";
    var _utils = require_utils();
    (0, _utils.default)(\\"ArgumentPlaceholder\\", {});
    (0, _utils.default)(\\"BindExpression\\", {
      visitor: [\\"object\\", \\"callee\\"],
      aliases: [\\"Expression\\"],
      fields: !process.env.BABEL_TYPES_8_BREAKING ? {
        object: {
          validate: Object.assign(() => {
          }, {
            oneOfNodeTypes: [\\"Expression\\"]
          })
        },
        callee: {
          validate: Object.assign(() => {
          }, {
            oneOfNodeTypes: [\\"Expression\\"]
          })
        }
      } : {
        object: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        },
        callee: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    (0, _utils.default)(\\"ImportAttribute\\", {
      visitor: [\\"key\\", \\"value\\"],
      fields: {
        key: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\", \\"StringLiteral\\")
        },
        value: {
          validate: (0, _utils.assertNodeType)(\\"StringLiteral\\")
        }
      }
    });
    (0, _utils.default)(\\"Decorator\\", {
      visitor: [\\"expression\\"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      }
    });
    (0, _utils.default)(\\"DoExpression\\", {
      visitor: [\\"body\\"],
      builder: [\\"body\\", \\"async\\"],
      aliases: [\\"Expression\\"],
      fields: {
        body: {
          validate: (0, _utils.assertNodeType)(\\"BlockStatement\\")
        },
        async: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          default: false
        }
      }
    });
    (0, _utils.default)(\\"ExportDefaultSpecifier\\", {
      visitor: [\\"exported\\"],
      aliases: [\\"ModuleSpecifier\\"],
      fields: {
        exported: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\")
        }
      }
    });
    (0, _utils.default)(\\"RecordExpression\\", {
      visitor: [\\"properties\\"],
      aliases: [\\"Expression\\"],
      fields: {
        properties: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"ObjectProperty\\", \\"SpreadElement\\")))
        }
      }
    });
    (0, _utils.default)(\\"TupleExpression\\", {
      fields: {
        elements: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Expression\\", \\"SpreadElement\\"))),
          default: []
        }
      },
      visitor: [\\"elements\\"],
      aliases: [\\"Expression\\"]
    });
    (0, _utils.default)(\\"DecimalLiteral\\", {
      builder: [\\"value\\"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        }
      },
      aliases: [\\"Expression\\", \\"Pureish\\", \\"Literal\\", \\"Immutable\\"]
    });
    (0, _utils.default)(\\"ModuleExpression\\", {
      visitor: [\\"body\\"],
      fields: {
        body: {
          validate: (0, _utils.assertNodeType)(\\"Program\\")
        }
      },
      aliases: [\\"Expression\\"]
    });
    (0, _utils.default)(\\"TopicReference\\", {
      aliases: [\\"Expression\\"]
    });
    (0, _utils.default)(\\"PipelineTopicExpression\\", {
      builder: [\\"expression\\"],
      visitor: [\\"expression\\"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      },
      aliases: [\\"Expression\\"]
    });
    (0, _utils.default)(\\"PipelineBareFunction\\", {
      builder: [\\"callee\\"],
      visitor: [\\"callee\\"],
      fields: {
        callee: {
          validate: (0, _utils.assertNodeType)(\\"Expression\\")
        }
      },
      aliases: [\\"Expression\\"]
    });
    (0, _utils.default)(\\"PipelinePrimaryTopicReference\\", {
      aliases: [\\"Expression\\"]
    });
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/typescript.js
var require_typescript = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/typescript.js\\"() {
    \\"use strict\\";
    var _utils = require_utils();
    var _core = require_core();
    var _is = require_is();
    var defineType = (0, _utils.defineAliasedType)(\\"TypeScript\\");
    var bool = (0, _utils.assertValueType)(\\"boolean\\");
    var tSFunctionTypeAnnotationCommon = {
      returnType: {
        validate: (0, _utils.assertNodeType)(\\"TSTypeAnnotation\\", \\"Noop\\"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)(\\"TSTypeParameterDeclaration\\", \\"Noop\\"),
        optional: true
      }
    };
    defineType(\\"TSParameterProperty\\", {
      aliases: [\\"LVal\\"],
      visitor: [\\"parameter\\"],
      fields: {
        accessibility: {
          validate: (0, _utils.assertOneOf)(\\"public\\", \\"private\\", \\"protected\\"),
          optional: true
        },
        readonly: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        parameter: {
          validate: (0, _utils.assertNodeType)(\\"Identifier\\", \\"AssignmentPattern\\")
        },
        override: {
          validate: (0, _utils.assertValueType)(\\"boolean\\"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"Decorator\\"))),
          optional: true
        }
      }
    });
    defineType(\\"TSDeclareFunction\\", {
      aliases: [\\"Statement\\", \\"Declaration\\"],
      visitor: [\\"id\\", \\"typeParameters\\", \\"params\\", \\"returnType\\"],
      fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)
    });
    defineType(\\"TSDeclareMethod\\", {
      visitor: [\\"decorators\\", \\"key\\", \\"typeParameters\\", \\"params\\", \\"returnType\\"],
      fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)
    });
    defineType(\\"TSQualifiedName\\", {
      aliases: [\\"TSEntityName\\"],
      visitor: [\\"left\\", \\"right\\"],
      fields: {
        left: (0, _utils.validateType)(\\"TSEntityName\\"),
        right: (0, _utils.validateType)(\\"Identifier\\")
      }
    });
    var signatureDeclarationCommon = {
      typeParameters: (0, _utils.validateOptionalType)(\\"TSTypeParameterDeclaration\\"),
      [\\"parameters\\"]: (0, _utils.validateArrayOfType)([\\"Identifier\\", \\"RestElement\\"]),
      [\\"typeAnnotation\\"]: (0, _utils.validateOptionalType)(\\"TSTypeAnnotation\\")
    };
    var callConstructSignatureDeclaration = {
      aliases: [\\"TSTypeElement\\"],
      visitor: [\\"typeParameters\\", \\"parameters\\", \\"typeAnnotation\\"],
      fields: signatureDeclarationCommon
    };
    defineType(\\"TSCallSignatureDeclaration\\", callConstructSignatureDeclaration);
    defineType(\\"TSConstructSignatureDeclaration\\", callConstructSignatureDeclaration);
    var namedTypeElementCommon = {
      key: (0, _utils.validateType)(\\"Expression\\"),
      computed: (0, _utils.validate)(bool),
      optional: (0, _utils.validateOptional)(bool)
    };
    defineType(\\"TSPropertySignature\\", {
      aliases: [\\"TSTypeElement\\"],
      visitor: [\\"key\\", \\"typeAnnotation\\", \\"initializer\\"],
      fields: Object.assign({}, namedTypeElementCommon, {
        readonly: (0, _utils.validateOptional)(bool),
        typeAnnotation: (0, _utils.validateOptionalType)(\\"TSTypeAnnotation\\"),
        initializer: (0, _utils.validateOptionalType)(\\"Expression\\"),
        kind: {
          validate: (0, _utils.assertOneOf)(\\"get\\", \\"set\\")
        }
      })
    });
    defineType(\\"TSMethodSignature\\", {
      aliases: [\\"TSTypeElement\\"],
      visitor: [\\"key\\", \\"typeParameters\\", \\"parameters\\", \\"typeAnnotation\\"],
      fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon, {
        kind: {
          validate: (0, _utils.assertOneOf)(\\"method\\", \\"get\\", \\"set\\")
        }
      })
    });
    defineType(\\"TSIndexSignature\\", {
      aliases: [\\"TSTypeElement\\"],
      visitor: [\\"parameters\\", \\"typeAnnotation\\"],
      fields: {
        readonly: (0, _utils.validateOptional)(bool),
        static: (0, _utils.validateOptional)(bool),
        parameters: (0, _utils.validateArrayOfType)(\\"Identifier\\"),
        typeAnnotation: (0, _utils.validateOptionalType)(\\"TSTypeAnnotation\\")
      }
    });
    var tsKeywordTypes = [\\"TSAnyKeyword\\", \\"TSBooleanKeyword\\", \\"TSBigIntKeyword\\", \\"TSIntrinsicKeyword\\", \\"TSNeverKeyword\\", \\"TSNullKeyword\\", \\"TSNumberKeyword\\", \\"TSObjectKeyword\\", \\"TSStringKeyword\\", \\"TSSymbolKeyword\\", \\"TSUndefinedKeyword\\", \\"TSUnknownKeyword\\", \\"TSVoidKeyword\\"];
    for (const type of tsKeywordTypes) {
      defineType(type, {
        aliases: [\\"TSType\\", \\"TSBaseType\\"],
        visitor: [],
        fields: {}
      });
    }
    defineType(\\"TSThisType\\", {
      aliases: [\\"TSType\\", \\"TSBaseType\\"],
      visitor: [],
      fields: {}
    });
    var fnOrCtrBase = {
      aliases: [\\"TSType\\"],
      visitor: [\\"typeParameters\\", \\"parameters\\", \\"typeAnnotation\\"]
    };
    defineType(\\"TSFunctionType\\", Object.assign({}, fnOrCtrBase, {
      fields: signatureDeclarationCommon
    }));
    defineType(\\"TSConstructorType\\", Object.assign({}, fnOrCtrBase, {
      fields: Object.assign({}, signatureDeclarationCommon, {
        abstract: (0, _utils.validateOptional)(bool)
      })
    }));
    defineType(\\"TSTypeReference\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"typeName\\", \\"typeParameters\\"],
      fields: {
        typeName: (0, _utils.validateType)(\\"TSEntityName\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TSTypeParameterInstantiation\\")
      }
    });
    defineType(\\"TSTypePredicate\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"parameterName\\", \\"typeAnnotation\\"],
      builder: [\\"parameterName\\", \\"typeAnnotation\\", \\"asserts\\"],
      fields: {
        parameterName: (0, _utils.validateType)([\\"Identifier\\", \\"TSThisType\\"]),
        typeAnnotation: (0, _utils.validateOptionalType)(\\"TSTypeAnnotation\\"),
        asserts: (0, _utils.validateOptional)(bool)
      }
    });
    defineType(\\"TSTypeQuery\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"exprName\\"],
      fields: {
        exprName: (0, _utils.validateType)([\\"TSEntityName\\", \\"TSImportType\\"])
      }
    });
    defineType(\\"TSTypeLiteral\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"members\\"],
      fields: {
        members: (0, _utils.validateArrayOfType)(\\"TSTypeElement\\")
      }
    });
    defineType(\\"TSArrayType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"elementType\\"],
      fields: {
        elementType: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSTupleType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"elementTypes\\"],
      fields: {
        elementTypes: (0, _utils.validateArrayOfType)([\\"TSType\\", \\"TSNamedTupleMember\\"])
      }
    });
    defineType(\\"TSOptionalType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"typeAnnotation\\"],
      fields: {
        typeAnnotation: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSRestType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"typeAnnotation\\"],
      fields: {
        typeAnnotation: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSNamedTupleMember\\", {
      visitor: [\\"label\\", \\"elementType\\"],
      builder: [\\"label\\", \\"elementType\\", \\"optional\\"],
      fields: {
        label: (0, _utils.validateType)(\\"Identifier\\"),
        optional: {
          validate: bool,
          default: false
        },
        elementType: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    var unionOrIntersection = {
      aliases: [\\"TSType\\"],
      visitor: [\\"types\\"],
      fields: {
        types: (0, _utils.validateArrayOfType)(\\"TSType\\")
      }
    };
    defineType(\\"TSUnionType\\", unionOrIntersection);
    defineType(\\"TSIntersectionType\\", unionOrIntersection);
    defineType(\\"TSConditionalType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"checkType\\", \\"extendsType\\", \\"trueType\\", \\"falseType\\"],
      fields: {
        checkType: (0, _utils.validateType)(\\"TSType\\"),
        extendsType: (0, _utils.validateType)(\\"TSType\\"),
        trueType: (0, _utils.validateType)(\\"TSType\\"),
        falseType: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSInferType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"typeParameter\\"],
      fields: {
        typeParameter: (0, _utils.validateType)(\\"TSTypeParameter\\")
      }
    });
    defineType(\\"TSParenthesizedType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"typeAnnotation\\"],
      fields: {
        typeAnnotation: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSTypeOperator\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"typeAnnotation\\"],
      fields: {
        operator: (0, _utils.validate)((0, _utils.assertValueType)(\\"string\\")),
        typeAnnotation: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSIndexedAccessType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"objectType\\", \\"indexType\\"],
      fields: {
        objectType: (0, _utils.validateType)(\\"TSType\\"),
        indexType: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSMappedType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"typeParameter\\", \\"typeAnnotation\\", \\"nameType\\"],
      fields: {
        readonly: (0, _utils.validateOptional)(bool),
        typeParameter: (0, _utils.validateType)(\\"TSTypeParameter\\"),
        optional: (0, _utils.validateOptional)(bool),
        typeAnnotation: (0, _utils.validateOptionalType)(\\"TSType\\"),
        nameType: (0, _utils.validateOptionalType)(\\"TSType\\")
      }
    });
    defineType(\\"TSLiteralType\\", {
      aliases: [\\"TSType\\", \\"TSBaseType\\"],
      visitor: [\\"literal\\"],
      fields: {
        literal: {
          validate: function() {
            const unaryExpression = (0, _utils.assertNodeType)(\\"NumericLiteral\\", \\"BigIntLiteral\\");
            const unaryOperator = (0, _utils.assertOneOf)(\\"-\\");
            const literal = (0, _utils.assertNodeType)(\\"NumericLiteral\\", \\"StringLiteral\\", \\"BooleanLiteral\\", \\"BigIntLiteral\\");
            function validator(parent, key, node) {
              if ((0, _is.default)(\\"UnaryExpression\\", node)) {
                unaryOperator(node, \\"operator\\", node.operator);
                unaryExpression(node, \\"argument\\", node.argument);
              } else {
                literal(parent, key, node);
              }
            }
            validator.oneOfNodeTypes = [\\"NumericLiteral\\", \\"StringLiteral\\", \\"BooleanLiteral\\", \\"BigIntLiteral\\", \\"UnaryExpression\\"];
            return validator;
          }()
        }
      }
    });
    defineType(\\"TSExpressionWithTypeArguments\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"expression\\", \\"typeParameters\\"],
      fields: {
        expression: (0, _utils.validateType)(\\"TSEntityName\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TSTypeParameterInstantiation\\")
      }
    });
    defineType(\\"TSInterfaceDeclaration\\", {
      aliases: [\\"Statement\\", \\"Declaration\\"],
      visitor: [\\"id\\", \\"typeParameters\\", \\"extends\\", \\"body\\"],
      fields: {
        declare: (0, _utils.validateOptional)(bool),
        id: (0, _utils.validateType)(\\"Identifier\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TSTypeParameterDeclaration\\"),
        extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\\"TSExpressionWithTypeArguments\\")),
        body: (0, _utils.validateType)(\\"TSInterfaceBody\\")
      }
    });
    defineType(\\"TSInterfaceBody\\", {
      visitor: [\\"body\\"],
      fields: {
        body: (0, _utils.validateArrayOfType)(\\"TSTypeElement\\")
      }
    });
    defineType(\\"TSTypeAliasDeclaration\\", {
      aliases: [\\"Statement\\", \\"Declaration\\"],
      visitor: [\\"id\\", \\"typeParameters\\", \\"typeAnnotation\\"],
      fields: {
        declare: (0, _utils.validateOptional)(bool),
        id: (0, _utils.validateType)(\\"Identifier\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TSTypeParameterDeclaration\\"),
        typeAnnotation: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSAsExpression\\", {
      aliases: [\\"Expression\\"],
      visitor: [\\"expression\\", \\"typeAnnotation\\"],
      fields: {
        expression: (0, _utils.validateType)(\\"Expression\\"),
        typeAnnotation: (0, _utils.validateType)(\\"TSType\\")
      }
    });
    defineType(\\"TSTypeAssertion\\", {
      aliases: [\\"Expression\\"],
      visitor: [\\"typeAnnotation\\", \\"expression\\"],
      fields: {
        typeAnnotation: (0, _utils.validateType)(\\"TSType\\"),
        expression: (0, _utils.validateType)(\\"Expression\\")
      }
    });
    defineType(\\"TSEnumDeclaration\\", {
      aliases: [\\"Statement\\", \\"Declaration\\"],
      visitor: [\\"id\\", \\"members\\"],
      fields: {
        declare: (0, _utils.validateOptional)(bool),
        const: (0, _utils.validateOptional)(bool),
        id: (0, _utils.validateType)(\\"Identifier\\"),
        members: (0, _utils.validateArrayOfType)(\\"TSEnumMember\\"),
        initializer: (0, _utils.validateOptionalType)(\\"Expression\\")
      }
    });
    defineType(\\"TSEnumMember\\", {
      visitor: [\\"id\\", \\"initializer\\"],
      fields: {
        id: (0, _utils.validateType)([\\"Identifier\\", \\"StringLiteral\\"]),
        initializer: (0, _utils.validateOptionalType)(\\"Expression\\")
      }
    });
    defineType(\\"TSModuleDeclaration\\", {
      aliases: [\\"Statement\\", \\"Declaration\\"],
      visitor: [\\"id\\", \\"body\\"],
      fields: {
        declare: (0, _utils.validateOptional)(bool),
        global: (0, _utils.validateOptional)(bool),
        id: (0, _utils.validateType)([\\"Identifier\\", \\"StringLiteral\\"]),
        body: (0, _utils.validateType)([\\"TSModuleBlock\\", \\"TSModuleDeclaration\\"])
      }
    });
    defineType(\\"TSModuleBlock\\", {
      aliases: [\\"Scopable\\", \\"Block\\", \\"BlockParent\\"],
      visitor: [\\"body\\"],
      fields: {
        body: (0, _utils.validateArrayOfType)(\\"Statement\\")
      }
    });
    defineType(\\"TSImportType\\", {
      aliases: [\\"TSType\\"],
      visitor: [\\"argument\\", \\"qualifier\\", \\"typeParameters\\"],
      fields: {
        argument: (0, _utils.validateType)(\\"StringLiteral\\"),
        qualifier: (0, _utils.validateOptionalType)(\\"TSEntityName\\"),
        typeParameters: (0, _utils.validateOptionalType)(\\"TSTypeParameterInstantiation\\")
      }
    });
    defineType(\\"TSImportEqualsDeclaration\\", {
      aliases: [\\"Statement\\"],
      visitor: [\\"id\\", \\"moduleReference\\"],
      fields: {
        isExport: (0, _utils.validate)(bool),
        id: (0, _utils.validateType)(\\"Identifier\\"),
        moduleReference: (0, _utils.validateType)([\\"TSEntityName\\", \\"TSExternalModuleReference\\"]),
        importKind: {
          validate: (0, _utils.assertOneOf)(\\"type\\", \\"value\\"),
          optional: true
        }
      }
    });
    defineType(\\"TSExternalModuleReference\\", {
      visitor: [\\"expression\\"],
      fields: {
        expression: (0, _utils.validateType)(\\"StringLiteral\\")
      }
    });
    defineType(\\"TSNonNullExpression\\", {
      aliases: [\\"Expression\\"],
      visitor: [\\"expression\\"],
      fields: {
        expression: (0, _utils.validateType)(\\"Expression\\")
      }
    });
    defineType(\\"TSExportAssignment\\", {
      aliases: [\\"Statement\\"],
      visitor: [\\"expression\\"],
      fields: {
        expression: (0, _utils.validateType)(\\"Expression\\")
      }
    });
    defineType(\\"TSNamespaceExportDeclaration\\", {
      aliases: [\\"Statement\\"],
      visitor: [\\"id\\"],
      fields: {
        id: (0, _utils.validateType)(\\"Identifier\\")
      }
    });
    defineType(\\"TSTypeAnnotation\\", {
      visitor: [\\"typeAnnotation\\"],
      fields: {
        typeAnnotation: {
          validate: (0, _utils.assertNodeType)(\\"TSType\\")
        }
      }
    });
    defineType(\\"TSTypeParameterInstantiation\\", {
      visitor: [\\"params\\"],
      fields: {
        params: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"TSType\\")))
        }
      }
    });
    defineType(\\"TSTypeParameterDeclaration\\", {
      visitor: [\\"params\\"],
      fields: {
        params: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)(\\"array\\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\\"TSTypeParameter\\")))
        }
      }
    });
    defineType(\\"TSTypeParameter\\", {
      builder: [\\"constraint\\", \\"default\\", \\"name\\"],
      visitor: [\\"constraint\\", \\"default\\"],
      fields: {
        name: {
          validate: (0, _utils.assertValueType)(\\"string\\")
        },
        constraint: {
          validate: (0, _utils.assertNodeType)(\\"TSType\\"),
          optional: true
        },
        default: {
          validate: (0, _utils.assertNodeType)(\\"TSType\\"),
          optional: true
        }
      }
    });
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/index.js
var require_definitions = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/definitions/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports, \\"ALIAS_KEYS\\", {
      enumerable: true,
      get: function() {
        return _utils.ALIAS_KEYS;
      }
    });
    Object.defineProperty(exports, \\"BUILDER_KEYS\\", {
      enumerable: true,
      get: function() {
        return _utils.BUILDER_KEYS;
      }
    });
    Object.defineProperty(exports, \\"DEPRECATED_KEYS\\", {
      enumerable: true,
      get: function() {
        return _utils.DEPRECATED_KEYS;
      }
    });
    Object.defineProperty(exports, \\"FLIPPED_ALIAS_KEYS\\", {
      enumerable: true,
      get: function() {
        return _utils.FLIPPED_ALIAS_KEYS;
      }
    });
    Object.defineProperty(exports, \\"NODE_FIELDS\\", {
      enumerable: true,
      get: function() {
        return _utils.NODE_FIELDS;
      }
    });
    Object.defineProperty(exports, \\"NODE_PARENT_VALIDATIONS\\", {
      enumerable: true,
      get: function() {
        return _utils.NODE_PARENT_VALIDATIONS;
      }
    });
    Object.defineProperty(exports, \\"PLACEHOLDERS\\", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS;
      }
    });
    Object.defineProperty(exports, \\"PLACEHOLDERS_ALIAS\\", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS_ALIAS;
      }
    });
    Object.defineProperty(exports, \\"PLACEHOLDERS_FLIPPED_ALIAS\\", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
      }
    });
    exports.TYPES = void 0;
    Object.defineProperty(exports, \\"VISITOR_KEYS\\", {
      enumerable: true,
      get: function() {
        return _utils.VISITOR_KEYS;
      }
    });
    var _toFastProperties = require_to_fast_properties();
    require_core();
    require_flow();
    require_jsx();
    require_misc();
    require_experimental();
    require_typescript();
    var _utils = require_utils();
    var _placeholders = require_placeholders();
    _toFastProperties(_utils.VISITOR_KEYS);
    _toFastProperties(_utils.ALIAS_KEYS);
    _toFastProperties(_utils.FLIPPED_ALIAS_KEYS);
    _toFastProperties(_utils.NODE_FIELDS);
    _toFastProperties(_utils.BUILDER_KEYS);
    _toFastProperties(_utils.DEPRECATED_KEYS);
    _toFastProperties(_placeholders.PLACEHOLDERS_ALIAS);
    _toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);
    var TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
    exports.TYPES = TYPES;
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/builder.js
var require_builder = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/builder.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = builder;
    var _definitions = require_definitions();
    var _validate = require_validate();
    function builder() {
      const type = this;
      const keys = _definitions.BUILDER_KEYS[type];
      const countArgs = arguments.length;
      if (countArgs > keys.length) {
        throw new Error(\`\${type}: Too many arguments passed. Received \${countArgs} but can receive no more than \${keys.length}\`);
      }
      const node = {
        type
      };
      for (let i = 0; i < keys.length; ++i) {
        const key = keys[i];
        const field = _definitions.NODE_FIELDS[type][key];
        let arg;
        if (i < countArgs)
          arg = arguments[i];
        if (arg === void 0) {
          arg = Array.isArray(field.default) ? [] : field.default;
        }
        node[key] = arg;
      }
      for (const key in node) {
        (0, _validate.default)(node, key, node[key]);
      }
      return node;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/generated/index.js
var require_generated2 = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/generated/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.anyTypeAnnotation = anyTypeAnnotation;
    exports.argumentPlaceholder = argumentPlaceholder;
    exports.arrayExpression = arrayExpression;
    exports.arrayPattern = arrayPattern;
    exports.arrayTypeAnnotation = arrayTypeAnnotation;
    exports.arrowFunctionExpression = arrowFunctionExpression;
    exports.assignmentExpression = assignmentExpression;
    exports.assignmentPattern = assignmentPattern;
    exports.awaitExpression = awaitExpression;
    exports.bigIntLiteral = bigIntLiteral;
    exports.binaryExpression = binaryExpression;
    exports.bindExpression = bindExpression;
    exports.blockStatement = blockStatement;
    exports.booleanLiteral = booleanLiteral;
    exports.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
    exports.booleanTypeAnnotation = booleanTypeAnnotation;
    exports.breakStatement = breakStatement;
    exports.callExpression = callExpression;
    exports.catchClause = catchClause;
    exports.classBody = classBody;
    exports.classDeclaration = classDeclaration;
    exports.classExpression = classExpression;
    exports.classImplements = classImplements;
    exports.classMethod = classMethod;
    exports.classPrivateMethod = classPrivateMethod;
    exports.classPrivateProperty = classPrivateProperty;
    exports.classProperty = classProperty;
    exports.conditionalExpression = conditionalExpression;
    exports.continueStatement = continueStatement;
    exports.debuggerStatement = debuggerStatement;
    exports.decimalLiteral = decimalLiteral;
    exports.declareClass = declareClass;
    exports.declareExportAllDeclaration = declareExportAllDeclaration;
    exports.declareExportDeclaration = declareExportDeclaration;
    exports.declareFunction = declareFunction;
    exports.declareInterface = declareInterface;
    exports.declareModule = declareModule;
    exports.declareModuleExports = declareModuleExports;
    exports.declareOpaqueType = declareOpaqueType;
    exports.declareTypeAlias = declareTypeAlias;
    exports.declareVariable = declareVariable;
    exports.declaredPredicate = declaredPredicate;
    exports.decorator = decorator;
    exports.directive = directive;
    exports.directiveLiteral = directiveLiteral;
    exports.doExpression = doExpression;
    exports.doWhileStatement = doWhileStatement;
    exports.emptyStatement = emptyStatement;
    exports.emptyTypeAnnotation = emptyTypeAnnotation;
    exports.enumBooleanBody = enumBooleanBody;
    exports.enumBooleanMember = enumBooleanMember;
    exports.enumDeclaration = enumDeclaration;
    exports.enumDefaultedMember = enumDefaultedMember;
    exports.enumNumberBody = enumNumberBody;
    exports.enumNumberMember = enumNumberMember;
    exports.enumStringBody = enumStringBody;
    exports.enumStringMember = enumStringMember;
    exports.enumSymbolBody = enumSymbolBody;
    exports.existsTypeAnnotation = existsTypeAnnotation;
    exports.exportAllDeclaration = exportAllDeclaration;
    exports.exportDefaultDeclaration = exportDefaultDeclaration;
    exports.exportDefaultSpecifier = exportDefaultSpecifier;
    exports.exportNamedDeclaration = exportNamedDeclaration;
    exports.exportNamespaceSpecifier = exportNamespaceSpecifier;
    exports.exportSpecifier = exportSpecifier;
    exports.expressionStatement = expressionStatement;
    exports.file = file;
    exports.forInStatement = forInStatement;
    exports.forOfStatement = forOfStatement;
    exports.forStatement = forStatement;
    exports.functionDeclaration = functionDeclaration;
    exports.functionExpression = functionExpression;
    exports.functionTypeAnnotation = functionTypeAnnotation;
    exports.functionTypeParam = functionTypeParam;
    exports.genericTypeAnnotation = genericTypeAnnotation;
    exports.identifier = identifier;
    exports.ifStatement = ifStatement;
    exports.import = _import;
    exports.importAttribute = importAttribute;
    exports.importDeclaration = importDeclaration;
    exports.importDefaultSpecifier = importDefaultSpecifier;
    exports.importNamespaceSpecifier = importNamespaceSpecifier;
    exports.importSpecifier = importSpecifier;
    exports.indexedAccessType = indexedAccessType;
    exports.inferredPredicate = inferredPredicate;
    exports.interfaceDeclaration = interfaceDeclaration;
    exports.interfaceExtends = interfaceExtends;
    exports.interfaceTypeAnnotation = interfaceTypeAnnotation;
    exports.interpreterDirective = interpreterDirective;
    exports.intersectionTypeAnnotation = intersectionTypeAnnotation;
    exports.jSXAttribute = exports.jsxAttribute = jsxAttribute;
    exports.jSXClosingElement = exports.jsxClosingElement = jsxClosingElement;
    exports.jSXClosingFragment = exports.jsxClosingFragment = jsxClosingFragment;
    exports.jSXElement = exports.jsxElement = jsxElement;
    exports.jSXEmptyExpression = exports.jsxEmptyExpression = jsxEmptyExpression;
    exports.jSXExpressionContainer = exports.jsxExpressionContainer = jsxExpressionContainer;
    exports.jSXFragment = exports.jsxFragment = jsxFragment;
    exports.jSXIdentifier = exports.jsxIdentifier = jsxIdentifier;
    exports.jSXMemberExpression = exports.jsxMemberExpression = jsxMemberExpression;
    exports.jSXNamespacedName = exports.jsxNamespacedName = jsxNamespacedName;
    exports.jSXOpeningElement = exports.jsxOpeningElement = jsxOpeningElement;
    exports.jSXOpeningFragment = exports.jsxOpeningFragment = jsxOpeningFragment;
    exports.jSXSpreadAttribute = exports.jsxSpreadAttribute = jsxSpreadAttribute;
    exports.jSXSpreadChild = exports.jsxSpreadChild = jsxSpreadChild;
    exports.jSXText = exports.jsxText = jsxText;
    exports.labeledStatement = labeledStatement;
    exports.logicalExpression = logicalExpression;
    exports.memberExpression = memberExpression;
    exports.metaProperty = metaProperty;
    exports.mixedTypeAnnotation = mixedTypeAnnotation;
    exports.moduleExpression = moduleExpression;
    exports.newExpression = newExpression;
    exports.noop = noop;
    exports.nullLiteral = nullLiteral;
    exports.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
    exports.nullableTypeAnnotation = nullableTypeAnnotation;
    exports.numberLiteral = NumberLiteral;
    exports.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
    exports.numberTypeAnnotation = numberTypeAnnotation;
    exports.numericLiteral = numericLiteral;
    exports.objectExpression = objectExpression;
    exports.objectMethod = objectMethod;
    exports.objectPattern = objectPattern;
    exports.objectProperty = objectProperty;
    exports.objectTypeAnnotation = objectTypeAnnotation;
    exports.objectTypeCallProperty = objectTypeCallProperty;
    exports.objectTypeIndexer = objectTypeIndexer;
    exports.objectTypeInternalSlot = objectTypeInternalSlot;
    exports.objectTypeProperty = objectTypeProperty;
    exports.objectTypeSpreadProperty = objectTypeSpreadProperty;
    exports.opaqueType = opaqueType;
    exports.optionalCallExpression = optionalCallExpression;
    exports.optionalIndexedAccessType = optionalIndexedAccessType;
    exports.optionalMemberExpression = optionalMemberExpression;
    exports.parenthesizedExpression = parenthesizedExpression;
    exports.pipelineBareFunction = pipelineBareFunction;
    exports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
    exports.pipelineTopicExpression = pipelineTopicExpression;
    exports.placeholder = placeholder;
    exports.privateName = privateName;
    exports.program = program;
    exports.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
    exports.recordExpression = recordExpression;
    exports.regExpLiteral = regExpLiteral;
    exports.regexLiteral = RegexLiteral;
    exports.restElement = restElement;
    exports.restProperty = RestProperty;
    exports.returnStatement = returnStatement;
    exports.sequenceExpression = sequenceExpression;
    exports.spreadElement = spreadElement;
    exports.spreadProperty = SpreadProperty;
    exports.staticBlock = staticBlock;
    exports.stringLiteral = stringLiteral;
    exports.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
    exports.stringTypeAnnotation = stringTypeAnnotation;
    exports.super = _super;
    exports.switchCase = switchCase;
    exports.switchStatement = switchStatement;
    exports.symbolTypeAnnotation = symbolTypeAnnotation;
    exports.taggedTemplateExpression = taggedTemplateExpression;
    exports.templateElement = templateElement;
    exports.templateLiteral = templateLiteral;
    exports.thisExpression = thisExpression;
    exports.thisTypeAnnotation = thisTypeAnnotation;
    exports.throwStatement = throwStatement;
    exports.topicReference = topicReference;
    exports.tryStatement = tryStatement;
    exports.tSAnyKeyword = exports.tsAnyKeyword = tsAnyKeyword;
    exports.tSArrayType = exports.tsArrayType = tsArrayType;
    exports.tSAsExpression = exports.tsAsExpression = tsAsExpression;
    exports.tSBigIntKeyword = exports.tsBigIntKeyword = tsBigIntKeyword;
    exports.tSBooleanKeyword = exports.tsBooleanKeyword = tsBooleanKeyword;
    exports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
    exports.tSConditionalType = exports.tsConditionalType = tsConditionalType;
    exports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
    exports.tSConstructorType = exports.tsConstructorType = tsConstructorType;
    exports.tSDeclareFunction = exports.tsDeclareFunction = tsDeclareFunction;
    exports.tSDeclareMethod = exports.tsDeclareMethod = tsDeclareMethod;
    exports.tSEnumDeclaration = exports.tsEnumDeclaration = tsEnumDeclaration;
    exports.tSEnumMember = exports.tsEnumMember = tsEnumMember;
    exports.tSExportAssignment = exports.tsExportAssignment = tsExportAssignment;
    exports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
    exports.tSExternalModuleReference = exports.tsExternalModuleReference = tsExternalModuleReference;
    exports.tSFunctionType = exports.tsFunctionType = tsFunctionType;
    exports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
    exports.tSImportType = exports.tsImportType = tsImportType;
    exports.tSIndexSignature = exports.tsIndexSignature = tsIndexSignature;
    exports.tSIndexedAccessType = exports.tsIndexedAccessType = tsIndexedAccessType;
    exports.tSInferType = exports.tsInferType = tsInferType;
    exports.tSInterfaceBody = exports.tsInterfaceBody = tsInterfaceBody;
    exports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = tsInterfaceDeclaration;
    exports.tSIntersectionType = exports.tsIntersectionType = tsIntersectionType;
    exports.tSIntrinsicKeyword = exports.tsIntrinsicKeyword = tsIntrinsicKeyword;
    exports.tSLiteralType = exports.tsLiteralType = tsLiteralType;
    exports.tSMappedType = exports.tsMappedType = tsMappedType;
    exports.tSMethodSignature = exports.tsMethodSignature = tsMethodSignature;
    exports.tSModuleBlock = exports.tsModuleBlock = tsModuleBlock;
    exports.tSModuleDeclaration = exports.tsModuleDeclaration = tsModuleDeclaration;
    exports.tSNamedTupleMember = exports.tsNamedTupleMember = tsNamedTupleMember;
    exports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
    exports.tSNeverKeyword = exports.tsNeverKeyword = tsNeverKeyword;
    exports.tSNonNullExpression = exports.tsNonNullExpression = tsNonNullExpression;
    exports.tSNullKeyword = exports.tsNullKeyword = tsNullKeyword;
    exports.tSNumberKeyword = exports.tsNumberKeyword = tsNumberKeyword;
    exports.tSObjectKeyword = exports.tsObjectKeyword = tsObjectKeyword;
    exports.tSOptionalType = exports.tsOptionalType = tsOptionalType;
    exports.tSParameterProperty = exports.tsParameterProperty = tsParameterProperty;
    exports.tSParenthesizedType = exports.tsParenthesizedType = tsParenthesizedType;
    exports.tSPropertySignature = exports.tsPropertySignature = tsPropertySignature;
    exports.tSQualifiedName = exports.tsQualifiedName = tsQualifiedName;
    exports.tSRestType = exports.tsRestType = tsRestType;
    exports.tSStringKeyword = exports.tsStringKeyword = tsStringKeyword;
    exports.tSSymbolKeyword = exports.tsSymbolKeyword = tsSymbolKeyword;
    exports.tSThisType = exports.tsThisType = tsThisType;
    exports.tSTupleType = exports.tsTupleType = tsTupleType;
    exports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
    exports.tSTypeAnnotation = exports.tsTypeAnnotation = tsTypeAnnotation;
    exports.tSTypeAssertion = exports.tsTypeAssertion = tsTypeAssertion;
    exports.tSTypeLiteral = exports.tsTypeLiteral = tsTypeLiteral;
    exports.tSTypeOperator = exports.tsTypeOperator = tsTypeOperator;
    exports.tSTypeParameter = exports.tsTypeParameter = tsTypeParameter;
    exports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
    exports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
    exports.tSTypePredicate = exports.tsTypePredicate = tsTypePredicate;
    exports.tSTypeQuery = exports.tsTypeQuery = tsTypeQuery;
    exports.tSTypeReference = exports.tsTypeReference = tsTypeReference;
    exports.tSUndefinedKeyword = exports.tsUndefinedKeyword = tsUndefinedKeyword;
    exports.tSUnionType = exports.tsUnionType = tsUnionType;
    exports.tSUnknownKeyword = exports.tsUnknownKeyword = tsUnknownKeyword;
    exports.tSVoidKeyword = exports.tsVoidKeyword = tsVoidKeyword;
    exports.tupleExpression = tupleExpression;
    exports.tupleTypeAnnotation = tupleTypeAnnotation;
    exports.typeAlias = typeAlias;
    exports.typeAnnotation = typeAnnotation;
    exports.typeCastExpression = typeCastExpression;
    exports.typeParameter = typeParameter;
    exports.typeParameterDeclaration = typeParameterDeclaration;
    exports.typeParameterInstantiation = typeParameterInstantiation;
    exports.typeofTypeAnnotation = typeofTypeAnnotation;
    exports.unaryExpression = unaryExpression;
    exports.unionTypeAnnotation = unionTypeAnnotation;
    exports.updateExpression = updateExpression;
    exports.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
    exports.variableDeclaration = variableDeclaration;
    exports.variableDeclarator = variableDeclarator;
    exports.variance = variance;
    exports.voidTypeAnnotation = voidTypeAnnotation;
    exports.whileStatement = whileStatement;
    exports.withStatement = withStatement;
    exports.yieldExpression = yieldExpression;
    var _builder = require_builder();
    function arrayExpression(elements) {
      return _builder.default.apply(\\"ArrayExpression\\", arguments);
    }
    function assignmentExpression(operator, left, right) {
      return _builder.default.apply(\\"AssignmentExpression\\", arguments);
    }
    function binaryExpression(operator, left, right) {
      return _builder.default.apply(\\"BinaryExpression\\", arguments);
    }
    function interpreterDirective(value) {
      return _builder.default.apply(\\"InterpreterDirective\\", arguments);
    }
    function directive(value) {
      return _builder.default.apply(\\"Directive\\", arguments);
    }
    function directiveLiteral(value) {
      return _builder.default.apply(\\"DirectiveLiteral\\", arguments);
    }
    function blockStatement(body, directives) {
      return _builder.default.apply(\\"BlockStatement\\", arguments);
    }
    function breakStatement(label) {
      return _builder.default.apply(\\"BreakStatement\\", arguments);
    }
    function callExpression(callee, _arguments) {
      return _builder.default.apply(\\"CallExpression\\", arguments);
    }
    function catchClause(param, body) {
      return _builder.default.apply(\\"CatchClause\\", arguments);
    }
    function conditionalExpression(test, consequent, alternate) {
      return _builder.default.apply(\\"ConditionalExpression\\", arguments);
    }
    function continueStatement(label) {
      return _builder.default.apply(\\"ContinueStatement\\", arguments);
    }
    function debuggerStatement() {
      return _builder.default.apply(\\"DebuggerStatement\\", arguments);
    }
    function doWhileStatement(test, body) {
      return _builder.default.apply(\\"DoWhileStatement\\", arguments);
    }
    function emptyStatement() {
      return _builder.default.apply(\\"EmptyStatement\\", arguments);
    }
    function expressionStatement(expression) {
      return _builder.default.apply(\\"ExpressionStatement\\", arguments);
    }
    function file(program2, comments, tokens) {
      return _builder.default.apply(\\"File\\", arguments);
    }
    function forInStatement(left, right, body) {
      return _builder.default.apply(\\"ForInStatement\\", arguments);
    }
    function forStatement(init, test, update, body) {
      return _builder.default.apply(\\"ForStatement\\", arguments);
    }
    function functionDeclaration(id, params, body, generator, async) {
      return _builder.default.apply(\\"FunctionDeclaration\\", arguments);
    }
    function functionExpression(id, params, body, generator, async) {
      return _builder.default.apply(\\"FunctionExpression\\", arguments);
    }
    function identifier(name) {
      return _builder.default.apply(\\"Identifier\\", arguments);
    }
    function ifStatement(test, consequent, alternate) {
      return _builder.default.apply(\\"IfStatement\\", arguments);
    }
    function labeledStatement(label, body) {
      return _builder.default.apply(\\"LabeledStatement\\", arguments);
    }
    function stringLiteral(value) {
      return _builder.default.apply(\\"StringLiteral\\", arguments);
    }
    function numericLiteral(value) {
      return _builder.default.apply(\\"NumericLiteral\\", arguments);
    }
    function nullLiteral() {
      return _builder.default.apply(\\"NullLiteral\\", arguments);
    }
    function booleanLiteral(value) {
      return _builder.default.apply(\\"BooleanLiteral\\", arguments);
    }
    function regExpLiteral(pattern, flags) {
      return _builder.default.apply(\\"RegExpLiteral\\", arguments);
    }
    function logicalExpression(operator, left, right) {
      return _builder.default.apply(\\"LogicalExpression\\", arguments);
    }
    function memberExpression(object, property, computed, optional) {
      return _builder.default.apply(\\"MemberExpression\\", arguments);
    }
    function newExpression(callee, _arguments) {
      return _builder.default.apply(\\"NewExpression\\", arguments);
    }
    function program(body, directives, sourceType, interpreter) {
      return _builder.default.apply(\\"Program\\", arguments);
    }
    function objectExpression(properties) {
      return _builder.default.apply(\\"ObjectExpression\\", arguments);
    }
    function objectMethod(kind, key, params, body, computed, generator, async) {
      return _builder.default.apply(\\"ObjectMethod\\", arguments);
    }
    function objectProperty(key, value, computed, shorthand, decorators) {
      return _builder.default.apply(\\"ObjectProperty\\", arguments);
    }
    function restElement(argument) {
      return _builder.default.apply(\\"RestElement\\", arguments);
    }
    function returnStatement(argument) {
      return _builder.default.apply(\\"ReturnStatement\\", arguments);
    }
    function sequenceExpression(expressions) {
      return _builder.default.apply(\\"SequenceExpression\\", arguments);
    }
    function parenthesizedExpression(expression) {
      return _builder.default.apply(\\"ParenthesizedExpression\\", arguments);
    }
    function switchCase(test, consequent) {
      return _builder.default.apply(\\"SwitchCase\\", arguments);
    }
    function switchStatement(discriminant, cases) {
      return _builder.default.apply(\\"SwitchStatement\\", arguments);
    }
    function thisExpression() {
      return _builder.default.apply(\\"ThisExpression\\", arguments);
    }
    function throwStatement(argument) {
      return _builder.default.apply(\\"ThrowStatement\\", arguments);
    }
    function tryStatement(block, handler, finalizer) {
      return _builder.default.apply(\\"TryStatement\\", arguments);
    }
    function unaryExpression(operator, argument, prefix) {
      return _builder.default.apply(\\"UnaryExpression\\", arguments);
    }
    function updateExpression(operator, argument, prefix) {
      return _builder.default.apply(\\"UpdateExpression\\", arguments);
    }
    function variableDeclaration(kind, declarations) {
      return _builder.default.apply(\\"VariableDeclaration\\", arguments);
    }
    function variableDeclarator(id, init) {
      return _builder.default.apply(\\"VariableDeclarator\\", arguments);
    }
    function whileStatement(test, body) {
      return _builder.default.apply(\\"WhileStatement\\", arguments);
    }
    function withStatement(object, body) {
      return _builder.default.apply(\\"WithStatement\\", arguments);
    }
    function assignmentPattern(left, right) {
      return _builder.default.apply(\\"AssignmentPattern\\", arguments);
    }
    function arrayPattern(elements) {
      return _builder.default.apply(\\"ArrayPattern\\", arguments);
    }
    function arrowFunctionExpression(params, body, async) {
      return _builder.default.apply(\\"ArrowFunctionExpression\\", arguments);
    }
    function classBody(body) {
      return _builder.default.apply(\\"ClassBody\\", arguments);
    }
    function classExpression(id, superClass, body, decorators) {
      return _builder.default.apply(\\"ClassExpression\\", arguments);
    }
    function classDeclaration(id, superClass, body, decorators) {
      return _builder.default.apply(\\"ClassDeclaration\\", arguments);
    }
    function exportAllDeclaration(source) {
      return _builder.default.apply(\\"ExportAllDeclaration\\", arguments);
    }
    function exportDefaultDeclaration(declaration) {
      return _builder.default.apply(\\"ExportDefaultDeclaration\\", arguments);
    }
    function exportNamedDeclaration(declaration, specifiers, source) {
      return _builder.default.apply(\\"ExportNamedDeclaration\\", arguments);
    }
    function exportSpecifier(local, exported) {
      return _builder.default.apply(\\"ExportSpecifier\\", arguments);
    }
    function forOfStatement(left, right, body, _await) {
      return _builder.default.apply(\\"ForOfStatement\\", arguments);
    }
    function importDeclaration(specifiers, source) {
      return _builder.default.apply(\\"ImportDeclaration\\", arguments);
    }
    function importDefaultSpecifier(local) {
      return _builder.default.apply(\\"ImportDefaultSpecifier\\", arguments);
    }
    function importNamespaceSpecifier(local) {
      return _builder.default.apply(\\"ImportNamespaceSpecifier\\", arguments);
    }
    function importSpecifier(local, imported) {
      return _builder.default.apply(\\"ImportSpecifier\\", arguments);
    }
    function metaProperty(meta, property) {
      return _builder.default.apply(\\"MetaProperty\\", arguments);
    }
    function classMethod(kind, key, params, body, computed, _static, generator, async) {
      return _builder.default.apply(\\"ClassMethod\\", arguments);
    }
    function objectPattern(properties) {
      return _builder.default.apply(\\"ObjectPattern\\", arguments);
    }
    function spreadElement(argument) {
      return _builder.default.apply(\\"SpreadElement\\", arguments);
    }
    function _super() {
      return _builder.default.apply(\\"Super\\", arguments);
    }
    function taggedTemplateExpression(tag, quasi) {
      return _builder.default.apply(\\"TaggedTemplateExpression\\", arguments);
    }
    function templateElement(value, tail) {
      return _builder.default.apply(\\"TemplateElement\\", arguments);
    }
    function templateLiteral(quasis, expressions) {
      return _builder.default.apply(\\"TemplateLiteral\\", arguments);
    }
    function yieldExpression(argument, delegate) {
      return _builder.default.apply(\\"YieldExpression\\", arguments);
    }
    function awaitExpression(argument) {
      return _builder.default.apply(\\"AwaitExpression\\", arguments);
    }
    function _import() {
      return _builder.default.apply(\\"Import\\", arguments);
    }
    function bigIntLiteral(value) {
      return _builder.default.apply(\\"BigIntLiteral\\", arguments);
    }
    function exportNamespaceSpecifier(exported) {
      return _builder.default.apply(\\"ExportNamespaceSpecifier\\", arguments);
    }
    function optionalMemberExpression(object, property, computed, optional) {
      return _builder.default.apply(\\"OptionalMemberExpression\\", arguments);
    }
    function optionalCallExpression(callee, _arguments, optional) {
      return _builder.default.apply(\\"OptionalCallExpression\\", arguments);
    }
    function classProperty(key, value, typeAnnotation2, decorators, computed, _static) {
      return _builder.default.apply(\\"ClassProperty\\", arguments);
    }
    function classPrivateProperty(key, value, decorators, _static) {
      return _builder.default.apply(\\"ClassPrivateProperty\\", arguments);
    }
    function classPrivateMethod(kind, key, params, body, _static) {
      return _builder.default.apply(\\"ClassPrivateMethod\\", arguments);
    }
    function privateName(id) {
      return _builder.default.apply(\\"PrivateName\\", arguments);
    }
    function staticBlock(body) {
      return _builder.default.apply(\\"StaticBlock\\", arguments);
    }
    function anyTypeAnnotation() {
      return _builder.default.apply(\\"AnyTypeAnnotation\\", arguments);
    }
    function arrayTypeAnnotation(elementType) {
      return _builder.default.apply(\\"ArrayTypeAnnotation\\", arguments);
    }
    function booleanTypeAnnotation() {
      return _builder.default.apply(\\"BooleanTypeAnnotation\\", arguments);
    }
    function booleanLiteralTypeAnnotation(value) {
      return _builder.default.apply(\\"BooleanLiteralTypeAnnotation\\", arguments);
    }
    function nullLiteralTypeAnnotation() {
      return _builder.default.apply(\\"NullLiteralTypeAnnotation\\", arguments);
    }
    function classImplements(id, typeParameters) {
      return _builder.default.apply(\\"ClassImplements\\", arguments);
    }
    function declareClass(id, typeParameters, _extends, body) {
      return _builder.default.apply(\\"DeclareClass\\", arguments);
    }
    function declareFunction(id) {
      return _builder.default.apply(\\"DeclareFunction\\", arguments);
    }
    function declareInterface(id, typeParameters, _extends, body) {
      return _builder.default.apply(\\"DeclareInterface\\", arguments);
    }
    function declareModule(id, body, kind) {
      return _builder.default.apply(\\"DeclareModule\\", arguments);
    }
    function declareModuleExports(typeAnnotation2) {
      return _builder.default.apply(\\"DeclareModuleExports\\", arguments);
    }
    function declareTypeAlias(id, typeParameters, right) {
      return _builder.default.apply(\\"DeclareTypeAlias\\", arguments);
    }
    function declareOpaqueType(id, typeParameters, supertype) {
      return _builder.default.apply(\\"DeclareOpaqueType\\", arguments);
    }
    function declareVariable(id) {
      return _builder.default.apply(\\"DeclareVariable\\", arguments);
    }
    function declareExportDeclaration(declaration, specifiers, source) {
      return _builder.default.apply(\\"DeclareExportDeclaration\\", arguments);
    }
    function declareExportAllDeclaration(source) {
      return _builder.default.apply(\\"DeclareExportAllDeclaration\\", arguments);
    }
    function declaredPredicate(value) {
      return _builder.default.apply(\\"DeclaredPredicate\\", arguments);
    }
    function existsTypeAnnotation() {
      return _builder.default.apply(\\"ExistsTypeAnnotation\\", arguments);
    }
    function functionTypeAnnotation(typeParameters, params, rest, returnType) {
      return _builder.default.apply(\\"FunctionTypeAnnotation\\", arguments);
    }
    function functionTypeParam(name, typeAnnotation2) {
      return _builder.default.apply(\\"FunctionTypeParam\\", arguments);
    }
    function genericTypeAnnotation(id, typeParameters) {
      return _builder.default.apply(\\"GenericTypeAnnotation\\", arguments);
    }
    function inferredPredicate() {
      return _builder.default.apply(\\"InferredPredicate\\", arguments);
    }
    function interfaceExtends(id, typeParameters) {
      return _builder.default.apply(\\"InterfaceExtends\\", arguments);
    }
    function interfaceDeclaration(id, typeParameters, _extends, body) {
      return _builder.default.apply(\\"InterfaceDeclaration\\", arguments);
    }
    function interfaceTypeAnnotation(_extends, body) {
      return _builder.default.apply(\\"InterfaceTypeAnnotation\\", arguments);
    }
    function intersectionTypeAnnotation(types) {
      return _builder.default.apply(\\"IntersectionTypeAnnotation\\", arguments);
    }
    function mixedTypeAnnotation() {
      return _builder.default.apply(\\"MixedTypeAnnotation\\", arguments);
    }
    function emptyTypeAnnotation() {
      return _builder.default.apply(\\"EmptyTypeAnnotation\\", arguments);
    }
    function nullableTypeAnnotation(typeAnnotation2) {
      return _builder.default.apply(\\"NullableTypeAnnotation\\", arguments);
    }
    function numberLiteralTypeAnnotation(value) {
      return _builder.default.apply(\\"NumberLiteralTypeAnnotation\\", arguments);
    }
    function numberTypeAnnotation() {
      return _builder.default.apply(\\"NumberTypeAnnotation\\", arguments);
    }
    function objectTypeAnnotation(properties, indexers, callProperties, internalSlots, exact) {
      return _builder.default.apply(\\"ObjectTypeAnnotation\\", arguments);
    }
    function objectTypeInternalSlot(id, value, optional, _static, method) {
      return _builder.default.apply(\\"ObjectTypeInternalSlot\\", arguments);
    }
    function objectTypeCallProperty(value) {
      return _builder.default.apply(\\"ObjectTypeCallProperty\\", arguments);
    }
    function objectTypeIndexer(id, key, value, variance2) {
      return _builder.default.apply(\\"ObjectTypeIndexer\\", arguments);
    }
    function objectTypeProperty(key, value, variance2) {
      return _builder.default.apply(\\"ObjectTypeProperty\\", arguments);
    }
    function objectTypeSpreadProperty(argument) {
      return _builder.default.apply(\\"ObjectTypeSpreadProperty\\", arguments);
    }
    function opaqueType(id, typeParameters, supertype, impltype) {
      return _builder.default.apply(\\"OpaqueType\\", arguments);
    }
    function qualifiedTypeIdentifier(id, qualification) {
      return _builder.default.apply(\\"QualifiedTypeIdentifier\\", arguments);
    }
    function stringLiteralTypeAnnotation(value) {
      return _builder.default.apply(\\"StringLiteralTypeAnnotation\\", arguments);
    }
    function stringTypeAnnotation() {
      return _builder.default.apply(\\"StringTypeAnnotation\\", arguments);
    }
    function symbolTypeAnnotation() {
      return _builder.default.apply(\\"SymbolTypeAnnotation\\", arguments);
    }
    function thisTypeAnnotation() {
      return _builder.default.apply(\\"ThisTypeAnnotation\\", arguments);
    }
    function tupleTypeAnnotation(types) {
      return _builder.default.apply(\\"TupleTypeAnnotation\\", arguments);
    }
    function typeofTypeAnnotation(argument) {
      return _builder.default.apply(\\"TypeofTypeAnnotation\\", arguments);
    }
    function typeAlias(id, typeParameters, right) {
      return _builder.default.apply(\\"TypeAlias\\", arguments);
    }
    function typeAnnotation(typeAnnotation2) {
      return _builder.default.apply(\\"TypeAnnotation\\", arguments);
    }
    function typeCastExpression(expression, typeAnnotation2) {
      return _builder.default.apply(\\"TypeCastExpression\\", arguments);
    }
    function typeParameter(bound, _default, variance2) {
      return _builder.default.apply(\\"TypeParameter\\", arguments);
    }
    function typeParameterDeclaration(params) {
      return _builder.default.apply(\\"TypeParameterDeclaration\\", arguments);
    }
    function typeParameterInstantiation(params) {
      return _builder.default.apply(\\"TypeParameterInstantiation\\", arguments);
    }
    function unionTypeAnnotation(types) {
      return _builder.default.apply(\\"UnionTypeAnnotation\\", arguments);
    }
    function variance(kind) {
      return _builder.default.apply(\\"Variance\\", arguments);
    }
    function voidTypeAnnotation() {
      return _builder.default.apply(\\"VoidTypeAnnotation\\", arguments);
    }
    function enumDeclaration(id, body) {
      return _builder.default.apply(\\"EnumDeclaration\\", arguments);
    }
    function enumBooleanBody(members) {
      return _builder.default.apply(\\"EnumBooleanBody\\", arguments);
    }
    function enumNumberBody(members) {
      return _builder.default.apply(\\"EnumNumberBody\\", arguments);
    }
    function enumStringBody(members) {
      return _builder.default.apply(\\"EnumStringBody\\", arguments);
    }
    function enumSymbolBody(members) {
      return _builder.default.apply(\\"EnumSymbolBody\\", arguments);
    }
    function enumBooleanMember(id) {
      return _builder.default.apply(\\"EnumBooleanMember\\", arguments);
    }
    function enumNumberMember(id, init) {
      return _builder.default.apply(\\"EnumNumberMember\\", arguments);
    }
    function enumStringMember(id, init) {
      return _builder.default.apply(\\"EnumStringMember\\", arguments);
    }
    function enumDefaultedMember(id) {
      return _builder.default.apply(\\"EnumDefaultedMember\\", arguments);
    }
    function indexedAccessType(objectType, indexType) {
      return _builder.default.apply(\\"IndexedAccessType\\", arguments);
    }
    function optionalIndexedAccessType(objectType, indexType) {
      return _builder.default.apply(\\"OptionalIndexedAccessType\\", arguments);
    }
    function jsxAttribute(name, value) {
      return _builder.default.apply(\\"JSXAttribute\\", arguments);
    }
    function jsxClosingElement(name) {
      return _builder.default.apply(\\"JSXClosingElement\\", arguments);
    }
    function jsxElement(openingElement, closingElement, children, selfClosing) {
      return _builder.default.apply(\\"JSXElement\\", arguments);
    }
    function jsxEmptyExpression() {
      return _builder.default.apply(\\"JSXEmptyExpression\\", arguments);
    }
    function jsxExpressionContainer(expression) {
      return _builder.default.apply(\\"JSXExpressionContainer\\", arguments);
    }
    function jsxSpreadChild(expression) {
      return _builder.default.apply(\\"JSXSpreadChild\\", arguments);
    }
    function jsxIdentifier(name) {
      return _builder.default.apply(\\"JSXIdentifier\\", arguments);
    }
    function jsxMemberExpression(object, property) {
      return _builder.default.apply(\\"JSXMemberExpression\\", arguments);
    }
    function jsxNamespacedName(namespace, name) {
      return _builder.default.apply(\\"JSXNamespacedName\\", arguments);
    }
    function jsxOpeningElement(name, attributes, selfClosing) {
      return _builder.default.apply(\\"JSXOpeningElement\\", arguments);
    }
    function jsxSpreadAttribute(argument) {
      return _builder.default.apply(\\"JSXSpreadAttribute\\", arguments);
    }
    function jsxText(value) {
      return _builder.default.apply(\\"JSXText\\", arguments);
    }
    function jsxFragment(openingFragment, closingFragment, children) {
      return _builder.default.apply(\\"JSXFragment\\", arguments);
    }
    function jsxOpeningFragment() {
      return _builder.default.apply(\\"JSXOpeningFragment\\", arguments);
    }
    function jsxClosingFragment() {
      return _builder.default.apply(\\"JSXClosingFragment\\", arguments);
    }
    function noop() {
      return _builder.default.apply(\\"Noop\\", arguments);
    }
    function placeholder(expectedNode, name) {
      return _builder.default.apply(\\"Placeholder\\", arguments);
    }
    function v8IntrinsicIdentifier(name) {
      return _builder.default.apply(\\"V8IntrinsicIdentifier\\", arguments);
    }
    function argumentPlaceholder() {
      return _builder.default.apply(\\"ArgumentPlaceholder\\", arguments);
    }
    function bindExpression(object, callee) {
      return _builder.default.apply(\\"BindExpression\\", arguments);
    }
    function importAttribute(key, value) {
      return _builder.default.apply(\\"ImportAttribute\\", arguments);
    }
    function decorator(expression) {
      return _builder.default.apply(\\"Decorator\\", arguments);
    }
    function doExpression(body, async) {
      return _builder.default.apply(\\"DoExpression\\", arguments);
    }
    function exportDefaultSpecifier(exported) {
      return _builder.default.apply(\\"ExportDefaultSpecifier\\", arguments);
    }
    function recordExpression(properties) {
      return _builder.default.apply(\\"RecordExpression\\", arguments);
    }
    function tupleExpression(elements) {
      return _builder.default.apply(\\"TupleExpression\\", arguments);
    }
    function decimalLiteral(value) {
      return _builder.default.apply(\\"DecimalLiteral\\", arguments);
    }
    function moduleExpression(body) {
      return _builder.default.apply(\\"ModuleExpression\\", arguments);
    }
    function topicReference() {
      return _builder.default.apply(\\"TopicReference\\", arguments);
    }
    function pipelineTopicExpression(expression) {
      return _builder.default.apply(\\"PipelineTopicExpression\\", arguments);
    }
    function pipelineBareFunction(callee) {
      return _builder.default.apply(\\"PipelineBareFunction\\", arguments);
    }
    function pipelinePrimaryTopicReference() {
      return _builder.default.apply(\\"PipelinePrimaryTopicReference\\", arguments);
    }
    function tsParameterProperty(parameter) {
      return _builder.default.apply(\\"TSParameterProperty\\", arguments);
    }
    function tsDeclareFunction(id, typeParameters, params, returnType) {
      return _builder.default.apply(\\"TSDeclareFunction\\", arguments);
    }
    function tsDeclareMethod(decorators, key, typeParameters, params, returnType) {
      return _builder.default.apply(\\"TSDeclareMethod\\", arguments);
    }
    function tsQualifiedName(left, right) {
      return _builder.default.apply(\\"TSQualifiedName\\", arguments);
    }
    function tsCallSignatureDeclaration(typeParameters, parameters, typeAnnotation2) {
      return _builder.default.apply(\\"TSCallSignatureDeclaration\\", arguments);
    }
    function tsConstructSignatureDeclaration(typeParameters, parameters, typeAnnotation2) {
      return _builder.default.apply(\\"TSConstructSignatureDeclaration\\", arguments);
    }
    function tsPropertySignature(key, typeAnnotation2, initializer) {
      return _builder.default.apply(\\"TSPropertySignature\\", arguments);
    }
    function tsMethodSignature(key, typeParameters, parameters, typeAnnotation2) {
      return _builder.default.apply(\\"TSMethodSignature\\", arguments);
    }
    function tsIndexSignature(parameters, typeAnnotation2) {
      return _builder.default.apply(\\"TSIndexSignature\\", arguments);
    }
    function tsAnyKeyword() {
      return _builder.default.apply(\\"TSAnyKeyword\\", arguments);
    }
    function tsBooleanKeyword() {
      return _builder.default.apply(\\"TSBooleanKeyword\\", arguments);
    }
    function tsBigIntKeyword() {
      return _builder.default.apply(\\"TSBigIntKeyword\\", arguments);
    }
    function tsIntrinsicKeyword() {
      return _builder.default.apply(\\"TSIntrinsicKeyword\\", arguments);
    }
    function tsNeverKeyword() {
      return _builder.default.apply(\\"TSNeverKeyword\\", arguments);
    }
    function tsNullKeyword() {
      return _builder.default.apply(\\"TSNullKeyword\\", arguments);
    }
    function tsNumberKeyword() {
      return _builder.default.apply(\\"TSNumberKeyword\\", arguments);
    }
    function tsObjectKeyword() {
      return _builder.default.apply(\\"TSObjectKeyword\\", arguments);
    }
    function tsStringKeyword() {
      return _builder.default.apply(\\"TSStringKeyword\\", arguments);
    }
    function tsSymbolKeyword() {
      return _builder.default.apply(\\"TSSymbolKeyword\\", arguments);
    }
    function tsUndefinedKeyword() {
      return _builder.default.apply(\\"TSUndefinedKeyword\\", arguments);
    }
    function tsUnknownKeyword() {
      return _builder.default.apply(\\"TSUnknownKeyword\\", arguments);
    }
    function tsVoidKeyword() {
      return _builder.default.apply(\\"TSVoidKeyword\\", arguments);
    }
    function tsThisType() {
      return _builder.default.apply(\\"TSThisType\\", arguments);
    }
    function tsFunctionType(typeParameters, parameters, typeAnnotation2) {
      return _builder.default.apply(\\"TSFunctionType\\", arguments);
    }
    function tsConstructorType(typeParameters, parameters, typeAnnotation2) {
      return _builder.default.apply(\\"TSConstructorType\\", arguments);
    }
    function tsTypeReference(typeName, typeParameters) {
      return _builder.default.apply(\\"TSTypeReference\\", arguments);
    }
    function tsTypePredicate(parameterName, typeAnnotation2, asserts) {
      return _builder.default.apply(\\"TSTypePredicate\\", arguments);
    }
    function tsTypeQuery(exprName) {
      return _builder.default.apply(\\"TSTypeQuery\\", arguments);
    }
    function tsTypeLiteral(members) {
      return _builder.default.apply(\\"TSTypeLiteral\\", arguments);
    }
    function tsArrayType(elementType) {
      return _builder.default.apply(\\"TSArrayType\\", arguments);
    }
    function tsTupleType(elementTypes) {
      return _builder.default.apply(\\"TSTupleType\\", arguments);
    }
    function tsOptionalType(typeAnnotation2) {
      return _builder.default.apply(\\"TSOptionalType\\", arguments);
    }
    function tsRestType(typeAnnotation2) {
      return _builder.default.apply(\\"TSRestType\\", arguments);
    }
    function tsNamedTupleMember(label, elementType, optional) {
      return _builder.default.apply(\\"TSNamedTupleMember\\", arguments);
    }
    function tsUnionType(types) {
      return _builder.default.apply(\\"TSUnionType\\", arguments);
    }
    function tsIntersectionType(types) {
      return _builder.default.apply(\\"TSIntersectionType\\", arguments);
    }
    function tsConditionalType(checkType, extendsType, trueType, falseType) {
      return _builder.default.apply(\\"TSConditionalType\\", arguments);
    }
    function tsInferType(typeParameter2) {
      return _builder.default.apply(\\"TSInferType\\", arguments);
    }
    function tsParenthesizedType(typeAnnotation2) {
      return _builder.default.apply(\\"TSParenthesizedType\\", arguments);
    }
    function tsTypeOperator(typeAnnotation2) {
      return _builder.default.apply(\\"TSTypeOperator\\", arguments);
    }
    function tsIndexedAccessType(objectType, indexType) {
      return _builder.default.apply(\\"TSIndexedAccessType\\", arguments);
    }
    function tsMappedType(typeParameter2, typeAnnotation2, nameType) {
      return _builder.default.apply(\\"TSMappedType\\", arguments);
    }
    function tsLiteralType(literal) {
      return _builder.default.apply(\\"TSLiteralType\\", arguments);
    }
    function tsExpressionWithTypeArguments(expression, typeParameters) {
      return _builder.default.apply(\\"TSExpressionWithTypeArguments\\", arguments);
    }
    function tsInterfaceDeclaration(id, typeParameters, _extends, body) {
      return _builder.default.apply(\\"TSInterfaceDeclaration\\", arguments);
    }
    function tsInterfaceBody(body) {
      return _builder.default.apply(\\"TSInterfaceBody\\", arguments);
    }
    function tsTypeAliasDeclaration(id, typeParameters, typeAnnotation2) {
      return _builder.default.apply(\\"TSTypeAliasDeclaration\\", arguments);
    }
    function tsAsExpression(expression, typeAnnotation2) {
      return _builder.default.apply(\\"TSAsExpression\\", arguments);
    }
    function tsTypeAssertion(typeAnnotation2, expression) {
      return _builder.default.apply(\\"TSTypeAssertion\\", arguments);
    }
    function tsEnumDeclaration(id, members) {
      return _builder.default.apply(\\"TSEnumDeclaration\\", arguments);
    }
    function tsEnumMember(id, initializer) {
      return _builder.default.apply(\\"TSEnumMember\\", arguments);
    }
    function tsModuleDeclaration(id, body) {
      return _builder.default.apply(\\"TSModuleDeclaration\\", arguments);
    }
    function tsModuleBlock(body) {
      return _builder.default.apply(\\"TSModuleBlock\\", arguments);
    }
    function tsImportType(argument, qualifier, typeParameters) {
      return _builder.default.apply(\\"TSImportType\\", arguments);
    }
    function tsImportEqualsDeclaration(id, moduleReference) {
      return _builder.default.apply(\\"TSImportEqualsDeclaration\\", arguments);
    }
    function tsExternalModuleReference(expression) {
      return _builder.default.apply(\\"TSExternalModuleReference\\", arguments);
    }
    function tsNonNullExpression(expression) {
      return _builder.default.apply(\\"TSNonNullExpression\\", arguments);
    }
    function tsExportAssignment(expression) {
      return _builder.default.apply(\\"TSExportAssignment\\", arguments);
    }
    function tsNamespaceExportDeclaration(id) {
      return _builder.default.apply(\\"TSNamespaceExportDeclaration\\", arguments);
    }
    function tsTypeAnnotation(typeAnnotation2) {
      return _builder.default.apply(\\"TSTypeAnnotation\\", arguments);
    }
    function tsTypeParameterInstantiation(params) {
      return _builder.default.apply(\\"TSTypeParameterInstantiation\\", arguments);
    }
    function tsTypeParameterDeclaration(params) {
      return _builder.default.apply(\\"TSTypeParameterDeclaration\\", arguments);
    }
    function tsTypeParameter(constraint, _default, name) {
      return _builder.default.apply(\\"TSTypeParameter\\", arguments);
    }
    function NumberLiteral(value) {
      console.trace(\\"The node type NumberLiteral has been renamed to NumericLiteral\\");
      return _builder.default.apply(\\"NumberLiteral\\", arguments);
    }
    function RegexLiteral(pattern, flags) {
      console.trace(\\"The node type RegexLiteral has been renamed to RegExpLiteral\\");
      return _builder.default.apply(\\"RegexLiteral\\", arguments);
    }
    function RestProperty(argument) {
      console.trace(\\"The node type RestProperty has been renamed to RestElement\\");
      return _builder.default.apply(\\"RestProperty\\", arguments);
    }
    function SpreadProperty(argument) {
      console.trace(\\"The node type SpreadProperty has been renamed to SpreadElement\\");
      return _builder.default.apply(\\"SpreadProperty\\", arguments);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js
var require_cleanJSXElementLiteralChild = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = cleanJSXElementLiteralChild;
    var _generated = require_generated2();
    function cleanJSXElementLiteralChild(child, args) {
      const lines = child.value.split(/\\\\r\\\\n|\\\\n|\\\\r/);
      let lastNonEmptyLine = 0;
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].match(/[^ \\\\t]/)) {
          lastNonEmptyLine = i;
        }
      }
      let str = \\"\\";
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const isFirstLine = i === 0;
        const isLastLine = i === lines.length - 1;
        const isLastNonEmptyLine = i === lastNonEmptyLine;
        let trimmedLine = line.replace(/\\\\t/g, \\" \\");
        if (!isFirstLine) {
          trimmedLine = trimmedLine.replace(/^[ ]+/, \\"\\");
        }
        if (!isLastLine) {
          trimmedLine = trimmedLine.replace(/[ ]+$/, \\"\\");
        }
        if (trimmedLine) {
          if (!isLastNonEmptyLine) {
            trimmedLine += \\" \\";
          }
          str += trimmedLine;
        }
      }
      if (str)
        args.push((0, _generated.stringLiteral)(str));
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/react/buildChildren.js
var require_buildChildren = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/react/buildChildren.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = buildChildren;
    var _generated = require_generated();
    var _cleanJSXElementLiteralChild = require_cleanJSXElementLiteralChild();
    function buildChildren(node) {
      const elements = [];
      for (let i = 0; i < node.children.length; i++) {
        let child = node.children[i];
        if ((0, _generated.isJSXText)(child)) {
          (0, _cleanJSXElementLiteralChild.default)(child, elements);
          continue;
        }
        if ((0, _generated.isJSXExpressionContainer)(child))
          child = child.expression;
        if ((0, _generated.isJSXEmptyExpression)(child))
          continue;
        elements.push(child);
      }
      return elements;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isNode.js
var require_isNode = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isNode.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isNode;
    var _definitions = require_definitions();
    function isNode(node) {
      return !!(node && _definitions.VISITOR_KEYS[node.type]);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/asserts/assertNode.js
var require_assertNode = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/asserts/assertNode.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = assertNode;
    var _isNode = require_isNode();
    function assertNode(node) {
      if (!(0, _isNode.default)(node)) {
        var _node$type;
        const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);
        throw new TypeError(\`Not a valid node of type \\"\${type}\\"\`);
      }
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/asserts/generated/index.js
var require_generated3 = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/asserts/generated/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
    exports.assertArgumentPlaceholder = assertArgumentPlaceholder;
    exports.assertArrayExpression = assertArrayExpression;
    exports.assertArrayPattern = assertArrayPattern;
    exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
    exports.assertArrowFunctionExpression = assertArrowFunctionExpression;
    exports.assertAssignmentExpression = assertAssignmentExpression;
    exports.assertAssignmentPattern = assertAssignmentPattern;
    exports.assertAwaitExpression = assertAwaitExpression;
    exports.assertBigIntLiteral = assertBigIntLiteral;
    exports.assertBinary = assertBinary;
    exports.assertBinaryExpression = assertBinaryExpression;
    exports.assertBindExpression = assertBindExpression;
    exports.assertBlock = assertBlock;
    exports.assertBlockParent = assertBlockParent;
    exports.assertBlockStatement = assertBlockStatement;
    exports.assertBooleanLiteral = assertBooleanLiteral;
    exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
    exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
    exports.assertBreakStatement = assertBreakStatement;
    exports.assertCallExpression = assertCallExpression;
    exports.assertCatchClause = assertCatchClause;
    exports.assertClass = assertClass;
    exports.assertClassBody = assertClassBody;
    exports.assertClassDeclaration = assertClassDeclaration;
    exports.assertClassExpression = assertClassExpression;
    exports.assertClassImplements = assertClassImplements;
    exports.assertClassMethod = assertClassMethod;
    exports.assertClassPrivateMethod = assertClassPrivateMethod;
    exports.assertClassPrivateProperty = assertClassPrivateProperty;
    exports.assertClassProperty = assertClassProperty;
    exports.assertCompletionStatement = assertCompletionStatement;
    exports.assertConditional = assertConditional;
    exports.assertConditionalExpression = assertConditionalExpression;
    exports.assertContinueStatement = assertContinueStatement;
    exports.assertDebuggerStatement = assertDebuggerStatement;
    exports.assertDecimalLiteral = assertDecimalLiteral;
    exports.assertDeclaration = assertDeclaration;
    exports.assertDeclareClass = assertDeclareClass;
    exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
    exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
    exports.assertDeclareFunction = assertDeclareFunction;
    exports.assertDeclareInterface = assertDeclareInterface;
    exports.assertDeclareModule = assertDeclareModule;
    exports.assertDeclareModuleExports = assertDeclareModuleExports;
    exports.assertDeclareOpaqueType = assertDeclareOpaqueType;
    exports.assertDeclareTypeAlias = assertDeclareTypeAlias;
    exports.assertDeclareVariable = assertDeclareVariable;
    exports.assertDeclaredPredicate = assertDeclaredPredicate;
    exports.assertDecorator = assertDecorator;
    exports.assertDirective = assertDirective;
    exports.assertDirectiveLiteral = assertDirectiveLiteral;
    exports.assertDoExpression = assertDoExpression;
    exports.assertDoWhileStatement = assertDoWhileStatement;
    exports.assertEmptyStatement = assertEmptyStatement;
    exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
    exports.assertEnumBody = assertEnumBody;
    exports.assertEnumBooleanBody = assertEnumBooleanBody;
    exports.assertEnumBooleanMember = assertEnumBooleanMember;
    exports.assertEnumDeclaration = assertEnumDeclaration;
    exports.assertEnumDefaultedMember = assertEnumDefaultedMember;
    exports.assertEnumMember = assertEnumMember;
    exports.assertEnumNumberBody = assertEnumNumberBody;
    exports.assertEnumNumberMember = assertEnumNumberMember;
    exports.assertEnumStringBody = assertEnumStringBody;
    exports.assertEnumStringMember = assertEnumStringMember;
    exports.assertEnumSymbolBody = assertEnumSymbolBody;
    exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
    exports.assertExportAllDeclaration = assertExportAllDeclaration;
    exports.assertExportDeclaration = assertExportDeclaration;
    exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
    exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
    exports.assertExportNamedDeclaration = assertExportNamedDeclaration;
    exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
    exports.assertExportSpecifier = assertExportSpecifier;
    exports.assertExpression = assertExpression;
    exports.assertExpressionStatement = assertExpressionStatement;
    exports.assertExpressionWrapper = assertExpressionWrapper;
    exports.assertFile = assertFile;
    exports.assertFlow = assertFlow;
    exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
    exports.assertFlowDeclaration = assertFlowDeclaration;
    exports.assertFlowPredicate = assertFlowPredicate;
    exports.assertFlowType = assertFlowType;
    exports.assertFor = assertFor;
    exports.assertForInStatement = assertForInStatement;
    exports.assertForOfStatement = assertForOfStatement;
    exports.assertForStatement = assertForStatement;
    exports.assertForXStatement = assertForXStatement;
    exports.assertFunction = assertFunction;
    exports.assertFunctionDeclaration = assertFunctionDeclaration;
    exports.assertFunctionExpression = assertFunctionExpression;
    exports.assertFunctionParent = assertFunctionParent;
    exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
    exports.assertFunctionTypeParam = assertFunctionTypeParam;
    exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
    exports.assertIdentifier = assertIdentifier;
    exports.assertIfStatement = assertIfStatement;
    exports.assertImmutable = assertImmutable;
    exports.assertImport = assertImport;
    exports.assertImportAttribute = assertImportAttribute;
    exports.assertImportDeclaration = assertImportDeclaration;
    exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
    exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
    exports.assertImportSpecifier = assertImportSpecifier;
    exports.assertIndexedAccessType = assertIndexedAccessType;
    exports.assertInferredPredicate = assertInferredPredicate;
    exports.assertInterfaceDeclaration = assertInterfaceDeclaration;
    exports.assertInterfaceExtends = assertInterfaceExtends;
    exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
    exports.assertInterpreterDirective = assertInterpreterDirective;
    exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
    exports.assertJSX = assertJSX;
    exports.assertJSXAttribute = assertJSXAttribute;
    exports.assertJSXClosingElement = assertJSXClosingElement;
    exports.assertJSXClosingFragment = assertJSXClosingFragment;
    exports.assertJSXElement = assertJSXElement;
    exports.assertJSXEmptyExpression = assertJSXEmptyExpression;
    exports.assertJSXExpressionContainer = assertJSXExpressionContainer;
    exports.assertJSXFragment = assertJSXFragment;
    exports.assertJSXIdentifier = assertJSXIdentifier;
    exports.assertJSXMemberExpression = assertJSXMemberExpression;
    exports.assertJSXNamespacedName = assertJSXNamespacedName;
    exports.assertJSXOpeningElement = assertJSXOpeningElement;
    exports.assertJSXOpeningFragment = assertJSXOpeningFragment;
    exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
    exports.assertJSXSpreadChild = assertJSXSpreadChild;
    exports.assertJSXText = assertJSXText;
    exports.assertLVal = assertLVal;
    exports.assertLabeledStatement = assertLabeledStatement;
    exports.assertLiteral = assertLiteral;
    exports.assertLogicalExpression = assertLogicalExpression;
    exports.assertLoop = assertLoop;
    exports.assertMemberExpression = assertMemberExpression;
    exports.assertMetaProperty = assertMetaProperty;
    exports.assertMethod = assertMethod;
    exports.assertMiscellaneous = assertMiscellaneous;
    exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
    exports.assertModuleDeclaration = assertModuleDeclaration;
    exports.assertModuleExpression = assertModuleExpression;
    exports.assertModuleSpecifier = assertModuleSpecifier;
    exports.assertNewExpression = assertNewExpression;
    exports.assertNoop = assertNoop;
    exports.assertNullLiteral = assertNullLiteral;
    exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
    exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
    exports.assertNumberLiteral = assertNumberLiteral;
    exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
    exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
    exports.assertNumericLiteral = assertNumericLiteral;
    exports.assertObjectExpression = assertObjectExpression;
    exports.assertObjectMember = assertObjectMember;
    exports.assertObjectMethod = assertObjectMethod;
    exports.assertObjectPattern = assertObjectPattern;
    exports.assertObjectProperty = assertObjectProperty;
    exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
    exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
    exports.assertObjectTypeIndexer = assertObjectTypeIndexer;
    exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
    exports.assertObjectTypeProperty = assertObjectTypeProperty;
    exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
    exports.assertOpaqueType = assertOpaqueType;
    exports.assertOptionalCallExpression = assertOptionalCallExpression;
    exports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
    exports.assertOptionalMemberExpression = assertOptionalMemberExpression;
    exports.assertParenthesizedExpression = assertParenthesizedExpression;
    exports.assertPattern = assertPattern;
    exports.assertPatternLike = assertPatternLike;
    exports.assertPipelineBareFunction = assertPipelineBareFunction;
    exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
    exports.assertPipelineTopicExpression = assertPipelineTopicExpression;
    exports.assertPlaceholder = assertPlaceholder;
    exports.assertPrivate = assertPrivate;
    exports.assertPrivateName = assertPrivateName;
    exports.assertProgram = assertProgram;
    exports.assertProperty = assertProperty;
    exports.assertPureish = assertPureish;
    exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
    exports.assertRecordExpression = assertRecordExpression;
    exports.assertRegExpLiteral = assertRegExpLiteral;
    exports.assertRegexLiteral = assertRegexLiteral;
    exports.assertRestElement = assertRestElement;
    exports.assertRestProperty = assertRestProperty;
    exports.assertReturnStatement = assertReturnStatement;
    exports.assertScopable = assertScopable;
    exports.assertSequenceExpression = assertSequenceExpression;
    exports.assertSpreadElement = assertSpreadElement;
    exports.assertSpreadProperty = assertSpreadProperty;
    exports.assertStandardized = assertStandardized;
    exports.assertStatement = assertStatement;
    exports.assertStaticBlock = assertStaticBlock;
    exports.assertStringLiteral = assertStringLiteral;
    exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
    exports.assertStringTypeAnnotation = assertStringTypeAnnotation;
    exports.assertSuper = assertSuper;
    exports.assertSwitchCase = assertSwitchCase;
    exports.assertSwitchStatement = assertSwitchStatement;
    exports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
    exports.assertTSAnyKeyword = assertTSAnyKeyword;
    exports.assertTSArrayType = assertTSArrayType;
    exports.assertTSAsExpression = assertTSAsExpression;
    exports.assertTSBaseType = assertTSBaseType;
    exports.assertTSBigIntKeyword = assertTSBigIntKeyword;
    exports.assertTSBooleanKeyword = assertTSBooleanKeyword;
    exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
    exports.assertTSConditionalType = assertTSConditionalType;
    exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
    exports.assertTSConstructorType = assertTSConstructorType;
    exports.assertTSDeclareFunction = assertTSDeclareFunction;
    exports.assertTSDeclareMethod = assertTSDeclareMethod;
    exports.assertTSEntityName = assertTSEntityName;
    exports.assertTSEnumDeclaration = assertTSEnumDeclaration;
    exports.assertTSEnumMember = assertTSEnumMember;
    exports.assertTSExportAssignment = assertTSExportAssignment;
    exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
    exports.assertTSExternalModuleReference = assertTSExternalModuleReference;
    exports.assertTSFunctionType = assertTSFunctionType;
    exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
    exports.assertTSImportType = assertTSImportType;
    exports.assertTSIndexSignature = assertTSIndexSignature;
    exports.assertTSIndexedAccessType = assertTSIndexedAccessType;
    exports.assertTSInferType = assertTSInferType;
    exports.assertTSInterfaceBody = assertTSInterfaceBody;
    exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
    exports.assertTSIntersectionType = assertTSIntersectionType;
    exports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
    exports.assertTSLiteralType = assertTSLiteralType;
    exports.assertTSMappedType = assertTSMappedType;
    exports.assertTSMethodSignature = assertTSMethodSignature;
    exports.assertTSModuleBlock = assertTSModuleBlock;
    exports.assertTSModuleDeclaration = assertTSModuleDeclaration;
    exports.assertTSNamedTupleMember = assertTSNamedTupleMember;
    exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
    exports.assertTSNeverKeyword = assertTSNeverKeyword;
    exports.assertTSNonNullExpression = assertTSNonNullExpression;
    exports.assertTSNullKeyword = assertTSNullKeyword;
    exports.assertTSNumberKeyword = assertTSNumberKeyword;
    exports.assertTSObjectKeyword = assertTSObjectKeyword;
    exports.assertTSOptionalType = assertTSOptionalType;
    exports.assertTSParameterProperty = assertTSParameterProperty;
    exports.assertTSParenthesizedType = assertTSParenthesizedType;
    exports.assertTSPropertySignature = assertTSPropertySignature;
    exports.assertTSQualifiedName = assertTSQualifiedName;
    exports.assertTSRestType = assertTSRestType;
    exports.assertTSStringKeyword = assertTSStringKeyword;
    exports.assertTSSymbolKeyword = assertTSSymbolKeyword;
    exports.assertTSThisType = assertTSThisType;
    exports.assertTSTupleType = assertTSTupleType;
    exports.assertTSType = assertTSType;
    exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
    exports.assertTSTypeAnnotation = assertTSTypeAnnotation;
    exports.assertTSTypeAssertion = assertTSTypeAssertion;
    exports.assertTSTypeElement = assertTSTypeElement;
    exports.assertTSTypeLiteral = assertTSTypeLiteral;
    exports.assertTSTypeOperator = assertTSTypeOperator;
    exports.assertTSTypeParameter = assertTSTypeParameter;
    exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
    exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
    exports.assertTSTypePredicate = assertTSTypePredicate;
    exports.assertTSTypeQuery = assertTSTypeQuery;
    exports.assertTSTypeReference = assertTSTypeReference;
    exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
    exports.assertTSUnionType = assertTSUnionType;
    exports.assertTSUnknownKeyword = assertTSUnknownKeyword;
    exports.assertTSVoidKeyword = assertTSVoidKeyword;
    exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
    exports.assertTemplateElement = assertTemplateElement;
    exports.assertTemplateLiteral = assertTemplateLiteral;
    exports.assertTerminatorless = assertTerminatorless;
    exports.assertThisExpression = assertThisExpression;
    exports.assertThisTypeAnnotation = assertThisTypeAnnotation;
    exports.assertThrowStatement = assertThrowStatement;
    exports.assertTopicReference = assertTopicReference;
    exports.assertTryStatement = assertTryStatement;
    exports.assertTupleExpression = assertTupleExpression;
    exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
    exports.assertTypeAlias = assertTypeAlias;
    exports.assertTypeAnnotation = assertTypeAnnotation;
    exports.assertTypeCastExpression = assertTypeCastExpression;
    exports.assertTypeParameter = assertTypeParameter;
    exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
    exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
    exports.assertTypeScript = assertTypeScript;
    exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
    exports.assertUnaryExpression = assertUnaryExpression;
    exports.assertUnaryLike = assertUnaryLike;
    exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
    exports.assertUpdateExpression = assertUpdateExpression;
    exports.assertUserWhitespacable = assertUserWhitespacable;
    exports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
    exports.assertVariableDeclaration = assertVariableDeclaration;
    exports.assertVariableDeclarator = assertVariableDeclarator;
    exports.assertVariance = assertVariance;
    exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
    exports.assertWhile = assertWhile;
    exports.assertWhileStatement = assertWhileStatement;
    exports.assertWithStatement = assertWithStatement;
    exports.assertYieldExpression = assertYieldExpression;
    var _is = require_is();
    function assert(type, node, opts) {
      if (!(0, _is.default)(type, node, opts)) {
        throw new Error(\`Expected type \\"\${type}\\" with option \${JSON.stringify(opts)}, but instead got \\"\${node.type}\\".\`);
      }
    }
    function assertArrayExpression(node, opts) {
      assert(\\"ArrayExpression\\", node, opts);
    }
    function assertAssignmentExpression(node, opts) {
      assert(\\"AssignmentExpression\\", node, opts);
    }
    function assertBinaryExpression(node, opts) {
      assert(\\"BinaryExpression\\", node, opts);
    }
    function assertInterpreterDirective(node, opts) {
      assert(\\"InterpreterDirective\\", node, opts);
    }
    function assertDirective(node, opts) {
      assert(\\"Directive\\", node, opts);
    }
    function assertDirectiveLiteral(node, opts) {
      assert(\\"DirectiveLiteral\\", node, opts);
    }
    function assertBlockStatement(node, opts) {
      assert(\\"BlockStatement\\", node, opts);
    }
    function assertBreakStatement(node, opts) {
      assert(\\"BreakStatement\\", node, opts);
    }
    function assertCallExpression(node, opts) {
      assert(\\"CallExpression\\", node, opts);
    }
    function assertCatchClause(node, opts) {
      assert(\\"CatchClause\\", node, opts);
    }
    function assertConditionalExpression(node, opts) {
      assert(\\"ConditionalExpression\\", node, opts);
    }
    function assertContinueStatement(node, opts) {
      assert(\\"ContinueStatement\\", node, opts);
    }
    function assertDebuggerStatement(node, opts) {
      assert(\\"DebuggerStatement\\", node, opts);
    }
    function assertDoWhileStatement(node, opts) {
      assert(\\"DoWhileStatement\\", node, opts);
    }
    function assertEmptyStatement(node, opts) {
      assert(\\"EmptyStatement\\", node, opts);
    }
    function assertExpressionStatement(node, opts) {
      assert(\\"ExpressionStatement\\", node, opts);
    }
    function assertFile(node, opts) {
      assert(\\"File\\", node, opts);
    }
    function assertForInStatement(node, opts) {
      assert(\\"ForInStatement\\", node, opts);
    }
    function assertForStatement(node, opts) {
      assert(\\"ForStatement\\", node, opts);
    }
    function assertFunctionDeclaration(node, opts) {
      assert(\\"FunctionDeclaration\\", node, opts);
    }
    function assertFunctionExpression(node, opts) {
      assert(\\"FunctionExpression\\", node, opts);
    }
    function assertIdentifier(node, opts) {
      assert(\\"Identifier\\", node, opts);
    }
    function assertIfStatement(node, opts) {
      assert(\\"IfStatement\\", node, opts);
    }
    function assertLabeledStatement(node, opts) {
      assert(\\"LabeledStatement\\", node, opts);
    }
    function assertStringLiteral(node, opts) {
      assert(\\"StringLiteral\\", node, opts);
    }
    function assertNumericLiteral(node, opts) {
      assert(\\"NumericLiteral\\", node, opts);
    }
    function assertNullLiteral(node, opts) {
      assert(\\"NullLiteral\\", node, opts);
    }
    function assertBooleanLiteral(node, opts) {
      assert(\\"BooleanLiteral\\", node, opts);
    }
    function assertRegExpLiteral(node, opts) {
      assert(\\"RegExpLiteral\\", node, opts);
    }
    function assertLogicalExpression(node, opts) {
      assert(\\"LogicalExpression\\", node, opts);
    }
    function assertMemberExpression(node, opts) {
      assert(\\"MemberExpression\\", node, opts);
    }
    function assertNewExpression(node, opts) {
      assert(\\"NewExpression\\", node, opts);
    }
    function assertProgram(node, opts) {
      assert(\\"Program\\", node, opts);
    }
    function assertObjectExpression(node, opts) {
      assert(\\"ObjectExpression\\", node, opts);
    }
    function assertObjectMethod(node, opts) {
      assert(\\"ObjectMethod\\", node, opts);
    }
    function assertObjectProperty(node, opts) {
      assert(\\"ObjectProperty\\", node, opts);
    }
    function assertRestElement(node, opts) {
      assert(\\"RestElement\\", node, opts);
    }
    function assertReturnStatement(node, opts) {
      assert(\\"ReturnStatement\\", node, opts);
    }
    function assertSequenceExpression(node, opts) {
      assert(\\"SequenceExpression\\", node, opts);
    }
    function assertParenthesizedExpression(node, opts) {
      assert(\\"ParenthesizedExpression\\", node, opts);
    }
    function assertSwitchCase(node, opts) {
      assert(\\"SwitchCase\\", node, opts);
    }
    function assertSwitchStatement(node, opts) {
      assert(\\"SwitchStatement\\", node, opts);
    }
    function assertThisExpression(node, opts) {
      assert(\\"ThisExpression\\", node, opts);
    }
    function assertThrowStatement(node, opts) {
      assert(\\"ThrowStatement\\", node, opts);
    }
    function assertTryStatement(node, opts) {
      assert(\\"TryStatement\\", node, opts);
    }
    function assertUnaryExpression(node, opts) {
      assert(\\"UnaryExpression\\", node, opts);
    }
    function assertUpdateExpression(node, opts) {
      assert(\\"UpdateExpression\\", node, opts);
    }
    function assertVariableDeclaration(node, opts) {
      assert(\\"VariableDeclaration\\", node, opts);
    }
    function assertVariableDeclarator(node, opts) {
      assert(\\"VariableDeclarator\\", node, opts);
    }
    function assertWhileStatement(node, opts) {
      assert(\\"WhileStatement\\", node, opts);
    }
    function assertWithStatement(node, opts) {
      assert(\\"WithStatement\\", node, opts);
    }
    function assertAssignmentPattern(node, opts) {
      assert(\\"AssignmentPattern\\", node, opts);
    }
    function assertArrayPattern(node, opts) {
      assert(\\"ArrayPattern\\", node, opts);
    }
    function assertArrowFunctionExpression(node, opts) {
      assert(\\"ArrowFunctionExpression\\", node, opts);
    }
    function assertClassBody(node, opts) {
      assert(\\"ClassBody\\", node, opts);
    }
    function assertClassExpression(node, opts) {
      assert(\\"ClassExpression\\", node, opts);
    }
    function assertClassDeclaration(node, opts) {
      assert(\\"ClassDeclaration\\", node, opts);
    }
    function assertExportAllDeclaration(node, opts) {
      assert(\\"ExportAllDeclaration\\", node, opts);
    }
    function assertExportDefaultDeclaration(node, opts) {
      assert(\\"ExportDefaultDeclaration\\", node, opts);
    }
    function assertExportNamedDeclaration(node, opts) {
      assert(\\"ExportNamedDeclaration\\", node, opts);
    }
    function assertExportSpecifier(node, opts) {
      assert(\\"ExportSpecifier\\", node, opts);
    }
    function assertForOfStatement(node, opts) {
      assert(\\"ForOfStatement\\", node, opts);
    }
    function assertImportDeclaration(node, opts) {
      assert(\\"ImportDeclaration\\", node, opts);
    }
    function assertImportDefaultSpecifier(node, opts) {
      assert(\\"ImportDefaultSpecifier\\", node, opts);
    }
    function assertImportNamespaceSpecifier(node, opts) {
      assert(\\"ImportNamespaceSpecifier\\", node, opts);
    }
    function assertImportSpecifier(node, opts) {
      assert(\\"ImportSpecifier\\", node, opts);
    }
    function assertMetaProperty(node, opts) {
      assert(\\"MetaProperty\\", node, opts);
    }
    function assertClassMethod(node, opts) {
      assert(\\"ClassMethod\\", node, opts);
    }
    function assertObjectPattern(node, opts) {
      assert(\\"ObjectPattern\\", node, opts);
    }
    function assertSpreadElement(node, opts) {
      assert(\\"SpreadElement\\", node, opts);
    }
    function assertSuper(node, opts) {
      assert(\\"Super\\", node, opts);
    }
    function assertTaggedTemplateExpression(node, opts) {
      assert(\\"TaggedTemplateExpression\\", node, opts);
    }
    function assertTemplateElement(node, opts) {
      assert(\\"TemplateElement\\", node, opts);
    }
    function assertTemplateLiteral(node, opts) {
      assert(\\"TemplateLiteral\\", node, opts);
    }
    function assertYieldExpression(node, opts) {
      assert(\\"YieldExpression\\", node, opts);
    }
    function assertAwaitExpression(node, opts) {
      assert(\\"AwaitExpression\\", node, opts);
    }
    function assertImport(node, opts) {
      assert(\\"Import\\", node, opts);
    }
    function assertBigIntLiteral(node, opts) {
      assert(\\"BigIntLiteral\\", node, opts);
    }
    function assertExportNamespaceSpecifier(node, opts) {
      assert(\\"ExportNamespaceSpecifier\\", node, opts);
    }
    function assertOptionalMemberExpression(node, opts) {
      assert(\\"OptionalMemberExpression\\", node, opts);
    }
    function assertOptionalCallExpression(node, opts) {
      assert(\\"OptionalCallExpression\\", node, opts);
    }
    function assertClassProperty(node, opts) {
      assert(\\"ClassProperty\\", node, opts);
    }
    function assertClassPrivateProperty(node, opts) {
      assert(\\"ClassPrivateProperty\\", node, opts);
    }
    function assertClassPrivateMethod(node, opts) {
      assert(\\"ClassPrivateMethod\\", node, opts);
    }
    function assertPrivateName(node, opts) {
      assert(\\"PrivateName\\", node, opts);
    }
    function assertStaticBlock(node, opts) {
      assert(\\"StaticBlock\\", node, opts);
    }
    function assertAnyTypeAnnotation(node, opts) {
      assert(\\"AnyTypeAnnotation\\", node, opts);
    }
    function assertArrayTypeAnnotation(node, opts) {
      assert(\\"ArrayTypeAnnotation\\", node, opts);
    }
    function assertBooleanTypeAnnotation(node, opts) {
      assert(\\"BooleanTypeAnnotation\\", node, opts);
    }
    function assertBooleanLiteralTypeAnnotation(node, opts) {
      assert(\\"BooleanLiteralTypeAnnotation\\", node, opts);
    }
    function assertNullLiteralTypeAnnotation(node, opts) {
      assert(\\"NullLiteralTypeAnnotation\\", node, opts);
    }
    function assertClassImplements(node, opts) {
      assert(\\"ClassImplements\\", node, opts);
    }
    function assertDeclareClass(node, opts) {
      assert(\\"DeclareClass\\", node, opts);
    }
    function assertDeclareFunction(node, opts) {
      assert(\\"DeclareFunction\\", node, opts);
    }
    function assertDeclareInterface(node, opts) {
      assert(\\"DeclareInterface\\", node, opts);
    }
    function assertDeclareModule(node, opts) {
      assert(\\"DeclareModule\\", node, opts);
    }
    function assertDeclareModuleExports(node, opts) {
      assert(\\"DeclareModuleExports\\", node, opts);
    }
    function assertDeclareTypeAlias(node, opts) {
      assert(\\"DeclareTypeAlias\\", node, opts);
    }
    function assertDeclareOpaqueType(node, opts) {
      assert(\\"DeclareOpaqueType\\", node, opts);
    }
    function assertDeclareVariable(node, opts) {
      assert(\\"DeclareVariable\\", node, opts);
    }
    function assertDeclareExportDeclaration(node, opts) {
      assert(\\"DeclareExportDeclaration\\", node, opts);
    }
    function assertDeclareExportAllDeclaration(node, opts) {
      assert(\\"DeclareExportAllDeclaration\\", node, opts);
    }
    function assertDeclaredPredicate(node, opts) {
      assert(\\"DeclaredPredicate\\", node, opts);
    }
    function assertExistsTypeAnnotation(node, opts) {
      assert(\\"ExistsTypeAnnotation\\", node, opts);
    }
    function assertFunctionTypeAnnotation(node, opts) {
      assert(\\"FunctionTypeAnnotation\\", node, opts);
    }
    function assertFunctionTypeParam(node, opts) {
      assert(\\"FunctionTypeParam\\", node, opts);
    }
    function assertGenericTypeAnnotation(node, opts) {
      assert(\\"GenericTypeAnnotation\\", node, opts);
    }
    function assertInferredPredicate(node, opts) {
      assert(\\"InferredPredicate\\", node, opts);
    }
    function assertInterfaceExtends(node, opts) {
      assert(\\"InterfaceExtends\\", node, opts);
    }
    function assertInterfaceDeclaration(node, opts) {
      assert(\\"InterfaceDeclaration\\", node, opts);
    }
    function assertInterfaceTypeAnnotation(node, opts) {
      assert(\\"InterfaceTypeAnnotation\\", node, opts);
    }
    function assertIntersectionTypeAnnotation(node, opts) {
      assert(\\"IntersectionTypeAnnotation\\", node, opts);
    }
    function assertMixedTypeAnnotation(node, opts) {
      assert(\\"MixedTypeAnnotation\\", node, opts);
    }
    function assertEmptyTypeAnnotation(node, opts) {
      assert(\\"EmptyTypeAnnotation\\", node, opts);
    }
    function assertNullableTypeAnnotation(node, opts) {
      assert(\\"NullableTypeAnnotation\\", node, opts);
    }
    function assertNumberLiteralTypeAnnotation(node, opts) {
      assert(\\"NumberLiteralTypeAnnotation\\", node, opts);
    }
    function assertNumberTypeAnnotation(node, opts) {
      assert(\\"NumberTypeAnnotation\\", node, opts);
    }
    function assertObjectTypeAnnotation(node, opts) {
      assert(\\"ObjectTypeAnnotation\\", node, opts);
    }
    function assertObjectTypeInternalSlot(node, opts) {
      assert(\\"ObjectTypeInternalSlot\\", node, opts);
    }
    function assertObjectTypeCallProperty(node, opts) {
      assert(\\"ObjectTypeCallProperty\\", node, opts);
    }
    function assertObjectTypeIndexer(node, opts) {
      assert(\\"ObjectTypeIndexer\\", node, opts);
    }
    function assertObjectTypeProperty(node, opts) {
      assert(\\"ObjectTypeProperty\\", node, opts);
    }
    function assertObjectTypeSpreadProperty(node, opts) {
      assert(\\"ObjectTypeSpreadProperty\\", node, opts);
    }
    function assertOpaqueType(node, opts) {
      assert(\\"OpaqueType\\", node, opts);
    }
    function assertQualifiedTypeIdentifier(node, opts) {
      assert(\\"QualifiedTypeIdentifier\\", node, opts);
    }
    function assertStringLiteralTypeAnnotation(node, opts) {
      assert(\\"StringLiteralTypeAnnotation\\", node, opts);
    }
    function assertStringTypeAnnotation(node, opts) {
      assert(\\"StringTypeAnnotation\\", node, opts);
    }
    function assertSymbolTypeAnnotation(node, opts) {
      assert(\\"SymbolTypeAnnotation\\", node, opts);
    }
    function assertThisTypeAnnotation(node, opts) {
      assert(\\"ThisTypeAnnotation\\", node, opts);
    }
    function assertTupleTypeAnnotation(node, opts) {
      assert(\\"TupleTypeAnnotation\\", node, opts);
    }
    function assertTypeofTypeAnnotation(node, opts) {
      assert(\\"TypeofTypeAnnotation\\", node, opts);
    }
    function assertTypeAlias(node, opts) {
      assert(\\"TypeAlias\\", node, opts);
    }
    function assertTypeAnnotation(node, opts) {
      assert(\\"TypeAnnotation\\", node, opts);
    }
    function assertTypeCastExpression(node, opts) {
      assert(\\"TypeCastExpression\\", node, opts);
    }
    function assertTypeParameter(node, opts) {
      assert(\\"TypeParameter\\", node, opts);
    }
    function assertTypeParameterDeclaration(node, opts) {
      assert(\\"TypeParameterDeclaration\\", node, opts);
    }
    function assertTypeParameterInstantiation(node, opts) {
      assert(\\"TypeParameterInstantiation\\", node, opts);
    }
    function assertUnionTypeAnnotation(node, opts) {
      assert(\\"UnionTypeAnnotation\\", node, opts);
    }
    function assertVariance(node, opts) {
      assert(\\"Variance\\", node, opts);
    }
    function assertVoidTypeAnnotation(node, opts) {
      assert(\\"VoidTypeAnnotation\\", node, opts);
    }
    function assertEnumDeclaration(node, opts) {
      assert(\\"EnumDeclaration\\", node, opts);
    }
    function assertEnumBooleanBody(node, opts) {
      assert(\\"EnumBooleanBody\\", node, opts);
    }
    function assertEnumNumberBody(node, opts) {
      assert(\\"EnumNumberBody\\", node, opts);
    }
    function assertEnumStringBody(node, opts) {
      assert(\\"EnumStringBody\\", node, opts);
    }
    function assertEnumSymbolBody(node, opts) {
      assert(\\"EnumSymbolBody\\", node, opts);
    }
    function assertEnumBooleanMember(node, opts) {
      assert(\\"EnumBooleanMember\\", node, opts);
    }
    function assertEnumNumberMember(node, opts) {
      assert(\\"EnumNumberMember\\", node, opts);
    }
    function assertEnumStringMember(node, opts) {
      assert(\\"EnumStringMember\\", node, opts);
    }
    function assertEnumDefaultedMember(node, opts) {
      assert(\\"EnumDefaultedMember\\", node, opts);
    }
    function assertIndexedAccessType(node, opts) {
      assert(\\"IndexedAccessType\\", node, opts);
    }
    function assertOptionalIndexedAccessType(node, opts) {
      assert(\\"OptionalIndexedAccessType\\", node, opts);
    }
    function assertJSXAttribute(node, opts) {
      assert(\\"JSXAttribute\\", node, opts);
    }
    function assertJSXClosingElement(node, opts) {
      assert(\\"JSXClosingElement\\", node, opts);
    }
    function assertJSXElement(node, opts) {
      assert(\\"JSXElement\\", node, opts);
    }
    function assertJSXEmptyExpression(node, opts) {
      assert(\\"JSXEmptyExpression\\", node, opts);
    }
    function assertJSXExpressionContainer(node, opts) {
      assert(\\"JSXExpressionContainer\\", node, opts);
    }
    function assertJSXSpreadChild(node, opts) {
      assert(\\"JSXSpreadChild\\", node, opts);
    }
    function assertJSXIdentifier(node, opts) {
      assert(\\"JSXIdentifier\\", node, opts);
    }
    function assertJSXMemberExpression(node, opts) {
      assert(\\"JSXMemberExpression\\", node, opts);
    }
    function assertJSXNamespacedName(node, opts) {
      assert(\\"JSXNamespacedName\\", node, opts);
    }
    function assertJSXOpeningElement(node, opts) {
      assert(\\"JSXOpeningElement\\", node, opts);
    }
    function assertJSXSpreadAttribute(node, opts) {
      assert(\\"JSXSpreadAttribute\\", node, opts);
    }
    function assertJSXText(node, opts) {
      assert(\\"JSXText\\", node, opts);
    }
    function assertJSXFragment(node, opts) {
      assert(\\"JSXFragment\\", node, opts);
    }
    function assertJSXOpeningFragment(node, opts) {
      assert(\\"JSXOpeningFragment\\", node, opts);
    }
    function assertJSXClosingFragment(node, opts) {
      assert(\\"JSXClosingFragment\\", node, opts);
    }
    function assertNoop(node, opts) {
      assert(\\"Noop\\", node, opts);
    }
    function assertPlaceholder(node, opts) {
      assert(\\"Placeholder\\", node, opts);
    }
    function assertV8IntrinsicIdentifier(node, opts) {
      assert(\\"V8IntrinsicIdentifier\\", node, opts);
    }
    function assertArgumentPlaceholder(node, opts) {
      assert(\\"ArgumentPlaceholder\\", node, opts);
    }
    function assertBindExpression(node, opts) {
      assert(\\"BindExpression\\", node, opts);
    }
    function assertImportAttribute(node, opts) {
      assert(\\"ImportAttribute\\", node, opts);
    }
    function assertDecorator(node, opts) {
      assert(\\"Decorator\\", node, opts);
    }
    function assertDoExpression(node, opts) {
      assert(\\"DoExpression\\", node, opts);
    }
    function assertExportDefaultSpecifier(node, opts) {
      assert(\\"ExportDefaultSpecifier\\", node, opts);
    }
    function assertRecordExpression(node, opts) {
      assert(\\"RecordExpression\\", node, opts);
    }
    function assertTupleExpression(node, opts) {
      assert(\\"TupleExpression\\", node, opts);
    }
    function assertDecimalLiteral(node, opts) {
      assert(\\"DecimalLiteral\\", node, opts);
    }
    function assertModuleExpression(node, opts) {
      assert(\\"ModuleExpression\\", node, opts);
    }
    function assertTopicReference(node, opts) {
      assert(\\"TopicReference\\", node, opts);
    }
    function assertPipelineTopicExpression(node, opts) {
      assert(\\"PipelineTopicExpression\\", node, opts);
    }
    function assertPipelineBareFunction(node, opts) {
      assert(\\"PipelineBareFunction\\", node, opts);
    }
    function assertPipelinePrimaryTopicReference(node, opts) {
      assert(\\"PipelinePrimaryTopicReference\\", node, opts);
    }
    function assertTSParameterProperty(node, opts) {
      assert(\\"TSParameterProperty\\", node, opts);
    }
    function assertTSDeclareFunction(node, opts) {
      assert(\\"TSDeclareFunction\\", node, opts);
    }
    function assertTSDeclareMethod(node, opts) {
      assert(\\"TSDeclareMethod\\", node, opts);
    }
    function assertTSQualifiedName(node, opts) {
      assert(\\"TSQualifiedName\\", node, opts);
    }
    function assertTSCallSignatureDeclaration(node, opts) {
      assert(\\"TSCallSignatureDeclaration\\", node, opts);
    }
    function assertTSConstructSignatureDeclaration(node, opts) {
      assert(\\"TSConstructSignatureDeclaration\\", node, opts);
    }
    function assertTSPropertySignature(node, opts) {
      assert(\\"TSPropertySignature\\", node, opts);
    }
    function assertTSMethodSignature(node, opts) {
      assert(\\"TSMethodSignature\\", node, opts);
    }
    function assertTSIndexSignature(node, opts) {
      assert(\\"TSIndexSignature\\", node, opts);
    }
    function assertTSAnyKeyword(node, opts) {
      assert(\\"TSAnyKeyword\\", node, opts);
    }
    function assertTSBooleanKeyword(node, opts) {
      assert(\\"TSBooleanKeyword\\", node, opts);
    }
    function assertTSBigIntKeyword(node, opts) {
      assert(\\"TSBigIntKeyword\\", node, opts);
    }
    function assertTSIntrinsicKeyword(node, opts) {
      assert(\\"TSIntrinsicKeyword\\", node, opts);
    }
    function assertTSNeverKeyword(node, opts) {
      assert(\\"TSNeverKeyword\\", node, opts);
    }
    function assertTSNullKeyword(node, opts) {
      assert(\\"TSNullKeyword\\", node, opts);
    }
    function assertTSNumberKeyword(node, opts) {
      assert(\\"TSNumberKeyword\\", node, opts);
    }
    function assertTSObjectKeyword(node, opts) {
      assert(\\"TSObjectKeyword\\", node, opts);
    }
    function assertTSStringKeyword(node, opts) {
      assert(\\"TSStringKeyword\\", node, opts);
    }
    function assertTSSymbolKeyword(node, opts) {
      assert(\\"TSSymbolKeyword\\", node, opts);
    }
    function assertTSUndefinedKeyword(node, opts) {
      assert(\\"TSUndefinedKeyword\\", node, opts);
    }
    function assertTSUnknownKeyword(node, opts) {
      assert(\\"TSUnknownKeyword\\", node, opts);
    }
    function assertTSVoidKeyword(node, opts) {
      assert(\\"TSVoidKeyword\\", node, opts);
    }
    function assertTSThisType(node, opts) {
      assert(\\"TSThisType\\", node, opts);
    }
    function assertTSFunctionType(node, opts) {
      assert(\\"TSFunctionType\\", node, opts);
    }
    function assertTSConstructorType(node, opts) {
      assert(\\"TSConstructorType\\", node, opts);
    }
    function assertTSTypeReference(node, opts) {
      assert(\\"TSTypeReference\\", node, opts);
    }
    function assertTSTypePredicate(node, opts) {
      assert(\\"TSTypePredicate\\", node, opts);
    }
    function assertTSTypeQuery(node, opts) {
      assert(\\"TSTypeQuery\\", node, opts);
    }
    function assertTSTypeLiteral(node, opts) {
      assert(\\"TSTypeLiteral\\", node, opts);
    }
    function assertTSArrayType(node, opts) {
      assert(\\"TSArrayType\\", node, opts);
    }
    function assertTSTupleType(node, opts) {
      assert(\\"TSTupleType\\", node, opts);
    }
    function assertTSOptionalType(node, opts) {
      assert(\\"TSOptionalType\\", node, opts);
    }
    function assertTSRestType(node, opts) {
      assert(\\"TSRestType\\", node, opts);
    }
    function assertTSNamedTupleMember(node, opts) {
      assert(\\"TSNamedTupleMember\\", node, opts);
    }
    function assertTSUnionType(node, opts) {
      assert(\\"TSUnionType\\", node, opts);
    }
    function assertTSIntersectionType(node, opts) {
      assert(\\"TSIntersectionType\\", node, opts);
    }
    function assertTSConditionalType(node, opts) {
      assert(\\"TSConditionalType\\", node, opts);
    }
    function assertTSInferType(node, opts) {
      assert(\\"TSInferType\\", node, opts);
    }
    function assertTSParenthesizedType(node, opts) {
      assert(\\"TSParenthesizedType\\", node, opts);
    }
    function assertTSTypeOperator(node, opts) {
      assert(\\"TSTypeOperator\\", node, opts);
    }
    function assertTSIndexedAccessType(node, opts) {
      assert(\\"TSIndexedAccessType\\", node, opts);
    }
    function assertTSMappedType(node, opts) {
      assert(\\"TSMappedType\\", node, opts);
    }
    function assertTSLiteralType(node, opts) {
      assert(\\"TSLiteralType\\", node, opts);
    }
    function assertTSExpressionWithTypeArguments(node, opts) {
      assert(\\"TSExpressionWithTypeArguments\\", node, opts);
    }
    function assertTSInterfaceDeclaration(node, opts) {
      assert(\\"TSInterfaceDeclaration\\", node, opts);
    }
    function assertTSInterfaceBody(node, opts) {
      assert(\\"TSInterfaceBody\\", node, opts);
    }
    function assertTSTypeAliasDeclaration(node, opts) {
      assert(\\"TSTypeAliasDeclaration\\", node, opts);
    }
    function assertTSAsExpression(node, opts) {
      assert(\\"TSAsExpression\\", node, opts);
    }
    function assertTSTypeAssertion(node, opts) {
      assert(\\"TSTypeAssertion\\", node, opts);
    }
    function assertTSEnumDeclaration(node, opts) {
      assert(\\"TSEnumDeclaration\\", node, opts);
    }
    function assertTSEnumMember(node, opts) {
      assert(\\"TSEnumMember\\", node, opts);
    }
    function assertTSModuleDeclaration(node, opts) {
      assert(\\"TSModuleDeclaration\\", node, opts);
    }
    function assertTSModuleBlock(node, opts) {
      assert(\\"TSModuleBlock\\", node, opts);
    }
    function assertTSImportType(node, opts) {
      assert(\\"TSImportType\\", node, opts);
    }
    function assertTSImportEqualsDeclaration(node, opts) {
      assert(\\"TSImportEqualsDeclaration\\", node, opts);
    }
    function assertTSExternalModuleReference(node, opts) {
      assert(\\"TSExternalModuleReference\\", node, opts);
    }
    function assertTSNonNullExpression(node, opts) {
      assert(\\"TSNonNullExpression\\", node, opts);
    }
    function assertTSExportAssignment(node, opts) {
      assert(\\"TSExportAssignment\\", node, opts);
    }
    function assertTSNamespaceExportDeclaration(node, opts) {
      assert(\\"TSNamespaceExportDeclaration\\", node, opts);
    }
    function assertTSTypeAnnotation(node, opts) {
      assert(\\"TSTypeAnnotation\\", node, opts);
    }
    function assertTSTypeParameterInstantiation(node, opts) {
      assert(\\"TSTypeParameterInstantiation\\", node, opts);
    }
    function assertTSTypeParameterDeclaration(node, opts) {
      assert(\\"TSTypeParameterDeclaration\\", node, opts);
    }
    function assertTSTypeParameter(node, opts) {
      assert(\\"TSTypeParameter\\", node, opts);
    }
    function assertStandardized(node, opts) {
      assert(\\"Standardized\\", node, opts);
    }
    function assertExpression(node, opts) {
      assert(\\"Expression\\", node, opts);
    }
    function assertBinary(node, opts) {
      assert(\\"Binary\\", node, opts);
    }
    function assertScopable(node, opts) {
      assert(\\"Scopable\\", node, opts);
    }
    function assertBlockParent(node, opts) {
      assert(\\"BlockParent\\", node, opts);
    }
    function assertBlock(node, opts) {
      assert(\\"Block\\", node, opts);
    }
    function assertStatement(node, opts) {
      assert(\\"Statement\\", node, opts);
    }
    function assertTerminatorless(node, opts) {
      assert(\\"Terminatorless\\", node, opts);
    }
    function assertCompletionStatement(node, opts) {
      assert(\\"CompletionStatement\\", node, opts);
    }
    function assertConditional(node, opts) {
      assert(\\"Conditional\\", node, opts);
    }
    function assertLoop(node, opts) {
      assert(\\"Loop\\", node, opts);
    }
    function assertWhile(node, opts) {
      assert(\\"While\\", node, opts);
    }
    function assertExpressionWrapper(node, opts) {
      assert(\\"ExpressionWrapper\\", node, opts);
    }
    function assertFor(node, opts) {
      assert(\\"For\\", node, opts);
    }
    function assertForXStatement(node, opts) {
      assert(\\"ForXStatement\\", node, opts);
    }
    function assertFunction(node, opts) {
      assert(\\"Function\\", node, opts);
    }
    function assertFunctionParent(node, opts) {
      assert(\\"FunctionParent\\", node, opts);
    }
    function assertPureish(node, opts) {
      assert(\\"Pureish\\", node, opts);
    }
    function assertDeclaration(node, opts) {
      assert(\\"Declaration\\", node, opts);
    }
    function assertPatternLike(node, opts) {
      assert(\\"PatternLike\\", node, opts);
    }
    function assertLVal(node, opts) {
      assert(\\"LVal\\", node, opts);
    }
    function assertTSEntityName(node, opts) {
      assert(\\"TSEntityName\\", node, opts);
    }
    function assertLiteral(node, opts) {
      assert(\\"Literal\\", node, opts);
    }
    function assertImmutable(node, opts) {
      assert(\\"Immutable\\", node, opts);
    }
    function assertUserWhitespacable(node, opts) {
      assert(\\"UserWhitespacable\\", node, opts);
    }
    function assertMethod(node, opts) {
      assert(\\"Method\\", node, opts);
    }
    function assertObjectMember(node, opts) {
      assert(\\"ObjectMember\\", node, opts);
    }
    function assertProperty(node, opts) {
      assert(\\"Property\\", node, opts);
    }
    function assertUnaryLike(node, opts) {
      assert(\\"UnaryLike\\", node, opts);
    }
    function assertPattern(node, opts) {
      assert(\\"Pattern\\", node, opts);
    }
    function assertClass(node, opts) {
      assert(\\"Class\\", node, opts);
    }
    function assertModuleDeclaration(node, opts) {
      assert(\\"ModuleDeclaration\\", node, opts);
    }
    function assertExportDeclaration(node, opts) {
      assert(\\"ExportDeclaration\\", node, opts);
    }
    function assertModuleSpecifier(node, opts) {
      assert(\\"ModuleSpecifier\\", node, opts);
    }
    function assertPrivate(node, opts) {
      assert(\\"Private\\", node, opts);
    }
    function assertFlow(node, opts) {
      assert(\\"Flow\\", node, opts);
    }
    function assertFlowType(node, opts) {
      assert(\\"FlowType\\", node, opts);
    }
    function assertFlowBaseAnnotation(node, opts) {
      assert(\\"FlowBaseAnnotation\\", node, opts);
    }
    function assertFlowDeclaration(node, opts) {
      assert(\\"FlowDeclaration\\", node, opts);
    }
    function assertFlowPredicate(node, opts) {
      assert(\\"FlowPredicate\\", node, opts);
    }
    function assertEnumBody(node, opts) {
      assert(\\"EnumBody\\", node, opts);
    }
    function assertEnumMember(node, opts) {
      assert(\\"EnumMember\\", node, opts);
    }
    function assertJSX(node, opts) {
      assert(\\"JSX\\", node, opts);
    }
    function assertMiscellaneous(node, opts) {
      assert(\\"Miscellaneous\\", node, opts);
    }
    function assertTypeScript(node, opts) {
      assert(\\"TypeScript\\", node, opts);
    }
    function assertTSTypeElement(node, opts) {
      assert(\\"TSTypeElement\\", node, opts);
    }
    function assertTSType(node, opts) {
      assert(\\"TSType\\", node, opts);
    }
    function assertTSBaseType(node, opts) {
      assert(\\"TSBaseType\\", node, opts);
    }
    function assertNumberLiteral(node, opts) {
      console.trace(\\"The node type NumberLiteral has been renamed to NumericLiteral\\");
      assert(\\"NumberLiteral\\", node, opts);
    }
    function assertRegexLiteral(node, opts) {
      console.trace(\\"The node type RegexLiteral has been renamed to RegExpLiteral\\");
      assert(\\"RegexLiteral\\", node, opts);
    }
    function assertRestProperty(node, opts) {
      console.trace(\\"The node type RestProperty has been renamed to RestElement\\");
      assert(\\"RestProperty\\", node, opts);
    }
    function assertSpreadProperty(node, opts) {
      console.trace(\\"The node type SpreadProperty has been renamed to SpreadElement\\");
      assert(\\"SpreadProperty\\", node, opts);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js
var require_createTypeAnnotationBasedOnTypeof = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _generated = require_generated2();
    var _default = createTypeAnnotationBasedOnTypeof;
    exports.default = _default;
    function createTypeAnnotationBasedOnTypeof(type) {
      switch (type) {
        case \\"string\\":
          return (0, _generated.stringTypeAnnotation)();
        case \\"number\\":
          return (0, _generated.numberTypeAnnotation)();
        case \\"undefined\\":
          return (0, _generated.voidTypeAnnotation)();
        case \\"boolean\\":
          return (0, _generated.booleanTypeAnnotation)();
        case \\"function\\":
          return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\\"Function\\"));
        case \\"object\\":
          return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\\"Object\\"));
        case \\"symbol\\":
          return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\\"Symbol\\"));
        case \\"bigint\\":
          return (0, _generated.anyTypeAnnotation)();
      }
      throw new Error(\\"Invalid typeof value: \\" + type);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js
var require_removeTypeDuplicates = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = removeTypeDuplicates;
    var _generated = require_generated();
    function getQualifiedName(node) {
      return (0, _generated.isIdentifier)(node) ? node.name : \`\${node.id.name}.\${getQualifiedName(node.qualification)}\`;
    }
    function removeTypeDuplicates(nodes) {
      const generics = {};
      const bases = {};
      const typeGroups = /* @__PURE__ */ new Set();
      const types = [];
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (!node)
          continue;
        if (types.indexOf(node) >= 0) {
          continue;
        }
        if ((0, _generated.isAnyTypeAnnotation)(node)) {
          return [node];
        }
        if ((0, _generated.isFlowBaseAnnotation)(node)) {
          bases[node.type] = node;
          continue;
        }
        if ((0, _generated.isUnionTypeAnnotation)(node)) {
          if (!typeGroups.has(node.types)) {
            nodes = nodes.concat(node.types);
            typeGroups.add(node.types);
          }
          continue;
        }
        if ((0, _generated.isGenericTypeAnnotation)(node)) {
          const name = getQualifiedName(node.id);
          if (generics[name]) {
            let existing = generics[name];
            if (existing.typeParameters) {
              if (node.typeParameters) {
                existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
              }
            } else {
              existing = node.typeParameters;
            }
          } else {
            generics[name] = node;
          }
          continue;
        }
        types.push(node);
      }
      for (const type of Object.keys(bases)) {
        types.push(bases[type]);
      }
      for (const name of Object.keys(generics)) {
        types.push(generics[name]);
      }
      return types;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js
var require_createFlowUnionType = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = createFlowUnionType;
    var _generated = require_generated2();
    var _removeTypeDuplicates = require_removeTypeDuplicates();
    function createFlowUnionType(types) {
      const flattened = (0, _removeTypeDuplicates.default)(types);
      if (flattened.length === 1) {
        return flattened[0];
      } else {
        return (0, _generated.unionTypeAnnotation)(flattened);
      }
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js
var require_removeTypeDuplicates2 = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = removeTypeDuplicates;
    var _generated = require_generated();
    function removeTypeDuplicates(nodes) {
      const generics = {};
      const bases = {};
      const typeGroups = /* @__PURE__ */ new Set();
      const types = [];
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (!node)
          continue;
        if (types.indexOf(node) >= 0) {
          continue;
        }
        if ((0, _generated.isTSAnyKeyword)(node)) {
          return [node];
        }
        if ((0, _generated.isTSBaseType)(node)) {
          bases[node.type] = node;
          continue;
        }
        if ((0, _generated.isTSUnionType)(node)) {
          if (!typeGroups.has(node.types)) {
            nodes.push(...node.types);
            typeGroups.add(node.types);
          }
          continue;
        }
        types.push(node);
      }
      for (const type of Object.keys(bases)) {
        types.push(bases[type]);
      }
      for (const name of Object.keys(generics)) {
        types.push(generics[name]);
      }
      return types;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js
var require_createTSUnionType = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = createTSUnionType;
    var _generated = require_generated2();
    var _removeTypeDuplicates = require_removeTypeDuplicates2();
    function createTSUnionType(typeAnnotations) {
      const types = typeAnnotations.map((type) => type.typeAnnotation);
      const flattened = (0, _removeTypeDuplicates.default)(types);
      if (flattened.length === 1) {
        return flattened[0];
      } else {
        return (0, _generated.tsUnionType)(flattened);
      }
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/generated/uppercase.js
var require_uppercase = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/builders/generated/uppercase.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports, \\"AnyTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.anyTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"ArgumentPlaceholder\\", {
      enumerable: true,
      get: function() {
        return _index.argumentPlaceholder;
      }
    });
    Object.defineProperty(exports, \\"ArrayExpression\\", {
      enumerable: true,
      get: function() {
        return _index.arrayExpression;
      }
    });
    Object.defineProperty(exports, \\"ArrayPattern\\", {
      enumerable: true,
      get: function() {
        return _index.arrayPattern;
      }
    });
    Object.defineProperty(exports, \\"ArrayTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.arrayTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"ArrowFunctionExpression\\", {
      enumerable: true,
      get: function() {
        return _index.arrowFunctionExpression;
      }
    });
    Object.defineProperty(exports, \\"AssignmentExpression\\", {
      enumerable: true,
      get: function() {
        return _index.assignmentExpression;
      }
    });
    Object.defineProperty(exports, \\"AssignmentPattern\\", {
      enumerable: true,
      get: function() {
        return _index.assignmentPattern;
      }
    });
    Object.defineProperty(exports, \\"AwaitExpression\\", {
      enumerable: true,
      get: function() {
        return _index.awaitExpression;
      }
    });
    Object.defineProperty(exports, \\"BigIntLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.bigIntLiteral;
      }
    });
    Object.defineProperty(exports, \\"BinaryExpression\\", {
      enumerable: true,
      get: function() {
        return _index.binaryExpression;
      }
    });
    Object.defineProperty(exports, \\"BindExpression\\", {
      enumerable: true,
      get: function() {
        return _index.bindExpression;
      }
    });
    Object.defineProperty(exports, \\"BlockStatement\\", {
      enumerable: true,
      get: function() {
        return _index.blockStatement;
      }
    });
    Object.defineProperty(exports, \\"BooleanLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.booleanLiteral;
      }
    });
    Object.defineProperty(exports, \\"BooleanLiteralTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.booleanLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"BooleanTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.booleanTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"BreakStatement\\", {
      enumerable: true,
      get: function() {
        return _index.breakStatement;
      }
    });
    Object.defineProperty(exports, \\"CallExpression\\", {
      enumerable: true,
      get: function() {
        return _index.callExpression;
      }
    });
    Object.defineProperty(exports, \\"CatchClause\\", {
      enumerable: true,
      get: function() {
        return _index.catchClause;
      }
    });
    Object.defineProperty(exports, \\"ClassBody\\", {
      enumerable: true,
      get: function() {
        return _index.classBody;
      }
    });
    Object.defineProperty(exports, \\"ClassDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.classDeclaration;
      }
    });
    Object.defineProperty(exports, \\"ClassExpression\\", {
      enumerable: true,
      get: function() {
        return _index.classExpression;
      }
    });
    Object.defineProperty(exports, \\"ClassImplements\\", {
      enumerable: true,
      get: function() {
        return _index.classImplements;
      }
    });
    Object.defineProperty(exports, \\"ClassMethod\\", {
      enumerable: true,
      get: function() {
        return _index.classMethod;
      }
    });
    Object.defineProperty(exports, \\"ClassPrivateMethod\\", {
      enumerable: true,
      get: function() {
        return _index.classPrivateMethod;
      }
    });
    Object.defineProperty(exports, \\"ClassPrivateProperty\\", {
      enumerable: true,
      get: function() {
        return _index.classPrivateProperty;
      }
    });
    Object.defineProperty(exports, \\"ClassProperty\\", {
      enumerable: true,
      get: function() {
        return _index.classProperty;
      }
    });
    Object.defineProperty(exports, \\"ConditionalExpression\\", {
      enumerable: true,
      get: function() {
        return _index.conditionalExpression;
      }
    });
    Object.defineProperty(exports, \\"ContinueStatement\\", {
      enumerable: true,
      get: function() {
        return _index.continueStatement;
      }
    });
    Object.defineProperty(exports, \\"DebuggerStatement\\", {
      enumerable: true,
      get: function() {
        return _index.debuggerStatement;
      }
    });
    Object.defineProperty(exports, \\"DecimalLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.decimalLiteral;
      }
    });
    Object.defineProperty(exports, \\"DeclareClass\\", {
      enumerable: true,
      get: function() {
        return _index.declareClass;
      }
    });
    Object.defineProperty(exports, \\"DeclareExportAllDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.declareExportAllDeclaration;
      }
    });
    Object.defineProperty(exports, \\"DeclareExportDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.declareExportDeclaration;
      }
    });
    Object.defineProperty(exports, \\"DeclareFunction\\", {
      enumerable: true,
      get: function() {
        return _index.declareFunction;
      }
    });
    Object.defineProperty(exports, \\"DeclareInterface\\", {
      enumerable: true,
      get: function() {
        return _index.declareInterface;
      }
    });
    Object.defineProperty(exports, \\"DeclareModule\\", {
      enumerable: true,
      get: function() {
        return _index.declareModule;
      }
    });
    Object.defineProperty(exports, \\"DeclareModuleExports\\", {
      enumerable: true,
      get: function() {
        return _index.declareModuleExports;
      }
    });
    Object.defineProperty(exports, \\"DeclareOpaqueType\\", {
      enumerable: true,
      get: function() {
        return _index.declareOpaqueType;
      }
    });
    Object.defineProperty(exports, \\"DeclareTypeAlias\\", {
      enumerable: true,
      get: function() {
        return _index.declareTypeAlias;
      }
    });
    Object.defineProperty(exports, \\"DeclareVariable\\", {
      enumerable: true,
      get: function() {
        return _index.declareVariable;
      }
    });
    Object.defineProperty(exports, \\"DeclaredPredicate\\", {
      enumerable: true,
      get: function() {
        return _index.declaredPredicate;
      }
    });
    Object.defineProperty(exports, \\"Decorator\\", {
      enumerable: true,
      get: function() {
        return _index.decorator;
      }
    });
    Object.defineProperty(exports, \\"Directive\\", {
      enumerable: true,
      get: function() {
        return _index.directive;
      }
    });
    Object.defineProperty(exports, \\"DirectiveLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.directiveLiteral;
      }
    });
    Object.defineProperty(exports, \\"DoExpression\\", {
      enumerable: true,
      get: function() {
        return _index.doExpression;
      }
    });
    Object.defineProperty(exports, \\"DoWhileStatement\\", {
      enumerable: true,
      get: function() {
        return _index.doWhileStatement;
      }
    });
    Object.defineProperty(exports, \\"EmptyStatement\\", {
      enumerable: true,
      get: function() {
        return _index.emptyStatement;
      }
    });
    Object.defineProperty(exports, \\"EmptyTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.emptyTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"EnumBooleanBody\\", {
      enumerable: true,
      get: function() {
        return _index.enumBooleanBody;
      }
    });
    Object.defineProperty(exports, \\"EnumBooleanMember\\", {
      enumerable: true,
      get: function() {
        return _index.enumBooleanMember;
      }
    });
    Object.defineProperty(exports, \\"EnumDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.enumDeclaration;
      }
    });
    Object.defineProperty(exports, \\"EnumDefaultedMember\\", {
      enumerable: true,
      get: function() {
        return _index.enumDefaultedMember;
      }
    });
    Object.defineProperty(exports, \\"EnumNumberBody\\", {
      enumerable: true,
      get: function() {
        return _index.enumNumberBody;
      }
    });
    Object.defineProperty(exports, \\"EnumNumberMember\\", {
      enumerable: true,
      get: function() {
        return _index.enumNumberMember;
      }
    });
    Object.defineProperty(exports, \\"EnumStringBody\\", {
      enumerable: true,
      get: function() {
        return _index.enumStringBody;
      }
    });
    Object.defineProperty(exports, \\"EnumStringMember\\", {
      enumerable: true,
      get: function() {
        return _index.enumStringMember;
      }
    });
    Object.defineProperty(exports, \\"EnumSymbolBody\\", {
      enumerable: true,
      get: function() {
        return _index.enumSymbolBody;
      }
    });
    Object.defineProperty(exports, \\"ExistsTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.existsTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"ExportAllDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.exportAllDeclaration;
      }
    });
    Object.defineProperty(exports, \\"ExportDefaultDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.exportDefaultDeclaration;
      }
    });
    Object.defineProperty(exports, \\"ExportDefaultSpecifier\\", {
      enumerable: true,
      get: function() {
        return _index.exportDefaultSpecifier;
      }
    });
    Object.defineProperty(exports, \\"ExportNamedDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.exportNamedDeclaration;
      }
    });
    Object.defineProperty(exports, \\"ExportNamespaceSpecifier\\", {
      enumerable: true,
      get: function() {
        return _index.exportNamespaceSpecifier;
      }
    });
    Object.defineProperty(exports, \\"ExportSpecifier\\", {
      enumerable: true,
      get: function() {
        return _index.exportSpecifier;
      }
    });
    Object.defineProperty(exports, \\"ExpressionStatement\\", {
      enumerable: true,
      get: function() {
        return _index.expressionStatement;
      }
    });
    Object.defineProperty(exports, \\"File\\", {
      enumerable: true,
      get: function() {
        return _index.file;
      }
    });
    Object.defineProperty(exports, \\"ForInStatement\\", {
      enumerable: true,
      get: function() {
        return _index.forInStatement;
      }
    });
    Object.defineProperty(exports, \\"ForOfStatement\\", {
      enumerable: true,
      get: function() {
        return _index.forOfStatement;
      }
    });
    Object.defineProperty(exports, \\"ForStatement\\", {
      enumerable: true,
      get: function() {
        return _index.forStatement;
      }
    });
    Object.defineProperty(exports, \\"FunctionDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.functionDeclaration;
      }
    });
    Object.defineProperty(exports, \\"FunctionExpression\\", {
      enumerable: true,
      get: function() {
        return _index.functionExpression;
      }
    });
    Object.defineProperty(exports, \\"FunctionTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.functionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"FunctionTypeParam\\", {
      enumerable: true,
      get: function() {
        return _index.functionTypeParam;
      }
    });
    Object.defineProperty(exports, \\"GenericTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.genericTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"Identifier\\", {
      enumerable: true,
      get: function() {
        return _index.identifier;
      }
    });
    Object.defineProperty(exports, \\"IfStatement\\", {
      enumerable: true,
      get: function() {
        return _index.ifStatement;
      }
    });
    Object.defineProperty(exports, \\"Import\\", {
      enumerable: true,
      get: function() {
        return _index.import;
      }
    });
    Object.defineProperty(exports, \\"ImportAttribute\\", {
      enumerable: true,
      get: function() {
        return _index.importAttribute;
      }
    });
    Object.defineProperty(exports, \\"ImportDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.importDeclaration;
      }
    });
    Object.defineProperty(exports, \\"ImportDefaultSpecifier\\", {
      enumerable: true,
      get: function() {
        return _index.importDefaultSpecifier;
      }
    });
    Object.defineProperty(exports, \\"ImportNamespaceSpecifier\\", {
      enumerable: true,
      get: function() {
        return _index.importNamespaceSpecifier;
      }
    });
    Object.defineProperty(exports, \\"ImportSpecifier\\", {
      enumerable: true,
      get: function() {
        return _index.importSpecifier;
      }
    });
    Object.defineProperty(exports, \\"IndexedAccessType\\", {
      enumerable: true,
      get: function() {
        return _index.indexedAccessType;
      }
    });
    Object.defineProperty(exports, \\"InferredPredicate\\", {
      enumerable: true,
      get: function() {
        return _index.inferredPredicate;
      }
    });
    Object.defineProperty(exports, \\"InterfaceDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.interfaceDeclaration;
      }
    });
    Object.defineProperty(exports, \\"InterfaceExtends\\", {
      enumerable: true,
      get: function() {
        return _index.interfaceExtends;
      }
    });
    Object.defineProperty(exports, \\"InterfaceTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.interfaceTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"InterpreterDirective\\", {
      enumerable: true,
      get: function() {
        return _index.interpreterDirective;
      }
    });
    Object.defineProperty(exports, \\"IntersectionTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.intersectionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"JSXAttribute\\", {
      enumerable: true,
      get: function() {
        return _index.jsxAttribute;
      }
    });
    Object.defineProperty(exports, \\"JSXClosingElement\\", {
      enumerable: true,
      get: function() {
        return _index.jsxClosingElement;
      }
    });
    Object.defineProperty(exports, \\"JSXClosingFragment\\", {
      enumerable: true,
      get: function() {
        return _index.jsxClosingFragment;
      }
    });
    Object.defineProperty(exports, \\"JSXElement\\", {
      enumerable: true,
      get: function() {
        return _index.jsxElement;
      }
    });
    Object.defineProperty(exports, \\"JSXEmptyExpression\\", {
      enumerable: true,
      get: function() {
        return _index.jsxEmptyExpression;
      }
    });
    Object.defineProperty(exports, \\"JSXExpressionContainer\\", {
      enumerable: true,
      get: function() {
        return _index.jsxExpressionContainer;
      }
    });
    Object.defineProperty(exports, \\"JSXFragment\\", {
      enumerable: true,
      get: function() {
        return _index.jsxFragment;
      }
    });
    Object.defineProperty(exports, \\"JSXIdentifier\\", {
      enumerable: true,
      get: function() {
        return _index.jsxIdentifier;
      }
    });
    Object.defineProperty(exports, \\"JSXMemberExpression\\", {
      enumerable: true,
      get: function() {
        return _index.jsxMemberExpression;
      }
    });
    Object.defineProperty(exports, \\"JSXNamespacedName\\", {
      enumerable: true,
      get: function() {
        return _index.jsxNamespacedName;
      }
    });
    Object.defineProperty(exports, \\"JSXOpeningElement\\", {
      enumerable: true,
      get: function() {
        return _index.jsxOpeningElement;
      }
    });
    Object.defineProperty(exports, \\"JSXOpeningFragment\\", {
      enumerable: true,
      get: function() {
        return _index.jsxOpeningFragment;
      }
    });
    Object.defineProperty(exports, \\"JSXSpreadAttribute\\", {
      enumerable: true,
      get: function() {
        return _index.jsxSpreadAttribute;
      }
    });
    Object.defineProperty(exports, \\"JSXSpreadChild\\", {
      enumerable: true,
      get: function() {
        return _index.jsxSpreadChild;
      }
    });
    Object.defineProperty(exports, \\"JSXText\\", {
      enumerable: true,
      get: function() {
        return _index.jsxText;
      }
    });
    Object.defineProperty(exports, \\"LabeledStatement\\", {
      enumerable: true,
      get: function() {
        return _index.labeledStatement;
      }
    });
    Object.defineProperty(exports, \\"LogicalExpression\\", {
      enumerable: true,
      get: function() {
        return _index.logicalExpression;
      }
    });
    Object.defineProperty(exports, \\"MemberExpression\\", {
      enumerable: true,
      get: function() {
        return _index.memberExpression;
      }
    });
    Object.defineProperty(exports, \\"MetaProperty\\", {
      enumerable: true,
      get: function() {
        return _index.metaProperty;
      }
    });
    Object.defineProperty(exports, \\"MixedTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.mixedTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"ModuleExpression\\", {
      enumerable: true,
      get: function() {
        return _index.moduleExpression;
      }
    });
    Object.defineProperty(exports, \\"NewExpression\\", {
      enumerable: true,
      get: function() {
        return _index.newExpression;
      }
    });
    Object.defineProperty(exports, \\"Noop\\", {
      enumerable: true,
      get: function() {
        return _index.noop;
      }
    });
    Object.defineProperty(exports, \\"NullLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.nullLiteral;
      }
    });
    Object.defineProperty(exports, \\"NullLiteralTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.nullLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"NullableTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.nullableTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"NumberLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.numberLiteral;
      }
    });
    Object.defineProperty(exports, \\"NumberLiteralTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.numberLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"NumberTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.numberTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"NumericLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.numericLiteral;
      }
    });
    Object.defineProperty(exports, \\"ObjectExpression\\", {
      enumerable: true,
      get: function() {
        return _index.objectExpression;
      }
    });
    Object.defineProperty(exports, \\"ObjectMethod\\", {
      enumerable: true,
      get: function() {
        return _index.objectMethod;
      }
    });
    Object.defineProperty(exports, \\"ObjectPattern\\", {
      enumerable: true,
      get: function() {
        return _index.objectPattern;
      }
    });
    Object.defineProperty(exports, \\"ObjectProperty\\", {
      enumerable: true,
      get: function() {
        return _index.objectProperty;
      }
    });
    Object.defineProperty(exports, \\"ObjectTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.objectTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"ObjectTypeCallProperty\\", {
      enumerable: true,
      get: function() {
        return _index.objectTypeCallProperty;
      }
    });
    Object.defineProperty(exports, \\"ObjectTypeIndexer\\", {
      enumerable: true,
      get: function() {
        return _index.objectTypeIndexer;
      }
    });
    Object.defineProperty(exports, \\"ObjectTypeInternalSlot\\", {
      enumerable: true,
      get: function() {
        return _index.objectTypeInternalSlot;
      }
    });
    Object.defineProperty(exports, \\"ObjectTypeProperty\\", {
      enumerable: true,
      get: function() {
        return _index.objectTypeProperty;
      }
    });
    Object.defineProperty(exports, \\"ObjectTypeSpreadProperty\\", {
      enumerable: true,
      get: function() {
        return _index.objectTypeSpreadProperty;
      }
    });
    Object.defineProperty(exports, \\"OpaqueType\\", {
      enumerable: true,
      get: function() {
        return _index.opaqueType;
      }
    });
    Object.defineProperty(exports, \\"OptionalCallExpression\\", {
      enumerable: true,
      get: function() {
        return _index.optionalCallExpression;
      }
    });
    Object.defineProperty(exports, \\"OptionalIndexedAccessType\\", {
      enumerable: true,
      get: function() {
        return _index.optionalIndexedAccessType;
      }
    });
    Object.defineProperty(exports, \\"OptionalMemberExpression\\", {
      enumerable: true,
      get: function() {
        return _index.optionalMemberExpression;
      }
    });
    Object.defineProperty(exports, \\"ParenthesizedExpression\\", {
      enumerable: true,
      get: function() {
        return _index.parenthesizedExpression;
      }
    });
    Object.defineProperty(exports, \\"PipelineBareFunction\\", {
      enumerable: true,
      get: function() {
        return _index.pipelineBareFunction;
      }
    });
    Object.defineProperty(exports, \\"PipelinePrimaryTopicReference\\", {
      enumerable: true,
      get: function() {
        return _index.pipelinePrimaryTopicReference;
      }
    });
    Object.defineProperty(exports, \\"PipelineTopicExpression\\", {
      enumerable: true,
      get: function() {
        return _index.pipelineTopicExpression;
      }
    });
    Object.defineProperty(exports, \\"Placeholder\\", {
      enumerable: true,
      get: function() {
        return _index.placeholder;
      }
    });
    Object.defineProperty(exports, \\"PrivateName\\", {
      enumerable: true,
      get: function() {
        return _index.privateName;
      }
    });
    Object.defineProperty(exports, \\"Program\\", {
      enumerable: true,
      get: function() {
        return _index.program;
      }
    });
    Object.defineProperty(exports, \\"QualifiedTypeIdentifier\\", {
      enumerable: true,
      get: function() {
        return _index.qualifiedTypeIdentifier;
      }
    });
    Object.defineProperty(exports, \\"RecordExpression\\", {
      enumerable: true,
      get: function() {
        return _index.recordExpression;
      }
    });
    Object.defineProperty(exports, \\"RegExpLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.regExpLiteral;
      }
    });
    Object.defineProperty(exports, \\"RegexLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.regexLiteral;
      }
    });
    Object.defineProperty(exports, \\"RestElement\\", {
      enumerable: true,
      get: function() {
        return _index.restElement;
      }
    });
    Object.defineProperty(exports, \\"RestProperty\\", {
      enumerable: true,
      get: function() {
        return _index.restProperty;
      }
    });
    Object.defineProperty(exports, \\"ReturnStatement\\", {
      enumerable: true,
      get: function() {
        return _index.returnStatement;
      }
    });
    Object.defineProperty(exports, \\"SequenceExpression\\", {
      enumerable: true,
      get: function() {
        return _index.sequenceExpression;
      }
    });
    Object.defineProperty(exports, \\"SpreadElement\\", {
      enumerable: true,
      get: function() {
        return _index.spreadElement;
      }
    });
    Object.defineProperty(exports, \\"SpreadProperty\\", {
      enumerable: true,
      get: function() {
        return _index.spreadProperty;
      }
    });
    Object.defineProperty(exports, \\"StaticBlock\\", {
      enumerable: true,
      get: function() {
        return _index.staticBlock;
      }
    });
    Object.defineProperty(exports, \\"StringLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.stringLiteral;
      }
    });
    Object.defineProperty(exports, \\"StringLiteralTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.stringLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"StringTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.stringTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"Super\\", {
      enumerable: true,
      get: function() {
        return _index.super;
      }
    });
    Object.defineProperty(exports, \\"SwitchCase\\", {
      enumerable: true,
      get: function() {
        return _index.switchCase;
      }
    });
    Object.defineProperty(exports, \\"SwitchStatement\\", {
      enumerable: true,
      get: function() {
        return _index.switchStatement;
      }
    });
    Object.defineProperty(exports, \\"SymbolTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.symbolTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"TSAnyKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsAnyKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSArrayType\\", {
      enumerable: true,
      get: function() {
        return _index.tsArrayType;
      }
    });
    Object.defineProperty(exports, \\"TSAsExpression\\", {
      enumerable: true,
      get: function() {
        return _index.tsAsExpression;
      }
    });
    Object.defineProperty(exports, \\"TSBigIntKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsBigIntKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSBooleanKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsBooleanKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSCallSignatureDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsCallSignatureDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSConditionalType\\", {
      enumerable: true,
      get: function() {
        return _index.tsConditionalType;
      }
    });
    Object.defineProperty(exports, \\"TSConstructSignatureDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsConstructSignatureDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSConstructorType\\", {
      enumerable: true,
      get: function() {
        return _index.tsConstructorType;
      }
    });
    Object.defineProperty(exports, \\"TSDeclareFunction\\", {
      enumerable: true,
      get: function() {
        return _index.tsDeclareFunction;
      }
    });
    Object.defineProperty(exports, \\"TSDeclareMethod\\", {
      enumerable: true,
      get: function() {
        return _index.tsDeclareMethod;
      }
    });
    Object.defineProperty(exports, \\"TSEnumDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsEnumDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSEnumMember\\", {
      enumerable: true,
      get: function() {
        return _index.tsEnumMember;
      }
    });
    Object.defineProperty(exports, \\"TSExportAssignment\\", {
      enumerable: true,
      get: function() {
        return _index.tsExportAssignment;
      }
    });
    Object.defineProperty(exports, \\"TSExpressionWithTypeArguments\\", {
      enumerable: true,
      get: function() {
        return _index.tsExpressionWithTypeArguments;
      }
    });
    Object.defineProperty(exports, \\"TSExternalModuleReference\\", {
      enumerable: true,
      get: function() {
        return _index.tsExternalModuleReference;
      }
    });
    Object.defineProperty(exports, \\"TSFunctionType\\", {
      enumerable: true,
      get: function() {
        return _index.tsFunctionType;
      }
    });
    Object.defineProperty(exports, \\"TSImportEqualsDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsImportEqualsDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSImportType\\", {
      enumerable: true,
      get: function() {
        return _index.tsImportType;
      }
    });
    Object.defineProperty(exports, \\"TSIndexSignature\\", {
      enumerable: true,
      get: function() {
        return _index.tsIndexSignature;
      }
    });
    Object.defineProperty(exports, \\"TSIndexedAccessType\\", {
      enumerable: true,
      get: function() {
        return _index.tsIndexedAccessType;
      }
    });
    Object.defineProperty(exports, \\"TSInferType\\", {
      enumerable: true,
      get: function() {
        return _index.tsInferType;
      }
    });
    Object.defineProperty(exports, \\"TSInterfaceBody\\", {
      enumerable: true,
      get: function() {
        return _index.tsInterfaceBody;
      }
    });
    Object.defineProperty(exports, \\"TSInterfaceDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsInterfaceDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSIntersectionType\\", {
      enumerable: true,
      get: function() {
        return _index.tsIntersectionType;
      }
    });
    Object.defineProperty(exports, \\"TSIntrinsicKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsIntrinsicKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSLiteralType\\", {
      enumerable: true,
      get: function() {
        return _index.tsLiteralType;
      }
    });
    Object.defineProperty(exports, \\"TSMappedType\\", {
      enumerable: true,
      get: function() {
        return _index.tsMappedType;
      }
    });
    Object.defineProperty(exports, \\"TSMethodSignature\\", {
      enumerable: true,
      get: function() {
        return _index.tsMethodSignature;
      }
    });
    Object.defineProperty(exports, \\"TSModuleBlock\\", {
      enumerable: true,
      get: function() {
        return _index.tsModuleBlock;
      }
    });
    Object.defineProperty(exports, \\"TSModuleDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsModuleDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSNamedTupleMember\\", {
      enumerable: true,
      get: function() {
        return _index.tsNamedTupleMember;
      }
    });
    Object.defineProperty(exports, \\"TSNamespaceExportDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsNamespaceExportDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSNeverKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsNeverKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSNonNullExpression\\", {
      enumerable: true,
      get: function() {
        return _index.tsNonNullExpression;
      }
    });
    Object.defineProperty(exports, \\"TSNullKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsNullKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSNumberKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsNumberKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSObjectKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsObjectKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSOptionalType\\", {
      enumerable: true,
      get: function() {
        return _index.tsOptionalType;
      }
    });
    Object.defineProperty(exports, \\"TSParameterProperty\\", {
      enumerable: true,
      get: function() {
        return _index.tsParameterProperty;
      }
    });
    Object.defineProperty(exports, \\"TSParenthesizedType\\", {
      enumerable: true,
      get: function() {
        return _index.tsParenthesizedType;
      }
    });
    Object.defineProperty(exports, \\"TSPropertySignature\\", {
      enumerable: true,
      get: function() {
        return _index.tsPropertySignature;
      }
    });
    Object.defineProperty(exports, \\"TSQualifiedName\\", {
      enumerable: true,
      get: function() {
        return _index.tsQualifiedName;
      }
    });
    Object.defineProperty(exports, \\"TSRestType\\", {
      enumerable: true,
      get: function() {
        return _index.tsRestType;
      }
    });
    Object.defineProperty(exports, \\"TSStringKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsStringKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSSymbolKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsSymbolKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSThisType\\", {
      enumerable: true,
      get: function() {
        return _index.tsThisType;
      }
    });
    Object.defineProperty(exports, \\"TSTupleType\\", {
      enumerable: true,
      get: function() {
        return _index.tsTupleType;
      }
    });
    Object.defineProperty(exports, \\"TSTypeAliasDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeAliasDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"TSTypeAssertion\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeAssertion;
      }
    });
    Object.defineProperty(exports, \\"TSTypeLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeLiteral;
      }
    });
    Object.defineProperty(exports, \\"TSTypeOperator\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeOperator;
      }
    });
    Object.defineProperty(exports, \\"TSTypeParameter\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeParameter;
      }
    });
    Object.defineProperty(exports, \\"TSTypeParameterDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeParameterDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TSTypeParameterInstantiation\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeParameterInstantiation;
      }
    });
    Object.defineProperty(exports, \\"TSTypePredicate\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypePredicate;
      }
    });
    Object.defineProperty(exports, \\"TSTypeQuery\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeQuery;
      }
    });
    Object.defineProperty(exports, \\"TSTypeReference\\", {
      enumerable: true,
      get: function() {
        return _index.tsTypeReference;
      }
    });
    Object.defineProperty(exports, \\"TSUndefinedKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsUndefinedKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSUnionType\\", {
      enumerable: true,
      get: function() {
        return _index.tsUnionType;
      }
    });
    Object.defineProperty(exports, \\"TSUnknownKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsUnknownKeyword;
      }
    });
    Object.defineProperty(exports, \\"TSVoidKeyword\\", {
      enumerable: true,
      get: function() {
        return _index.tsVoidKeyword;
      }
    });
    Object.defineProperty(exports, \\"TaggedTemplateExpression\\", {
      enumerable: true,
      get: function() {
        return _index.taggedTemplateExpression;
      }
    });
    Object.defineProperty(exports, \\"TemplateElement\\", {
      enumerable: true,
      get: function() {
        return _index.templateElement;
      }
    });
    Object.defineProperty(exports, \\"TemplateLiteral\\", {
      enumerable: true,
      get: function() {
        return _index.templateLiteral;
      }
    });
    Object.defineProperty(exports, \\"ThisExpression\\", {
      enumerable: true,
      get: function() {
        return _index.thisExpression;
      }
    });
    Object.defineProperty(exports, \\"ThisTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.thisTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"ThrowStatement\\", {
      enumerable: true,
      get: function() {
        return _index.throwStatement;
      }
    });
    Object.defineProperty(exports, \\"TopicReference\\", {
      enumerable: true,
      get: function() {
        return _index.topicReference;
      }
    });
    Object.defineProperty(exports, \\"TryStatement\\", {
      enumerable: true,
      get: function() {
        return _index.tryStatement;
      }
    });
    Object.defineProperty(exports, \\"TupleExpression\\", {
      enumerable: true,
      get: function() {
        return _index.tupleExpression;
      }
    });
    Object.defineProperty(exports, \\"TupleTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.tupleTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"TypeAlias\\", {
      enumerable: true,
      get: function() {
        return _index.typeAlias;
      }
    });
    Object.defineProperty(exports, \\"TypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.typeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"TypeCastExpression\\", {
      enumerable: true,
      get: function() {
        return _index.typeCastExpression;
      }
    });
    Object.defineProperty(exports, \\"TypeParameter\\", {
      enumerable: true,
      get: function() {
        return _index.typeParameter;
      }
    });
    Object.defineProperty(exports, \\"TypeParameterDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.typeParameterDeclaration;
      }
    });
    Object.defineProperty(exports, \\"TypeParameterInstantiation\\", {
      enumerable: true,
      get: function() {
        return _index.typeParameterInstantiation;
      }
    });
    Object.defineProperty(exports, \\"TypeofTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.typeofTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"UnaryExpression\\", {
      enumerable: true,
      get: function() {
        return _index.unaryExpression;
      }
    });
    Object.defineProperty(exports, \\"UnionTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.unionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"UpdateExpression\\", {
      enumerable: true,
      get: function() {
        return _index.updateExpression;
      }
    });
    Object.defineProperty(exports, \\"V8IntrinsicIdentifier\\", {
      enumerable: true,
      get: function() {
        return _index.v8IntrinsicIdentifier;
      }
    });
    Object.defineProperty(exports, \\"VariableDeclaration\\", {
      enumerable: true,
      get: function() {
        return _index.variableDeclaration;
      }
    });
    Object.defineProperty(exports, \\"VariableDeclarator\\", {
      enumerable: true,
      get: function() {
        return _index.variableDeclarator;
      }
    });
    Object.defineProperty(exports, \\"Variance\\", {
      enumerable: true,
      get: function() {
        return _index.variance;
      }
    });
    Object.defineProperty(exports, \\"VoidTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _index.voidTypeAnnotation;
      }
    });
    Object.defineProperty(exports, \\"WhileStatement\\", {
      enumerable: true,
      get: function() {
        return _index.whileStatement;
      }
    });
    Object.defineProperty(exports, \\"WithStatement\\", {
      enumerable: true,
      get: function() {
        return _index.withStatement;
      }
    });
    Object.defineProperty(exports, \\"YieldExpression\\", {
      enumerable: true,
      get: function() {
        return _index.yieldExpression;
      }
    });
    var _index = require_generated2();
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/cloneNode.js
var require_cloneNode = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/cloneNode.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = cloneNode;
    var _definitions = require_definitions();
    var _generated = require_generated();
    var has = Function.call.bind(Object.prototype.hasOwnProperty);
    function cloneIfNode(obj, deep, withoutLoc) {
      if (obj && typeof obj.type === \\"string\\") {
        return cloneNode(obj, deep, withoutLoc);
      }
      return obj;
    }
    function cloneIfNodeOrArray(obj, deep, withoutLoc) {
      if (Array.isArray(obj)) {
        return obj.map((node) => cloneIfNode(node, deep, withoutLoc));
      }
      return cloneIfNode(obj, deep, withoutLoc);
    }
    function cloneNode(node, deep = true, withoutLoc = false) {
      if (!node)
        return node;
      const {
        type
      } = node;
      const newNode = {
        type: node.type
      };
      if ((0, _generated.isIdentifier)(node)) {
        newNode.name = node.name;
        if (has(node, \\"optional\\") && typeof node.optional === \\"boolean\\") {
          newNode.optional = node.optional;
        }
        if (has(node, \\"typeAnnotation\\")) {
          newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc) : node.typeAnnotation;
        }
      } else if (!has(_definitions.NODE_FIELDS, type)) {
        throw new Error(\`Unknown node type: \\"\${type}\\"\`);
      } else {
        for (const field of Object.keys(_definitions.NODE_FIELDS[type])) {
          if (has(node, field)) {
            if (deep) {
              newNode[field] = (0, _generated.isFile)(node) && field === \\"comments\\" ? maybeCloneComments(node.comments, deep, withoutLoc) : cloneIfNodeOrArray(node[field], true, withoutLoc);
            } else {
              newNode[field] = node[field];
            }
          }
        }
      }
      if (has(node, \\"loc\\")) {
        if (withoutLoc) {
          newNode.loc = null;
        } else {
          newNode.loc = node.loc;
        }
      }
      if (has(node, \\"leadingComments\\")) {
        newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc);
      }
      if (has(node, \\"innerComments\\")) {
        newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc);
      }
      if (has(node, \\"trailingComments\\")) {
        newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc);
      }
      if (has(node, \\"extra\\")) {
        newNode.extra = Object.assign({}, node.extra);
      }
      return newNode;
    }
    function maybeCloneComments(comments, deep, withoutLoc) {
      if (!comments || !deep) {
        return comments;
      }
      return comments.map(({
        type,
        value,
        loc
      }) => {
        if (withoutLoc) {
          return {
            type,
            value,
            loc: null
          };
        }
        return {
          type,
          value,
          loc
        };
      });
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/clone.js
var require_clone = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/clone.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = clone;
    var _cloneNode = require_cloneNode();
    function clone(node) {
      return (0, _cloneNode.default)(node, false);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/cloneDeep.js
var require_cloneDeep = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/cloneDeep.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = cloneDeep;
    var _cloneNode = require_cloneNode();
    function cloneDeep(node) {
      return (0, _cloneNode.default)(node);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js
var require_cloneDeepWithoutLoc = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = cloneDeepWithoutLoc;
    var _cloneNode = require_cloneNode();
    function cloneDeepWithoutLoc(node) {
      return (0, _cloneNode.default)(node, true, true);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js
var require_cloneWithoutLoc = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = cloneWithoutLoc;
    var _cloneNode = require_cloneNode();
    function cloneWithoutLoc(node) {
      return (0, _cloneNode.default)(node, false, true);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/addComments.js
var require_addComments = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/addComments.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = addComments;
    function addComments(node, type, comments) {
      if (!comments || !node)
        return node;
      const key = \`\${type}Comments\`;
      if (node[key]) {
        if (type === \\"leading\\") {
          node[key] = comments.concat(node[key]);
        } else {
          node[key].push(...comments);
        }
      } else {
        node[key] = comments;
      }
      return node;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/addComment.js
var require_addComment = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/addComment.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = addComment;
    var _addComments = require_addComments();
    function addComment(node, type, content, line) {
      return (0, _addComments.default)(node, type, [{
        type: line ? \\"CommentLine\\" : \\"CommentBlock\\",
        value: content
      }]);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/utils/inherit.js
var require_inherit = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/utils/inherit.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = inherit;
    function inherit(key, child, parent) {
      if (child && parent) {
        child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));
      }
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/inheritInnerComments.js
var require_inheritInnerComments = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/inheritInnerComments.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = inheritInnerComments;
    var _inherit = require_inherit();
    function inheritInnerComments(child, parent) {
      (0, _inherit.default)(\\"innerComments\\", child, parent);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/inheritLeadingComments.js
var require_inheritLeadingComments = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/inheritLeadingComments.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = inheritLeadingComments;
    var _inherit = require_inherit();
    function inheritLeadingComments(child, parent) {
      (0, _inherit.default)(\\"leadingComments\\", child, parent);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/inheritTrailingComments.js
var require_inheritTrailingComments = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/inheritTrailingComments.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = inheritTrailingComments;
    var _inherit = require_inherit();
    function inheritTrailingComments(child, parent) {
      (0, _inherit.default)(\\"trailingComments\\", child, parent);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/inheritsComments.js
var require_inheritsComments = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/inheritsComments.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = inheritsComments;
    var _inheritTrailingComments = require_inheritTrailingComments();
    var _inheritLeadingComments = require_inheritLeadingComments();
    var _inheritInnerComments = require_inheritInnerComments();
    function inheritsComments(child, parent) {
      (0, _inheritTrailingComments.default)(child, parent);
      (0, _inheritLeadingComments.default)(child, parent);
      (0, _inheritInnerComments.default)(child, parent);
      return child;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/removeComments.js
var require_removeComments = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/comments/removeComments.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = removeComments;
    var _constants = require_constants();
    function removeComments(node) {
      _constants.COMMENT_KEYS.forEach((key) => {
        node[key] = null;
      });
      return node;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/constants/generated/index.js
var require_generated4 = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/constants/generated/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.WHILE_TYPES = exports.USERWHITESPACABLE_TYPES = exports.UNARYLIKE_TYPES = exports.TYPESCRIPT_TYPES = exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.TSENTITYNAME_TYPES = exports.TSBASETYPE_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.STANDARDIZED_TYPES = exports.SCOPABLE_TYPES = exports.PUREISH_TYPES = exports.PROPERTY_TYPES = exports.PRIVATE_TYPES = exports.PATTERN_TYPES = exports.PATTERNLIKE_TYPES = exports.OBJECTMEMBER_TYPES = exports.MODULESPECIFIER_TYPES = exports.MODULEDECLARATION_TYPES = exports.MISCELLANEOUS_TYPES = exports.METHOD_TYPES = exports.LVAL_TYPES = exports.LOOP_TYPES = exports.LITERAL_TYPES = exports.JSX_TYPES = exports.IMMUTABLE_TYPES = exports.FUNCTION_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FOR_TYPES = exports.FORXSTATEMENT_TYPES = exports.FLOW_TYPES = exports.FLOWTYPE_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.EXPRESSION_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.ENUMMEMBER_TYPES = exports.ENUMBODY_TYPES = exports.DECLARATION_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.CLASS_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.BINARY_TYPES = void 0;
    var _definitions = require_definitions();
    var STANDARDIZED_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Standardized\\"];
    exports.STANDARDIZED_TYPES = STANDARDIZED_TYPES;
    var EXPRESSION_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Expression\\"];
    exports.EXPRESSION_TYPES = EXPRESSION_TYPES;
    var BINARY_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Binary\\"];
    exports.BINARY_TYPES = BINARY_TYPES;
    var SCOPABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Scopable\\"];
    exports.SCOPABLE_TYPES = SCOPABLE_TYPES;
    var BLOCKPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"BlockParent\\"];
    exports.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
    var BLOCK_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Block\\"];
    exports.BLOCK_TYPES = BLOCK_TYPES;
    var STATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Statement\\"];
    exports.STATEMENT_TYPES = STATEMENT_TYPES;
    var TERMINATORLESS_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Terminatorless\\"];
    exports.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
    var COMPLETIONSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"CompletionStatement\\"];
    exports.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
    var CONDITIONAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Conditional\\"];
    exports.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
    var LOOP_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Loop\\"];
    exports.LOOP_TYPES = LOOP_TYPES;
    var WHILE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"While\\"];
    exports.WHILE_TYPES = WHILE_TYPES;
    var EXPRESSIONWRAPPER_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"ExpressionWrapper\\"];
    exports.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
    var FOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"For\\"];
    exports.FOR_TYPES = FOR_TYPES;
    var FORXSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"ForXStatement\\"];
    exports.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
    var FUNCTION_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Function\\"];
    exports.FUNCTION_TYPES = FUNCTION_TYPES;
    var FUNCTIONPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"FunctionParent\\"];
    exports.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
    var PUREISH_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Pureish\\"];
    exports.PUREISH_TYPES = PUREISH_TYPES;
    var DECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Declaration\\"];
    exports.DECLARATION_TYPES = DECLARATION_TYPES;
    var PATTERNLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"PatternLike\\"];
    exports.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
    var LVAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"LVal\\"];
    exports.LVAL_TYPES = LVAL_TYPES;
    var TSENTITYNAME_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"TSEntityName\\"];
    exports.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
    var LITERAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Literal\\"];
    exports.LITERAL_TYPES = LITERAL_TYPES;
    var IMMUTABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Immutable\\"];
    exports.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
    var USERWHITESPACABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"UserWhitespacable\\"];
    exports.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
    var METHOD_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Method\\"];
    exports.METHOD_TYPES = METHOD_TYPES;
    var OBJECTMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"ObjectMember\\"];
    exports.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
    var PROPERTY_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Property\\"];
    exports.PROPERTY_TYPES = PROPERTY_TYPES;
    var UNARYLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"UnaryLike\\"];
    exports.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
    var PATTERN_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Pattern\\"];
    exports.PATTERN_TYPES = PATTERN_TYPES;
    var CLASS_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Class\\"];
    exports.CLASS_TYPES = CLASS_TYPES;
    var MODULEDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"ModuleDeclaration\\"];
    exports.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
    var EXPORTDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"ExportDeclaration\\"];
    exports.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
    var MODULESPECIFIER_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"ModuleSpecifier\\"];
    exports.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
    var PRIVATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Private\\"];
    exports.PRIVATE_TYPES = PRIVATE_TYPES;
    var FLOW_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Flow\\"];
    exports.FLOW_TYPES = FLOW_TYPES;
    var FLOWTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"FlowType\\"];
    exports.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
    var FLOWBASEANNOTATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"FlowBaseAnnotation\\"];
    exports.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
    var FLOWDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"FlowDeclaration\\"];
    exports.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
    var FLOWPREDICATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"FlowPredicate\\"];
    exports.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
    var ENUMBODY_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"EnumBody\\"];
    exports.ENUMBODY_TYPES = ENUMBODY_TYPES;
    var ENUMMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"EnumMember\\"];
    exports.ENUMMEMBER_TYPES = ENUMMEMBER_TYPES;
    var JSX_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"JSX\\"];
    exports.JSX_TYPES = JSX_TYPES;
    var MISCELLANEOUS_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"Miscellaneous\\"];
    exports.MISCELLANEOUS_TYPES = MISCELLANEOUS_TYPES;
    var TYPESCRIPT_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"TypeScript\\"];
    exports.TYPESCRIPT_TYPES = TYPESCRIPT_TYPES;
    var TSTYPEELEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"TSTypeElement\\"];
    exports.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
    var TSTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"TSType\\"];
    exports.TSTYPE_TYPES = TSTYPE_TYPES;
    var TSBASETYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS[\\"TSBaseType\\"];
    exports.TSBASETYPE_TYPES = TSBASETYPE_TYPES;
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toBlock.js
var require_toBlock = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toBlock.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = toBlock;
    var _generated = require_generated();
    var _generated2 = require_generated2();
    function toBlock(node, parent) {
      if ((0, _generated.isBlockStatement)(node)) {
        return node;
      }
      let blockNodes = [];
      if ((0, _generated.isEmptyStatement)(node)) {
        blockNodes = [];
      } else {
        if (!(0, _generated.isStatement)(node)) {
          if ((0, _generated.isFunction)(parent)) {
            node = (0, _generated2.returnStatement)(node);
          } else {
            node = (0, _generated2.expressionStatement)(node);
          }
        }
        blockNodes = [node];
      }
      return (0, _generated2.blockStatement)(blockNodes);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/ensureBlock.js
var require_ensureBlock = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/ensureBlock.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = ensureBlock;
    var _toBlock = require_toBlock();
    function ensureBlock(node, key = \\"body\\") {
      return node[key] = (0, _toBlock.default)(node[key], node);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toIdentifier.js
var require_toIdentifier = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toIdentifier.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = toIdentifier;
    var _isValidIdentifier = require_isValidIdentifier();
    var _helperValidatorIdentifier = require_lib();
    function toIdentifier(input) {
      input = input + \\"\\";
      let name = \\"\\";
      for (const c of input) {
        name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : \\"-\\";
      }
      name = name.replace(/^[-0-9]+/, \\"\\");
      name = name.replace(/[-\\\\s]+(.)?/g, function(match, c) {
        return c ? c.toUpperCase() : \\"\\";
      });
      if (!(0, _isValidIdentifier.default)(name)) {
        name = \`_\${name}\`;
      }
      return name || \\"_\\";
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js
var require_toBindingIdentifierName = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = toBindingIdentifierName;
    var _toIdentifier = require_toIdentifier();
    function toBindingIdentifierName(name) {
      name = (0, _toIdentifier.default)(name);
      if (name === \\"eval\\" || name === \\"arguments\\")
        name = \\"_\\" + name;
      return name;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toComputedKey.js
var require_toComputedKey = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toComputedKey.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = toComputedKey;
    var _generated = require_generated();
    var _generated2 = require_generated2();
    function toComputedKey(node, key = node.key || node.property) {
      if (!node.computed && (0, _generated.isIdentifier)(key))
        key = (0, _generated2.stringLiteral)(key.name);
      return key;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toExpression.js
var require_toExpression = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toExpression.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _generated = require_generated();
    var _default = toExpression;
    exports.default = _default;
    function toExpression(node) {
      if ((0, _generated.isExpressionStatement)(node)) {
        node = node.expression;
      }
      if ((0, _generated.isExpression)(node)) {
        return node;
      }
      if ((0, _generated.isClass)(node)) {
        node.type = \\"ClassExpression\\";
      } else if ((0, _generated.isFunction)(node)) {
        node.type = \\"FunctionExpression\\";
      }
      if (!(0, _generated.isExpression)(node)) {
        throw new Error(\`cannot turn \${node.type} to an expression\`);
      }
      return node;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/traverse/traverseFast.js
var require_traverseFast = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/traverse/traverseFast.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = traverseFast;
    var _definitions = require_definitions();
    function traverseFast(node, enter, opts) {
      if (!node)
        return;
      const keys = _definitions.VISITOR_KEYS[node.type];
      if (!keys)
        return;
      opts = opts || {};
      enter(node, opts);
      for (const key of keys) {
        const subNode = node[key];
        if (Array.isArray(subNode)) {
          for (const node2 of subNode) {
            traverseFast(node2, enter, opts);
          }
        } else {
          traverseFast(subNode, enter, opts);
        }
      }
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/removeProperties.js
var require_removeProperties = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/removeProperties.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = removeProperties;
    var _constants = require_constants();
    var CLEAR_KEYS = [\\"tokens\\", \\"start\\", \\"end\\", \\"loc\\", \\"raw\\", \\"rawValue\\"];
    var CLEAR_KEYS_PLUS_COMMENTS = _constants.COMMENT_KEYS.concat([\\"comments\\"]).concat(CLEAR_KEYS);
    function removeProperties(node, opts = {}) {
      const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
      for (const key of map) {
        if (node[key] != null)
          node[key] = void 0;
      }
      for (const key of Object.keys(node)) {
        if (key[0] === \\"_\\" && node[key] != null)
          node[key] = void 0;
      }
      const symbols = Object.getOwnPropertySymbols(node);
      for (const sym of symbols) {
        node[sym] = null;
      }
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js
var require_removePropertiesDeep = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = removePropertiesDeep;
    var _traverseFast = require_traverseFast();
    var _removeProperties = require_removeProperties();
    function removePropertiesDeep(tree, opts) {
      (0, _traverseFast.default)(tree, _removeProperties.default, opts);
      return tree;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toKeyAlias.js
var require_toKeyAlias = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toKeyAlias.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = toKeyAlias;
    var _generated = require_generated();
    var _cloneNode = require_cloneNode();
    var _removePropertiesDeep = require_removePropertiesDeep();
    function toKeyAlias(node, key = node.key) {
      let alias;
      if (node.kind === \\"method\\") {
        return toKeyAlias.increment() + \\"\\";
      } else if ((0, _generated.isIdentifier)(key)) {
        alias = key.name;
      } else if ((0, _generated.isStringLiteral)(key)) {
        alias = JSON.stringify(key.value);
      } else {
        alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));
      }
      if (node.computed) {
        alias = \`[\${alias}]\`;
      }
      if (node.static) {
        alias = \`static:\${alias}\`;
      }
      return alias;
    }
    toKeyAlias.uid = 0;
    toKeyAlias.increment = function() {
      if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
        return toKeyAlias.uid = 0;
      } else {
        return toKeyAlias.uid++;
      }
    };
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js
var require_getBindingIdentifiers = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = getBindingIdentifiers;
    var _generated = require_generated();
    function getBindingIdentifiers(node, duplicates, outerOnly) {
      let search = [].concat(node);
      const ids = /* @__PURE__ */ Object.create(null);
      while (search.length) {
        const id = search.shift();
        if (!id)
          continue;
        const keys = getBindingIdentifiers.keys[id.type];
        if ((0, _generated.isIdentifier)(id)) {
          if (duplicates) {
            const _ids = ids[id.name] = ids[id.name] || [];
            _ids.push(id);
          } else {
            ids[id.name] = id;
          }
          continue;
        }
        if ((0, _generated.isExportDeclaration)(id) && !(0, _generated.isExportAllDeclaration)(id)) {
          if ((0, _generated.isDeclaration)(id.declaration)) {
            search.push(id.declaration);
          }
          continue;
        }
        if (outerOnly) {
          if ((0, _generated.isFunctionDeclaration)(id)) {
            search.push(id.id);
            continue;
          }
          if ((0, _generated.isFunctionExpression)(id)) {
            continue;
          }
        }
        if (keys) {
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (id[key]) {
              search = search.concat(id[key]);
            }
          }
        }
      }
      return ids;
    }
    getBindingIdentifiers.keys = {
      DeclareClass: [\\"id\\"],
      DeclareFunction: [\\"id\\"],
      DeclareModule: [\\"id\\"],
      DeclareVariable: [\\"id\\"],
      DeclareInterface: [\\"id\\"],
      DeclareTypeAlias: [\\"id\\"],
      DeclareOpaqueType: [\\"id\\"],
      InterfaceDeclaration: [\\"id\\"],
      TypeAlias: [\\"id\\"],
      OpaqueType: [\\"id\\"],
      CatchClause: [\\"param\\"],
      LabeledStatement: [\\"label\\"],
      UnaryExpression: [\\"argument\\"],
      AssignmentExpression: [\\"left\\"],
      ImportSpecifier: [\\"local\\"],
      ImportNamespaceSpecifier: [\\"local\\"],
      ImportDefaultSpecifier: [\\"local\\"],
      ImportDeclaration: [\\"specifiers\\"],
      ExportSpecifier: [\\"exported\\"],
      ExportNamespaceSpecifier: [\\"exported\\"],
      ExportDefaultSpecifier: [\\"exported\\"],
      FunctionDeclaration: [\\"id\\", \\"params\\"],
      FunctionExpression: [\\"id\\", \\"params\\"],
      ArrowFunctionExpression: [\\"params\\"],
      ObjectMethod: [\\"params\\"],
      ClassMethod: [\\"params\\"],
      ClassPrivateMethod: [\\"params\\"],
      ForInStatement: [\\"left\\"],
      ForOfStatement: [\\"left\\"],
      ClassDeclaration: [\\"id\\"],
      ClassExpression: [\\"id\\"],
      RestElement: [\\"argument\\"],
      UpdateExpression: [\\"argument\\"],
      ObjectProperty: [\\"value\\"],
      AssignmentPattern: [\\"left\\"],
      ArrayPattern: [\\"elements\\"],
      ObjectPattern: [\\"properties\\"],
      VariableDeclaration: [\\"declarations\\"],
      VariableDeclarator: [\\"id\\"]
    };
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js
var require_gatherSequenceExpressions = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = gatherSequenceExpressions;
    var _getBindingIdentifiers = require_getBindingIdentifiers();
    var _generated = require_generated();
    var _generated2 = require_generated2();
    var _cloneNode = require_cloneNode();
    function gatherSequenceExpressions(nodes, scope, declars) {
      const exprs = [];
      let ensureLastUndefined = true;
      for (const node of nodes) {
        if (!(0, _generated.isEmptyStatement)(node)) {
          ensureLastUndefined = false;
        }
        if ((0, _generated.isExpression)(node)) {
          exprs.push(node);
        } else if ((0, _generated.isExpressionStatement)(node)) {
          exprs.push(node.expression);
        } else if ((0, _generated.isVariableDeclaration)(node)) {
          if (node.kind !== \\"var\\")
            return;
          for (const declar of node.declarations) {
            const bindings = (0, _getBindingIdentifiers.default)(declar);
            for (const key of Object.keys(bindings)) {
              declars.push({
                kind: node.kind,
                id: (0, _cloneNode.default)(bindings[key])
              });
            }
            if (declar.init) {
              exprs.push((0, _generated2.assignmentExpression)(\\"=\\", declar.id, declar.init));
            }
          }
          ensureLastUndefined = true;
        } else if ((0, _generated.isIfStatement)(node)) {
          const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();
          const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();
          if (!consequent || !alternate)
            return;
          exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));
        } else if ((0, _generated.isBlockStatement)(node)) {
          const body = gatherSequenceExpressions(node.body, scope, declars);
          if (!body)
            return;
          exprs.push(body);
        } else if ((0, _generated.isEmptyStatement)(node)) {
          if (nodes.indexOf(node) === 0) {
            ensureLastUndefined = true;
          }
        } else {
          return;
        }
      }
      if (ensureLastUndefined) {
        exprs.push(scope.buildUndefinedNode());
      }
      if (exprs.length === 1) {
        return exprs[0];
      } else {
        return (0, _generated2.sequenceExpression)(exprs);
      }
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toSequenceExpression.js
var require_toSequenceExpression = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toSequenceExpression.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = toSequenceExpression;
    var _gatherSequenceExpressions = require_gatherSequenceExpressions();
    function toSequenceExpression(nodes, scope) {
      if (!(nodes != null && nodes.length))
        return;
      const declars = [];
      const result = (0, _gatherSequenceExpressions.default)(nodes, scope, declars);
      if (!result)
        return;
      for (const declar of declars) {
        scope.push(declar);
      }
      return result;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toStatement.js
var require_toStatement = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/toStatement.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _generated = require_generated();
    var _generated2 = require_generated2();
    var _default = toStatement;
    exports.default = _default;
    function toStatement(node, ignore) {
      if ((0, _generated.isStatement)(node)) {
        return node;
      }
      let mustHaveId = false;
      let newType;
      if ((0, _generated.isClass)(node)) {
        mustHaveId = true;
        newType = \\"ClassDeclaration\\";
      } else if ((0, _generated.isFunction)(node)) {
        mustHaveId = true;
        newType = \\"FunctionDeclaration\\";
      } else if ((0, _generated.isAssignmentExpression)(node)) {
        return (0, _generated2.expressionStatement)(node);
      }
      if (mustHaveId && !node.id) {
        newType = false;
      }
      if (!newType) {
        if (ignore) {
          return false;
        } else {
          throw new Error(\`cannot turn \${node.type} to a statement\`);
        }
      }
      node.type = newType;
      return node;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/valueToNode.js
var require_valueToNode = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/converters/valueToNode.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _isValidIdentifier = require_isValidIdentifier();
    var _generated = require_generated2();
    var _default = valueToNode;
    exports.default = _default;
    var objectToString = Function.call.bind(Object.prototype.toString);
    function isRegExp(value) {
      return objectToString(value) === \\"[object RegExp]\\";
    }
    function isPlainObject(value) {
      if (typeof value !== \\"object\\" || value === null || Object.prototype.toString.call(value) !== \\"[object Object]\\") {
        return false;
      }
      const proto = Object.getPrototypeOf(value);
      return proto === null || Object.getPrototypeOf(proto) === null;
    }
    function valueToNode(value) {
      if (value === void 0) {
        return (0, _generated.identifier)(\\"undefined\\");
      }
      if (value === true || value === false) {
        return (0, _generated.booleanLiteral)(value);
      }
      if (value === null) {
        return (0, _generated.nullLiteral)();
      }
      if (typeof value === \\"string\\") {
        return (0, _generated.stringLiteral)(value);
      }
      if (typeof value === \\"number\\") {
        let result;
        if (Number.isFinite(value)) {
          result = (0, _generated.numericLiteral)(Math.abs(value));
        } else {
          let numerator;
          if (Number.isNaN(value)) {
            numerator = (0, _generated.numericLiteral)(0);
          } else {
            numerator = (0, _generated.numericLiteral)(1);
          }
          result = (0, _generated.binaryExpression)(\\"/\\", numerator, (0, _generated.numericLiteral)(0));
        }
        if (value < 0 || Object.is(value, -0)) {
          result = (0, _generated.unaryExpression)(\\"-\\", result);
        }
        return result;
      }
      if (isRegExp(value)) {
        const pattern = value.source;
        const flags = value.toString().match(/\\\\/([a-z]+|)$/)[1];
        return (0, _generated.regExpLiteral)(pattern, flags);
      }
      if (Array.isArray(value)) {
        return (0, _generated.arrayExpression)(value.map(valueToNode));
      }
      if (isPlainObject(value)) {
        const props = [];
        for (const key of Object.keys(value)) {
          let nodeKey;
          if ((0, _isValidIdentifier.default)(key)) {
            nodeKey = (0, _generated.identifier)(key);
          } else {
            nodeKey = (0, _generated.stringLiteral)(key);
          }
          props.push((0, _generated.objectProperty)(nodeKey, valueToNode(value[key])));
        }
        return (0, _generated.objectExpression)(props);
      }
      throw new Error(\\"don't know how to turn this value into a node\\");
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js
var require_appendToMemberExpression = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = appendToMemberExpression;
    var _generated = require_generated2();
    function appendToMemberExpression(member, append, computed = false) {
      member.object = (0, _generated.memberExpression)(member.object, member.property, member.computed);
      member.property = append;
      member.computed = !!computed;
      return member;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/inherits.js
var require_inherits = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/inherits.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = inherits;
    var _constants = require_constants();
    var _inheritsComments = require_inheritsComments();
    function inherits(child, parent) {
      if (!child || !parent)
        return child;
      for (const key of _constants.INHERIT_KEYS.optional) {
        if (child[key] == null) {
          child[key] = parent[key];
        }
      }
      for (const key of Object.keys(parent)) {
        if (key[0] === \\"_\\" && key !== \\"__clone\\")
          child[key] = parent[key];
      }
      for (const key of _constants.INHERIT_KEYS.force) {
        child[key] = parent[key];
      }
      (0, _inheritsComments.default)(child, parent);
      return child;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js
var require_prependToMemberExpression = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = prependToMemberExpression;
    var _generated = require_generated2();
    function prependToMemberExpression(member, prepend) {
      member.object = (0, _generated.memberExpression)(prepend, member.object);
      return member;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js
var require_getOuterBindingIdentifiers = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _getBindingIdentifiers = require_getBindingIdentifiers();
    var _default = getOuterBindingIdentifiers;
    exports.default = _default;
    function getOuterBindingIdentifiers(node, duplicates) {
      return (0, _getBindingIdentifiers.default)(node, duplicates, true);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/traverse/traverse.js
var require_traverse = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/traverse/traverse.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = traverse;
    var _definitions = require_definitions();
    function traverse(node, handlers, state) {
      if (typeof handlers === \\"function\\") {
        handlers = {
          enter: handlers
        };
      }
      const {
        enter,
        exit
      } = handlers;
      traverseSimpleImpl(node, enter, exit, state, []);
    }
    function traverseSimpleImpl(node, enter, exit, state, ancestors) {
      const keys = _definitions.VISITOR_KEYS[node.type];
      if (!keys)
        return;
      if (enter)
        enter(node, ancestors, state);
      for (const key of keys) {
        const subNode = node[key];
        if (Array.isArray(subNode)) {
          for (let i = 0; i < subNode.length; i++) {
            const child = subNode[i];
            if (!child)
              continue;
            ancestors.push({
              node,
              key,
              index: i
            });
            traverseSimpleImpl(child, enter, exit, state, ancestors);
            ancestors.pop();
          }
        } else if (subNode) {
          ancestors.push({
            node,
            key
          });
          traverseSimpleImpl(subNode, enter, exit, state, ancestors);
          ancestors.pop();
        }
      }
      if (exit)
        exit(node, ancestors, state);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isBinding.js
var require_isBinding = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isBinding.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isBinding;
    var _getBindingIdentifiers = require_getBindingIdentifiers();
    function isBinding(node, parent, grandparent) {
      if (grandparent && node.type === \\"Identifier\\" && parent.type === \\"ObjectProperty\\" && grandparent.type === \\"ObjectExpression\\") {
        return false;
      }
      const keys = _getBindingIdentifiers.default.keys[parent.type];
      if (keys) {
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const val = parent[key];
          if (Array.isArray(val)) {
            if (val.indexOf(node) >= 0)
              return true;
          } else {
            if (val === node)
              return true;
          }
        }
      }
      return false;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isLet.js
var require_isLet = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isLet.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isLet;
    var _generated = require_generated();
    var _constants = require_constants();
    function isLet(node) {
      return (0, _generated.isVariableDeclaration)(node) && (node.kind !== \\"var\\" || node[_constants.BLOCK_SCOPED_SYMBOL]);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isBlockScoped.js
var require_isBlockScoped = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isBlockScoped.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isBlockScoped;
    var _generated = require_generated();
    var _isLet = require_isLet();
    function isBlockScoped(node) {
      return (0, _generated.isFunctionDeclaration)(node) || (0, _generated.isClassDeclaration)(node) || (0, _isLet.default)(node);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isImmutable.js
var require_isImmutable = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isImmutable.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isImmutable;
    var _isType = require_isType();
    var _generated = require_generated();
    function isImmutable(node) {
      if ((0, _isType.default)(node.type, \\"Immutable\\"))
        return true;
      if ((0, _generated.isIdentifier)(node)) {
        if (node.name === \\"undefined\\") {
          return true;
        } else {
          return false;
        }
      }
      return false;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isNodesEquivalent.js
var require_isNodesEquivalent = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isNodesEquivalent.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isNodesEquivalent;
    var _definitions = require_definitions();
    function isNodesEquivalent(a2, b) {
      if (typeof a2 !== \\"object\\" || typeof b !== \\"object\\" || a2 == null || b == null) {
        return a2 === b;
      }
      if (a2.type !== b.type) {
        return false;
      }
      const fields = Object.keys(_definitions.NODE_FIELDS[a2.type] || a2.type);
      const visitorKeys = _definitions.VISITOR_KEYS[a2.type];
      for (const field of fields) {
        if (typeof a2[field] !== typeof b[field]) {
          return false;
        }
        if (a2[field] == null && b[field] == null) {
          continue;
        } else if (a2[field] == null || b[field] == null) {
          return false;
        }
        if (Array.isArray(a2[field])) {
          if (!Array.isArray(b[field])) {
            return false;
          }
          if (a2[field].length !== b[field].length) {
            return false;
          }
          for (let i = 0; i < a2[field].length; i++) {
            if (!isNodesEquivalent(a2[field][i], b[field][i])) {
              return false;
            }
          }
          continue;
        }
        if (typeof a2[field] === \\"object\\" && !(visitorKeys != null && visitorKeys.includes(field))) {
          for (const key of Object.keys(a2[field])) {
            if (a2[field][key] !== b[field][key]) {
              return false;
            }
          }
          continue;
        }
        if (!isNodesEquivalent(a2[field], b[field])) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isReferenced.js
var require_isReferenced = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isReferenced.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isReferenced;
    function isReferenced(node, parent, grandparent) {
      switch (parent.type) {
        case \\"MemberExpression\\":
        case \\"OptionalMemberExpression\\":
          if (parent.property === node) {
            return !!parent.computed;
          }
          return parent.object === node;
        case \\"JSXMemberExpression\\":
          return parent.object === node;
        case \\"VariableDeclarator\\":
          return parent.init === node;
        case \\"ArrowFunctionExpression\\":
          return parent.body === node;
        case \\"PrivateName\\":
          return false;
        case \\"ClassMethod\\":
        case \\"ClassPrivateMethod\\":
        case \\"ObjectMethod\\":
          if (parent.key === node) {
            return !!parent.computed;
          }
          return false;
        case \\"ObjectProperty\\":
          if (parent.key === node) {
            return !!parent.computed;
          }
          return !grandparent || grandparent.type !== \\"ObjectPattern\\";
        case \\"ClassProperty\\":
          if (parent.key === node) {
            return !!parent.computed;
          }
          return true;
        case \\"ClassPrivateProperty\\":
          return parent.key !== node;
        case \\"ClassDeclaration\\":
        case \\"ClassExpression\\":
          return parent.superClass === node;
        case \\"AssignmentExpression\\":
          return parent.right === node;
        case \\"AssignmentPattern\\":
          return parent.right === node;
        case \\"LabeledStatement\\":
          return false;
        case \\"CatchClause\\":
          return false;
        case \\"RestElement\\":
          return false;
        case \\"BreakStatement\\":
        case \\"ContinueStatement\\":
          return false;
        case \\"FunctionDeclaration\\":
        case \\"FunctionExpression\\":
          return false;
        case \\"ExportNamespaceSpecifier\\":
        case \\"ExportDefaultSpecifier\\":
          return false;
        case \\"ExportSpecifier\\":
          if (grandparent != null && grandparent.source) {
            return false;
          }
          return parent.local === node;
        case \\"ImportDefaultSpecifier\\":
        case \\"ImportNamespaceSpecifier\\":
        case \\"ImportSpecifier\\":
          return false;
        case \\"ImportAttribute\\":
          return false;
        case \\"JSXAttribute\\":
          return false;
        case \\"ObjectPattern\\":
        case \\"ArrayPattern\\":
          return false;
        case \\"MetaProperty\\":
          return false;
        case \\"ObjectTypeProperty\\":
          return parent.key !== node;
        case \\"TSEnumMember\\":
          return parent.id !== node;
        case \\"TSPropertySignature\\":
          if (parent.key === node) {
            return !!parent.computed;
          }
          return true;
      }
      return true;
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isScope.js
var require_isScope = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isScope.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isScope;
    var _generated = require_generated();
    function isScope(node, parent) {
      if ((0, _generated.isBlockStatement)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent))) {
        return false;
      }
      if ((0, _generated.isPattern)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent))) {
        return true;
      }
      return (0, _generated.isScopable)(node);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isSpecifierDefault.js
var require_isSpecifierDefault = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isSpecifierDefault.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isSpecifierDefault;
    var _generated = require_generated();
    function isSpecifierDefault(specifier) {
      return (0, _generated.isImportDefaultSpecifier)(specifier) || (0, _generated.isIdentifier)(specifier.imported || specifier.exported, {
        name: \\"default\\"
      });
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isValidES3Identifier.js
var require_isValidES3Identifier = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isValidES3Identifier.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isValidES3Identifier;
    var _isValidIdentifier = require_isValidIdentifier();
    var RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set([\\"abstract\\", \\"boolean\\", \\"byte\\", \\"char\\", \\"double\\", \\"enum\\", \\"final\\", \\"float\\", \\"goto\\", \\"implements\\", \\"int\\", \\"interface\\", \\"long\\", \\"native\\", \\"package\\", \\"private\\", \\"protected\\", \\"public\\", \\"short\\", \\"static\\", \\"synchronized\\", \\"throws\\", \\"transient\\", \\"volatile\\"]);
    function isValidES3Identifier(name) {
      return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isVar.js
var require_isVar = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/validators/isVar.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isVar;
    var _generated = require_generated();
    var _constants = require_constants();
    function isVar(node) {
      return (0, _generated.isVariableDeclaration)(node, {
        kind: \\"var\\"
      }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
    }
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/ast-types/generated/index.js
var require_generated5 = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/ast-types/generated/index.js\\"() {
  }
});

// node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/index.js
var require_lib2 = __commonJS({
  \\"node_modules/.pnpm/@babel+types@7.16.8/node_modules/@babel/types/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    var _exportNames = {
      react: true,
      assertNode: true,
      createTypeAnnotationBasedOnTypeof: true,
      createUnionTypeAnnotation: true,
      createFlowUnionType: true,
      createTSUnionType: true,
      cloneNode: true,
      clone: true,
      cloneDeep: true,
      cloneDeepWithoutLoc: true,
      cloneWithoutLoc: true,
      addComment: true,
      addComments: true,
      inheritInnerComments: true,
      inheritLeadingComments: true,
      inheritsComments: true,
      inheritTrailingComments: true,
      removeComments: true,
      ensureBlock: true,
      toBindingIdentifierName: true,
      toBlock: true,
      toComputedKey: true,
      toExpression: true,
      toIdentifier: true,
      toKeyAlias: true,
      toSequenceExpression: true,
      toStatement: true,
      valueToNode: true,
      appendToMemberExpression: true,
      inherits: true,
      prependToMemberExpression: true,
      removeProperties: true,
      removePropertiesDeep: true,
      removeTypeDuplicates: true,
      getBindingIdentifiers: true,
      getOuterBindingIdentifiers: true,
      traverse: true,
      traverseFast: true,
      shallowEqual: true,
      is: true,
      isBinding: true,
      isBlockScoped: true,
      isImmutable: true,
      isLet: true,
      isNode: true,
      isNodesEquivalent: true,
      isPlaceholderType: true,
      isReferenced: true,
      isScope: true,
      isSpecifierDefault: true,
      isType: true,
      isValidES3Identifier: true,
      isValidIdentifier: true,
      isVar: true,
      matchesPattern: true,
      validate: true,
      buildMatchMemberExpression: true
    };
    Object.defineProperty(exports, \\"addComment\\", {
      enumerable: true,
      get: function() {
        return _addComment.default;
      }
    });
    Object.defineProperty(exports, \\"addComments\\", {
      enumerable: true,
      get: function() {
        return _addComments.default;
      }
    });
    Object.defineProperty(exports, \\"appendToMemberExpression\\", {
      enumerable: true,
      get: function() {
        return _appendToMemberExpression.default;
      }
    });
    Object.defineProperty(exports, \\"assertNode\\", {
      enumerable: true,
      get: function() {
        return _assertNode.default;
      }
    });
    Object.defineProperty(exports, \\"buildMatchMemberExpression\\", {
      enumerable: true,
      get: function() {
        return _buildMatchMemberExpression.default;
      }
    });
    Object.defineProperty(exports, \\"clone\\", {
      enumerable: true,
      get: function() {
        return _clone.default;
      }
    });
    Object.defineProperty(exports, \\"cloneDeep\\", {
      enumerable: true,
      get: function() {
        return _cloneDeep.default;
      }
    });
    Object.defineProperty(exports, \\"cloneDeepWithoutLoc\\", {
      enumerable: true,
      get: function() {
        return _cloneDeepWithoutLoc.default;
      }
    });
    Object.defineProperty(exports, \\"cloneNode\\", {
      enumerable: true,
      get: function() {
        return _cloneNode.default;
      }
    });
    Object.defineProperty(exports, \\"cloneWithoutLoc\\", {
      enumerable: true,
      get: function() {
        return _cloneWithoutLoc.default;
      }
    });
    Object.defineProperty(exports, \\"createFlowUnionType\\", {
      enumerable: true,
      get: function() {
        return _createFlowUnionType.default;
      }
    });
    Object.defineProperty(exports, \\"createTSUnionType\\", {
      enumerable: true,
      get: function() {
        return _createTSUnionType.default;
      }
    });
    Object.defineProperty(exports, \\"createTypeAnnotationBasedOnTypeof\\", {
      enumerable: true,
      get: function() {
        return _createTypeAnnotationBasedOnTypeof.default;
      }
    });
    Object.defineProperty(exports, \\"createUnionTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _createFlowUnionType.default;
      }
    });
    Object.defineProperty(exports, \\"ensureBlock\\", {
      enumerable: true,
      get: function() {
        return _ensureBlock.default;
      }
    });
    Object.defineProperty(exports, \\"getBindingIdentifiers\\", {
      enumerable: true,
      get: function() {
        return _getBindingIdentifiers.default;
      }
    });
    Object.defineProperty(exports, \\"getOuterBindingIdentifiers\\", {
      enumerable: true,
      get: function() {
        return _getOuterBindingIdentifiers.default;
      }
    });
    Object.defineProperty(exports, \\"inheritInnerComments\\", {
      enumerable: true,
      get: function() {
        return _inheritInnerComments.default;
      }
    });
    Object.defineProperty(exports, \\"inheritLeadingComments\\", {
      enumerable: true,
      get: function() {
        return _inheritLeadingComments.default;
      }
    });
    Object.defineProperty(exports, \\"inheritTrailingComments\\", {
      enumerable: true,
      get: function() {
        return _inheritTrailingComments.default;
      }
    });
    Object.defineProperty(exports, \\"inherits\\", {
      enumerable: true,
      get: function() {
        return _inherits.default;
      }
    });
    Object.defineProperty(exports, \\"inheritsComments\\", {
      enumerable: true,
      get: function() {
        return _inheritsComments.default;
      }
    });
    Object.defineProperty(exports, \\"is\\", {
      enumerable: true,
      get: function() {
        return _is.default;
      }
    });
    Object.defineProperty(exports, \\"isBinding\\", {
      enumerable: true,
      get: function() {
        return _isBinding.default;
      }
    });
    Object.defineProperty(exports, \\"isBlockScoped\\", {
      enumerable: true,
      get: function() {
        return _isBlockScoped.default;
      }
    });
    Object.defineProperty(exports, \\"isImmutable\\", {
      enumerable: true,
      get: function() {
        return _isImmutable.default;
      }
    });
    Object.defineProperty(exports, \\"isLet\\", {
      enumerable: true,
      get: function() {
        return _isLet.default;
      }
    });
    Object.defineProperty(exports, \\"isNode\\", {
      enumerable: true,
      get: function() {
        return _isNode.default;
      }
    });
    Object.defineProperty(exports, \\"isNodesEquivalent\\", {
      enumerable: true,
      get: function() {
        return _isNodesEquivalent.default;
      }
    });
    Object.defineProperty(exports, \\"isPlaceholderType\\", {
      enumerable: true,
      get: function() {
        return _isPlaceholderType.default;
      }
    });
    Object.defineProperty(exports, \\"isReferenced\\", {
      enumerable: true,
      get: function() {
        return _isReferenced.default;
      }
    });
    Object.defineProperty(exports, \\"isScope\\", {
      enumerable: true,
      get: function() {
        return _isScope.default;
      }
    });
    Object.defineProperty(exports, \\"isSpecifierDefault\\", {
      enumerable: true,
      get: function() {
        return _isSpecifierDefault.default;
      }
    });
    Object.defineProperty(exports, \\"isType\\", {
      enumerable: true,
      get: function() {
        return _isType.default;
      }
    });
    Object.defineProperty(exports, \\"isValidES3Identifier\\", {
      enumerable: true,
      get: function() {
        return _isValidES3Identifier.default;
      }
    });
    Object.defineProperty(exports, \\"isValidIdentifier\\", {
      enumerable: true,
      get: function() {
        return _isValidIdentifier.default;
      }
    });
    Object.defineProperty(exports, \\"isVar\\", {
      enumerable: true,
      get: function() {
        return _isVar.default;
      }
    });
    Object.defineProperty(exports, \\"matchesPattern\\", {
      enumerable: true,
      get: function() {
        return _matchesPattern.default;
      }
    });
    Object.defineProperty(exports, \\"prependToMemberExpression\\", {
      enumerable: true,
      get: function() {
        return _prependToMemberExpression.default;
      }
    });
    exports.react = void 0;
    Object.defineProperty(exports, \\"removeComments\\", {
      enumerable: true,
      get: function() {
        return _removeComments.default;
      }
    });
    Object.defineProperty(exports, \\"removeProperties\\", {
      enumerable: true,
      get: function() {
        return _removeProperties.default;
      }
    });
    Object.defineProperty(exports, \\"removePropertiesDeep\\", {
      enumerable: true,
      get: function() {
        return _removePropertiesDeep.default;
      }
    });
    Object.defineProperty(exports, \\"removeTypeDuplicates\\", {
      enumerable: true,
      get: function() {
        return _removeTypeDuplicates.default;
      }
    });
    Object.defineProperty(exports, \\"shallowEqual\\", {
      enumerable: true,
      get: function() {
        return _shallowEqual.default;
      }
    });
    Object.defineProperty(exports, \\"toBindingIdentifierName\\", {
      enumerable: true,
      get: function() {
        return _toBindingIdentifierName.default;
      }
    });
    Object.defineProperty(exports, \\"toBlock\\", {
      enumerable: true,
      get: function() {
        return _toBlock.default;
      }
    });
    Object.defineProperty(exports, \\"toComputedKey\\", {
      enumerable: true,
      get: function() {
        return _toComputedKey.default;
      }
    });
    Object.defineProperty(exports, \\"toExpression\\", {
      enumerable: true,
      get: function() {
        return _toExpression.default;
      }
    });
    Object.defineProperty(exports, \\"toIdentifier\\", {
      enumerable: true,
      get: function() {
        return _toIdentifier.default;
      }
    });
    Object.defineProperty(exports, \\"toKeyAlias\\", {
      enumerable: true,
      get: function() {
        return _toKeyAlias.default;
      }
    });
    Object.defineProperty(exports, \\"toSequenceExpression\\", {
      enumerable: true,
      get: function() {
        return _toSequenceExpression.default;
      }
    });
    Object.defineProperty(exports, \\"toStatement\\", {
      enumerable: true,
      get: function() {
        return _toStatement.default;
      }
    });
    Object.defineProperty(exports, \\"traverse\\", {
      enumerable: true,
      get: function() {
        return _traverse.default;
      }
    });
    Object.defineProperty(exports, \\"traverseFast\\", {
      enumerable: true,
      get: function() {
        return _traverseFast.default;
      }
    });
    Object.defineProperty(exports, \\"validate\\", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, \\"valueToNode\\", {
      enumerable: true,
      get: function() {
        return _valueToNode.default;
      }
    });
    var _isReactComponent = require_isReactComponent();
    var _isCompatTag = require_isCompatTag();
    var _buildChildren = require_buildChildren();
    var _assertNode = require_assertNode();
    var _generated = require_generated3();
    Object.keys(_generated).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _generated[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _generated[key];
        }
      });
    });
    var _createTypeAnnotationBasedOnTypeof = require_createTypeAnnotationBasedOnTypeof();
    var _createFlowUnionType = require_createFlowUnionType();
    var _createTSUnionType = require_createTSUnionType();
    var _generated2 = require_generated2();
    Object.keys(_generated2).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _generated2[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _generated2[key];
        }
      });
    });
    var _uppercase = require_uppercase();
    Object.keys(_uppercase).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _uppercase[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _uppercase[key];
        }
      });
    });
    var _cloneNode = require_cloneNode();
    var _clone = require_clone();
    var _cloneDeep = require_cloneDeep();
    var _cloneDeepWithoutLoc = require_cloneDeepWithoutLoc();
    var _cloneWithoutLoc = require_cloneWithoutLoc();
    var _addComment = require_addComment();
    var _addComments = require_addComments();
    var _inheritInnerComments = require_inheritInnerComments();
    var _inheritLeadingComments = require_inheritLeadingComments();
    var _inheritsComments = require_inheritsComments();
    var _inheritTrailingComments = require_inheritTrailingComments();
    var _removeComments = require_removeComments();
    var _generated3 = require_generated4();
    Object.keys(_generated3).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _generated3[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _generated3[key];
        }
      });
    });
    var _constants = require_constants();
    Object.keys(_constants).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _constants[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _constants[key];
        }
      });
    });
    var _ensureBlock = require_ensureBlock();
    var _toBindingIdentifierName = require_toBindingIdentifierName();
    var _toBlock = require_toBlock();
    var _toComputedKey = require_toComputedKey();
    var _toExpression = require_toExpression();
    var _toIdentifier = require_toIdentifier();
    var _toKeyAlias = require_toKeyAlias();
    var _toSequenceExpression = require_toSequenceExpression();
    var _toStatement = require_toStatement();
    var _valueToNode = require_valueToNode();
    var _definitions = require_definitions();
    Object.keys(_definitions).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _definitions[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _definitions[key];
        }
      });
    });
    var _appendToMemberExpression = require_appendToMemberExpression();
    var _inherits = require_inherits();
    var _prependToMemberExpression = require_prependToMemberExpression();
    var _removeProperties = require_removeProperties();
    var _removePropertiesDeep = require_removePropertiesDeep();
    var _removeTypeDuplicates = require_removeTypeDuplicates();
    var _getBindingIdentifiers = require_getBindingIdentifiers();
    var _getOuterBindingIdentifiers = require_getOuterBindingIdentifiers();
    var _traverse = require_traverse();
    Object.keys(_traverse).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _traverse[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _traverse[key];
        }
      });
    });
    var _traverseFast = require_traverseFast();
    var _shallowEqual = require_shallowEqual();
    var _is = require_is();
    var _isBinding = require_isBinding();
    var _isBlockScoped = require_isBlockScoped();
    var _isImmutable = require_isImmutable();
    var _isLet = require_isLet();
    var _isNode = require_isNode();
    var _isNodesEquivalent = require_isNodesEquivalent();
    var _isPlaceholderType = require_isPlaceholderType();
    var _isReferenced = require_isReferenced();
    var _isScope = require_isScope();
    var _isSpecifierDefault = require_isSpecifierDefault();
    var _isType = require_isType();
    var _isValidES3Identifier = require_isValidES3Identifier();
    var _isValidIdentifier = require_isValidIdentifier();
    var _isVar = require_isVar();
    var _matchesPattern = require_matchesPattern();
    var _validate = require_validate();
    var _buildMatchMemberExpression = require_buildMatchMemberExpression();
    var _generated4 = require_generated();
    Object.keys(_generated4).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _generated4[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _generated4[key];
        }
      });
    });
    var _generated5 = require_generated5();
    Object.keys(_generated5).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _generated5[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _generated5[key];
        }
      });
    });
    var react = {
      isReactComponent: _isReactComponent.default,
      isCompatTag: _isCompatTag.default,
      buildChildren: _buildChildren.default
    };
    exports.react = react;
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/lib/virtual-types.js
var require_virtual_types = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/lib/virtual-types.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.Var = exports.User = exports.Statement = exports.SpreadProperty = exports.Scope = exports.RestProperty = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = exports.Referenced = exports.Pure = exports.NumericLiteralTypeAnnotation = exports.Generated = exports.ForAwaitStatement = exports.Flow = exports.Expression = exports.ExistentialTypeParam = exports.BlockScoped = exports.BindingIdentifier = void 0;
    var _t = require_lib2();
    var {
      isBinding,
      isBlockScoped,
      isExportDeclaration,
      isExpression,
      isFlow,
      isForStatement,
      isForXStatement,
      isIdentifier,
      isImportDeclaration,
      isImportSpecifier,
      isJSXIdentifier,
      isJSXMemberExpression,
      isMemberExpression,
      isReferenced,
      isScope,
      isStatement,
      isVar,
      isVariableDeclaration,
      react
    } = _t;
    var {
      isCompatTag
    } = react;
    var ReferencedIdentifier = {
      types: [\\"Identifier\\", \\"JSXIdentifier\\"],
      checkPath(path, opts) {
        const {
          node,
          parent
        } = path;
        if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
          if (isJSXIdentifier(node, opts)) {
            if (isCompatTag(node.name))
              return false;
          } else {
            return false;
          }
        }
        return isReferenced(node, parent, path.parentPath.parent);
      }
    };
    exports.ReferencedIdentifier = ReferencedIdentifier;
    var ReferencedMemberExpression = {
      types: [\\"MemberExpression\\"],
      checkPath({
        node,
        parent
      }) {
        return isMemberExpression(node) && isReferenced(node, parent);
      }
    };
    exports.ReferencedMemberExpression = ReferencedMemberExpression;
    var BindingIdentifier = {
      types: [\\"Identifier\\"],
      checkPath(path) {
        const {
          node,
          parent
        } = path;
        const grandparent = path.parentPath.parent;
        return isIdentifier(node) && isBinding(node, parent, grandparent);
      }
    };
    exports.BindingIdentifier = BindingIdentifier;
    var Statement = {
      types: [\\"Statement\\"],
      checkPath({
        node,
        parent
      }) {
        if (isStatement(node)) {
          if (isVariableDeclaration(node)) {
            if (isForXStatement(parent, {
              left: node
            }))
              return false;
            if (isForStatement(parent, {
              init: node
            }))
              return false;
          }
          return true;
        } else {
          return false;
        }
      }
    };
    exports.Statement = Statement;
    var Expression = {
      types: [\\"Expression\\"],
      checkPath(path) {
        if (path.isIdentifier()) {
          return path.isReferencedIdentifier();
        } else {
          return isExpression(path.node);
        }
      }
    };
    exports.Expression = Expression;
    var Scope = {
      types: [\\"Scopable\\", \\"Pattern\\"],
      checkPath(path) {
        return isScope(path.node, path.parent);
      }
    };
    exports.Scope = Scope;
    var Referenced = {
      checkPath(path) {
        return isReferenced(path.node, path.parent);
      }
    };
    exports.Referenced = Referenced;
    var BlockScoped = {
      checkPath(path) {
        return isBlockScoped(path.node);
      }
    };
    exports.BlockScoped = BlockScoped;
    var Var = {
      types: [\\"VariableDeclaration\\"],
      checkPath(path) {
        return isVar(path.node);
      }
    };
    exports.Var = Var;
    var User = {
      checkPath(path) {
        return path.node && !!path.node.loc;
      }
    };
    exports.User = User;
    var Generated = {
      checkPath(path) {
        return !path.isUser();
      }
    };
    exports.Generated = Generated;
    var Pure = {
      checkPath(path, opts) {
        return path.scope.isPure(path.node, opts);
      }
    };
    exports.Pure = Pure;
    var Flow = {
      types: [\\"Flow\\", \\"ImportDeclaration\\", \\"ExportDeclaration\\", \\"ImportSpecifier\\"],
      checkPath({
        node
      }) {
        if (isFlow(node)) {
          return true;
        } else if (isImportDeclaration(node)) {
          return node.importKind === \\"type\\" || node.importKind === \\"typeof\\";
        } else if (isExportDeclaration(node)) {
          return node.exportKind === \\"type\\";
        } else if (isImportSpecifier(node)) {
          return node.importKind === \\"type\\" || node.importKind === \\"typeof\\";
        } else {
          return false;
        }
      }
    };
    exports.Flow = Flow;
    var RestProperty = {
      types: [\\"RestElement\\"],
      checkPath(path) {
        return path.parentPath && path.parentPath.isObjectPattern();
      }
    };
    exports.RestProperty = RestProperty;
    var SpreadProperty = {
      types: [\\"RestElement\\"],
      checkPath(path) {
        return path.parentPath && path.parentPath.isObjectExpression();
      }
    };
    exports.SpreadProperty = SpreadProperty;
    var ExistentialTypeParam = {
      types: [\\"ExistsTypeAnnotation\\"]
    };
    exports.ExistentialTypeParam = ExistentialTypeParam;
    var NumericLiteralTypeAnnotation = {
      types: [\\"NumberLiteralTypeAnnotation\\"]
    };
    exports.NumericLiteralTypeAnnotation = NumericLiteralTypeAnnotation;
    var ForAwaitStatement = {
      types: [\\"ForOfStatement\\"],
      checkPath({
        node
      }) {
        return node.await === true;
      }
    };
    exports.ForAwaitStatement = ForAwaitStatement;
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/visitors.js
var require_visitors = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/visitors.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.explode = explode;
    exports.merge = merge;
    exports.verify = verify;
    var virtualTypes = require_virtual_types();
    var _t = require_lib2();
    var {
      DEPRECATED_KEYS,
      FLIPPED_ALIAS_KEYS,
      TYPES
    } = _t;
    function explode(visitor) {
      if (visitor._exploded)
        return visitor;
      visitor._exploded = true;
      for (const nodeType of Object.keys(visitor)) {
        if (shouldIgnoreKey(nodeType))
          continue;
        const parts = nodeType.split(\\"|\\");
        if (parts.length === 1)
          continue;
        const fns = visitor[nodeType];
        delete visitor[nodeType];
        for (const part of parts) {
          visitor[part] = fns;
        }
      }
      verify(visitor);
      delete visitor.__esModule;
      ensureEntranceObjects(visitor);
      ensureCallbackArrays(visitor);
      for (const nodeType of Object.keys(visitor)) {
        if (shouldIgnoreKey(nodeType))
          continue;
        const wrapper = virtualTypes[nodeType];
        if (!wrapper)
          continue;
        const fns = visitor[nodeType];
        for (const type of Object.keys(fns)) {
          fns[type] = wrapCheck(wrapper, fns[type]);
        }
        delete visitor[nodeType];
        if (wrapper.types) {
          for (const type of wrapper.types) {
            if (visitor[type]) {
              mergePair(visitor[type], fns);
            } else {
              visitor[type] = fns;
            }
          }
        } else {
          mergePair(visitor, fns);
        }
      }
      for (const nodeType of Object.keys(visitor)) {
        if (shouldIgnoreKey(nodeType))
          continue;
        const fns = visitor[nodeType];
        let aliases = FLIPPED_ALIAS_KEYS[nodeType];
        const deprecatedKey = DEPRECATED_KEYS[nodeType];
        if (deprecatedKey) {
          console.trace(\`Visitor defined for \${nodeType} but it has been renamed to \${deprecatedKey}\`);
          aliases = [deprecatedKey];
        }
        if (!aliases)
          continue;
        delete visitor[nodeType];
        for (const alias of aliases) {
          const existing = visitor[alias];
          if (existing) {
            mergePair(existing, fns);
          } else {
            visitor[alias] = Object.assign({}, fns);
          }
        }
      }
      for (const nodeType of Object.keys(visitor)) {
        if (shouldIgnoreKey(nodeType))
          continue;
        ensureCallbackArrays(visitor[nodeType]);
      }
      return visitor;
    }
    function verify(visitor) {
      if (visitor._verified)
        return;
      if (typeof visitor === \\"function\\") {
        throw new Error(\\"You passed \`traverse()\` a function when it expected a visitor object, are you sure you didn't mean \`{ enter: Function }\`?\\");
      }
      for (const nodeType of Object.keys(visitor)) {
        if (nodeType === \\"enter\\" || nodeType === \\"exit\\") {
          validateVisitorMethods(nodeType, visitor[nodeType]);
        }
        if (shouldIgnoreKey(nodeType))
          continue;
        if (TYPES.indexOf(nodeType) < 0) {
          throw new Error(\`You gave us a visitor for the node type \${nodeType} but it's not a valid type\`);
        }
        const visitors = visitor[nodeType];
        if (typeof visitors === \\"object\\") {
          for (const visitorKey of Object.keys(visitors)) {
            if (visitorKey === \\"enter\\" || visitorKey === \\"exit\\") {
              validateVisitorMethods(\`\${nodeType}.\${visitorKey}\`, visitors[visitorKey]);
            } else {
              throw new Error(\`You passed \\\\\`traverse()\\\\\` a visitor object with the property \${nodeType} that has the invalid property \${visitorKey}\`);
            }
          }
        }
      }
      visitor._verified = true;
    }
    function validateVisitorMethods(path, val) {
      const fns = [].concat(val);
      for (const fn of fns) {
        if (typeof fn !== \\"function\\") {
          throw new TypeError(\`Non-function found defined in \${path} with type \${typeof fn}\`);
        }
      }
    }
    function merge(visitors, states = [], wrapper) {
      const rootVisitor = {};
      for (let i = 0; i < visitors.length; i++) {
        const visitor = visitors[i];
        const state = states[i];
        explode(visitor);
        for (const type of Object.keys(visitor)) {
          let visitorType = visitor[type];
          if (state || wrapper) {
            visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper);
          }
          const nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
          mergePair(nodeVisitor, visitorType);
        }
      }
      return rootVisitor;
    }
    function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
      const newVisitor = {};
      for (const key of Object.keys(oldVisitor)) {
        let fns = oldVisitor[key];
        if (!Array.isArray(fns))
          continue;
        fns = fns.map(function(fn) {
          let newFn = fn;
          if (state) {
            newFn = function(path) {
              return fn.call(state, path, state);
            };
          }
          if (wrapper) {
            newFn = wrapper(state.key, key, newFn);
          }
          if (newFn !== fn) {
            newFn.toString = () => fn.toString();
          }
          return newFn;
        });
        newVisitor[key] = fns;
      }
      return newVisitor;
    }
    function ensureEntranceObjects(obj) {
      for (const key of Object.keys(obj)) {
        if (shouldIgnoreKey(key))
          continue;
        const fns = obj[key];
        if (typeof fns === \\"function\\") {
          obj[key] = {
            enter: fns
          };
        }
      }
    }
    function ensureCallbackArrays(obj) {
      if (obj.enter && !Array.isArray(obj.enter))
        obj.enter = [obj.enter];
      if (obj.exit && !Array.isArray(obj.exit))
        obj.exit = [obj.exit];
    }
    function wrapCheck(wrapper, fn) {
      const newFn = function(path) {
        if (wrapper.checkPath(path)) {
          return fn.apply(this, arguments);
        }
      };
      newFn.toString = () => fn.toString();
      return newFn;
    }
    function shouldIgnoreKey(key) {
      if (key[0] === \\"_\\")
        return true;
      if (key === \\"enter\\" || key === \\"exit\\" || key === \\"shouldSkip\\")
        return true;
      if (key === \\"denylist\\" || key === \\"noScope\\" || key === \\"skipKeys\\" || key === \\"blacklist\\") {
        return true;
      }
      return false;
    }
    function mergePair(dest, src) {
      for (const key of Object.keys(src)) {
        dest[key] = [].concat(dest[key] || [], src[key]);
      }
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/cache.js
var require_cache = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/cache.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.clear = clear;
    exports.clearPath = clearPath;
    exports.clearScope = clearScope;
    exports.scope = exports.path = void 0;
    var path = /* @__PURE__ */ new WeakMap();
    exports.path = path;
    var scope = /* @__PURE__ */ new WeakMap();
    exports.scope = scope;
    function clear() {
      clearPath();
      clearScope();
    }
    function clearPath() {
      exports.path = path = /* @__PURE__ */ new WeakMap();
    }
    function clearScope() {
      exports.scope = scope = /* @__PURE__ */ new WeakMap();
    }
  }
});

// node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js
var require_ms = __commonJS({
  \\"node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js\\"(exports, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === \\"string\\" && val.length > 0) {
        return parse(val);
      } else if (type === \\"number\\" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(\\"val is not a non-empty string or a valid number. val=\\" + JSON.stringify(val));
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || \\"ms\\").toLowerCase();
      switch (type) {
        case \\"years\\":
        case \\"year\\":
        case \\"yrs\\":
        case \\"yr\\":
        case \\"y\\":
          return n * y;
        case \\"weeks\\":
        case \\"week\\":
        case \\"w\\":
          return n * w;
        case \\"days\\":
        case \\"day\\":
        case \\"d\\":
          return n * d;
        case \\"hours\\":
        case \\"hour\\":
        case \\"hrs\\":
        case \\"hr\\":
        case \\"h\\":
          return n * h;
        case \\"minutes\\":
        case \\"minute\\":
        case \\"mins\\":
        case \\"min\\":
        case \\"m\\":
          return n * m;
        case \\"seconds\\":
        case \\"second\\":
        case \\"secs\\":
        case \\"sec\\":
        case \\"s\\":
          return n * s;
        case \\"milliseconds\\":
        case \\"millisecond\\":
        case \\"msecs\\":
        case \\"msec\\":
        case \\"ms\\":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + \\"d\\";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + \\"h\\";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + \\"m\\";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + \\"s\\";
      }
      return ms + \\"ms\\";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, \\"day\\");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, \\"hour\\");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, \\"minute\\");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, \\"second\\");
      }
      return ms + \\" ms\\";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + \\" \\" + name + (isPlural ? \\"s\\" : \\"\\");
    }
  }
});

// node_modules/.pnpm/debug@4.3.3/node_modules/debug/src/common.js
var require_common = __commonJS({
  \\"node_modules/.pnpm/debug@4.3.3/node_modules/debug/src/common.js\\"(exports, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self = debug;
          const curr = Number(new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== \\"string\\") {
            args.unshift(\\"%O\\");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === \\"%%\\") {
              return \\"%\\";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === \\"function\\") {
              const val = args[index];
              match = formatter.call(self, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, \\"enabled\\", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === \\"function\\") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === \\"undefined\\" ? \\":\\" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === \\"string\\" ? namespaces : \\"\\").split(/[\\\\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\\\\*/g, \\".*?\\");
          if (namespaces[0] === \\"-\\") {
            createDebug.skips.push(new RegExp(\\"^\\" + namespaces.substr(1) + \\"$\\"));
          } else {
            createDebug.names.push(new RegExp(\\"^\\" + namespaces + \\"$\\"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => \\"-\\" + namespace)
        ].join(\\",\\");
        createDebug.enable(\\"\\");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === \\"*\\") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\\\\.\\\\*\\\\?$/, \\"*\\");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn(\\"Instance method \`debug.destroy()\` is deprecated and no longer does anything. It will be removed in the next major version of \`debug\`.\\");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/.pnpm/debug@4.3.3/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  \\"node_modules/.pnpm/debug@4.3.3/node_modules/debug/src/browser.js\\"(exports, module2) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn(\\"Instance method \`debug.destroy()\` is deprecated and no longer does anything. It will be removed in the next major version of \`debug\`.\\");
        }
      };
    })();
    exports.colors = [
      \\"#0000CC\\",
      \\"#0000FF\\",
      \\"#0033CC\\",
      \\"#0033FF\\",
      \\"#0066CC\\",
      \\"#0066FF\\",
      \\"#0099CC\\",
      \\"#0099FF\\",
      \\"#00CC00\\",
      \\"#00CC33\\",
      \\"#00CC66\\",
      \\"#00CC99\\",
      \\"#00CCCC\\",
      \\"#00CCFF\\",
      \\"#3300CC\\",
      \\"#3300FF\\",
      \\"#3333CC\\",
      \\"#3333FF\\",
      \\"#3366CC\\",
      \\"#3366FF\\",
      \\"#3399CC\\",
      \\"#3399FF\\",
      \\"#33CC00\\",
      \\"#33CC33\\",
      \\"#33CC66\\",
      \\"#33CC99\\",
      \\"#33CCCC\\",
      \\"#33CCFF\\",
      \\"#6600CC\\",
      \\"#6600FF\\",
      \\"#6633CC\\",
      \\"#6633FF\\",
      \\"#66CC00\\",
      \\"#66CC33\\",
      \\"#9900CC\\",
      \\"#9900FF\\",
      \\"#9933CC\\",
      \\"#9933FF\\",
      \\"#99CC00\\",
      \\"#99CC33\\",
      \\"#CC0000\\",
      \\"#CC0033\\",
      \\"#CC0066\\",
      \\"#CC0099\\",
      \\"#CC00CC\\",
      \\"#CC00FF\\",
      \\"#CC3300\\",
      \\"#CC3333\\",
      \\"#CC3366\\",
      \\"#CC3399\\",
      \\"#CC33CC\\",
      \\"#CC33FF\\",
      \\"#CC6600\\",
      \\"#CC6633\\",
      \\"#CC9900\\",
      \\"#CC9933\\",
      \\"#CCCC00\\",
      \\"#CCCC33\\",
      \\"#FF0000\\",
      \\"#FF0033\\",
      \\"#FF0066\\",
      \\"#FF0099\\",
      \\"#FF00CC\\",
      \\"#FF00FF\\",
      \\"#FF3300\\",
      \\"#FF3333\\",
      \\"#FF3366\\",
      \\"#FF3399\\",
      \\"#FF33CC\\",
      \\"#FF33FF\\",
      \\"#FF6600\\",
      \\"#FF6633\\",
      \\"#FF9900\\",
      \\"#FF9933\\",
      \\"#FFCC00\\",
      \\"#FFCC33\\"
    ];
    function useColors() {
      if (typeof window !== \\"undefined\\" && window.process && (window.process.type === \\"renderer\\" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== \\"undefined\\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\\\/(\\\\d+)/)) {
        return false;
      }
      return typeof document !== \\"undefined\\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== \\"undefined\\" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== \\"undefined\\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== \\"undefined\\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\\\/(\\\\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? \\"%c\\" : \\"\\") + this.namespace + (this.useColors ? \\" %c\\" : \\" \\") + args[0] + (this.useColors ? \\"%c \\" : \\" \\") + \\"+\\" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = \\"color: \\" + this.color;
      args.splice(1, 0, c, \\"color: inherit\\");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === \\"%%\\") {
          return;
        }
        index++;
        if (match === \\"%c\\") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem(\\"debug\\", namespaces);
        } else {
          exports.storage.removeItem(\\"debug\\");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem(\\"debug\\");
      } catch (error) {
      }
      if (!r && typeof process !== \\"undefined\\" && \\"env\\" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return \\"[UnexpectedJSONParseError]: \\" + error.message;
      }
    };
  }
});

// node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  \\"node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js\\"(exports, module2) {
    \\"use strict\\";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith(\\"-\\") ? \\"\\" : flag.length === 1 ? \\"-\\" : \\"--\\";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf(\\"--\\");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  \\"node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js\\"(exports, module2) {
    \\"use strict\\";
    var os = require(\\"os\\");
    var tty = require(\\"tty\\");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag(\\"no-color\\") || hasFlag(\\"no-colors\\") || hasFlag(\\"color=false\\") || hasFlag(\\"color=never\\")) {
      forceColor = 0;
    } else if (hasFlag(\\"color\\") || hasFlag(\\"colors\\") || hasFlag(\\"color=true\\") || hasFlag(\\"color=always\\")) {
      forceColor = 1;
    }
    if (\\"FORCE_COLOR\\" in env) {
      if (env.FORCE_COLOR === \\"true\\") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === \\"false\\") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag(\\"color=16m\\") || hasFlag(\\"color=full\\") || hasFlag(\\"color=truecolor\\")) {
        return 3;
      }
      if (hasFlag(\\"color=256\\")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === \\"dumb\\") {
        return min;
      }
      if (process.platform === \\"win32\\") {
        const osRelease = os.release().split(\\".\\");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if (\\"CI\\" in env) {
        if ([\\"TRAVIS\\", \\"CIRCLECI\\", \\"APPVEYOR\\", \\"GITLAB_CI\\", \\"GITHUB_ACTIONS\\", \\"BUILDKITE\\"].some((sign) => sign in env) || env.CI_NAME === \\"codeship\\") {
          return 1;
        }
        return min;
      }
      if (\\"TEAMCITY_VERSION\\" in env) {
        return /^(9\\\\.(0*[1-9]\\\\d*)\\\\.|\\\\d{2,}\\\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === \\"truecolor\\") {
        return 3;
      }
      if (\\"TERM_PROGRAM\\" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || \\"\\").split(\\".\\")[0], 10);
        switch (env.TERM_PROGRAM) {
          case \\"iTerm.app\\":
            return version >= 3 ? 3 : 2;
          case \\"Apple_Terminal\\":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if (\\"COLORTERM\\" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/.pnpm/debug@4.3.3/node_modules/debug/src/node.js
var require_node = __commonJS({
  \\"node_modules/.pnpm/debug@4.3.3/node_modules/debug/src/node.js\\"(exports, module2) {
    var tty = require(\\"tty\\");
    var util = require(\\"util\\");
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(() => {
    }, \\"Instance method \`debug.destroy()\` is deprecated and no longer does anything. It will be removed in the next major version of \`debug\`.\\");
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === \\"null\\") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return \\"colors\\" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = \\"\\\\x1B[3\\" + (c < 8 ? c : \\"8;5;\\" + c);
        const prefix = \`  \${colorCode};1m\${name} \\\\x1B[0m\`;
        args[0] = prefix + args[0].split(\\"\\\\n\\").join(\\"\\\\n\\" + prefix);
        args.push(colorCode + \\"m+\\" + module2.exports.humanize(this.diff) + \\"\\\\x1B[0m\\");
      } else {
        args[0] = getDate() + name + \\" \\" + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return \\"\\";
      }
      return new Date().toISOString() + \\" \\";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + \\"\\\\n\\");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split(\\"\\\\n\\").map((str) => str.trim()).join(\\" \\");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/.pnpm/debug@4.3.3/node_modules/debug/src/index.js
var require_src = __commonJS({
  \\"node_modules/.pnpm/debug@4.3.3/node_modules/debug/src/index.js\\"(exports, module2) {
    if (typeof process === \\"undefined\\" || process.type === \\"renderer\\" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/scope/binding.js
var require_binding = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/scope/binding.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var Binding = class {
      constructor({
        identifier,
        scope,
        path,
        kind
      }) {
        this.identifier = void 0;
        this.scope = void 0;
        this.path = void 0;
        this.kind = void 0;
        this.constantViolations = [];
        this.constant = true;
        this.referencePaths = [];
        this.referenced = false;
        this.references = 0;
        this.identifier = identifier;
        this.scope = scope;
        this.path = path;
        this.kind = kind;
        this.clearValue();
      }
      deoptValue() {
        this.clearValue();
        this.hasDeoptedValue = true;
      }
      setValue(value) {
        if (this.hasDeoptedValue)
          return;
        this.hasValue = true;
        this.value = value;
      }
      clearValue() {
        this.hasDeoptedValue = false;
        this.hasValue = false;
        this.value = null;
      }
      reassign(path) {
        this.constant = false;
        if (this.constantViolations.indexOf(path) !== -1) {
          return;
        }
        this.constantViolations.push(path);
      }
      reference(path) {
        if (this.referencePaths.indexOf(path) !== -1) {
          return;
        }
        this.referenced = true;
        this.references++;
        this.referencePaths.push(path);
      }
      dereference() {
        this.references--;
        this.referenced = !!this.references;
      }
    };
    exports.default = Binding;
  }
});

// node_modules/.pnpm/@babel+helper-split-export-declaration@7.16.7/node_modules/@babel/helper-split-export-declaration/lib/index.js
var require_lib3 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-split-export-declaration@7.16.7/node_modules/@babel/helper-split-export-declaration/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = splitExportDeclaration;
    var _t = require_lib2();
    var {
      cloneNode,
      exportNamedDeclaration,
      exportSpecifier,
      identifier,
      variableDeclaration,
      variableDeclarator
    } = _t;
    function splitExportDeclaration(exportDeclaration) {
      if (!exportDeclaration.isExportDeclaration()) {
        throw new Error(\\"Only export declarations can be split.\\");
      }
      const isDefault = exportDeclaration.isExportDefaultDeclaration();
      const declaration = exportDeclaration.get(\\"declaration\\");
      const isClassDeclaration = declaration.isClassDeclaration();
      if (isDefault) {
        const standaloneDeclaration = declaration.isFunctionDeclaration() || isClassDeclaration;
        const scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;
        let id = declaration.node.id;
        let needBindingRegistration = false;
        if (!id) {
          needBindingRegistration = true;
          id = scope.generateUidIdentifier(\\"default\\");
          if (standaloneDeclaration || declaration.isFunctionExpression() || declaration.isClassExpression()) {
            declaration.node.id = cloneNode(id);
          }
        }
        const updatedDeclaration = standaloneDeclaration ? declaration : variableDeclaration(\\"var\\", [variableDeclarator(cloneNode(id), declaration.node)]);
        const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier(\\"default\\"))]);
        exportDeclaration.insertAfter(updatedExportDeclaration);
        exportDeclaration.replaceWith(updatedDeclaration);
        if (needBindingRegistration) {
          scope.registerDeclaration(exportDeclaration);
        }
        return exportDeclaration;
      }
      if (exportDeclaration.get(\\"specifiers\\").length > 0) {
        throw new Error(\\"It doesn't make sense to split exported specifiers.\\");
      }
      const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
      const specifiers = Object.keys(bindingIdentifiers).map((name) => {
        return exportSpecifier(identifier(name), identifier(name));
      });
      const aliasDeclar = exportNamedDeclaration(null, specifiers);
      exportDeclaration.insertAfter(aliasDeclar);
      exportDeclaration.replaceWith(declaration.node);
      return exportDeclaration;
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/scope/lib/renamer.js
var require_renamer = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/scope/lib/renamer.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _binding = require_binding();
    var _helperSplitExportDeclaration = require_lib3();
    var _t = require_lib2();
    var {
      VISITOR_KEYS,
      assignmentExpression,
      identifier,
      toExpression,
      variableDeclaration,
      variableDeclarator
    } = _t;
    var renameVisitor = {
      ReferencedIdentifier({
        node
      }, state) {
        if (node.name === state.oldName) {
          node.name = state.newName;
        }
      },
      Scope(path, state) {
        if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
          skipAllButComputedMethodKey(path);
        }
      },
      \\"AssignmentExpression|Declaration|VariableDeclarator\\"(path, state) {
        if (path.isVariableDeclaration())
          return;
        const ids = path.getOuterBindingIdentifiers();
        for (const name in ids) {
          if (name === state.oldName)
            ids[name].name = state.newName;
        }
      }
    };
    var Renamer = class {
      constructor(binding, oldName, newName) {
        this.newName = newName;
        this.oldName = oldName;
        this.binding = binding;
      }
      maybeConvertFromExportDeclaration(parentDeclar) {
        const maybeExportDeclar = parentDeclar.parentPath;
        if (!maybeExportDeclar.isExportDeclaration()) {
          return;
        }
        if (maybeExportDeclar.isExportDefaultDeclaration() && !maybeExportDeclar.get(\\"declaration\\").node.id) {
          return;
        }
        (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
      }
      maybeConvertFromClassFunctionDeclaration(path) {
        return;
        if (!path.isFunctionDeclaration() && !path.isClassDeclaration())
          return;
        if (this.binding.kind !== \\"hoisted\\")
          return;
        path.node.id = identifier(this.oldName);
        path.node._blockHoist = 3;
        path.replaceWith(variableDeclaration(\\"let\\", [variableDeclarator(identifier(this.newName), toExpression(path.node))]));
      }
      maybeConvertFromClassFunctionExpression(path) {
        return;
        if (!path.isFunctionExpression() && !path.isClassExpression())
          return;
        if (this.binding.kind !== \\"local\\")
          return;
        path.node.id = identifier(this.oldName);
        this.binding.scope.parent.push({
          id: identifier(this.newName)
        });
        path.replaceWith(assignmentExpression(\\"=\\", identifier(this.newName), path.node));
      }
      rename(block) {
        const {
          binding,
          oldName,
          newName
        } = this;
        const {
          scope,
          path
        } = binding;
        const parentDeclar = path.find((path2) => path2.isDeclaration() || path2.isFunctionExpression() || path2.isClassExpression());
        if (parentDeclar) {
          const bindingIds = parentDeclar.getOuterBindingIdentifiers();
          if (bindingIds[oldName] === binding.identifier) {
            this.maybeConvertFromExportDeclaration(parentDeclar);
          }
        }
        const blockToTraverse = block || scope.block;
        if ((blockToTraverse == null ? void 0 : blockToTraverse.type) === \\"SwitchStatement\\") {
          blockToTraverse.cases.forEach((c) => {
            scope.traverse(c, renameVisitor, this);
          });
        } else {
          scope.traverse(blockToTraverse, renameVisitor, this);
        }
        if (!block) {
          scope.removeOwnBinding(oldName);
          scope.bindings[newName] = binding;
          this.binding.identifier.name = newName;
        }
        if (parentDeclar) {
          this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
          this.maybeConvertFromClassFunctionExpression(parentDeclar);
        }
      }
    };
    exports.default = Renamer;
    function skipAllButComputedMethodKey(path) {
      if (!path.isMethod() || !path.node.computed) {
        path.skip();
        return;
      }
      const keys = VISITOR_KEYS[path.type];
      for (const key of keys) {
        if (key !== \\"key\\")
          path.skipKey(key);
      }
    }
  }
});

// node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json
var require_globals = __commonJS({
  \\"node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json\\"(exports, module2) {
    module2.exports = {
      builtin: {
        Array: false,
        ArrayBuffer: false,
        Atomics: false,
        BigInt: false,
        BigInt64Array: false,
        BigUint64Array: false,
        Boolean: false,
        constructor: false,
        DataView: false,
        Date: false,
        decodeURI: false,
        decodeURIComponent: false,
        encodeURI: false,
        encodeURIComponent: false,
        Error: false,
        escape: false,
        eval: false,
        EvalError: false,
        Float32Array: false,
        Float64Array: false,
        Function: false,
        globalThis: false,
        hasOwnProperty: false,
        Infinity: false,
        Int16Array: false,
        Int32Array: false,
        Int8Array: false,
        isFinite: false,
        isNaN: false,
        isPrototypeOf: false,
        JSON: false,
        Map: false,
        Math: false,
        NaN: false,
        Number: false,
        Object: false,
        parseFloat: false,
        parseInt: false,
        Promise: false,
        propertyIsEnumerable: false,
        Proxy: false,
        RangeError: false,
        ReferenceError: false,
        Reflect: false,
        RegExp: false,
        Set: false,
        SharedArrayBuffer: false,
        String: false,
        Symbol: false,
        SyntaxError: false,
        toLocaleString: false,
        toString: false,
        TypeError: false,
        Uint16Array: false,
        Uint32Array: false,
        Uint8Array: false,
        Uint8ClampedArray: false,
        undefined: false,
        unescape: false,
        URIError: false,
        valueOf: false,
        WeakMap: false,
        WeakSet: false
      },
      es5: {
        Array: false,
        Boolean: false,
        constructor: false,
        Date: false,
        decodeURI: false,
        decodeURIComponent: false,
        encodeURI: false,
        encodeURIComponent: false,
        Error: false,
        escape: false,
        eval: false,
        EvalError: false,
        Function: false,
        hasOwnProperty: false,
        Infinity: false,
        isFinite: false,
        isNaN: false,
        isPrototypeOf: false,
        JSON: false,
        Math: false,
        NaN: false,
        Number: false,
        Object: false,
        parseFloat: false,
        parseInt: false,
        propertyIsEnumerable: false,
        RangeError: false,
        ReferenceError: false,
        RegExp: false,
        String: false,
        SyntaxError: false,
        toLocaleString: false,
        toString: false,
        TypeError: false,
        undefined: false,
        unescape: false,
        URIError: false,
        valueOf: false
      },
      es2015: {
        Array: false,
        ArrayBuffer: false,
        Boolean: false,
        constructor: false,
        DataView: false,
        Date: false,
        decodeURI: false,
        decodeURIComponent: false,
        encodeURI: false,
        encodeURIComponent: false,
        Error: false,
        escape: false,
        eval: false,
        EvalError: false,
        Float32Array: false,
        Float64Array: false,
        Function: false,
        hasOwnProperty: false,
        Infinity: false,
        Int16Array: false,
        Int32Array: false,
        Int8Array: false,
        isFinite: false,
        isNaN: false,
        isPrototypeOf: false,
        JSON: false,
        Map: false,
        Math: false,
        NaN: false,
        Number: false,
        Object: false,
        parseFloat: false,
        parseInt: false,
        Promise: false,
        propertyIsEnumerable: false,
        Proxy: false,
        RangeError: false,
        ReferenceError: false,
        Reflect: false,
        RegExp: false,
        Set: false,
        String: false,
        Symbol: false,
        SyntaxError: false,
        toLocaleString: false,
        toString: false,
        TypeError: false,
        Uint16Array: false,
        Uint32Array: false,
        Uint8Array: false,
        Uint8ClampedArray: false,
        undefined: false,
        unescape: false,
        URIError: false,
        valueOf: false,
        WeakMap: false,
        WeakSet: false
      },
      es2017: {
        Array: false,
        ArrayBuffer: false,
        Atomics: false,
        Boolean: false,
        constructor: false,
        DataView: false,
        Date: false,
        decodeURI: false,
        decodeURIComponent: false,
        encodeURI: false,
        encodeURIComponent: false,
        Error: false,
        escape: false,
        eval: false,
        EvalError: false,
        Float32Array: false,
        Float64Array: false,
        Function: false,
        hasOwnProperty: false,
        Infinity: false,
        Int16Array: false,
        Int32Array: false,
        Int8Array: false,
        isFinite: false,
        isNaN: false,
        isPrototypeOf: false,
        JSON: false,
        Map: false,
        Math: false,
        NaN: false,
        Number: false,
        Object: false,
        parseFloat: false,
        parseInt: false,
        Promise: false,
        propertyIsEnumerable: false,
        Proxy: false,
        RangeError: false,
        ReferenceError: false,
        Reflect: false,
        RegExp: false,
        Set: false,
        SharedArrayBuffer: false,
        String: false,
        Symbol: false,
        SyntaxError: false,
        toLocaleString: false,
        toString: false,
        TypeError: false,
        Uint16Array: false,
        Uint32Array: false,
        Uint8Array: false,
        Uint8ClampedArray: false,
        undefined: false,
        unescape: false,
        URIError: false,
        valueOf: false,
        WeakMap: false,
        WeakSet: false
      },
      browser: {
        AbortController: false,
        AbortSignal: false,
        addEventListener: false,
        alert: false,
        AnalyserNode: false,
        Animation: false,
        AnimationEffectReadOnly: false,
        AnimationEffectTiming: false,
        AnimationEffectTimingReadOnly: false,
        AnimationEvent: false,
        AnimationPlaybackEvent: false,
        AnimationTimeline: false,
        applicationCache: false,
        ApplicationCache: false,
        ApplicationCacheErrorEvent: false,
        atob: false,
        Attr: false,
        Audio: false,
        AudioBuffer: false,
        AudioBufferSourceNode: false,
        AudioContext: false,
        AudioDestinationNode: false,
        AudioListener: false,
        AudioNode: false,
        AudioParam: false,
        AudioProcessingEvent: false,
        AudioScheduledSourceNode: false,
        \\"AudioWorkletGlobalScope \\": false,
        AudioWorkletNode: false,
        AudioWorkletProcessor: false,
        BarProp: false,
        BaseAudioContext: false,
        BatteryManager: false,
        BeforeUnloadEvent: false,
        BiquadFilterNode: false,
        Blob: false,
        BlobEvent: false,
        blur: false,
        BroadcastChannel: false,
        btoa: false,
        BudgetService: false,
        ByteLengthQueuingStrategy: false,
        Cache: false,
        caches: false,
        CacheStorage: false,
        cancelAnimationFrame: false,
        cancelIdleCallback: false,
        CanvasCaptureMediaStreamTrack: false,
        CanvasGradient: false,
        CanvasPattern: false,
        CanvasRenderingContext2D: false,
        ChannelMergerNode: false,
        ChannelSplitterNode: false,
        CharacterData: false,
        clearInterval: false,
        clearTimeout: false,
        clientInformation: false,
        ClipboardEvent: false,
        close: false,
        closed: false,
        CloseEvent: false,
        Comment: false,
        CompositionEvent: false,
        confirm: false,
        console: false,
        ConstantSourceNode: false,
        ConvolverNode: false,
        CountQueuingStrategy: false,
        createImageBitmap: false,
        Credential: false,
        CredentialsContainer: false,
        crypto: false,
        Crypto: false,
        CryptoKey: false,
        CSS: false,
        CSSConditionRule: false,
        CSSFontFaceRule: false,
        CSSGroupingRule: false,
        CSSImportRule: false,
        CSSKeyframeRule: false,
        CSSKeyframesRule: false,
        CSSMediaRule: false,
        CSSNamespaceRule: false,
        CSSPageRule: false,
        CSSRule: false,
        CSSRuleList: false,
        CSSStyleDeclaration: false,
        CSSStyleRule: false,
        CSSStyleSheet: false,
        CSSSupportsRule: false,
        CustomElementRegistry: false,
        customElements: false,
        CustomEvent: false,
        DataTransfer: false,
        DataTransferItem: false,
        DataTransferItemList: false,
        defaultstatus: false,
        defaultStatus: false,
        DelayNode: false,
        DeviceMotionEvent: false,
        DeviceOrientationEvent: false,
        devicePixelRatio: false,
        dispatchEvent: false,
        document: false,
        Document: false,
        DocumentFragment: false,
        DocumentType: false,
        DOMError: false,
        DOMException: false,
        DOMImplementation: false,
        DOMMatrix: false,
        DOMMatrixReadOnly: false,
        DOMParser: false,
        DOMPoint: false,
        DOMPointReadOnly: false,
        DOMQuad: false,
        DOMRect: false,
        DOMRectReadOnly: false,
        DOMStringList: false,
        DOMStringMap: false,
        DOMTokenList: false,
        DragEvent: false,
        DynamicsCompressorNode: false,
        Element: false,
        ErrorEvent: false,
        event: false,
        Event: false,
        EventSource: false,
        EventTarget: false,
        external: false,
        fetch: false,
        File: false,
        FileList: false,
        FileReader: false,
        find: false,
        focus: false,
        FocusEvent: false,
        FontFace: false,
        FontFaceSetLoadEvent: false,
        FormData: false,
        frameElement: false,
        frames: false,
        GainNode: false,
        Gamepad: false,
        GamepadButton: false,
        GamepadEvent: false,
        getComputedStyle: false,
        getSelection: false,
        HashChangeEvent: false,
        Headers: false,
        history: false,
        History: false,
        HTMLAllCollection: false,
        HTMLAnchorElement: false,
        HTMLAreaElement: false,
        HTMLAudioElement: false,
        HTMLBaseElement: false,
        HTMLBodyElement: false,
        HTMLBRElement: false,
        HTMLButtonElement: false,
        HTMLCanvasElement: false,
        HTMLCollection: false,
        HTMLContentElement: false,
        HTMLDataElement: false,
        HTMLDataListElement: false,
        HTMLDetailsElement: false,
        HTMLDialogElement: false,
        HTMLDirectoryElement: false,
        HTMLDivElement: false,
        HTMLDListElement: false,
        HTMLDocument: false,
        HTMLElement: false,
        HTMLEmbedElement: false,
        HTMLFieldSetElement: false,
        HTMLFontElement: false,
        HTMLFormControlsCollection: false,
        HTMLFormElement: false,
        HTMLFrameElement: false,
        HTMLFrameSetElement: false,
        HTMLHeadElement: false,
        HTMLHeadingElement: false,
        HTMLHRElement: false,
        HTMLHtmlElement: false,
        HTMLIFrameElement: false,
        HTMLImageElement: false,
        HTMLInputElement: false,
        HTMLLabelElement: false,
        HTMLLegendElement: false,
        HTMLLIElement: false,
        HTMLLinkElement: false,
        HTMLMapElement: false,
        HTMLMarqueeElement: false,
        HTMLMediaElement: false,
        HTMLMenuElement: false,
        HTMLMetaElement: false,
        HTMLMeterElement: false,
        HTMLModElement: false,
        HTMLObjectElement: false,
        HTMLOListElement: false,
        HTMLOptGroupElement: false,
        HTMLOptionElement: false,
        HTMLOptionsCollection: false,
        HTMLOutputElement: false,
        HTMLParagraphElement: false,
        HTMLParamElement: false,
        HTMLPictureElement: false,
        HTMLPreElement: false,
        HTMLProgressElement: false,
        HTMLQuoteElement: false,
        HTMLScriptElement: false,
        HTMLSelectElement: false,
        HTMLShadowElement: false,
        HTMLSlotElement: false,
        HTMLSourceElement: false,
        HTMLSpanElement: false,
        HTMLStyleElement: false,
        HTMLTableCaptionElement: false,
        HTMLTableCellElement: false,
        HTMLTableColElement: false,
        HTMLTableElement: false,
        HTMLTableRowElement: false,
        HTMLTableSectionElement: false,
        HTMLTemplateElement: false,
        HTMLTextAreaElement: false,
        HTMLTimeElement: false,
        HTMLTitleElement: false,
        HTMLTrackElement: false,
        HTMLUListElement: false,
        HTMLUnknownElement: false,
        HTMLVideoElement: false,
        IDBCursor: false,
        IDBCursorWithValue: false,
        IDBDatabase: false,
        IDBFactory: false,
        IDBIndex: false,
        IDBKeyRange: false,
        IDBObjectStore: false,
        IDBOpenDBRequest: false,
        IDBRequest: false,
        IDBTransaction: false,
        IDBVersionChangeEvent: false,
        IdleDeadline: false,
        IIRFilterNode: false,
        Image: false,
        ImageBitmap: false,
        ImageBitmapRenderingContext: false,
        ImageCapture: false,
        ImageData: false,
        indexedDB: false,
        innerHeight: false,
        innerWidth: false,
        InputEvent: false,
        IntersectionObserver: false,
        IntersectionObserverEntry: false,
        Intl: false,
        isSecureContext: false,
        KeyboardEvent: false,
        KeyframeEffect: false,
        KeyframeEffectReadOnly: false,
        length: false,
        localStorage: false,
        location: true,
        Location: false,
        locationbar: false,
        matchMedia: false,
        MediaDeviceInfo: false,
        MediaDevices: false,
        MediaElementAudioSourceNode: false,
        MediaEncryptedEvent: false,
        MediaError: false,
        MediaKeyMessageEvent: false,
        MediaKeySession: false,
        MediaKeyStatusMap: false,
        MediaKeySystemAccess: false,
        MediaList: false,
        MediaQueryList: false,
        MediaQueryListEvent: false,
        MediaRecorder: false,
        MediaSettingsRange: false,
        MediaSource: false,
        MediaStream: false,
        MediaStreamAudioDestinationNode: false,
        MediaStreamAudioSourceNode: false,
        MediaStreamEvent: false,
        MediaStreamTrack: false,
        MediaStreamTrackEvent: false,
        menubar: false,
        MessageChannel: false,
        MessageEvent: false,
        MessagePort: false,
        MIDIAccess: false,
        MIDIConnectionEvent: false,
        MIDIInput: false,
        MIDIInputMap: false,
        MIDIMessageEvent: false,
        MIDIOutput: false,
        MIDIOutputMap: false,
        MIDIPort: false,
        MimeType: false,
        MimeTypeArray: false,
        MouseEvent: false,
        moveBy: false,
        moveTo: false,
        MutationEvent: false,
        MutationObserver: false,
        MutationRecord: false,
        name: false,
        NamedNodeMap: false,
        NavigationPreloadManager: false,
        navigator: false,
        Navigator: false,
        NetworkInformation: false,
        Node: false,
        NodeFilter: false,
        NodeIterator: false,
        NodeList: false,
        Notification: false,
        OfflineAudioCompletionEvent: false,
        OfflineAudioContext: false,
        offscreenBuffering: false,
        OffscreenCanvas: true,
        onabort: true,
        onafterprint: true,
        onanimationend: true,
        onanimationiteration: true,
        onanimationstart: true,
        onappinstalled: true,
        onauxclick: true,
        onbeforeinstallprompt: true,
        onbeforeprint: true,
        onbeforeunload: true,
        onblur: true,
        oncancel: true,
        oncanplay: true,
        oncanplaythrough: true,
        onchange: true,
        onclick: true,
        onclose: true,
        oncontextmenu: true,
        oncuechange: true,
        ondblclick: true,
        ondevicemotion: true,
        ondeviceorientation: true,
        ondeviceorientationabsolute: true,
        ondrag: true,
        ondragend: true,
        ondragenter: true,
        ondragleave: true,
        ondragover: true,
        ondragstart: true,
        ondrop: true,
        ondurationchange: true,
        onemptied: true,
        onended: true,
        onerror: true,
        onfocus: true,
        ongotpointercapture: true,
        onhashchange: true,
        oninput: true,
        oninvalid: true,
        onkeydown: true,
        onkeypress: true,
        onkeyup: true,
        onlanguagechange: true,
        onload: true,
        onloadeddata: true,
        onloadedmetadata: true,
        onloadstart: true,
        onlostpointercapture: true,
        onmessage: true,
        onmessageerror: true,
        onmousedown: true,
        onmouseenter: true,
        onmouseleave: true,
        onmousemove: true,
        onmouseout: true,
        onmouseover: true,
        onmouseup: true,
        onmousewheel: true,
        onoffline: true,
        ononline: true,
        onpagehide: true,
        onpageshow: true,
        onpause: true,
        onplay: true,
        onplaying: true,
        onpointercancel: true,
        onpointerdown: true,
        onpointerenter: true,
        onpointerleave: true,
        onpointermove: true,
        onpointerout: true,
        onpointerover: true,
        onpointerup: true,
        onpopstate: true,
        onprogress: true,
        onratechange: true,
        onrejectionhandled: true,
        onreset: true,
        onresize: true,
        onscroll: true,
        onsearch: true,
        onseeked: true,
        onseeking: true,
        onselect: true,
        onstalled: true,
        onstorage: true,
        onsubmit: true,
        onsuspend: true,
        ontimeupdate: true,
        ontoggle: true,
        ontransitionend: true,
        onunhandledrejection: true,
        onunload: true,
        onvolumechange: true,
        onwaiting: true,
        onwheel: true,
        open: false,
        openDatabase: false,
        opener: false,
        Option: false,
        origin: false,
        OscillatorNode: false,
        outerHeight: false,
        outerWidth: false,
        PageTransitionEvent: false,
        pageXOffset: false,
        pageYOffset: false,
        PannerNode: false,
        parent: false,
        Path2D: false,
        PaymentAddress: false,
        PaymentRequest: false,
        PaymentRequestUpdateEvent: false,
        PaymentResponse: false,
        performance: false,
        Performance: false,
        PerformanceEntry: false,
        PerformanceLongTaskTiming: false,
        PerformanceMark: false,
        PerformanceMeasure: false,
        PerformanceNavigation: false,
        PerformanceNavigationTiming: false,
        PerformanceObserver: false,
        PerformanceObserverEntryList: false,
        PerformancePaintTiming: false,
        PerformanceResourceTiming: false,
        PerformanceTiming: false,
        PeriodicWave: false,
        Permissions: false,
        PermissionStatus: false,
        personalbar: false,
        PhotoCapabilities: false,
        Plugin: false,
        PluginArray: false,
        PointerEvent: false,
        PopStateEvent: false,
        postMessage: false,
        Presentation: false,
        PresentationAvailability: false,
        PresentationConnection: false,
        PresentationConnectionAvailableEvent: false,
        PresentationConnectionCloseEvent: false,
        PresentationConnectionList: false,
        PresentationReceiver: false,
        PresentationRequest: false,
        print: false,
        ProcessingInstruction: false,
        ProgressEvent: false,
        PromiseRejectionEvent: false,
        prompt: false,
        PushManager: false,
        PushSubscription: false,
        PushSubscriptionOptions: false,
        queueMicrotask: false,
        RadioNodeList: false,
        Range: false,
        ReadableStream: false,
        registerProcessor: false,
        RemotePlayback: false,
        removeEventListener: false,
        Request: false,
        requestAnimationFrame: false,
        requestIdleCallback: false,
        resizeBy: false,
        ResizeObserver: false,
        ResizeObserverEntry: false,
        resizeTo: false,
        Response: false,
        RTCCertificate: false,
        RTCDataChannel: false,
        RTCDataChannelEvent: false,
        RTCDtlsTransport: false,
        RTCIceCandidate: false,
        RTCIceGatherer: false,
        RTCIceTransport: false,
        RTCPeerConnection: false,
        RTCPeerConnectionIceEvent: false,
        RTCRtpContributingSource: false,
        RTCRtpReceiver: false,
        RTCRtpSender: false,
        RTCSctpTransport: false,
        RTCSessionDescription: false,
        RTCStatsReport: false,
        RTCTrackEvent: false,
        screen: false,
        Screen: false,
        screenLeft: false,
        ScreenOrientation: false,
        screenTop: false,
        screenX: false,
        screenY: false,
        ScriptProcessorNode: false,
        scroll: false,
        scrollbars: false,
        scrollBy: false,
        scrollTo: false,
        scrollX: false,
        scrollY: false,
        SecurityPolicyViolationEvent: false,
        Selection: false,
        self: false,
        ServiceWorker: false,
        ServiceWorkerContainer: false,
        ServiceWorkerRegistration: false,
        sessionStorage: false,
        setInterval: false,
        setTimeout: false,
        ShadowRoot: false,
        SharedWorker: false,
        SourceBuffer: false,
        SourceBufferList: false,
        speechSynthesis: false,
        SpeechSynthesisEvent: false,
        SpeechSynthesisUtterance: false,
        StaticRange: false,
        status: false,
        statusbar: false,
        StereoPannerNode: false,
        stop: false,
        Storage: false,
        StorageEvent: false,
        StorageManager: false,
        styleMedia: false,
        StyleSheet: false,
        StyleSheetList: false,
        SubtleCrypto: false,
        SVGAElement: false,
        SVGAngle: false,
        SVGAnimatedAngle: false,
        SVGAnimatedBoolean: false,
        SVGAnimatedEnumeration: false,
        SVGAnimatedInteger: false,
        SVGAnimatedLength: false,
        SVGAnimatedLengthList: false,
        SVGAnimatedNumber: false,
        SVGAnimatedNumberList: false,
        SVGAnimatedPreserveAspectRatio: false,
        SVGAnimatedRect: false,
        SVGAnimatedString: false,
        SVGAnimatedTransformList: false,
        SVGAnimateElement: false,
        SVGAnimateMotionElement: false,
        SVGAnimateTransformElement: false,
        SVGAnimationElement: false,
        SVGCircleElement: false,
        SVGClipPathElement: false,
        SVGComponentTransferFunctionElement: false,
        SVGDefsElement: false,
        SVGDescElement: false,
        SVGDiscardElement: false,
        SVGElement: false,
        SVGEllipseElement: false,
        SVGFEBlendElement: false,
        SVGFEColorMatrixElement: false,
        SVGFEComponentTransferElement: false,
        SVGFECompositeElement: false,
        SVGFEConvolveMatrixElement: false,
        SVGFEDiffuseLightingElement: false,
        SVGFEDisplacementMapElement: false,
        SVGFEDistantLightElement: false,
        SVGFEDropShadowElement: false,
        SVGFEFloodElement: false,
        SVGFEFuncAElement: false,
        SVGFEFuncBElement: false,
        SVGFEFuncGElement: false,
        SVGFEFuncRElement: false,
        SVGFEGaussianBlurElement: false,
        SVGFEImageElement: false,
        SVGFEMergeElement: false,
        SVGFEMergeNodeElement: false,
        SVGFEMorphologyElement: false,
        SVGFEOffsetElement: false,
        SVGFEPointLightElement: false,
        SVGFESpecularLightingElement: false,
        SVGFESpotLightElement: false,
        SVGFETileElement: false,
        SVGFETurbulenceElement: false,
        SVGFilterElement: false,
        SVGForeignObjectElement: false,
        SVGGElement: false,
        SVGGeometryElement: false,
        SVGGradientElement: false,
        SVGGraphicsElement: false,
        SVGImageElement: false,
        SVGLength: false,
        SVGLengthList: false,
        SVGLinearGradientElement: false,
        SVGLineElement: false,
        SVGMarkerElement: false,
        SVGMaskElement: false,
        SVGMatrix: false,
        SVGMetadataElement: false,
        SVGMPathElement: false,
        SVGNumber: false,
        SVGNumberList: false,
        SVGPathElement: false,
        SVGPatternElement: false,
        SVGPoint: false,
        SVGPointList: false,
        SVGPolygonElement: false,
        SVGPolylineElement: false,
        SVGPreserveAspectRatio: false,
        SVGRadialGradientElement: false,
        SVGRect: false,
        SVGRectElement: false,
        SVGScriptElement: false,
        SVGSetElement: false,
        SVGStopElement: false,
        SVGStringList: false,
        SVGStyleElement: false,
        SVGSVGElement: false,
        SVGSwitchElement: false,
        SVGSymbolElement: false,
        SVGTextContentElement: false,
        SVGTextElement: false,
        SVGTextPathElement: false,
        SVGTextPositioningElement: false,
        SVGTitleElement: false,
        SVGTransform: false,
        SVGTransformList: false,
        SVGTSpanElement: false,
        SVGUnitTypes: false,
        SVGUseElement: false,
        SVGViewElement: false,
        TaskAttributionTiming: false,
        Text: false,
        TextDecoder: false,
        TextEncoder: false,
        TextEvent: false,
        TextMetrics: false,
        TextTrack: false,
        TextTrackCue: false,
        TextTrackCueList: false,
        TextTrackList: false,
        TimeRanges: false,
        toolbar: false,
        top: false,
        Touch: false,
        TouchEvent: false,
        TouchList: false,
        TrackEvent: false,
        TransitionEvent: false,
        TreeWalker: false,
        UIEvent: false,
        URL: false,
        URLSearchParams: false,
        ValidityState: false,
        visualViewport: false,
        VisualViewport: false,
        VTTCue: false,
        WaveShaperNode: false,
        WebAssembly: false,
        WebGL2RenderingContext: false,
        WebGLActiveInfo: false,
        WebGLBuffer: false,
        WebGLContextEvent: false,
        WebGLFramebuffer: false,
        WebGLProgram: false,
        WebGLQuery: false,
        WebGLRenderbuffer: false,
        WebGLRenderingContext: false,
        WebGLSampler: false,
        WebGLShader: false,
        WebGLShaderPrecisionFormat: false,
        WebGLSync: false,
        WebGLTexture: false,
        WebGLTransformFeedback: false,
        WebGLUniformLocation: false,
        WebGLVertexArrayObject: false,
        WebSocket: false,
        WheelEvent: false,
        window: false,
        Window: false,
        Worker: false,
        WritableStream: false,
        XMLDocument: false,
        XMLHttpRequest: false,
        XMLHttpRequestEventTarget: false,
        XMLHttpRequestUpload: false,
        XMLSerializer: false,
        XPathEvaluator: false,
        XPathExpression: false,
        XPathResult: false,
        XSLTProcessor: false
      },
      worker: {
        addEventListener: false,
        applicationCache: false,
        atob: false,
        Blob: false,
        BroadcastChannel: false,
        btoa: false,
        Cache: false,
        caches: false,
        clearInterval: false,
        clearTimeout: false,
        close: true,
        console: false,
        fetch: false,
        FileReaderSync: false,
        FormData: false,
        Headers: false,
        IDBCursor: false,
        IDBCursorWithValue: false,
        IDBDatabase: false,
        IDBFactory: false,
        IDBIndex: false,
        IDBKeyRange: false,
        IDBObjectStore: false,
        IDBOpenDBRequest: false,
        IDBRequest: false,
        IDBTransaction: false,
        IDBVersionChangeEvent: false,
        ImageData: false,
        importScripts: true,
        indexedDB: false,
        location: false,
        MessageChannel: false,
        MessagePort: false,
        name: false,
        navigator: false,
        Notification: false,
        onclose: true,
        onconnect: true,
        onerror: true,
        onlanguagechange: true,
        onmessage: true,
        onoffline: true,
        ononline: true,
        onrejectionhandled: true,
        onunhandledrejection: true,
        performance: false,
        Performance: false,
        PerformanceEntry: false,
        PerformanceMark: false,
        PerformanceMeasure: false,
        PerformanceNavigation: false,
        PerformanceResourceTiming: false,
        PerformanceTiming: false,
        postMessage: true,
        Promise: false,
        queueMicrotask: false,
        removeEventListener: false,
        Request: false,
        Response: false,
        self: true,
        ServiceWorkerRegistration: false,
        setInterval: false,
        setTimeout: false,
        TextDecoder: false,
        TextEncoder: false,
        URL: false,
        URLSearchParams: false,
        WebSocket: false,
        Worker: false,
        WorkerGlobalScope: false,
        XMLHttpRequest: false
      },
      node: {
        __dirname: false,
        __filename: false,
        Buffer: false,
        clearImmediate: false,
        clearInterval: false,
        clearTimeout: false,
        console: false,
        exports: true,
        global: false,
        Intl: false,
        module: false,
        process: false,
        queueMicrotask: false,
        require: false,
        setImmediate: false,
        setInterval: false,
        setTimeout: false,
        TextDecoder: false,
        TextEncoder: false,
        URL: false,
        URLSearchParams: false
      },
      commonjs: {
        exports: true,
        global: false,
        module: false,
        require: false
      },
      amd: {
        define: false,
        require: false
      },
      mocha: {
        after: false,
        afterEach: false,
        before: false,
        beforeEach: false,
        context: false,
        describe: false,
        it: false,
        mocha: false,
        run: false,
        setup: false,
        specify: false,
        suite: false,
        suiteSetup: false,
        suiteTeardown: false,
        teardown: false,
        test: false,
        xcontext: false,
        xdescribe: false,
        xit: false,
        xspecify: false
      },
      jasmine: {
        afterAll: false,
        afterEach: false,
        beforeAll: false,
        beforeEach: false,
        describe: false,
        expect: false,
        fail: false,
        fdescribe: false,
        fit: false,
        it: false,
        jasmine: false,
        pending: false,
        runs: false,
        spyOn: false,
        spyOnProperty: false,
        waits: false,
        waitsFor: false,
        xdescribe: false,
        xit: false
      },
      jest: {
        afterAll: false,
        afterEach: false,
        beforeAll: false,
        beforeEach: false,
        describe: false,
        expect: false,
        fdescribe: false,
        fit: false,
        it: false,
        jest: false,
        pit: false,
        require: false,
        test: false,
        xdescribe: false,
        xit: false,
        xtest: false
      },
      qunit: {
        asyncTest: false,
        deepEqual: false,
        equal: false,
        expect: false,
        module: false,
        notDeepEqual: false,
        notEqual: false,
        notOk: false,
        notPropEqual: false,
        notStrictEqual: false,
        ok: false,
        propEqual: false,
        QUnit: false,
        raises: false,
        start: false,
        stop: false,
        strictEqual: false,
        test: false,
        throws: false
      },
      phantomjs: {
        console: true,
        exports: true,
        phantom: true,
        require: true,
        WebPage: true
      },
      couch: {
        emit: false,
        exports: false,
        getRow: false,
        log: false,
        module: false,
        provides: false,
        require: false,
        respond: false,
        send: false,
        start: false,
        sum: false
      },
      rhino: {
        defineClass: false,
        deserialize: false,
        gc: false,
        help: false,
        importClass: false,
        importPackage: false,
        java: false,
        load: false,
        loadClass: false,
        Packages: false,
        print: false,
        quit: false,
        readFile: false,
        readUrl: false,
        runCommand: false,
        seal: false,
        serialize: false,
        spawn: false,
        sync: false,
        toint32: false,
        version: false
      },
      nashorn: {
        __DIR__: false,
        __FILE__: false,
        __LINE__: false,
        com: false,
        edu: false,
        exit: false,
        java: false,
        Java: false,
        javafx: false,
        JavaImporter: false,
        javax: false,
        JSAdapter: false,
        load: false,
        loadWithNewGlobal: false,
        org: false,
        Packages: false,
        print: false,
        quit: false
      },
      wsh: {
        ActiveXObject: true,
        Enumerator: true,
        GetObject: true,
        ScriptEngine: true,
        ScriptEngineBuildVersion: true,
        ScriptEngineMajorVersion: true,
        ScriptEngineMinorVersion: true,
        VBArray: true,
        WScript: true,
        WSH: true,
        XDomainRequest: true
      },
      jquery: {
        $: false,
        jQuery: false
      },
      yui: {
        YAHOO: false,
        YAHOO_config: false,
        YUI: false,
        YUI_config: false
      },
      shelljs: {
        cat: false,
        cd: false,
        chmod: false,
        config: false,
        cp: false,
        dirs: false,
        echo: false,
        env: false,
        error: false,
        exec: false,
        exit: false,
        find: false,
        grep: false,
        ln: false,
        ls: false,
        mkdir: false,
        mv: false,
        popd: false,
        pushd: false,
        pwd: false,
        rm: false,
        sed: false,
        set: false,
        target: false,
        tempdir: false,
        test: false,
        touch: false,
        which: false
      },
      prototypejs: {
        $: false,
        $$: false,
        $A: false,
        $break: false,
        $continue: false,
        $F: false,
        $H: false,
        $R: false,
        $w: false,
        Abstract: false,
        Ajax: false,
        Autocompleter: false,
        Builder: false,
        Class: false,
        Control: false,
        Draggable: false,
        Draggables: false,
        Droppables: false,
        Effect: false,
        Element: false,
        Enumerable: false,
        Event: false,
        Field: false,
        Form: false,
        Hash: false,
        Insertion: false,
        ObjectRange: false,
        PeriodicalExecuter: false,
        Position: false,
        Prototype: false,
        Scriptaculous: false,
        Selector: false,
        Sortable: false,
        SortableObserver: false,
        Sound: false,
        Template: false,
        Toggle: false,
        Try: false
      },
      meteor: {
        _: false,
        $: false,
        Accounts: false,
        AccountsClient: false,
        AccountsCommon: false,
        AccountsServer: false,
        App: false,
        Assets: false,
        Blaze: false,
        check: false,
        Cordova: false,
        DDP: false,
        DDPRateLimiter: false,
        DDPServer: false,
        Deps: false,
        EJSON: false,
        Email: false,
        HTTP: false,
        Log: false,
        Match: false,
        Meteor: false,
        Mongo: false,
        MongoInternals: false,
        Npm: false,
        Package: false,
        Plugin: false,
        process: false,
        Random: false,
        ReactiveDict: false,
        ReactiveVar: false,
        Router: false,
        ServiceConfiguration: false,
        Session: false,
        share: false,
        Spacebars: false,
        Template: false,
        Tinytest: false,
        Tracker: false,
        UI: false,
        Utils: false,
        WebApp: false,
        WebAppInternals: false
      },
      mongo: {
        _isWindows: false,
        _rand: false,
        BulkWriteResult: false,
        cat: false,
        cd: false,
        connect: false,
        db: false,
        getHostName: false,
        getMemInfo: false,
        hostname: false,
        ISODate: false,
        listFiles: false,
        load: false,
        ls: false,
        md5sumFile: false,
        mkdir: false,
        Mongo: false,
        NumberInt: false,
        NumberLong: false,
        ObjectId: false,
        PlanCache: false,
        print: false,
        printjson: false,
        pwd: false,
        quit: false,
        removeFile: false,
        rs: false,
        sh: false,
        UUID: false,
        version: false,
        WriteResult: false
      },
      applescript: {
        $: false,
        Application: false,
        Automation: false,
        console: false,
        delay: false,
        Library: false,
        ObjC: false,
        ObjectSpecifier: false,
        Path: false,
        Progress: false,
        Ref: false
      },
      serviceworker: {
        addEventListener: false,
        applicationCache: false,
        atob: false,
        Blob: false,
        BroadcastChannel: false,
        btoa: false,
        Cache: false,
        caches: false,
        CacheStorage: false,
        clearInterval: false,
        clearTimeout: false,
        Client: false,
        clients: false,
        Clients: false,
        close: true,
        console: false,
        ExtendableEvent: false,
        ExtendableMessageEvent: false,
        fetch: false,
        FetchEvent: false,
        FileReaderSync: false,
        FormData: false,
        Headers: false,
        IDBCursor: false,
        IDBCursorWithValue: false,
        IDBDatabase: false,
        IDBFactory: false,
        IDBIndex: false,
        IDBKeyRange: false,
        IDBObjectStore: false,
        IDBOpenDBRequest: false,
        IDBRequest: false,
        IDBTransaction: false,
        IDBVersionChangeEvent: false,
        ImageData: false,
        importScripts: false,
        indexedDB: false,
        location: false,
        MessageChannel: false,
        MessagePort: false,
        name: false,
        navigator: false,
        Notification: false,
        onclose: true,
        onconnect: true,
        onerror: true,
        onfetch: true,
        oninstall: true,
        onlanguagechange: true,
        onmessage: true,
        onmessageerror: true,
        onnotificationclick: true,
        onnotificationclose: true,
        onoffline: true,
        ononline: true,
        onpush: true,
        onpushsubscriptionchange: true,
        onrejectionhandled: true,
        onsync: true,
        onunhandledrejection: true,
        performance: false,
        Performance: false,
        PerformanceEntry: false,
        PerformanceMark: false,
        PerformanceMeasure: false,
        PerformanceNavigation: false,
        PerformanceResourceTiming: false,
        PerformanceTiming: false,
        postMessage: true,
        Promise: false,
        queueMicrotask: false,
        registration: false,
        removeEventListener: false,
        Request: false,
        Response: false,
        self: false,
        ServiceWorker: false,
        ServiceWorkerContainer: false,
        ServiceWorkerGlobalScope: false,
        ServiceWorkerMessageEvent: false,
        ServiceWorkerRegistration: false,
        setInterval: false,
        setTimeout: false,
        skipWaiting: false,
        TextDecoder: false,
        TextEncoder: false,
        URL: false,
        URLSearchParams: false,
        WebSocket: false,
        WindowClient: false,
        Worker: false,
        WorkerGlobalScope: false,
        XMLHttpRequest: false
      },
      atomtest: {
        advanceClock: false,
        fakeClearInterval: false,
        fakeClearTimeout: false,
        fakeSetInterval: false,
        fakeSetTimeout: false,
        resetTimeouts: false,
        waitsForPromise: false
      },
      embertest: {
        andThen: false,
        click: false,
        currentPath: false,
        currentRouteName: false,
        currentURL: false,
        fillIn: false,
        find: false,
        findAll: false,
        findWithAssert: false,
        keyEvent: false,
        pauseTest: false,
        resumeTest: false,
        triggerEvent: false,
        visit: false,
        wait: false
      },
      protractor: {
        $: false,
        $$: false,
        browser: false,
        by: false,
        By: false,
        DartObject: false,
        element: false,
        protractor: false
      },
      \\"shared-node-browser\\": {
        clearInterval: false,
        clearTimeout: false,
        console: false,
        setInterval: false,
        setTimeout: false,
        URL: false,
        URLSearchParams: false
      },
      webextensions: {
        browser: false,
        chrome: false,
        opr: false
      },
      greasemonkey: {
        cloneInto: false,
        createObjectIn: false,
        exportFunction: false,
        GM: false,
        GM_addStyle: false,
        GM_deleteValue: false,
        GM_getResourceText: false,
        GM_getResourceURL: false,
        GM_getValue: false,
        GM_info: false,
        GM_listValues: false,
        GM_log: false,
        GM_openInTab: false,
        GM_registerMenuCommand: false,
        GM_setClipboard: false,
        GM_setValue: false,
        GM_xmlhttpRequest: false,
        unsafeWindow: false
      },
      devtools: {
        $: false,
        $_: false,
        $$: false,
        $0: false,
        $1: false,
        $2: false,
        $3: false,
        $4: false,
        $x: false,
        chrome: false,
        clear: false,
        copy: false,
        debug: false,
        dir: false,
        dirxml: false,
        getEventListeners: false,
        inspect: false,
        keys: false,
        monitor: false,
        monitorEvents: false,
        profile: false,
        profileEnd: false,
        queryObjects: false,
        table: false,
        undebug: false,
        unmonitor: false,
        unmonitorEvents: false,
        values: false
      }
    };
  }
});

// node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js
var require_globals2 = __commonJS({
  \\"node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js\\"(exports, module2) {
    \\"use strict\\";
    module2.exports = require_globals();
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/scope/index.js
var require_scope = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/scope/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _renamer = require_renamer();
    var _index = require_lib13();
    var _binding = require_binding();
    var _globals = require_globals2();
    var _t = require_lib2();
    var _cache = require_cache();
    var {
      NOT_LOCAL_BINDING,
      callExpression,
      cloneNode,
      getBindingIdentifiers,
      identifier,
      isArrayExpression,
      isBinary,
      isClass,
      isClassBody,
      isClassDeclaration,
      isExportAllDeclaration,
      isExportDefaultDeclaration,
      isExportNamedDeclaration,
      isFunctionDeclaration,
      isIdentifier,
      isImportDeclaration,
      isLiteral,
      isMethod,
      isModuleDeclaration,
      isModuleSpecifier,
      isObjectExpression,
      isProperty,
      isPureish,
      isSuper,
      isTaggedTemplateExpression,
      isTemplateLiteral,
      isThisExpression,
      isUnaryExpression,
      isVariableDeclaration,
      matchesPattern,
      memberExpression,
      numericLiteral,
      toIdentifier,
      unaryExpression,
      variableDeclaration,
      variableDeclarator
    } = _t;
    function gatherNodeParts(node, parts) {
      switch (node == null ? void 0 : node.type) {
        default:
          if (isModuleDeclaration(node)) {
            if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) {
              gatherNodeParts(node.source, parts);
            } else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.specifiers && node.specifiers.length) {
              for (const e of node.specifiers)
                gatherNodeParts(e, parts);
            } else if ((isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration) {
              gatherNodeParts(node.declaration, parts);
            }
          } else if (isModuleSpecifier(node)) {
            gatherNodeParts(node.local, parts);
          } else if (isLiteral(node)) {
            parts.push(node.value);
          }
          break;
        case \\"MemberExpression\\":
        case \\"OptionalMemberExpression\\":
        case \\"JSXMemberExpression\\":
          gatherNodeParts(node.object, parts);
          gatherNodeParts(node.property, parts);
          break;
        case \\"Identifier\\":
        case \\"JSXIdentifier\\":
          parts.push(node.name);
          break;
        case \\"CallExpression\\":
        case \\"OptionalCallExpression\\":
        case \\"NewExpression\\":
          gatherNodeParts(node.callee, parts);
          break;
        case \\"ObjectExpression\\":
        case \\"ObjectPattern\\":
          for (const e of node.properties) {
            gatherNodeParts(e, parts);
          }
          break;
        case \\"SpreadElement\\":
        case \\"RestElement\\":
          gatherNodeParts(node.argument, parts);
          break;
        case \\"ObjectProperty\\":
        case \\"ObjectMethod\\":
        case \\"ClassProperty\\":
        case \\"ClassMethod\\":
        case \\"ClassPrivateProperty\\":
        case \\"ClassPrivateMethod\\":
          gatherNodeParts(node.key, parts);
          break;
        case \\"ThisExpression\\":
          parts.push(\\"this\\");
          break;
        case \\"Super\\":
          parts.push(\\"super\\");
          break;
        case \\"Import\\":
          parts.push(\\"import\\");
          break;
        case \\"DoExpression\\":
          parts.push(\\"do\\");
          break;
        case \\"YieldExpression\\":
          parts.push(\\"yield\\");
          gatherNodeParts(node.argument, parts);
          break;
        case \\"AwaitExpression\\":
          parts.push(\\"await\\");
          gatherNodeParts(node.argument, parts);
          break;
        case \\"AssignmentExpression\\":
          gatherNodeParts(node.left, parts);
          break;
        case \\"VariableDeclarator\\":
          gatherNodeParts(node.id, parts);
          break;
        case \\"FunctionExpression\\":
        case \\"FunctionDeclaration\\":
        case \\"ClassExpression\\":
        case \\"ClassDeclaration\\":
          gatherNodeParts(node.id, parts);
          break;
        case \\"PrivateName\\":
          gatherNodeParts(node.id, parts);
          break;
        case \\"ParenthesizedExpression\\":
          gatherNodeParts(node.expression, parts);
          break;
        case \\"UnaryExpression\\":
        case \\"UpdateExpression\\":
          gatherNodeParts(node.argument, parts);
          break;
        case \\"MetaProperty\\":
          gatherNodeParts(node.meta, parts);
          gatherNodeParts(node.property, parts);
          break;
        case \\"JSXElement\\":
          gatherNodeParts(node.openingElement, parts);
          break;
        case \\"JSXOpeningElement\\":
          parts.push(node.name);
          break;
        case \\"JSXFragment\\":
          gatherNodeParts(node.openingFragment, parts);
          break;
        case \\"JSXOpeningFragment\\":
          parts.push(\\"Fragment\\");
          break;
        case \\"JSXNamespacedName\\":
          gatherNodeParts(node.namespace, parts);
          gatherNodeParts(node.name, parts);
          break;
      }
    }
    var collectorVisitor = {
      ForStatement(path) {
        const declar = path.get(\\"init\\");
        if (declar.isVar()) {
          const {
            scope
          } = path;
          const parentScope = scope.getFunctionParent() || scope.getProgramParent();
          parentScope.registerBinding(\\"var\\", declar);
        }
      },
      Declaration(path) {
        if (path.isBlockScoped())
          return;
        if (path.isImportDeclaration())
          return;
        if (path.isExportDeclaration())
          return;
        const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();
        parent.registerDeclaration(path);
      },
      ImportDeclaration(path) {
        const parent = path.scope.getBlockParent();
        parent.registerDeclaration(path);
      },
      ReferencedIdentifier(path, state) {
        state.references.push(path);
      },
      ForXStatement(path, state) {
        const left = path.get(\\"left\\");
        if (left.isPattern() || left.isIdentifier()) {
          state.constantViolations.push(path);
        } else if (left.isVar()) {
          const {
            scope
          } = path;
          const parentScope = scope.getFunctionParent() || scope.getProgramParent();
          parentScope.registerBinding(\\"var\\", left);
        }
      },
      ExportDeclaration: {
        exit(path) {
          const {
            node,
            scope
          } = path;
          if (isExportAllDeclaration(node))
            return;
          const declar = node.declaration;
          if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
            const id = declar.id;
            if (!id)
              return;
            const binding = scope.getBinding(id.name);
            binding == null ? void 0 : binding.reference(path);
          } else if (isVariableDeclaration(declar)) {
            for (const decl of declar.declarations) {
              for (const name of Object.keys(getBindingIdentifiers(decl))) {
                const binding = scope.getBinding(name);
                binding == null ? void 0 : binding.reference(path);
              }
            }
          }
        }
      },
      LabeledStatement(path) {
        path.scope.getBlockParent().registerDeclaration(path);
      },
      AssignmentExpression(path, state) {
        state.assignments.push(path);
      },
      UpdateExpression(path, state) {
        state.constantViolations.push(path);
      },
      UnaryExpression(path, state) {
        if (path.node.operator === \\"delete\\") {
          state.constantViolations.push(path);
        }
      },
      BlockScoped(path) {
        let scope = path.scope;
        if (scope.path === path)
          scope = scope.parent;
        const parent = scope.getBlockParent();
        parent.registerDeclaration(path);
        if (path.isClassDeclaration() && path.node.id) {
          const id = path.node.id;
          const name = id.name;
          path.scope.bindings[name] = path.scope.parent.getBinding(name);
        }
      },
      CatchClause(path) {
        path.scope.registerBinding(\\"let\\", path);
      },
      Function(path) {
        const params = path.get(\\"params\\");
        for (const param of params) {
          path.scope.registerBinding(\\"param\\", param);
        }
        if (path.isFunctionExpression() && path.has(\\"id\\") && !path.get(\\"id\\").node[NOT_LOCAL_BINDING]) {
          path.scope.registerBinding(\\"local\\", path.get(\\"id\\"), path);
        }
      },
      ClassExpression(path) {
        if (path.has(\\"id\\") && !path.get(\\"id\\").node[NOT_LOCAL_BINDING]) {
          path.scope.registerBinding(\\"local\\", path);
        }
      }
    };
    var uid = 0;
    var Scope = class {
      constructor(path) {
        this.uid = void 0;
        this.path = void 0;
        this.block = void 0;
        this.labels = void 0;
        this.inited = void 0;
        this.bindings = void 0;
        this.references = void 0;
        this.globals = void 0;
        this.uids = void 0;
        this.data = void 0;
        this.crawling = void 0;
        const {
          node
        } = path;
        const cached = _cache.scope.get(node);
        if ((cached == null ? void 0 : cached.path) === path) {
          return cached;
        }
        _cache.scope.set(node, this);
        this.uid = uid++;
        this.block = node;
        this.path = path;
        this.labels = /* @__PURE__ */ new Map();
        this.inited = false;
      }
      get parent() {
        var _parent;
        let parent, path = this.path;
        do {
          const isKey = path.key === \\"key\\";
          path = path.parentPath;
          if (isKey && path.isMethod())
            path = path.parentPath;
          if (path && path.isScope())
            parent = path;
        } while (path && !parent);
        return (_parent = parent) == null ? void 0 : _parent.scope;
      }
      get parentBlock() {
        return this.path.parent;
      }
      get hub() {
        return this.path.hub;
      }
      traverse(node, opts, state) {
        (0, _index.default)(node, opts, this, state, this.path);
      }
      generateDeclaredUidIdentifier(name) {
        const id = this.generateUidIdentifier(name);
        this.push({
          id
        });
        return cloneNode(id);
      }
      generateUidIdentifier(name) {
        return identifier(this.generateUid(name));
      }
      generateUid(name = \\"temp\\") {
        name = toIdentifier(name).replace(/^_+/, \\"\\").replace(/[0-9]+$/g, \\"\\");
        let uid2;
        let i = 1;
        do {
          uid2 = this._generateUid(name, i);
          i++;
        } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
        const program = this.getProgramParent();
        program.references[uid2] = true;
        program.uids[uid2] = true;
        return uid2;
      }
      _generateUid(name, i) {
        let id = name;
        if (i > 1)
          id += i;
        return \`_\${id}\`;
      }
      generateUidBasedOnNode(node, defaultName) {
        const parts = [];
        gatherNodeParts(node, parts);
        let id = parts.join(\\"$\\");
        id = id.replace(/^_/, \\"\\") || defaultName || \\"ref\\";
        return this.generateUid(id.slice(0, 20));
      }
      generateUidIdentifierBasedOnNode(node, defaultName) {
        return identifier(this.generateUidBasedOnNode(node, defaultName));
      }
      isStatic(node) {
        if (isThisExpression(node) || isSuper(node)) {
          return true;
        }
        if (isIdentifier(node)) {
          const binding = this.getBinding(node.name);
          if (binding) {
            return binding.constant;
          } else {
            return this.hasBinding(node.name);
          }
        }
        return false;
      }
      maybeGenerateMemoised(node, dontPush) {
        if (this.isStatic(node)) {
          return null;
        } else {
          const id = this.generateUidIdentifierBasedOnNode(node);
          if (!dontPush) {
            this.push({
              id
            });
            return cloneNode(id);
          }
          return id;
        }
      }
      checkBlockScopedCollisions(local, kind, name, id) {
        if (kind === \\"param\\")
          return;
        if (local.kind === \\"local\\")
          return;
        const duplicate = kind === \\"let\\" || local.kind === \\"let\\" || local.kind === \\"const\\" || local.kind === \\"module\\" || local.kind === \\"param\\" && kind === \\"const\\";
        if (duplicate) {
          throw this.hub.buildError(id, \`Duplicate declaration \\"\${name}\\"\`, TypeError);
        }
      }
      rename(oldName, newName, block) {
        const binding = this.getBinding(oldName);
        if (binding) {
          newName = newName || this.generateUidIdentifier(oldName).name;
          return new _renamer.default(binding, oldName, newName).rename(block);
        }
      }
      _renameFromMap(map, oldName, newName, value) {
        if (map[oldName]) {
          map[newName] = value;
          map[oldName] = null;
        }
      }
      dump() {
        const sep = \\"-\\".repeat(60);
        console.log(sep);
        let scope = this;
        do {
          console.log(\\"#\\", scope.block.type);
          for (const name of Object.keys(scope.bindings)) {
            const binding = scope.bindings[name];
            console.log(\\" -\\", name, {
              constant: binding.constant,
              references: binding.references,
              violations: binding.constantViolations.length,
              kind: binding.kind
            });
          }
        } while (scope = scope.parent);
        console.log(sep);
      }
      toArray(node, i, arrayLikeIsIterable) {
        if (isIdentifier(node)) {
          const binding = this.getBinding(node.name);
          if (binding != null && binding.constant && binding.path.isGenericType(\\"Array\\")) {
            return node;
          }
        }
        if (isArrayExpression(node)) {
          return node;
        }
        if (isIdentifier(node, {
          name: \\"arguments\\"
        })) {
          return callExpression(memberExpression(memberExpression(memberExpression(identifier(\\"Array\\"), identifier(\\"prototype\\")), identifier(\\"slice\\")), identifier(\\"call\\")), [node]);
        }
        let helperName;
        const args = [node];
        if (i === true) {
          helperName = \\"toConsumableArray\\";
        } else if (i) {
          args.push(numericLiteral(i));
          helperName = \\"slicedToArray\\";
        } else {
          helperName = \\"toArray\\";
        }
        if (arrayLikeIsIterable) {
          args.unshift(this.hub.addHelper(helperName));
          helperName = \\"maybeArrayLike\\";
        }
        return callExpression(this.hub.addHelper(helperName), args);
      }
      hasLabel(name) {
        return !!this.getLabel(name);
      }
      getLabel(name) {
        return this.labels.get(name);
      }
      registerLabel(path) {
        this.labels.set(path.node.label.name, path);
      }
      registerDeclaration(path) {
        if (path.isLabeledStatement()) {
          this.registerLabel(path);
        } else if (path.isFunctionDeclaration()) {
          this.registerBinding(\\"hoisted\\", path.get(\\"id\\"), path);
        } else if (path.isVariableDeclaration()) {
          const declarations = path.get(\\"declarations\\");
          for (const declar of declarations) {
            this.registerBinding(path.node.kind, declar);
          }
        } else if (path.isClassDeclaration()) {
          if (path.node.declare)
            return;
          this.registerBinding(\\"let\\", path);
        } else if (path.isImportDeclaration()) {
          const specifiers = path.get(\\"specifiers\\");
          for (const specifier of specifiers) {
            this.registerBinding(\\"module\\", specifier);
          }
        } else if (path.isExportDeclaration()) {
          const declar = path.get(\\"declaration\\");
          if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
            this.registerDeclaration(declar);
          }
        } else {
          this.registerBinding(\\"unknown\\", path);
        }
      }
      buildUndefinedNode() {
        return unaryExpression(\\"void\\", numericLiteral(0), true);
      }
      registerConstantViolation(path) {
        const ids = path.getBindingIdentifiers();
        for (const name of Object.keys(ids)) {
          const binding = this.getBinding(name);
          if (binding)
            binding.reassign(path);
        }
      }
      registerBinding(kind, path, bindingPath = path) {
        if (!kind)
          throw new ReferenceError(\\"no \`kind\`\\");
        if (path.isVariableDeclaration()) {
          const declarators = path.get(\\"declarations\\");
          for (const declar of declarators) {
            this.registerBinding(kind, declar);
          }
          return;
        }
        const parent = this.getProgramParent();
        const ids = path.getOuterBindingIdentifiers(true);
        for (const name of Object.keys(ids)) {
          parent.references[name] = true;
          for (const id of ids[name]) {
            const local = this.getOwnBinding(name);
            if (local) {
              if (local.identifier === id)
                continue;
              this.checkBlockScopedCollisions(local, kind, name, id);
            }
            if (local) {
              this.registerConstantViolation(bindingPath);
            } else {
              this.bindings[name] = new _binding.default({
                identifier: id,
                scope: this,
                path: bindingPath,
                kind
              });
            }
          }
        }
      }
      addGlobal(node) {
        this.globals[node.name] = node;
      }
      hasUid(name) {
        let scope = this;
        do {
          if (scope.uids[name])
            return true;
        } while (scope = scope.parent);
        return false;
      }
      hasGlobal(name) {
        let scope = this;
        do {
          if (scope.globals[name])
            return true;
        } while (scope = scope.parent);
        return false;
      }
      hasReference(name) {
        return !!this.getProgramParent().references[name];
      }
      isPure(node, constantsOnly) {
        if (isIdentifier(node)) {
          const binding = this.getBinding(node.name);
          if (!binding)
            return false;
          if (constantsOnly)
            return binding.constant;
          return true;
        } else if (isClass(node)) {
          if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {
            return false;
          }
          return this.isPure(node.body, constantsOnly);
        } else if (isClassBody(node)) {
          for (const method of node.body) {
            if (!this.isPure(method, constantsOnly))
              return false;
          }
          return true;
        } else if (isBinary(node)) {
          return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
        } else if (isArrayExpression(node)) {
          for (const elem of node.elements) {
            if (!this.isPure(elem, constantsOnly))
              return false;
          }
          return true;
        } else if (isObjectExpression(node)) {
          for (const prop of node.properties) {
            if (!this.isPure(prop, constantsOnly))
              return false;
          }
          return true;
        } else if (isMethod(node)) {
          if (node.computed && !this.isPure(node.key, constantsOnly))
            return false;
          if (node.kind === \\"get\\" || node.kind === \\"set\\")
            return false;
          return true;
        } else if (isProperty(node)) {
          if (node.computed && !this.isPure(node.key, constantsOnly))
            return false;
          return this.isPure(node.value, constantsOnly);
        } else if (isUnaryExpression(node)) {
          return this.isPure(node.argument, constantsOnly);
        } else if (isTaggedTemplateExpression(node)) {
          return matchesPattern(node.tag, \\"String.raw\\") && !this.hasBinding(\\"String\\", true) && this.isPure(node.quasi, constantsOnly);
        } else if (isTemplateLiteral(node)) {
          for (const expression of node.expressions) {
            if (!this.isPure(expression, constantsOnly))
              return false;
          }
          return true;
        } else {
          return isPureish(node);
        }
      }
      setData(key, val) {
        return this.data[key] = val;
      }
      getData(key) {
        let scope = this;
        do {
          const data = scope.data[key];
          if (data != null)
            return data;
        } while (scope = scope.parent);
      }
      removeData(key) {
        let scope = this;
        do {
          const data = scope.data[key];
          if (data != null)
            scope.data[key] = null;
        } while (scope = scope.parent);
      }
      init() {
        if (!this.inited) {
          this.inited = true;
          this.crawl();
        }
      }
      crawl() {
        const path = this.path;
        this.references = /* @__PURE__ */ Object.create(null);
        this.bindings = /* @__PURE__ */ Object.create(null);
        this.globals = /* @__PURE__ */ Object.create(null);
        this.uids = /* @__PURE__ */ Object.create(null);
        this.data = /* @__PURE__ */ Object.create(null);
        const programParent = this.getProgramParent();
        if (programParent.crawling)
          return;
        const state = {
          references: [],
          constantViolations: [],
          assignments: []
        };
        this.crawling = true;
        if (path.type !== \\"Program\\" && collectorVisitor._exploded) {
          for (const visit of collectorVisitor.enter) {
            visit(path, state);
          }
          const typeVisitors = collectorVisitor[path.type];
          if (typeVisitors) {
            for (const visit of typeVisitors.enter) {
              visit(path, state);
            }
          }
        }
        path.traverse(collectorVisitor, state);
        this.crawling = false;
        for (const path2 of state.assignments) {
          const ids = path2.getBindingIdentifiers();
          for (const name of Object.keys(ids)) {
            if (path2.scope.getBinding(name))
              continue;
            programParent.addGlobal(ids[name]);
          }
          path2.scope.registerConstantViolation(path2);
        }
        for (const ref of state.references) {
          const binding = ref.scope.getBinding(ref.node.name);
          if (binding) {
            binding.reference(ref);
          } else {
            programParent.addGlobal(ref.node);
          }
        }
        for (const path2 of state.constantViolations) {
          path2.scope.registerConstantViolation(path2);
        }
      }
      push(opts) {
        let path = this.path;
        if (!path.isBlockStatement() && !path.isProgram()) {
          path = this.getBlockParent().path;
        }
        if (path.isSwitchStatement()) {
          path = (this.getFunctionParent() || this.getProgramParent()).path;
        }
        if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
          path.ensureBlock();
          path = path.get(\\"body\\");
        }
        const unique = opts.unique;
        const kind = opts.kind || \\"var\\";
        const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
        const dataKey = \`declaration:\${kind}:\${blockHoist}\`;
        let declarPath = !unique && path.getData(dataKey);
        if (!declarPath) {
          const declar = variableDeclaration(kind, []);
          declar._blockHoist = blockHoist;
          [declarPath] = path.unshiftContainer(\\"body\\", [declar]);
          if (!unique)
            path.setData(dataKey, declarPath);
        }
        const declarator = variableDeclarator(opts.id, opts.init);
        declarPath.node.declarations.push(declarator);
        this.registerBinding(kind, declarPath.get(\\"declarations\\").pop());
      }
      getProgramParent() {
        let scope = this;
        do {
          if (scope.path.isProgram()) {
            return scope;
          }
        } while (scope = scope.parent);
        throw new Error(\\"Couldn't find a Program\\");
      }
      getFunctionParent() {
        let scope = this;
        do {
          if (scope.path.isFunctionParent()) {
            return scope;
          }
        } while (scope = scope.parent);
        return null;
      }
      getBlockParent() {
        let scope = this;
        do {
          if (scope.path.isBlockParent()) {
            return scope;
          }
        } while (scope = scope.parent);
        throw new Error(\\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\\");
      }
      getAllBindings() {
        const ids = /* @__PURE__ */ Object.create(null);
        let scope = this;
        do {
          for (const key of Object.keys(scope.bindings)) {
            if (key in ids === false) {
              ids[key] = scope.bindings[key];
            }
          }
          scope = scope.parent;
        } while (scope);
        return ids;
      }
      getAllBindingsOfKind(...kinds) {
        const ids = /* @__PURE__ */ Object.create(null);
        for (const kind of kinds) {
          let scope = this;
          do {
            for (const name of Object.keys(scope.bindings)) {
              const binding = scope.bindings[name];
              if (binding.kind === kind)
                ids[name] = binding;
            }
            scope = scope.parent;
          } while (scope);
        }
        return ids;
      }
      bindingIdentifierEquals(name, node) {
        return this.getBindingIdentifier(name) === node;
      }
      getBinding(name) {
        let scope = this;
        let previousPath;
        do {
          const binding = scope.getOwnBinding(name);
          if (binding) {
            var _previousPath;
            if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== \\"param\\" && binding.kind !== \\"local\\") {
            } else {
              return binding;
            }
          } else if (!binding && name === \\"arguments\\" && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {
            break;
          }
          previousPath = scope.path;
        } while (scope = scope.parent);
      }
      getOwnBinding(name) {
        return this.bindings[name];
      }
      getBindingIdentifier(name) {
        var _this$getBinding;
        return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;
      }
      getOwnBindingIdentifier(name) {
        const binding = this.bindings[name];
        return binding == null ? void 0 : binding.identifier;
      }
      hasOwnBinding(name) {
        return !!this.getOwnBinding(name);
      }
      hasBinding(name, noGlobals) {
        if (!name)
          return false;
        if (this.hasOwnBinding(name))
          return true;
        if (this.parentHasBinding(name, noGlobals))
          return true;
        if (this.hasUid(name))
          return true;
        if (!noGlobals && Scope.globals.includes(name))
          return true;
        if (!noGlobals && Scope.contextVariables.includes(name))
          return true;
        return false;
      }
      parentHasBinding(name, noGlobals) {
        var _this$parent;
        return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, noGlobals);
      }
      moveBindingTo(name, scope) {
        const info = this.getBinding(name);
        if (info) {
          info.scope.removeOwnBinding(name);
          info.scope = scope;
          scope.bindings[name] = info;
        }
      }
      removeOwnBinding(name) {
        delete this.bindings[name];
      }
      removeBinding(name) {
        var _this$getBinding2;
        (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);
        let scope = this;
        do {
          if (scope.uids[name]) {
            scope.uids[name] = false;
          }
        } while (scope = scope.parent);
      }
    };
    exports.default = Scope;
    Scope.globals = Object.keys(_globals.builtin);
    Scope.contextVariables = [\\"arguments\\", \\"undefined\\", \\"Infinity\\", \\"NaN\\"];
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/base64.js\\"(exports) {
    var intToCharMap = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\".split(\\"\\");
    exports.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError(\\"Must be between 0 and 63: \\" + number);
    };
    exports.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/base64-vlq.js\\"(exports) {
    var base64 = require_base64();
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports.encode = function base64VLQ_encode(aValue) {
      var encoded = \\"\\";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error(\\"Expected more digits in base 64 VLQ value.\\");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error(\\"Invalid base64 digit: \\" + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/util.js
var require_util = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/util.js\\"(exports) {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('\\"' + aName + '\\" is a required argument.');
      }
    }
    exports.getArg = getArg;
    var urlRegexp = /^(?:([\\\\w+\\\\-.]+):)?\\\\/\\\\/(?:(\\\\w+:\\\\w+)@)?([\\\\w.]*)(?::(\\\\d+))?(\\\\S*)$/;
    var dataUrlRegexp = /^data:.+\\\\,.+$/;
    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = \\"\\";
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + \\":\\";
      }
      url += \\"//\\";
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + \\"@\\";
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += \\":\\" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports.urlGenerate = urlGenerate;
    function normalize(aPath) {
      var path = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path = url.path;
      }
      var isAbsolute = exports.isAbsolute(path);
      var parts = path.split(/\\\\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === \\".\\") {
          parts.splice(i, 1);
        } else if (part === \\"..\\") {
          up++;
        } else if (up > 0) {
          if (part === \\"\\") {
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path = parts.join(\\"/\\");
      if (path === \\"\\") {
        path = isAbsolute ? \\"/\\" : \\".\\";
      }
      if (url) {
        url.path = path;
        return urlGenerate(url);
      }
      return path;
    }
    exports.normalize = normalize;
    function join(aRoot, aPath) {
      if (aRoot === \\"\\") {
        aRoot = \\".\\";
      }
      if (aPath === \\"\\") {
        aPath = \\".\\";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || \\"/\\";
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === \\"/\\" ? aPath : normalize(aRoot.replace(/\\\\/+$/, \\"\\") + \\"/\\" + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports.join = join;
    exports.isAbsolute = function(aPath) {
      return aPath.charAt(0) === \\"/\\" || !!aPath.match(urlRegexp);
    };
    function relative(aRoot, aPath) {
      if (aRoot === \\"\\") {
        aRoot = \\".\\";
      }
      aRoot = aRoot.replace(/\\\\/$/, \\"\\");
      var level = 0;
      while (aPath.indexOf(aRoot + \\"/\\") !== 0) {
        var index = aRoot.lastIndexOf(\\"/\\");
        if (index < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\\\\/]+:\\\\/)?\\\\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join(\\"../\\") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;
    var supportsNullProto = function() {
      var obj = /* @__PURE__ */ Object.create(null);
      return !(\\"__proto__\\" in obj);
    }();
    function identity(s) {
      return s;
    }
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return \\"$\\" + aStr;
      }
      return aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s) {
        return false;
      }
      var length = s.length;
      if (length < 9) {
        return false;
      }
      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
        return false;
      }
      for (var i = length - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36) {
          return false;
        }
      }
      return true;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = mappingA.source - mappingB.source;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return mappingA.name - mappingB.name;
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = mappingA.source - mappingB.source;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return mappingA.name - mappingB.name;
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/array-set.js\\"(exports) {
    var util = require_util();
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== \\"undefined\\";
    function ArraySet() {
      this._array = [];
      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('\\"' + aStr + '\\" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error(\\"No element indexed by \\" + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };
    exports.ArraySet = ArraySet;
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/mapping-list.js\\"(exports) {
    var util = require_util();
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
      this._array = [];
      this._sorted = true;
      this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    exports.MappingList = MappingList;
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/source-map-generator.js\\"(exports) {
    var base64VLQ = require_base64_vlq();
    var util = require_util();
    var ArraySet = require_array_set().ArraySet;
    var MappingList = require_mapping_list().MappingList;
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util.getArg(aArgs, \\"file\\", null);
      this._sourceRoot = util.getArg(aArgs, \\"sourceRoot\\", null);
      this._skipValidation = util.getArg(aArgs, \\"skipValidation\\", false);
      this._sources = new ArraySet();
      this._names = new ArraySet();
      this._mappings = new MappingList();
      this._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, \\"generated\\");
      var original = util.getArg(aArgs, \\"original\\", null);
      var source = util.getArg(aArgs, \\"source\\", null);
      var name = util.getArg(aArgs, \\"name\\", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(\`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \\"file\\" property. Both were omitted.\`);
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet();
      var newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== \\"number\\" && typeof aOriginal.column !== \\"number\\") {
        throw new Error(\\"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\\");
      }
      if (aGenerated && \\"line\\" in aGenerated && \\"column\\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && \\"line\\" in aGenerated && \\"column\\" in aGenerated && aOriginal && \\"line\\" in aOriginal && \\"column\\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error(\\"Invalid mapping: \\" + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = \\"\\";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = \\"\\";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += \\";\\";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += \\",\\";
          }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result += next;
      }
      return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }
      return map;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };
    exports.SourceMapGenerator = SourceMapGenerator;
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/binary-search.js\\"(exports) {
    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        return mid;
      } else if (cmp > 0) {
        if (aHigh - mid > 1) {
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        if (mid - aLow > 1) {
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }
    exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
      if (index < 0) {
        return -1;
      }
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }
      return index;
    };
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/quick-sort.js\\"(exports) {
    function swap(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y];
      ary[y] = temp;
    }
    function randomIntInRange(low, high) {
      return Math.round(low + Math.random() * (high - low));
    }
    function doQuickSort(ary, comparator, p, r) {
      if (p < r) {
        var pivotIndex = randomIntInRange(p, r);
        var i = p - 1;
        swap(ary, pivotIndex, r);
        var pivot = ary[r];
        for (var j = p; j < r; j++) {
          if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap(ary, i, j);
          }
        }
        swap(ary, i + 1, j);
        var q = i + 1;
        doQuickSort(ary, comparator, p, q - 1);
        doQuickSort(ary, comparator, q + 1, r);
      }
    }
    exports.quickSort = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/source-map-consumer.js\\"(exports) {
    var util = require_util();
    var binarySearch = require_binary_search();
    var ArraySet = require_array_set().ArraySet;
    var base64VLQ = require_base64_vlq();
    var quickSort = require_quick_sort().quickSort;
    function SourceMapConsumer(aSourceMap) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === \\"string\\") {
        sourceMap = JSON.parse(aSourceMap.replace(/^\\\\)\\\\]\\\\}'/, \\"\\"));
      }
      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);
    }
    SourceMapConsumer.fromSourceMap = function(aSourceMap) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, \\"_generatedMappings\\", {
      get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, \\"_originalMappings\\", {
      get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === \\";\\" || c === \\",\\";
    };
    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error(\\"Subclasses must implement _parseMappings\\");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error(\\"Unknown order of iteration.\\");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, \\"line\\");
      var needle = {
        source: util.getArg(aArgs, \\"source\\"),
        originalLine: line,
        originalColumn: util.getArg(aArgs, \\"column\\", 0)
      };
      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }
      if (!this._sources.has(needle.source)) {
        return [];
      }
      needle.source = this._sources.indexOf(needle.source);
      var mappings = [];
      var index = this._findMapping(needle, this._originalMappings, \\"originalLine\\", \\"originalColumn\\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, \\"generatedLine\\", null),
              column: util.getArg(mapping, \\"generatedColumn\\", null),
              lastColumn: util.getArg(mapping, \\"lastGeneratedColumn\\", null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, \\"generatedLine\\", null),
              column: util.getArg(mapping, \\"generatedColumn\\", null),
              lastColumn: util.getArg(mapping, \\"lastGeneratedColumn\\", null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    exports.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === \\"string\\") {
        sourceMap = JSON.parse(aSourceMap.replace(/^\\\\)\\\\]\\\\}'/, \\"\\"));
      }
      var version = util.getArg(sourceMap, \\"version\\");
      var sources = util.getArg(sourceMap, \\"sources\\");
      var names = util.getArg(sourceMap, \\"names\\", []);
      var sourceRoot = util.getArg(sourceMap, \\"sourceRoot\\", null);
      var sourcesContent = util.getArg(sourceMap, \\"sourcesContent\\", null);
      var mappings = util.getArg(sourceMap, \\"mappings\\");
      var file = util.getArg(sourceMap, \\"file\\", null);
      if (version != this._version) {
        throw new Error(\\"Unsupported version: \\" + version);
      }
      sources = sources.map(String).map(util.normalize).map(function(source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
      });
      this._names = ArraySet.fromArray(names.map(String), true);
      this._sources = ArraySet.fromArray(sources, true);
      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this.file = file;
    }
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);
      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
      smc.file = aSourceMap._file;
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort(smc.__originalMappings, util.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, \\"sources\\", {
      get: function() {
        return this._sources.toArray().map(function(s) {
          return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
        }, this);
      }
    });
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }
    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;
      while (index < length) {
        if (aStr.charAt(index) === \\";\\") {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === \\",\\") {
          index++;
        } else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);
          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error(\\"Found a source, but no line and column\\");
            }
            if (segment.length === 3) {
              throw new Error(\\"Found a source and line, but no column\\");
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === \\"number\\") {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError(\\"Line must be greater than or equal to 1, got \\" + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError(\\"Column must be greater than or equal to 0, got \\" + aNeedle[aColumnName]);
      }
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, \\"line\\"),
        generatedColumn: util.getArg(aArgs, \\"column\\")
      };
      var index = this._findMapping(needle, this._generatedMappings, \\"generatedLine\\", \\"generatedColumn\\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, \\"bias\\", SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, \\"source\\", null);
          if (source !== null) {
            source = this._sources.at(source);
            if (this.sourceRoot != null) {
              source = util.join(this.sourceRoot, source);
            }
          }
          var name = util.getArg(mapping, \\"name\\", null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source,
            line: util.getArg(mapping, \\"originalLine\\", null),
            column: util.getArg(mapping, \\"originalColumn\\", null),
            name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }
      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }
      var url;
      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = aSource.replace(/^file:\\\\/\\\\//, \\"\\");
        if (url.scheme == \\"file\\" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == \\"/\\") && this._sources.has(\\"/\\" + aSource)) {
          return this.sourcesContent[this._sources.indexOf(\\"/\\" + aSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('\\"' + aSource + '\\" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, \\"source\\");
      if (this.sourceRoot != null) {
        source = util.relative(this.sourceRoot, source);
      }
      if (!this._sources.has(source)) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      source = this._sources.indexOf(source);
      var needle = {
        source,
        originalLine: util.getArg(aArgs, \\"line\\"),
        originalColumn: util.getArg(aArgs, \\"column\\")
      };
      var index = this._findMapping(needle, this._originalMappings, \\"originalLine\\", \\"originalColumn\\", util.compareByOriginalPositions, util.getArg(aArgs, \\"bias\\", SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, \\"generatedLine\\", null),
            column: util.getArg(mapping, \\"generatedColumn\\", null),
            lastColumn: util.getArg(mapping, \\"lastGeneratedColumn\\", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === \\"string\\") {
        sourceMap = JSON.parse(aSourceMap.replace(/^\\\\)\\\\]\\\\}'/, \\"\\"));
      }
      var version = util.getArg(sourceMap, \\"version\\");
      var sections = util.getArg(sourceMap, \\"sections\\");
      if (version != this._version) {
        throw new Error(\\"Unsupported version: \\" + version);
      }
      this._sources = new ArraySet();
      this._names = new ArraySet();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s) {
        if (s.url) {
          throw new Error(\\"Support for url field in sections not implemented.\\");
        }
        var offset = util.getArg(s, \\"offset\\");
        var offsetLine = util.getArg(offset, \\"line\\");
        var offsetColumn = util.getArg(offset, \\"column\\");
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
          throw new Error(\\"Section offsets must be ordered and non-overlapping.\\");
        }
        lastOffset = offset;
        return {
          generatedOffset: {
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util.getArg(s, \\"map\\"))
        };
      });
    }
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, \\"sources\\", {
      get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, \\"line\\"),
        generatedColumn: util.getArg(aArgs, \\"column\\")
      };
      var sectionIndex = binarySearch.search(needle, this._sections, function(needle2, section2) {
        var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }
        return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
      });
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('\\"' + aSource + '\\" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer.sources.indexOf(util.getArg(aArgs, \\"source\\")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          if (section.consumer.sourceRoot !== null) {
            source = util.join(section.consumer.sourceRoot, source);
          }
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === \\"number\\") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };
    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/lib/source-node.js\\"(exports) {
    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    var util = require_util();
    var REGEX_NEWLINE = /(\\\\r?\\\\n)/;
    var NEWLINE_CODE = 10;
    var isSourceNode = \\"$$$isSourceNode$$$\\";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode] = true;
      if (aChunks != null)
        this.add(aChunks);
    }
    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node = new SourceNode();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || \\"\\";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      };
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex];
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node.add(remainingLines.splice(remainingLinesIndex).join(\\"\\"));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });
      return node;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node.add(code);
        } else {
          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
          node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
      }
    };
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode] || typeof aChunk === \\"string\\") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError(\\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \\" + aChunk);
      }
      return this;
    };
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode] || typeof aChunk === \\"string\\") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError(\\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \\" + aChunk);
      }
      return this;
    };
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== \\"\\") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode.prototype.join = function SourceNode_join(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === \\"string\\") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push(\\"\\".replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode.prototype.toString = function SourceNode_toString() {
      var str = \\"\\";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: \\"\\",
        line: 1,
        column: 0
      };
      var map = new SourceMapGenerator(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length = chunk.length; idx < length; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map };
    };
    exports.SourceNode = SourceNode;
  }
});

// node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/source-map.js
var require_source_map = __commonJS({
  \\"node_modules/.pnpm/source-map@0.5.7/node_modules/source-map/source-map.js\\"(exports) {
    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
    exports.SourceNode = require_source_node().SourceNode;
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/source-map.js
var require_source_map2 = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/source-map.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _sourceMap = require_source_map();
    var SourceMap = class {
      constructor(opts, code) {
        this._cachedMap = void 0;
        this._code = void 0;
        this._opts = void 0;
        this._rawMappings = void 0;
        this._lastGenLine = void 0;
        this._lastSourceLine = void 0;
        this._lastSourceColumn = void 0;
        this._cachedMap = null;
        this._code = code;
        this._opts = opts;
        this._rawMappings = [];
      }
      get() {
        if (!this._cachedMap) {
          const map = this._cachedMap = new _sourceMap.SourceMapGenerator({
            sourceRoot: this._opts.sourceRoot
          });
          const code = this._code;
          if (typeof code === \\"string\\") {
            map.setSourceContent(this._opts.sourceFileName.replace(/\\\\\\\\/g, \\"/\\"), code);
          } else if (typeof code === \\"object\\") {
            Object.keys(code).forEach((sourceFileName) => {
              map.setSourceContent(sourceFileName.replace(/\\\\\\\\/g, \\"/\\"), code[sourceFileName]);
            });
          }
          this._rawMappings.forEach((mapping) => map.addMapping(mapping), map);
        }
        return this._cachedMap.toJSON();
      }
      getRawMappings() {
        return this._rawMappings.slice();
      }
      mark(generatedLine, generatedColumn, line, column, identifierName, filename, force) {
        if (this._lastGenLine !== generatedLine && line === null)
          return;
        if (!force && this._lastGenLine === generatedLine && this._lastSourceLine === line && this._lastSourceColumn === column) {
          return;
        }
        this._cachedMap = null;
        this._lastGenLine = generatedLine;
        this._lastSourceLine = line;
        this._lastSourceColumn = column;
        this._rawMappings.push({
          name: identifierName || void 0,
          generated: {
            line: generatedLine,
            column: generatedColumn
          },
          source: line == null ? void 0 : (filename || this._opts.sourceFileName).replace(/\\\\\\\\/g, \\"/\\"),
          original: line == null ? void 0 : {
            line,
            column
          }
        });
      }
    };
    exports.default = SourceMap;
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/buffer.js
var require_buffer = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/buffer.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var SPACES_RE = /^[ \\\\t]+$/;
    var Buffer2 = class {
      constructor(map) {
        this._map = null;
        this._buf = \\"\\";
        this._last = 0;
        this._queue = [];
        this._position = {
          line: 1,
          column: 0
        };
        this._sourcePosition = {
          identifierName: null,
          line: null,
          column: null,
          filename: null
        };
        this._disallowedPop = null;
        this._map = map;
      }
      get() {
        this._flush();
        const map = this._map;
        const result = {
          code: this._buf.trimRight(),
          map: null,
          rawMappings: map == null ? void 0 : map.getRawMappings()
        };
        if (map) {
          Object.defineProperty(result, \\"map\\", {
            configurable: true,
            enumerable: true,
            get() {
              return this.map = map.get();
            },
            set(value) {
              Object.defineProperty(this, \\"map\\", {
                value,
                writable: true
              });
            }
          });
        }
        return result;
      }
      append(str) {
        this._flush();
        const {
          line,
          column,
          filename,
          identifierName,
          force
        } = this._sourcePosition;
        this._append(str, line, column, identifierName, filename, force);
      }
      queue(str) {
        if (str === \\"\\\\n\\") {
          while (this._queue.length > 0 && SPACES_RE.test(this._queue[0][0])) {
            this._queue.shift();
          }
        }
        const {
          line,
          column,
          filename,
          identifierName,
          force
        } = this._sourcePosition;
        this._queue.unshift([str, line, column, identifierName, filename, force]);
      }
      _flush() {
        let item;
        while (item = this._queue.pop()) {
          this._append(...item);
        }
      }
      _append(str, line, column, identifierName, filename, force) {
        this._buf += str;
        this._last = str.charCodeAt(str.length - 1);
        let i = str.indexOf(\\"\\\\n\\");
        let last = 0;
        if (i !== 0) {
          this._mark(line, column, identifierName, filename, force);
        }
        while (i !== -1) {
          this._position.line++;
          this._position.column = 0;
          last = i + 1;
          if (last < str.length) {
            this._mark(++line, 0, identifierName, filename, force);
          }
          i = str.indexOf(\\"\\\\n\\", last);
        }
        this._position.column += str.length - last;
      }
      _mark(line, column, identifierName, filename, force) {
        var _this$_map;
        (_this$_map = this._map) == null ? void 0 : _this$_map.mark(this._position.line, this._position.column, line, column, identifierName, filename, force);
      }
      removeTrailingNewline() {
        if (this._queue.length > 0 && this._queue[0][0] === \\"\\\\n\\") {
          this._queue.shift();
        }
      }
      removeLastSemicolon() {
        if (this._queue.length > 0 && this._queue[0][0] === \\";\\") {
          this._queue.shift();
        }
      }
      getLastChar() {
        let last;
        if (this._queue.length > 0) {
          const str = this._queue[0][0];
          last = str.charCodeAt(0);
        } else {
          last = this._last;
        }
        return last;
      }
      endsWithCharAndNewline() {
        const queue = this._queue;
        if (queue.length > 0) {
          const last = queue[0][0];
          const lastCp = last.charCodeAt(0);
          if (lastCp !== 10)
            return;
          if (queue.length > 1) {
            const secondLast = queue[1][0];
            return secondLast.charCodeAt(0);
          } else {
            return this._last;
          }
        }
      }
      hasContent() {
        return this._queue.length > 0 || !!this._last;
      }
      exactSource(loc, cb) {
        this.source(\\"start\\", loc, true);
        cb();
        this.source(\\"end\\", loc);
        this._disallowPop(\\"start\\", loc);
      }
      source(prop, loc, force) {
        if (prop && !loc)
          return;
        this._normalizePosition(prop, loc, this._sourcePosition, force);
      }
      withSource(prop, loc, cb) {
        if (!this._map)
          return cb();
        const originalLine = this._sourcePosition.line;
        const originalColumn = this._sourcePosition.column;
        const originalFilename = this._sourcePosition.filename;
        const originalIdentifierName = this._sourcePosition.identifierName;
        this.source(prop, loc);
        cb();
        if ((!this._sourcePosition.force || this._sourcePosition.line !== originalLine || this._sourcePosition.column !== originalColumn || this._sourcePosition.filename !== originalFilename) && (!this._disallowedPop || this._disallowedPop.line !== originalLine || this._disallowedPop.column !== originalColumn || this._disallowedPop.filename !== originalFilename)) {
          this._sourcePosition.line = originalLine;
          this._sourcePosition.column = originalColumn;
          this._sourcePosition.filename = originalFilename;
          this._sourcePosition.identifierName = originalIdentifierName;
          this._sourcePosition.force = false;
          this._disallowedPop = null;
        }
      }
      _disallowPop(prop, loc) {
        if (prop && !loc)
          return;
        this._disallowedPop = this._normalizePosition(prop, loc);
      }
      _normalizePosition(prop, loc, targetObj, force) {
        const pos = loc ? loc[prop] : null;
        if (targetObj === void 0) {
          targetObj = {
            identifierName: null,
            line: null,
            column: null,
            filename: null,
            force: false
          };
        }
        const origLine = targetObj.line;
        const origColumn = targetObj.column;
        const origFilename = targetObj.filename;
        targetObj.identifierName = prop === \\"start\\" && (loc == null ? void 0 : loc.identifierName) || null;
        targetObj.line = pos == null ? void 0 : pos.line;
        targetObj.column = pos == null ? void 0 : pos.column;
        targetObj.filename = loc == null ? void 0 : loc.filename;
        if (force || targetObj.line !== origLine || targetObj.column !== origColumn || targetObj.filename !== origFilename) {
          targetObj.force = force;
        }
        return targetObj;
      }
      getCurrentColumn() {
        const extra = this._queue.reduce((acc, item) => item[0] + acc, \\"\\");
        const lastIndex = extra.lastIndexOf(\\"\\\\n\\");
        return lastIndex === -1 ? this._position.column + extra.length : extra.length - 1 - lastIndex;
      }
      getCurrentLine() {
        const extra = this._queue.reduce((acc, item) => item[0] + acc, \\"\\");
        let count = 0;
        for (let i = 0; i < extra.length; i++) {
          if (extra[i] === \\"\\\\n\\")
            count++;
        }
        return this._position.line + count;
      }
    };
    exports.default = Buffer2;
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/node/whitespace.js
var require_whitespace = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/node/whitespace.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.nodes = exports.list = void 0;
    var _t = require_lib2();
    var {
      FLIPPED_ALIAS_KEYS,
      isArrayExpression,
      isAssignmentExpression,
      isBinary,
      isBlockStatement,
      isCallExpression,
      isFunction,
      isIdentifier,
      isLiteral,
      isMemberExpression,
      isObjectExpression,
      isOptionalCallExpression,
      isOptionalMemberExpression,
      isStringLiteral
    } = _t;
    function crawl(node, state = {}) {
      if (isMemberExpression(node) || isOptionalMemberExpression(node)) {
        crawl(node.object, state);
        if (node.computed)
          crawl(node.property, state);
      } else if (isBinary(node) || isAssignmentExpression(node)) {
        crawl(node.left, state);
        crawl(node.right, state);
      } else if (isCallExpression(node) || isOptionalCallExpression(node)) {
        state.hasCall = true;
        crawl(node.callee, state);
      } else if (isFunction(node)) {
        state.hasFunction = true;
      } else if (isIdentifier(node)) {
        state.hasHelper = state.hasHelper || isHelper(node.callee);
      }
      return state;
    }
    function isHelper(node) {
      if (isMemberExpression(node)) {
        return isHelper(node.object) || isHelper(node.property);
      } else if (isIdentifier(node)) {
        return node.name === \\"require\\" || node.name[0] === \\"_\\";
      } else if (isCallExpression(node)) {
        return isHelper(node.callee);
      } else if (isBinary(node) || isAssignmentExpression(node)) {
        return isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
      } else {
        return false;
      }
    }
    function isType(node) {
      return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
    }
    var nodes = {
      AssignmentExpression(node) {
        const state = crawl(node.right);
        if (state.hasCall && state.hasHelper || state.hasFunction) {
          return {
            before: state.hasFunction,
            after: true
          };
        }
      },
      SwitchCase(node, parent) {
        return {
          before: !!node.consequent.length || parent.cases[0] === node,
          after: !node.consequent.length && parent.cases[parent.cases.length - 1] === node
        };
      },
      LogicalExpression(node) {
        if (isFunction(node.left) || isFunction(node.right)) {
          return {
            after: true
          };
        }
      },
      Literal(node) {
        if (isStringLiteral(node) && node.value === \\"use strict\\") {
          return {
            after: true
          };
        }
      },
      CallExpression(node) {
        if (isFunction(node.callee) || isHelper(node)) {
          return {
            before: true,
            after: true
          };
        }
      },
      OptionalCallExpression(node) {
        if (isFunction(node.callee)) {
          return {
            before: true,
            after: true
          };
        }
      },
      VariableDeclaration(node) {
        for (let i = 0; i < node.declarations.length; i++) {
          const declar = node.declarations[i];
          let enabled = isHelper(declar.id) && !isType(declar.init);
          if (!enabled) {
            const state = crawl(declar.init);
            enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
          }
          if (enabled) {
            return {
              before: true,
              after: true
            };
          }
        }
      },
      IfStatement(node) {
        if (isBlockStatement(node.consequent)) {
          return {
            before: true,
            after: true
          };
        }
      }
    };
    exports.nodes = nodes;
    nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
      if (parent.properties[0] === node) {
        return {
          before: true
        };
      }
    };
    nodes.ObjectTypeCallProperty = function(node, parent) {
      var _parent$properties;
      if (parent.callProperties[0] === node && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {
        return {
          before: true
        };
      }
    };
    nodes.ObjectTypeIndexer = function(node, parent) {
      var _parent$properties2, _parent$callPropertie;
      if (parent.indexers[0] === node && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {
        return {
          before: true
        };
      }
    };
    nodes.ObjectTypeInternalSlot = function(node, parent) {
      var _parent$properties3, _parent$callPropertie2, _parent$indexers;
      if (parent.internalSlots[0] === node && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {
        return {
          before: true
        };
      }
    };
    var list = {
      VariableDeclaration(node) {
        return node.declarations.map((decl) => decl.init);
      },
      ArrayExpression(node) {
        return node.elements;
      },
      ObjectExpression(node) {
        return node.properties;
      }
    };
    exports.list = list;
    [[\\"Function\\", true], [\\"Class\\", true], [\\"Loop\\", true], [\\"LabeledStatement\\", true], [\\"SwitchStatement\\", true], [\\"TryStatement\\", true]].forEach(function([type, amounts]) {
      if (typeof amounts === \\"boolean\\") {
        amounts = {
          after: amounts,
          before: amounts
        };
      }
      [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
        nodes[type2] = function() {
          return amounts;
        };
      });
    });
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/node/parentheses.js
var require_parentheses = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/node/parentheses.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.ArrowFunctionExpression = ArrowFunctionExpression;
    exports.AssignmentExpression = AssignmentExpression;
    exports.Binary = Binary;
    exports.BinaryExpression = BinaryExpression;
    exports.ClassExpression = ClassExpression;
    exports.ConditionalExpression = ConditionalExpression;
    exports.DoExpression = DoExpression;
    exports.FunctionExpression = FunctionExpression;
    exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
    exports.Identifier = Identifier;
    exports.LogicalExpression = LogicalExpression;
    exports.NullableTypeAnnotation = NullableTypeAnnotation;
    exports.ObjectExpression = ObjectExpression;
    exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
    exports.OptionalCallExpression = exports.OptionalMemberExpression = OptionalMemberExpression;
    exports.SequenceExpression = SequenceExpression;
    exports.TSAsExpression = TSAsExpression;
    exports.TSInferType = TSInferType;
    exports.TSTypeAssertion = TSTypeAssertion;
    exports.TSIntersectionType = exports.TSUnionType = TSUnionType;
    exports.UnaryLike = UnaryLike;
    exports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;
    exports.UpdateExpression = UpdateExpression;
    exports.AwaitExpression = exports.YieldExpression = YieldExpression;
    var _t = require_lib2();
    var {
      isArrayTypeAnnotation,
      isArrowFunctionExpression,
      isAssignmentExpression,
      isAwaitExpression,
      isBinary,
      isBinaryExpression,
      isCallExpression,
      isClassDeclaration,
      isClassExpression,
      isConditional,
      isConditionalExpression,
      isExportDeclaration,
      isExportDefaultDeclaration,
      isExpressionStatement,
      isFor,
      isForInStatement,
      isForOfStatement,
      isForStatement,
      isIfStatement,
      isIndexedAccessType,
      isIntersectionTypeAnnotation,
      isLogicalExpression,
      isMemberExpression,
      isNewExpression,
      isNullableTypeAnnotation,
      isObjectPattern,
      isOptionalCallExpression,
      isOptionalMemberExpression,
      isReturnStatement,
      isSequenceExpression,
      isSwitchStatement,
      isTSArrayType,
      isTSAsExpression,
      isTSIntersectionType,
      isTSNonNullExpression,
      isTSOptionalType,
      isTSRestType,
      isTSTypeAssertion,
      isTSUnionType,
      isTaggedTemplateExpression,
      isThrowStatement,
      isTypeAnnotation,
      isUnaryLike,
      isUnionTypeAnnotation,
      isVariableDeclarator,
      isWhileStatement,
      isYieldExpression
    } = _t;
    var PRECEDENCE = {
      \\"||\\": 0,
      \\"??\\": 0,
      \\"&&\\": 1,
      \\"|\\": 2,
      \\"^\\": 3,
      \\"&\\": 4,
      \\"==\\": 5,
      \\"===\\": 5,
      \\"!=\\": 5,
      \\"!==\\": 5,
      \\"<\\": 6,
      \\">\\": 6,
      \\"<=\\": 6,
      \\">=\\": 6,
      in: 6,
      instanceof: 6,
      \\">>\\": 7,
      \\"<<\\": 7,
      \\">>>\\": 7,
      \\"+\\": 8,
      \\"-\\": 8,
      \\"*\\": 9,
      \\"/\\": 9,
      \\"%\\": 9,
      \\"**\\": 10
    };
    var isClassExtendsClause = (node, parent) => (isClassDeclaration(parent) || isClassExpression(parent)) && parent.superClass === node;
    var hasPostfixPart = (node, parent) => (isMemberExpression(parent) || isOptionalMemberExpression(parent)) && parent.object === node || (isCallExpression(parent) || isOptionalCallExpression(parent) || isNewExpression(parent)) && parent.callee === node || isTaggedTemplateExpression(parent) && parent.tag === node || isTSNonNullExpression(parent);
    function NullableTypeAnnotation(node, parent) {
      return isArrayTypeAnnotation(parent);
    }
    function FunctionTypeAnnotation(node, parent, printStack) {
      return isUnionTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isArrayTypeAnnotation(parent) || isTypeAnnotation(parent) && isArrowFunctionExpression(printStack[printStack.length - 3]);
    }
    function UpdateExpression(node, parent) {
      return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
    }
    function ObjectExpression(node, parent, printStack) {
      return isFirstInContext(printStack, {
        expressionStatement: true,
        arrowBody: true
      });
    }
    function DoExpression(node, parent, printStack) {
      return !node.async && isFirstInContext(printStack, {
        expressionStatement: true
      });
    }
    function Binary(node, parent) {
      if (node.operator === \\"**\\" && isBinaryExpression(parent, {
        operator: \\"**\\"
      })) {
        return parent.left === node;
      }
      if (isClassExtendsClause(node, parent)) {
        return true;
      }
      if (hasPostfixPart(node, parent) || isUnaryLike(parent) || isAwaitExpression(parent)) {
        return true;
      }
      if (isBinary(parent)) {
        const parentOp = parent.operator;
        const parentPos = PRECEDENCE[parentOp];
        const nodeOp = node.operator;
        const nodePos = PRECEDENCE[nodeOp];
        if (parentPos === nodePos && parent.right === node && !isLogicalExpression(parent) || parentPos > nodePos) {
          return true;
        }
      }
    }
    function UnionTypeAnnotation(node, parent) {
      return isArrayTypeAnnotation(parent) || isNullableTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isUnionTypeAnnotation(parent);
    }
    function OptionalIndexedAccessType(node, parent) {
      return isIndexedAccessType(parent, {
        objectType: node
      });
    }
    function TSAsExpression() {
      return true;
    }
    function TSTypeAssertion() {
      return true;
    }
    function TSUnionType(node, parent) {
      return isTSArrayType(parent) || isTSOptionalType(parent) || isTSIntersectionType(parent) || isTSUnionType(parent) || isTSRestType(parent);
    }
    function TSInferType(node, parent) {
      return isTSArrayType(parent) || isTSOptionalType(parent);
    }
    function BinaryExpression(node, parent) {
      return node.operator === \\"in\\" && (isVariableDeclarator(parent) || isFor(parent));
    }
    function SequenceExpression(node, parent) {
      if (isForStatement(parent) || isThrowStatement(parent) || isReturnStatement(parent) || isIfStatement(parent) && parent.test === node || isWhileStatement(parent) && parent.test === node || isForInStatement(parent) && parent.right === node || isSwitchStatement(parent) && parent.discriminant === node || isExpressionStatement(parent) && parent.expression === node) {
        return false;
      }
      return true;
    }
    function YieldExpression(node, parent) {
      return isBinary(parent) || isUnaryLike(parent) || hasPostfixPart(node, parent) || isAwaitExpression(parent) && isYieldExpression(node) || isConditionalExpression(parent) && node === parent.test || isClassExtendsClause(node, parent);
    }
    function ClassExpression(node, parent, printStack) {
      return isFirstInContext(printStack, {
        expressionStatement: true,
        exportDefault: true
      });
    }
    function UnaryLike(node, parent) {
      return hasPostfixPart(node, parent) || isBinaryExpression(parent, {
        operator: \\"**\\",
        left: node
      }) || isClassExtendsClause(node, parent);
    }
    function FunctionExpression(node, parent, printStack) {
      return isFirstInContext(printStack, {
        expressionStatement: true,
        exportDefault: true
      });
    }
    function ArrowFunctionExpression(node, parent) {
      return isExportDeclaration(parent) || ConditionalExpression(node, parent);
    }
    function ConditionalExpression(node, parent) {
      if (isUnaryLike(parent) || isBinary(parent) || isConditionalExpression(parent, {
        test: node
      }) || isAwaitExpression(parent) || isTSTypeAssertion(parent) || isTSAsExpression(parent)) {
        return true;
      }
      return UnaryLike(node, parent);
    }
    function OptionalMemberExpression(node, parent) {
      return isCallExpression(parent, {
        callee: node
      }) || isMemberExpression(parent, {
        object: node
      });
    }
    function AssignmentExpression(node, parent) {
      if (isObjectPattern(node.left)) {
        return true;
      } else {
        return ConditionalExpression(node, parent);
      }
    }
    function LogicalExpression(node, parent) {
      switch (node.operator) {
        case \\"||\\":
          if (!isLogicalExpression(parent))
            return false;
          return parent.operator === \\"??\\" || parent.operator === \\"&&\\";
        case \\"&&\\":
          return isLogicalExpression(parent, {
            operator: \\"??\\"
          });
        case \\"??\\":
          return isLogicalExpression(parent) && parent.operator !== \\"??\\";
      }
    }
    function Identifier(node, parent, printStack) {
      if (node.name === \\"let\\") {
        const isFollowedByBracket = isMemberExpression(parent, {
          object: node,
          computed: true
        }) || isOptionalMemberExpression(parent, {
          object: node,
          computed: true,
          optional: false
        });
        return isFirstInContext(printStack, {
          expressionStatement: isFollowedByBracket,
          forHead: isFollowedByBracket,
          forInHead: isFollowedByBracket,
          forOfHead: true
        });
      }
      return node.name === \\"async\\" && isForOfStatement(parent) && node === parent.left;
    }
    function isFirstInContext(printStack, {
      expressionStatement = false,
      arrowBody = false,
      exportDefault = false,
      forHead = false,
      forInHead = false,
      forOfHead = false
    }) {
      let i = printStack.length - 1;
      let node = printStack[i];
      i--;
      let parent = printStack[i];
      while (i >= 0) {
        if (expressionStatement && isExpressionStatement(parent, {
          expression: node
        }) || exportDefault && isExportDefaultDeclaration(parent, {
          declaration: node
        }) || arrowBody && isArrowFunctionExpression(parent, {
          body: node
        }) || forHead && isForStatement(parent, {
          init: node
        }) || forInHead && isForInStatement(parent, {
          left: node
        }) || forOfHead && isForOfStatement(parent, {
          left: node
        })) {
          return true;
        }
        if (hasPostfixPart(node, parent) && !isNewExpression(parent) || isSequenceExpression(parent) && parent.expressions[0] === node || isConditional(parent, {
          test: node
        }) || isBinary(parent, {
          left: node
        }) || isAssignmentExpression(parent, {
          left: node
        })) {
          node = parent;
          i--;
          parent = printStack[i];
        } else {
          return false;
        }
      }
      return false;
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/node/index.js
var require_node2 = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/node/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.needsParens = needsParens;
    exports.needsWhitespace = needsWhitespace;
    exports.needsWhitespaceAfter = needsWhitespaceAfter;
    exports.needsWhitespaceBefore = needsWhitespaceBefore;
    var whitespace = require_whitespace();
    var parens = require_parentheses();
    var _t = require_lib2();
    var {
      FLIPPED_ALIAS_KEYS,
      isCallExpression,
      isExpressionStatement,
      isMemberExpression,
      isNewExpression
    } = _t;
    function expandAliases(obj) {
      const newObj = {};
      function add(type, func) {
        const fn = newObj[type];
        newObj[type] = fn ? function(node, parent, stack) {
          const result = fn(node, parent, stack);
          return result == null ? func(node, parent, stack) : result;
        } : func;
      }
      for (const type of Object.keys(obj)) {
        const aliases = FLIPPED_ALIAS_KEYS[type];
        if (aliases) {
          for (const alias of aliases) {
            add(alias, obj[type]);
          }
        } else {
          add(type, obj[type]);
        }
      }
      return newObj;
    }
    var expandedParens = expandAliases(parens);
    var expandedWhitespaceNodes = expandAliases(whitespace.nodes);
    var expandedWhitespaceList = expandAliases(whitespace.list);
    function find(obj, node, parent, printStack) {
      const fn = obj[node.type];
      return fn ? fn(node, parent, printStack) : null;
    }
    function isOrHasCallExpression(node) {
      if (isCallExpression(node)) {
        return true;
      }
      return isMemberExpression(node) && isOrHasCallExpression(node.object);
    }
    function needsWhitespace(node, parent, type) {
      if (!node)
        return 0;
      if (isExpressionStatement(node)) {
        node = node.expression;
      }
      let linesInfo = find(expandedWhitespaceNodes, node, parent);
      if (!linesInfo) {
        const items = find(expandedWhitespaceList, node, parent);
        if (items) {
          for (let i = 0; i < items.length; i++) {
            linesInfo = needsWhitespace(items[i], node, type);
            if (linesInfo)
              break;
          }
        }
      }
      if (typeof linesInfo === \\"object\\" && linesInfo !== null) {
        return linesInfo[type] || 0;
      }
      return 0;
    }
    function needsWhitespaceBefore(node, parent) {
      return needsWhitespace(node, parent, \\"before\\");
    }
    function needsWhitespaceAfter(node, parent) {
      return needsWhitespace(node, parent, \\"after\\");
    }
    function needsParens(node, parent, printStack) {
      if (!parent)
        return false;
      if (isNewExpression(parent) && parent.callee === node) {
        if (isOrHasCallExpression(node))
          return true;
      }
      return find(expandedParens, node, parent, printStack);
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/template-literals.js
var require_template_literals = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/template-literals.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.TaggedTemplateExpression = TaggedTemplateExpression;
    exports.TemplateElement = TemplateElement;
    exports.TemplateLiteral = TemplateLiteral;
    function TaggedTemplateExpression(node) {
      this.print(node.tag, node);
      this.print(node.typeParameters, node);
      this.print(node.quasi, node);
    }
    function TemplateElement(node, parent) {
      const isFirst = parent.quasis[0] === node;
      const isLast = parent.quasis[parent.quasis.length - 1] === node;
      const value = (isFirst ? \\"\`\\" : \\"}\\") + node.value.raw + (isLast ? \\"\`\\" : \\"\${\\");
      this.token(value);
    }
    function TemplateLiteral(node) {
      const quasis = node.quasis;
      for (let i = 0; i < quasis.length; i++) {
        this.print(quasis[i], node);
        if (i + 1 < quasis.length) {
          this.print(node.expressions[i], node);
        }
      }
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/expressions.js
var require_expressions = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/expressions.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;
    exports.AssignmentPattern = AssignmentPattern;
    exports.AwaitExpression = void 0;
    exports.BindExpression = BindExpression;
    exports.CallExpression = CallExpression;
    exports.ConditionalExpression = ConditionalExpression;
    exports.Decorator = Decorator;
    exports.DoExpression = DoExpression;
    exports.EmptyStatement = EmptyStatement;
    exports.ExpressionStatement = ExpressionStatement;
    exports.Import = Import;
    exports.MemberExpression = MemberExpression;
    exports.MetaProperty = MetaProperty;
    exports.ModuleExpression = ModuleExpression;
    exports.NewExpression = NewExpression;
    exports.OptionalCallExpression = OptionalCallExpression;
    exports.OptionalMemberExpression = OptionalMemberExpression;
    exports.ParenthesizedExpression = ParenthesizedExpression;
    exports.PrivateName = PrivateName;
    exports.SequenceExpression = SequenceExpression;
    exports.Super = Super;
    exports.ThisExpression = ThisExpression;
    exports.UnaryExpression = UnaryExpression;
    exports.UpdateExpression = UpdateExpression;
    exports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
    exports.YieldExpression = void 0;
    var _t = require_lib2();
    var n = require_node2();
    var {
      isCallExpression,
      isLiteral,
      isMemberExpression,
      isNewExpression
    } = _t;
    function UnaryExpression(node) {
      if (node.operator === \\"void\\" || node.operator === \\"delete\\" || node.operator === \\"typeof\\" || node.operator === \\"throw\\") {
        this.word(node.operator);
        this.space();
      } else {
        this.token(node.operator);
      }
      this.print(node.argument, node);
    }
    function DoExpression(node) {
      if (node.async) {
        this.word(\\"async\\");
        this.space();
      }
      this.word(\\"do\\");
      this.space();
      this.print(node.body, node);
    }
    function ParenthesizedExpression(node) {
      this.token(\\"(\\");
      this.print(node.expression, node);
      this.token(\\")\\");
    }
    function UpdateExpression(node) {
      if (node.prefix) {
        this.token(node.operator);
        this.print(node.argument, node);
      } else {
        this.startTerminatorless(true);
        this.print(node.argument, node);
        this.endTerminatorless();
        this.token(node.operator);
      }
    }
    function ConditionalExpression(node) {
      this.print(node.test, node);
      this.space();
      this.token(\\"?\\");
      this.space();
      this.print(node.consequent, node);
      this.space();
      this.token(\\":\\");
      this.space();
      this.print(node.alternate, node);
    }
    function NewExpression(node, parent) {
      this.word(\\"new\\");
      this.space();
      this.print(node.callee, node);
      if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression(parent, {
        callee: node
      }) && !isMemberExpression(parent) && !isNewExpression(parent)) {
        return;
      }
      this.print(node.typeArguments, node);
      this.print(node.typeParameters, node);
      if (node.optional) {
        this.token(\\"?.\\");
      }
      this.token(\\"(\\");
      this.printList(node.arguments, node);
      this.token(\\")\\");
    }
    function SequenceExpression(node) {
      this.printList(node.expressions, node);
    }
    function ThisExpression() {
      this.word(\\"this\\");
    }
    function Super() {
      this.word(\\"super\\");
    }
    function Decorator(node) {
      this.token(\\"@\\");
      this.print(node.expression, node);
      this.newline();
    }
    function OptionalMemberExpression(node) {
      this.print(node.object, node);
      if (!node.computed && isMemberExpression(node.property)) {
        throw new TypeError(\\"Got a MemberExpression for MemberExpression property\\");
      }
      let computed = node.computed;
      if (isLiteral(node.property) && typeof node.property.value === \\"number\\") {
        computed = true;
      }
      if (node.optional) {
        this.token(\\"?.\\");
      }
      if (computed) {
        this.token(\\"[\\");
        this.print(node.property, node);
        this.token(\\"]\\");
      } else {
        if (!node.optional) {
          this.token(\\".\\");
        }
        this.print(node.property, node);
      }
    }
    function OptionalCallExpression(node) {
      this.print(node.callee, node);
      this.print(node.typeArguments, node);
      this.print(node.typeParameters, node);
      if (node.optional) {
        this.token(\\"?.\\");
      }
      this.token(\\"(\\");
      this.printList(node.arguments, node);
      this.token(\\")\\");
    }
    function CallExpression(node) {
      this.print(node.callee, node);
      this.print(node.typeArguments, node);
      this.print(node.typeParameters, node);
      this.token(\\"(\\");
      this.printList(node.arguments, node);
      this.token(\\")\\");
    }
    function Import() {
      this.word(\\"import\\");
    }
    function buildYieldAwait(keyword) {
      return function(node) {
        this.word(keyword);
        if (node.delegate) {
          this.token(\\"*\\");
        }
        if (node.argument) {
          this.space();
          const terminatorState = this.startTerminatorless();
          this.print(node.argument, node);
          this.endTerminatorless(terminatorState);
        }
      };
    }
    var YieldExpression = buildYieldAwait(\\"yield\\");
    exports.YieldExpression = YieldExpression;
    var AwaitExpression = buildYieldAwait(\\"await\\");
    exports.AwaitExpression = AwaitExpression;
    function EmptyStatement() {
      this.semicolon(true);
    }
    function ExpressionStatement(node) {
      this.print(node.expression, node);
      this.semicolon();
    }
    function AssignmentPattern(node) {
      this.print(node.left, node);
      if (node.left.optional)
        this.token(\\"?\\");
      this.print(node.left.typeAnnotation, node);
      this.space();
      this.token(\\"=\\");
      this.space();
      this.print(node.right, node);
    }
    function AssignmentExpression(node, parent) {
      const parens = this.inForStatementInitCounter && node.operator === \\"in\\" && !n.needsParens(node, parent);
      if (parens) {
        this.token(\\"(\\");
      }
      this.print(node.left, node);
      this.space();
      if (node.operator === \\"in\\" || node.operator === \\"instanceof\\") {
        this.word(node.operator);
      } else {
        this.token(node.operator);
      }
      this.space();
      this.print(node.right, node);
      if (parens) {
        this.token(\\")\\");
      }
    }
    function BindExpression(node) {
      this.print(node.object, node);
      this.token(\\"::\\");
      this.print(node.callee, node);
    }
    function MemberExpression(node) {
      this.print(node.object, node);
      if (!node.computed && isMemberExpression(node.property)) {
        throw new TypeError(\\"Got a MemberExpression for MemberExpression property\\");
      }
      let computed = node.computed;
      if (isLiteral(node.property) && typeof node.property.value === \\"number\\") {
        computed = true;
      }
      if (computed) {
        this.token(\\"[\\");
        this.print(node.property, node);
        this.token(\\"]\\");
      } else {
        this.token(\\".\\");
        this.print(node.property, node);
      }
    }
    function MetaProperty(node) {
      this.print(node.meta, node);
      this.token(\\".\\");
      this.print(node.property, node);
    }
    function PrivateName(node) {
      this.token(\\"#\\");
      this.print(node.id, node);
    }
    function V8IntrinsicIdentifier(node) {
      this.token(\\"%\\");
      this.word(node.name);
    }
    function ModuleExpression(node) {
      this.word(\\"module\\");
      this.space();
      this.token(\\"{\\");
      if (node.body.body.length === 0) {
        this.token(\\"}\\");
      } else {
        this.newline();
        this.printSequence(node.body.body, node, {
          indent: true
        });
        this.rightBrace();
      }
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/statements.js
var require_statements = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/statements.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.BreakStatement = void 0;
    exports.CatchClause = CatchClause;
    exports.ContinueStatement = void 0;
    exports.DebuggerStatement = DebuggerStatement;
    exports.DoWhileStatement = DoWhileStatement;
    exports.ForOfStatement = exports.ForInStatement = void 0;
    exports.ForStatement = ForStatement;
    exports.IfStatement = IfStatement;
    exports.LabeledStatement = LabeledStatement;
    exports.ReturnStatement = void 0;
    exports.SwitchCase = SwitchCase;
    exports.SwitchStatement = SwitchStatement;
    exports.ThrowStatement = void 0;
    exports.TryStatement = TryStatement;
    exports.VariableDeclaration = VariableDeclaration;
    exports.VariableDeclarator = VariableDeclarator;
    exports.WhileStatement = WhileStatement;
    exports.WithStatement = WithStatement;
    var _t = require_lib2();
    var {
      isFor,
      isForStatement,
      isIfStatement,
      isStatement
    } = _t;
    function WithStatement(node) {
      this.word(\\"with\\");
      this.space();
      this.token(\\"(\\");
      this.print(node.object, node);
      this.token(\\")\\");
      this.printBlock(node);
    }
    function IfStatement(node) {
      this.word(\\"if\\");
      this.space();
      this.token(\\"(\\");
      this.print(node.test, node);
      this.token(\\")\\");
      this.space();
      const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
      if (needsBlock) {
        this.token(\\"{\\");
        this.newline();
        this.indent();
      }
      this.printAndIndentOnComments(node.consequent, node);
      if (needsBlock) {
        this.dedent();
        this.newline();
        this.token(\\"}\\");
      }
      if (node.alternate) {
        if (this.endsWith(125))
          this.space();
        this.word(\\"else\\");
        this.space();
        this.printAndIndentOnComments(node.alternate, node);
      }
    }
    function getLastStatement(statement) {
      if (!isStatement(statement.body))
        return statement;
      return getLastStatement(statement.body);
    }
    function ForStatement(node) {
      this.word(\\"for\\");
      this.space();
      this.token(\\"(\\");
      this.inForStatementInitCounter++;
      this.print(node.init, node);
      this.inForStatementInitCounter--;
      this.token(\\";\\");
      if (node.test) {
        this.space();
        this.print(node.test, node);
      }
      this.token(\\";\\");
      if (node.update) {
        this.space();
        this.print(node.update, node);
      }
      this.token(\\")\\");
      this.printBlock(node);
    }
    function WhileStatement(node) {
      this.word(\\"while\\");
      this.space();
      this.token(\\"(\\");
      this.print(node.test, node);
      this.token(\\")\\");
      this.printBlock(node);
    }
    var buildForXStatement = function(op) {
      return function(node) {
        this.word(\\"for\\");
        this.space();
        if (op === \\"of\\" && node.await) {
          this.word(\\"await\\");
          this.space();
        }
        this.token(\\"(\\");
        this.print(node.left, node);
        this.space();
        this.word(op);
        this.space();
        this.print(node.right, node);
        this.token(\\")\\");
        this.printBlock(node);
      };
    };
    var ForInStatement = buildForXStatement(\\"in\\");
    exports.ForInStatement = ForInStatement;
    var ForOfStatement = buildForXStatement(\\"of\\");
    exports.ForOfStatement = ForOfStatement;
    function DoWhileStatement(node) {
      this.word(\\"do\\");
      this.space();
      this.print(node.body, node);
      this.space();
      this.word(\\"while\\");
      this.space();
      this.token(\\"(\\");
      this.print(node.test, node);
      this.token(\\")\\");
      this.semicolon();
    }
    function buildLabelStatement(prefix, key = \\"label\\") {
      return function(node) {
        this.word(prefix);
        const label = node[key];
        if (label) {
          this.space();
          const isLabel = key == \\"label\\";
          const terminatorState = this.startTerminatorless(isLabel);
          this.print(label, node);
          this.endTerminatorless(terminatorState);
        }
        this.semicolon();
      };
    }
    var ContinueStatement = buildLabelStatement(\\"continue\\");
    exports.ContinueStatement = ContinueStatement;
    var ReturnStatement = buildLabelStatement(\\"return\\", \\"argument\\");
    exports.ReturnStatement = ReturnStatement;
    var BreakStatement = buildLabelStatement(\\"break\\");
    exports.BreakStatement = BreakStatement;
    var ThrowStatement = buildLabelStatement(\\"throw\\", \\"argument\\");
    exports.ThrowStatement = ThrowStatement;
    function LabeledStatement(node) {
      this.print(node.label, node);
      this.token(\\":\\");
      this.space();
      this.print(node.body, node);
    }
    function TryStatement(node) {
      this.word(\\"try\\");
      this.space();
      this.print(node.block, node);
      this.space();
      if (node.handlers) {
        this.print(node.handlers[0], node);
      } else {
        this.print(node.handler, node);
      }
      if (node.finalizer) {
        this.space();
        this.word(\\"finally\\");
        this.space();
        this.print(node.finalizer, node);
      }
    }
    function CatchClause(node) {
      this.word(\\"catch\\");
      this.space();
      if (node.param) {
        this.token(\\"(\\");
        this.print(node.param, node);
        this.print(node.param.typeAnnotation, node);
        this.token(\\")\\");
        this.space();
      }
      this.print(node.body, node);
    }
    function SwitchStatement(node) {
      this.word(\\"switch\\");
      this.space();
      this.token(\\"(\\");
      this.print(node.discriminant, node);
      this.token(\\")\\");
      this.space();
      this.token(\\"{\\");
      this.printSequence(node.cases, node, {
        indent: true,
        addNewlines(leading, cas) {
          if (!leading && node.cases[node.cases.length - 1] === cas)
            return -1;
        }
      });
      this.token(\\"}\\");
    }
    function SwitchCase(node) {
      if (node.test) {
        this.word(\\"case\\");
        this.space();
        this.print(node.test, node);
        this.token(\\":\\");
      } else {
        this.word(\\"default\\");
        this.token(\\":\\");
      }
      if (node.consequent.length) {
        this.newline();
        this.printSequence(node.consequent, node, {
          indent: true
        });
      }
    }
    function DebuggerStatement() {
      this.word(\\"debugger\\");
      this.semicolon();
    }
    function variableDeclarationIndent() {
      this.token(\\",\\");
      this.newline();
      if (this.endsWith(10)) {
        for (let i = 0; i < 4; i++)
          this.space(true);
      }
    }
    function constDeclarationIndent() {
      this.token(\\",\\");
      this.newline();
      if (this.endsWith(10)) {
        for (let i = 0; i < 6; i++)
          this.space(true);
      }
    }
    function VariableDeclaration(node, parent) {
      if (node.declare) {
        this.word(\\"declare\\");
        this.space();
      }
      this.word(node.kind);
      this.space();
      let hasInits = false;
      if (!isFor(parent)) {
        for (const declar of node.declarations) {
          if (declar.init) {
            hasInits = true;
          }
        }
      }
      let separator;
      if (hasInits) {
        separator = node.kind === \\"const\\" ? constDeclarationIndent : variableDeclarationIndent;
      }
      this.printList(node.declarations, node, {
        separator
      });
      if (isFor(parent)) {
        if (isForStatement(parent)) {
          if (parent.init === node)
            return;
        } else {
          if (parent.left === node)
            return;
        }
      }
      this.semicolon();
    }
    function VariableDeclarator(node) {
      this.print(node.id, node);
      if (node.definite)
        this.token(\\"!\\");
      this.print(node.id.typeAnnotation, node);
      if (node.init) {
        this.space();
        this.token(\\"=\\");
        this.space();
        this.print(node.init, node);
      }
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/classes.js
var require_classes = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/classes.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.ClassBody = ClassBody;
    exports.ClassExpression = exports.ClassDeclaration = ClassDeclaration;
    exports.ClassMethod = ClassMethod;
    exports.ClassPrivateMethod = ClassPrivateMethod;
    exports.ClassPrivateProperty = ClassPrivateProperty;
    exports.ClassProperty = ClassProperty;
    exports.StaticBlock = StaticBlock;
    exports._classMethodHead = _classMethodHead;
    var _t = require_lib2();
    var {
      isExportDefaultDeclaration,
      isExportNamedDeclaration
    } = _t;
    function ClassDeclaration(node, parent) {
      if (!this.format.decoratorsBeforeExport || !isExportDefaultDeclaration(parent) && !isExportNamedDeclaration(parent)) {
        this.printJoin(node.decorators, node);
      }
      if (node.declare) {
        this.word(\\"declare\\");
        this.space();
      }
      if (node.abstract) {
        this.word(\\"abstract\\");
        this.space();
      }
      this.word(\\"class\\");
      this.printInnerComments(node);
      if (node.id) {
        this.space();
        this.print(node.id, node);
      }
      this.print(node.typeParameters, node);
      if (node.superClass) {
        this.space();
        this.word(\\"extends\\");
        this.space();
        this.print(node.superClass, node);
        this.print(node.superTypeParameters, node);
      }
      if (node.implements) {
        this.space();
        this.word(\\"implements\\");
        this.space();
        this.printList(node.implements, node);
      }
      this.space();
      this.print(node.body, node);
    }
    function ClassBody(node) {
      this.token(\\"{\\");
      this.printInnerComments(node);
      if (node.body.length === 0) {
        this.token(\\"}\\");
      } else {
        this.newline();
        this.indent();
        this.printSequence(node.body, node);
        this.dedent();
        if (!this.endsWith(10))
          this.newline();
        this.rightBrace();
      }
    }
    function ClassProperty(node) {
      this.printJoin(node.decorators, node);
      this.source(\\"end\\", node.key.loc);
      this.tsPrintClassMemberModifiers(node, true);
      if (node.computed) {
        this.token(\\"[\\");
        this.print(node.key, node);
        this.token(\\"]\\");
      } else {
        this._variance(node);
        this.print(node.key, node);
      }
      if (node.optional) {
        this.token(\\"?\\");
      }
      if (node.definite) {
        this.token(\\"!\\");
      }
      this.print(node.typeAnnotation, node);
      if (node.value) {
        this.space();
        this.token(\\"=\\");
        this.space();
        this.print(node.value, node);
      }
      this.semicolon();
    }
    function ClassPrivateProperty(node) {
      this.printJoin(node.decorators, node);
      if (node.static) {
        this.word(\\"static\\");
        this.space();
      }
      this.print(node.key, node);
      this.print(node.typeAnnotation, node);
      if (node.value) {
        this.space();
        this.token(\\"=\\");
        this.space();
        this.print(node.value, node);
      }
      this.semicolon();
    }
    function ClassMethod(node) {
      this._classMethodHead(node);
      this.space();
      this.print(node.body, node);
    }
    function ClassPrivateMethod(node) {
      this._classMethodHead(node);
      this.space();
      this.print(node.body, node);
    }
    function _classMethodHead(node) {
      this.printJoin(node.decorators, node);
      this.source(\\"end\\", node.key.loc);
      this.tsPrintClassMemberModifiers(node, false);
      this._methodHead(node);
    }
    function StaticBlock(node) {
      this.word(\\"static\\");
      this.space();
      this.token(\\"{\\");
      if (node.body.length === 0) {
        this.token(\\"}\\");
      } else {
        this.newline();
        this.printSequence(node.body, node, {
          indent: true
        });
        this.rightBrace();
      }
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/methods.js
var require_methods = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/methods.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.ArrowFunctionExpression = ArrowFunctionExpression;
    exports.FunctionDeclaration = exports.FunctionExpression = FunctionExpression;
    exports._functionHead = _functionHead;
    exports._methodHead = _methodHead;
    exports._param = _param;
    exports._parameters = _parameters;
    exports._params = _params;
    exports._predicate = _predicate;
    var _t = require_lib2();
    var {
      isIdentifier
    } = _t;
    function _params(node) {
      this.print(node.typeParameters, node);
      this.token(\\"(\\");
      this._parameters(node.params, node);
      this.token(\\")\\");
      this.print(node.returnType, node);
    }
    function _parameters(parameters, parent) {
      for (let i = 0; i < parameters.length; i++) {
        this._param(parameters[i], parent);
        if (i < parameters.length - 1) {
          this.token(\\",\\");
          this.space();
        }
      }
    }
    function _param(parameter, parent) {
      this.printJoin(parameter.decorators, parameter);
      this.print(parameter, parent);
      if (parameter.optional)
        this.token(\\"?\\");
      this.print(parameter.typeAnnotation, parameter);
    }
    function _methodHead(node) {
      const kind = node.kind;
      const key = node.key;
      if (kind === \\"get\\" || kind === \\"set\\") {
        this.word(kind);
        this.space();
      }
      if (node.async) {
        this._catchUp(\\"start\\", key.loc);
        this.word(\\"async\\");
        this.space();
      }
      if (kind === \\"method\\" || kind === \\"init\\") {
        if (node.generator) {
          this.token(\\"*\\");
        }
      }
      if (node.computed) {
        this.token(\\"[\\");
        this.print(key, node);
        this.token(\\"]\\");
      } else {
        this.print(key, node);
      }
      if (node.optional) {
        this.token(\\"?\\");
      }
      this._params(node);
    }
    function _predicate(node) {
      if (node.predicate) {
        if (!node.returnType) {
          this.token(\\":\\");
        }
        this.space();
        this.print(node.predicate, node);
      }
    }
    function _functionHead(node) {
      if (node.async) {
        this.word(\\"async\\");
        this.space();
      }
      this.word(\\"function\\");
      if (node.generator)
        this.token(\\"*\\");
      this.printInnerComments(node);
      this.space();
      if (node.id) {
        this.print(node.id, node);
      }
      this._params(node);
      this._predicate(node);
    }
    function FunctionExpression(node) {
      this._functionHead(node);
      this.space();
      this.print(node.body, node);
    }
    function ArrowFunctionExpression(node) {
      if (node.async) {
        this.word(\\"async\\");
        this.space();
      }
      const firstParam = node.params[0];
      if (!this.format.retainLines && !this.format.auxiliaryCommentBefore && !this.format.auxiliaryCommentAfter && node.params.length === 1 && isIdentifier(firstParam) && !hasTypesOrComments(node, firstParam)) {
        this.print(firstParam, node);
      } else {
        this._params(node);
      }
      this._predicate(node);
      this.space();
      this.token(\\"=>\\");
      this.space();
      this.print(node.body, node);
    }
    function hasTypesOrComments(node, param) {
      var _param$leadingComment, _param$trailingCommen;
      return !!(node.typeParameters || node.returnType || node.predicate || param.typeAnnotation || param.optional || (_param$leadingComment = param.leadingComments) != null && _param$leadingComment.length || (_param$trailingCommen = param.trailingComments) != null && _param$trailingCommen.length);
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/modules.js
var require_modules = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/modules.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.ExportAllDeclaration = ExportAllDeclaration;
    exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
    exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
    exports.ExportNamedDeclaration = ExportNamedDeclaration;
    exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
    exports.ExportSpecifier = ExportSpecifier;
    exports.ImportAttribute = ImportAttribute;
    exports.ImportDeclaration = ImportDeclaration;
    exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
    exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
    exports.ImportSpecifier = ImportSpecifier;
    var _t = require_lib2();
    var {
      isClassDeclaration,
      isExportDefaultSpecifier,
      isExportNamespaceSpecifier,
      isImportDefaultSpecifier,
      isImportNamespaceSpecifier,
      isStatement
    } = _t;
    function ImportSpecifier(node) {
      if (node.importKind === \\"type\\" || node.importKind === \\"typeof\\") {
        this.word(node.importKind);
        this.space();
      }
      this.print(node.imported, node);
      if (node.local && node.local.name !== node.imported.name) {
        this.space();
        this.word(\\"as\\");
        this.space();
        this.print(node.local, node);
      }
    }
    function ImportDefaultSpecifier(node) {
      this.print(node.local, node);
    }
    function ExportDefaultSpecifier(node) {
      this.print(node.exported, node);
    }
    function ExportSpecifier(node) {
      if (node.exportKind === \\"type\\") {
        this.word(\\"type\\");
        this.space();
      }
      this.print(node.local, node);
      if (node.exported && node.local.name !== node.exported.name) {
        this.space();
        this.word(\\"as\\");
        this.space();
        this.print(node.exported, node);
      }
    }
    function ExportNamespaceSpecifier(node) {
      this.token(\\"*\\");
      this.space();
      this.word(\\"as\\");
      this.space();
      this.print(node.exported, node);
    }
    function ExportAllDeclaration(node) {
      this.word(\\"export\\");
      this.space();
      if (node.exportKind === \\"type\\") {
        this.word(\\"type\\");
        this.space();
      }
      this.token(\\"*\\");
      this.space();
      this.word(\\"from\\");
      this.space();
      this.print(node.source, node);
      this.printAssertions(node);
      this.semicolon();
    }
    function ExportNamedDeclaration(node) {
      if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {
        this.printJoin(node.declaration.decorators, node);
      }
      this.word(\\"export\\");
      this.space();
      ExportDeclaration.apply(this, arguments);
    }
    function ExportDefaultDeclaration(node) {
      if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {
        this.printJoin(node.declaration.decorators, node);
      }
      this.word(\\"export\\");
      this.space();
      this.word(\\"default\\");
      this.space();
      ExportDeclaration.apply(this, arguments);
    }
    function ExportDeclaration(node) {
      if (node.declaration) {
        const declar = node.declaration;
        this.print(declar, node);
        if (!isStatement(declar))
          this.semicolon();
      } else {
        if (node.exportKind === \\"type\\") {
          this.word(\\"type\\");
          this.space();
        }
        const specifiers = node.specifiers.slice(0);
        let hasSpecial = false;
        for (; ; ) {
          const first = specifiers[0];
          if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {
            hasSpecial = true;
            this.print(specifiers.shift(), node);
            if (specifiers.length) {
              this.token(\\",\\");
              this.space();
            }
          } else {
            break;
          }
        }
        if (specifiers.length || !specifiers.length && !hasSpecial) {
          this.token(\\"{\\");
          if (specifiers.length) {
            this.space();
            this.printList(specifiers, node);
            this.space();
          }
          this.token(\\"}\\");
        }
        if (node.source) {
          this.space();
          this.word(\\"from\\");
          this.space();
          this.print(node.source, node);
          this.printAssertions(node);
        }
        this.semicolon();
      }
    }
    function ImportDeclaration(node) {
      this.word(\\"import\\");
      this.space();
      if (node.importKind === \\"type\\" || node.importKind === \\"typeof\\") {
        this.word(node.importKind);
        this.space();
      }
      const specifiers = node.specifiers.slice(0);
      if (specifiers != null && specifiers.length) {
        for (; ; ) {
          const first = specifiers[0];
          if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {
            this.print(specifiers.shift(), node);
            if (specifiers.length) {
              this.token(\\",\\");
              this.space();
            }
          } else {
            break;
          }
        }
        if (specifiers.length) {
          this.token(\\"{\\");
          this.space();
          this.printList(specifiers, node);
          this.space();
          this.token(\\"}\\");
        }
        this.space();
        this.word(\\"from\\");
        this.space();
      }
      this.print(node.source, node);
      this.printAssertions(node);
      {
        var _node$attributes;
        if ((_node$attributes = node.attributes) != null && _node$attributes.length) {
          this.space();
          this.word(\\"with\\");
          this.space();
          this.printList(node.attributes, node);
        }
      }
      this.semicolon();
    }
    function ImportAttribute(node) {
      this.print(node.key);
      this.token(\\":\\");
      this.space();
      this.print(node.value);
    }
    function ImportNamespaceSpecifier(node) {
      this.token(\\"*\\");
      this.space();
      this.word(\\"as\\");
      this.space();
      this.print(node.local, node);
    }
  }
});

// node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js
var require_jsesc = __commonJS({
  \\"node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js\\"(exports, module2) {
    \\"use strict\\";
    var object = {};
    var hasOwnProperty = object.hasOwnProperty;
    var forOwn = (object2, callback) => {
      for (const key in object2) {
        if (hasOwnProperty.call(object2, key)) {
          callback(key, object2[key]);
        }
      }
    };
    var extend = (destination, source) => {
      if (!source) {
        return destination;
      }
      forOwn(source, (key, value) => {
        destination[key] = value;
      });
      return destination;
    };
    var forEach = (array, callback) => {
      const length = array.length;
      let index = -1;
      while (++index < length) {
        callback(array[index]);
      }
    };
    var toString = object.toString;
    var isArray = Array.isArray;
    var isBuffer = Buffer.isBuffer;
    var isObject = (value) => {
      return toString.call(value) == \\"[object Object]\\";
    };
    var isString = (value) => {
      return typeof value == \\"string\\" || toString.call(value) == \\"[object String]\\";
    };
    var isNumber = (value) => {
      return typeof value == \\"number\\" || toString.call(value) == \\"[object Number]\\";
    };
    var isFunction = (value) => {
      return typeof value == \\"function\\";
    };
    var isMap = (value) => {
      return toString.call(value) == \\"[object Map]\\";
    };
    var isSet = (value) => {
      return toString.call(value) == \\"[object Set]\\";
    };
    var singleEscapes = {
      '\\"': '\\\\\\\\\\"',
      \\"'\\": \\"\\\\\\\\'\\",
      \\"\\\\\\\\\\": \\"\\\\\\\\\\\\\\\\\\",
      \\"\\\\b\\": \\"\\\\\\\\b\\",
      \\"\\\\f\\": \\"\\\\\\\\f\\",
      \\"\\\\n\\": \\"\\\\\\\\n\\",
      \\"\\\\r\\": \\"\\\\\\\\r\\",
      \\"	\\": \\"\\\\\\\\t\\"
    };
    var regexSingleEscape = /[\\"'\\\\\\\\\\\\b\\\\f\\\\n\\\\r\\\\t]/;
    var regexDigit = /[0-9]/;
    var regexWhitelist = /[ !#-&\\\\(-\\\\[\\\\]-_a-~]/;
    var jsesc = (argument, options) => {
      const increaseIndentation = () => {
        oldIndent = indent;
        ++options.indentLevel;
        indent = options.indent.repeat(options.indentLevel);
      };
      const defaults = {
        \\"escapeEverything\\": false,
        \\"minimal\\": false,
        \\"isScriptContext\\": false,
        \\"quotes\\": \\"single\\",
        \\"wrap\\": false,
        \\"es6\\": false,
        \\"json\\": false,
        \\"compact\\": true,
        \\"lowercaseHex\\": false,
        \\"numbers\\": \\"decimal\\",
        \\"indent\\": \\"	\\",
        \\"indentLevel\\": 0,
        \\"__inline1__\\": false,
        \\"__inline2__\\": false
      };
      const json = options && options.json;
      if (json) {
        defaults.quotes = \\"double\\";
        defaults.wrap = true;
      }
      options = extend(defaults, options);
      if (options.quotes != \\"single\\" && options.quotes != \\"double\\" && options.quotes != \\"backtick\\") {
        options.quotes = \\"single\\";
      }
      const quote = options.quotes == \\"double\\" ? '\\"' : options.quotes == \\"backtick\\" ? \\"\`\\" : \\"'\\";
      const compact = options.compact;
      const lowercaseHex = options.lowercaseHex;
      let indent = options.indent.repeat(options.indentLevel);
      let oldIndent = \\"\\";
      const inline1 = options.__inline1__;
      const inline2 = options.__inline2__;
      const newLine = compact ? \\"\\" : \\"\\\\n\\";
      let result;
      let isEmpty = true;
      const useBinNumbers = options.numbers == \\"binary\\";
      const useOctNumbers = options.numbers == \\"octal\\";
      const useDecNumbers = options.numbers == \\"decimal\\";
      const useHexNumbers = options.numbers == \\"hexadecimal\\";
      if (json && argument && isFunction(argument.toJSON)) {
        argument = argument.toJSON();
      }
      if (!isString(argument)) {
        if (isMap(argument)) {
          if (argument.size == 0) {
            return \\"new Map()\\";
          }
          if (!compact) {
            options.__inline1__ = true;
            options.__inline2__ = false;
          }
          return \\"new Map(\\" + jsesc(Array.from(argument), options) + \\")\\";
        }
        if (isSet(argument)) {
          if (argument.size == 0) {
            return \\"new Set()\\";
          }
          return \\"new Set(\\" + jsesc(Array.from(argument), options) + \\")\\";
        }
        if (isBuffer(argument)) {
          if (argument.length == 0) {
            return \\"Buffer.from([])\\";
          }
          return \\"Buffer.from(\\" + jsesc(Array.from(argument), options) + \\")\\";
        }
        if (isArray(argument)) {
          result = [];
          options.wrap = true;
          if (inline1) {
            options.__inline1__ = false;
            options.__inline2__ = true;
          }
          if (!inline2) {
            increaseIndentation();
          }
          forEach(argument, (value) => {
            isEmpty = false;
            if (inline2) {
              options.__inline2__ = false;
            }
            result.push((compact || inline2 ? \\"\\" : indent) + jsesc(value, options));
          });
          if (isEmpty) {
            return \\"[]\\";
          }
          if (inline2) {
            return \\"[\\" + result.join(\\", \\") + \\"]\\";
          }
          return \\"[\\" + newLine + result.join(\\",\\" + newLine) + newLine + (compact ? \\"\\" : oldIndent) + \\"]\\";
        } else if (isNumber(argument)) {
          if (json) {
            return JSON.stringify(argument);
          }
          if (useDecNumbers) {
            return String(argument);
          }
          if (useHexNumbers) {
            let hexadecimal = argument.toString(16);
            if (!lowercaseHex) {
              hexadecimal = hexadecimal.toUpperCase();
            }
            return \\"0x\\" + hexadecimal;
          }
          if (useBinNumbers) {
            return \\"0b\\" + argument.toString(2);
          }
          if (useOctNumbers) {
            return \\"0o\\" + argument.toString(8);
          }
        } else if (!isObject(argument)) {
          if (json) {
            return JSON.stringify(argument) || \\"null\\";
          }
          return String(argument);
        } else {
          result = [];
          options.wrap = true;
          increaseIndentation();
          forOwn(argument, (key, value) => {
            isEmpty = false;
            result.push((compact ? \\"\\" : indent) + jsesc(key, options) + \\":\\" + (compact ? \\"\\" : \\" \\") + jsesc(value, options));
          });
          if (isEmpty) {
            return \\"{}\\";
          }
          return \\"{\\" + newLine + result.join(\\",\\" + newLine) + newLine + (compact ? \\"\\" : oldIndent) + \\"}\\";
        }
      }
      const string = argument;
      let index = -1;
      const length = string.length;
      result = \\"\\";
      while (++index < length) {
        const character = string.charAt(index);
        if (options.es6) {
          const first = string.charCodeAt(index);
          if (first >= 55296 && first <= 56319 && length > index + 1) {
            const second = string.charCodeAt(index + 1);
            if (second >= 56320 && second <= 57343) {
              const codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
              let hexadecimal2 = codePoint.toString(16);
              if (!lowercaseHex) {
                hexadecimal2 = hexadecimal2.toUpperCase();
              }
              result += \\"\\\\\\\\u{\\" + hexadecimal2 + \\"}\\";
              ++index;
              continue;
            }
          }
        }
        if (!options.escapeEverything) {
          if (regexWhitelist.test(character)) {
            result += character;
            continue;
          }
          if (character == '\\"') {
            result += quote == character ? '\\\\\\\\\\"' : character;
            continue;
          }
          if (character == \\"\`\\") {
            result += quote == character ? \\"\\\\\\\\\`\\" : character;
            continue;
          }
          if (character == \\"'\\") {
            result += quote == character ? \\"\\\\\\\\'\\" : character;
            continue;
          }
        }
        if (character == \\"\\\\0\\" && !json && !regexDigit.test(string.charAt(index + 1))) {
          result += \\"\\\\\\\\0\\";
          continue;
        }
        if (regexSingleEscape.test(character)) {
          result += singleEscapes[character];
          continue;
        }
        const charCode = character.charCodeAt(0);
        if (options.minimal && charCode != 8232 && charCode != 8233) {
          result += character;
          continue;
        }
        let hexadecimal = charCode.toString(16);
        if (!lowercaseHex) {
          hexadecimal = hexadecimal.toUpperCase();
        }
        const longhand = hexadecimal.length > 2 || json;
        const escaped = \\"\\\\\\\\\\" + (longhand ? \\"u\\" : \\"x\\") + (\\"0000\\" + hexadecimal).slice(longhand ? -4 : -2);
        result += escaped;
        continue;
      }
      if (options.wrap) {
        result = quote + result + quote;
      }
      if (quote == \\"\`\\") {
        result = result.replace(/\\\\$\\\\{/g, \\"\\\\\\\\\${\\");
      }
      if (options.isScriptContext) {
        return result.replace(/<\\\\/(script|style)/gi, \\"<\\\\\\\\/$1\\").replace(/<!--/g, json ? \\"\\\\\\\\u003C!--\\" : \\"\\\\\\\\x3C!--\\");
      }
      return result;
    };
    jsesc.version = \\"2.5.2\\";
    module2.exports = jsesc;
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/types.js
var require_types = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/types.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.ArgumentPlaceholder = ArgumentPlaceholder;
    exports.ArrayPattern = exports.ArrayExpression = ArrayExpression;
    exports.BigIntLiteral = BigIntLiteral;
    exports.BooleanLiteral = BooleanLiteral;
    exports.DecimalLiteral = DecimalLiteral;
    exports.Identifier = Identifier;
    exports.NullLiteral = NullLiteral;
    exports.NumericLiteral = NumericLiteral;
    exports.ObjectPattern = exports.ObjectExpression = ObjectExpression;
    exports.ObjectMethod = ObjectMethod;
    exports.ObjectProperty = ObjectProperty;
    exports.PipelineBareFunction = PipelineBareFunction;
    exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;
    exports.PipelineTopicExpression = PipelineTopicExpression;
    exports.RecordExpression = RecordExpression;
    exports.RegExpLiteral = RegExpLiteral;
    exports.SpreadElement = exports.RestElement = RestElement;
    exports.StringLiteral = StringLiteral;
    exports.TopicReference = TopicReference;
    exports.TupleExpression = TupleExpression;
    var _t = require_lib2();
    var _jsesc = require_jsesc();
    var {
      isAssignmentPattern,
      isIdentifier
    } = _t;
    function Identifier(node) {
      this.exactSource(node.loc, () => {
        this.word(node.name);
      });
    }
    function ArgumentPlaceholder() {
      this.token(\\"?\\");
    }
    function RestElement(node) {
      this.token(\\"...\\");
      this.print(node.argument, node);
    }
    function ObjectExpression(node) {
      const props = node.properties;
      this.token(\\"{\\");
      this.printInnerComments(node);
      if (props.length) {
        this.space();
        this.printList(props, node, {
          indent: true,
          statement: true
        });
        this.space();
      }
      this.token(\\"}\\");
    }
    function ObjectMethod(node) {
      this.printJoin(node.decorators, node);
      this._methodHead(node);
      this.space();
      this.print(node.body, node);
    }
    function ObjectProperty(node) {
      this.printJoin(node.decorators, node);
      if (node.computed) {
        this.token(\\"[\\");
        this.print(node.key, node);
        this.token(\\"]\\");
      } else {
        if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) {
          this.print(node.value, node);
          return;
        }
        this.print(node.key, node);
        if (node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) {
          return;
        }
      }
      this.token(\\":\\");
      this.space();
      this.print(node.value, node);
    }
    function ArrayExpression(node) {
      const elems = node.elements;
      const len = elems.length;
      this.token(\\"[\\");
      this.printInnerComments(node);
      for (let i = 0; i < elems.length; i++) {
        const elem = elems[i];
        if (elem) {
          if (i > 0)
            this.space();
          this.print(elem, node);
          if (i < len - 1)
            this.token(\\",\\");
        } else {
          this.token(\\",\\");
        }
      }
      this.token(\\"]\\");
    }
    function RecordExpression(node) {
      const props = node.properties;
      let startToken;
      let endToken;
      if (this.format.recordAndTupleSyntaxType === \\"bar\\") {
        startToken = \\"{|\\";
        endToken = \\"|}\\";
      } else if (this.format.recordAndTupleSyntaxType === \\"hash\\") {
        startToken = \\"#{\\";
        endToken = \\"}\\";
      } else {
        throw new Error(\`The \\"recordAndTupleSyntaxType\\" generator option must be \\"bar\\" or \\"hash\\" (\${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).\`);
      }
      this.token(startToken);
      this.printInnerComments(node);
      if (props.length) {
        this.space();
        this.printList(props, node, {
          indent: true,
          statement: true
        });
        this.space();
      }
      this.token(endToken);
    }
    function TupleExpression(node) {
      const elems = node.elements;
      const len = elems.length;
      let startToken;
      let endToken;
      if (this.format.recordAndTupleSyntaxType === \\"bar\\") {
        startToken = \\"[|\\";
        endToken = \\"|]\\";
      } else if (this.format.recordAndTupleSyntaxType === \\"hash\\") {
        startToken = \\"#[\\";
        endToken = \\"]\\";
      } else {
        throw new Error(\`\${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type\`);
      }
      this.token(startToken);
      this.printInnerComments(node);
      for (let i = 0; i < elems.length; i++) {
        const elem = elems[i];
        if (elem) {
          if (i > 0)
            this.space();
          this.print(elem, node);
          if (i < len - 1)
            this.token(\\",\\");
        }
      }
      this.token(endToken);
    }
    function RegExpLiteral(node) {
      this.word(\`/\${node.pattern}/\${node.flags}\`);
    }
    function BooleanLiteral(node) {
      this.word(node.value ? \\"true\\" : \\"false\\");
    }
    function NullLiteral() {
      this.word(\\"null\\");
    }
    function NumericLiteral(node) {
      const raw = this.getPossibleRaw(node);
      const opts = this.format.jsescOption;
      const value = node.value + \\"\\";
      if (opts.numbers) {
        this.number(_jsesc(node.value, opts));
      } else if (raw == null) {
        this.number(value);
      } else if (this.format.minified) {
        this.number(raw.length < value.length ? raw : value);
      } else {
        this.number(raw);
      }
    }
    function StringLiteral(node) {
      const raw = this.getPossibleRaw(node);
      if (!this.format.minified && raw != null) {
        this.token(raw);
        return;
      }
      const val = _jsesc(node.value, Object.assign(this.format.jsescOption, this.format.jsonCompatibleStrings && {
        json: true
      }));
      return this.token(val);
    }
    function BigIntLiteral(node) {
      const raw = this.getPossibleRaw(node);
      if (!this.format.minified && raw != null) {
        this.word(raw);
        return;
      }
      this.word(node.value + \\"n\\");
    }
    function DecimalLiteral(node) {
      const raw = this.getPossibleRaw(node);
      if (!this.format.minified && raw != null) {
        this.word(raw);
        return;
      }
      this.word(node.value + \\"m\\");
    }
    var validTopicTokenSet = /* @__PURE__ */ new Set([\\"^\\", \\"%\\", \\"#\\"]);
    function TopicReference() {
      const {
        topicToken
      } = this.format;
      if (validTopicTokenSet.has(topicToken)) {
        this.token(topicToken);
      } else {
        const givenTopicTokenJSON = JSON.stringify(topicToken);
        const validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
        throw new Error(\`The \\"topicToken\\" generator option must be one of \${validTopics.join(\\", \\")} (\${givenTopicTokenJSON} received instead).\`);
      }
    }
    function PipelineTopicExpression(node) {
      this.print(node.expression, node);
    }
    function PipelineBareFunction(node) {
      this.print(node.callee, node);
    }
    function PipelinePrimaryTopicReference() {
      this.token(\\"#\\");
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/flow.js
var require_flow2 = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/flow.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.AnyTypeAnnotation = AnyTypeAnnotation;
    exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
    exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
    exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
    exports.DeclareClass = DeclareClass;
    exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
    exports.DeclareExportDeclaration = DeclareExportDeclaration;
    exports.DeclareFunction = DeclareFunction;
    exports.DeclareInterface = DeclareInterface;
    exports.DeclareModule = DeclareModule;
    exports.DeclareModuleExports = DeclareModuleExports;
    exports.DeclareOpaqueType = DeclareOpaqueType;
    exports.DeclareTypeAlias = DeclareTypeAlias;
    exports.DeclareVariable = DeclareVariable;
    exports.DeclaredPredicate = DeclaredPredicate;
    exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
    exports.EnumBooleanBody = EnumBooleanBody;
    exports.EnumBooleanMember = EnumBooleanMember;
    exports.EnumDeclaration = EnumDeclaration;
    exports.EnumDefaultedMember = EnumDefaultedMember;
    exports.EnumNumberBody = EnumNumberBody;
    exports.EnumNumberMember = EnumNumberMember;
    exports.EnumStringBody = EnumStringBody;
    exports.EnumStringMember = EnumStringMember;
    exports.EnumSymbolBody = EnumSymbolBody;
    exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
    exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
    exports.FunctionTypeParam = FunctionTypeParam;
    exports.IndexedAccessType = IndexedAccessType;
    exports.InferredPredicate = InferredPredicate;
    exports.InterfaceDeclaration = InterfaceDeclaration;
    exports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;
    exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
    exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
    exports.MixedTypeAnnotation = MixedTypeAnnotation;
    exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
    exports.NullableTypeAnnotation = NullableTypeAnnotation;
    Object.defineProperty(exports, \\"NumberLiteralTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _types2.NumericLiteral;
      }
    });
    exports.NumberTypeAnnotation = NumberTypeAnnotation;
    exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
    exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
    exports.ObjectTypeIndexer = ObjectTypeIndexer;
    exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
    exports.ObjectTypeProperty = ObjectTypeProperty;
    exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
    exports.OpaqueType = OpaqueType;
    exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
    exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
    Object.defineProperty(exports, \\"StringLiteralTypeAnnotation\\", {
      enumerable: true,
      get: function() {
        return _types2.StringLiteral;
      }
    });
    exports.StringTypeAnnotation = StringTypeAnnotation;
    exports.SymbolTypeAnnotation = SymbolTypeAnnotation;
    exports.ThisTypeAnnotation = ThisTypeAnnotation;
    exports.TupleTypeAnnotation = TupleTypeAnnotation;
    exports.TypeAlias = TypeAlias;
    exports.TypeAnnotation = TypeAnnotation;
    exports.TypeCastExpression = TypeCastExpression;
    exports.TypeParameter = TypeParameter;
    exports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;
    exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
    exports.UnionTypeAnnotation = UnionTypeAnnotation;
    exports.Variance = Variance;
    exports.VoidTypeAnnotation = VoidTypeAnnotation;
    exports._interfaceish = _interfaceish;
    exports._variance = _variance;
    var _t = require_lib2();
    var _modules = require_modules();
    var _types2 = require_types();
    var {
      isDeclareExportDeclaration,
      isStatement
    } = _t;
    function AnyTypeAnnotation() {
      this.word(\\"any\\");
    }
    function ArrayTypeAnnotation(node) {
      this.print(node.elementType, node);
      this.token(\\"[\\");
      this.token(\\"]\\");
    }
    function BooleanTypeAnnotation() {
      this.word(\\"boolean\\");
    }
    function BooleanLiteralTypeAnnotation(node) {
      this.word(node.value ? \\"true\\" : \\"false\\");
    }
    function NullLiteralTypeAnnotation() {
      this.word(\\"null\\");
    }
    function DeclareClass(node, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word(\\"declare\\");
        this.space();
      }
      this.word(\\"class\\");
      this.space();
      this._interfaceish(node);
    }
    function DeclareFunction(node, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word(\\"declare\\");
        this.space();
      }
      this.word(\\"function\\");
      this.space();
      this.print(node.id, node);
      this.print(node.id.typeAnnotation.typeAnnotation, node);
      if (node.predicate) {
        this.space();
        this.print(node.predicate, node);
      }
      this.semicolon();
    }
    function InferredPredicate() {
      this.token(\\"%\\");
      this.word(\\"checks\\");
    }
    function DeclaredPredicate(node) {
      this.token(\\"%\\");
      this.word(\\"checks\\");
      this.token(\\"(\\");
      this.print(node.value, node);
      this.token(\\")\\");
    }
    function DeclareInterface(node) {
      this.word(\\"declare\\");
      this.space();
      this.InterfaceDeclaration(node);
    }
    function DeclareModule(node) {
      this.word(\\"declare\\");
      this.space();
      this.word(\\"module\\");
      this.space();
      this.print(node.id, node);
      this.space();
      this.print(node.body, node);
    }
    function DeclareModuleExports(node) {
      this.word(\\"declare\\");
      this.space();
      this.word(\\"module\\");
      this.token(\\".\\");
      this.word(\\"exports\\");
      this.print(node.typeAnnotation, node);
    }
    function DeclareTypeAlias(node) {
      this.word(\\"declare\\");
      this.space();
      this.TypeAlias(node);
    }
    function DeclareOpaqueType(node, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word(\\"declare\\");
        this.space();
      }
      this.OpaqueType(node);
    }
    function DeclareVariable(node, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word(\\"declare\\");
        this.space();
      }
      this.word(\\"var\\");
      this.space();
      this.print(node.id, node);
      this.print(node.id.typeAnnotation, node);
      this.semicolon();
    }
    function DeclareExportDeclaration(node) {
      this.word(\\"declare\\");
      this.space();
      this.word(\\"export\\");
      this.space();
      if (node.default) {
        this.word(\\"default\\");
        this.space();
      }
      FlowExportDeclaration.apply(this, arguments);
    }
    function DeclareExportAllDeclaration() {
      this.word(\\"declare\\");
      this.space();
      _modules.ExportAllDeclaration.apply(this, arguments);
    }
    function EnumDeclaration(node) {
      const {
        id,
        body
      } = node;
      this.word(\\"enum\\");
      this.space();
      this.print(id, node);
      this.print(body, node);
    }
    function enumExplicitType(context, name, hasExplicitType) {
      if (hasExplicitType) {
        context.space();
        context.word(\\"of\\");
        context.space();
        context.word(name);
      }
      context.space();
    }
    function enumBody(context, node) {
      const {
        members
      } = node;
      context.token(\\"{\\");
      context.indent();
      context.newline();
      for (const member of members) {
        context.print(member, node);
        context.newline();
      }
      if (node.hasUnknownMembers) {
        context.token(\\"...\\");
        context.newline();
      }
      context.dedent();
      context.token(\\"}\\");
    }
    function EnumBooleanBody(node) {
      const {
        explicitType
      } = node;
      enumExplicitType(this, \\"boolean\\", explicitType);
      enumBody(this, node);
    }
    function EnumNumberBody(node) {
      const {
        explicitType
      } = node;
      enumExplicitType(this, \\"number\\", explicitType);
      enumBody(this, node);
    }
    function EnumStringBody(node) {
      const {
        explicitType
      } = node;
      enumExplicitType(this, \\"string\\", explicitType);
      enumBody(this, node);
    }
    function EnumSymbolBody(node) {
      enumExplicitType(this, \\"symbol\\", true);
      enumBody(this, node);
    }
    function EnumDefaultedMember(node) {
      const {
        id
      } = node;
      this.print(id, node);
      this.token(\\",\\");
    }
    function enumInitializedMember(context, node) {
      const {
        id,
        init
      } = node;
      context.print(id, node);
      context.space();
      context.token(\\"=\\");
      context.space();
      context.print(init, node);
      context.token(\\",\\");
    }
    function EnumBooleanMember(node) {
      enumInitializedMember(this, node);
    }
    function EnumNumberMember(node) {
      enumInitializedMember(this, node);
    }
    function EnumStringMember(node) {
      enumInitializedMember(this, node);
    }
    function FlowExportDeclaration(node) {
      if (node.declaration) {
        const declar = node.declaration;
        this.print(declar, node);
        if (!isStatement(declar))
          this.semicolon();
      } else {
        this.token(\\"{\\");
        if (node.specifiers.length) {
          this.space();
          this.printList(node.specifiers, node);
          this.space();
        }
        this.token(\\"}\\");
        if (node.source) {
          this.space();
          this.word(\\"from\\");
          this.space();
          this.print(node.source, node);
        }
        this.semicolon();
      }
    }
    function ExistsTypeAnnotation() {
      this.token(\\"*\\");
    }
    function FunctionTypeAnnotation(node, parent) {
      this.print(node.typeParameters, node);
      this.token(\\"(\\");
      if (node.this) {
        this.word(\\"this\\");
        this.token(\\":\\");
        this.space();
        this.print(node.this.typeAnnotation, node);
        if (node.params.length || node.rest) {
          this.token(\\",\\");
          this.space();
        }
      }
      this.printList(node.params, node);
      if (node.rest) {
        if (node.params.length) {
          this.token(\\",\\");
          this.space();
        }
        this.token(\\"...\\");
        this.print(node.rest, node);
      }
      this.token(\\")\\");
      if (parent && (parent.type === \\"ObjectTypeCallProperty\\" || parent.type === \\"DeclareFunction\\" || parent.type === \\"ObjectTypeProperty\\" && parent.method)) {
        this.token(\\":\\");
      } else {
        this.space();
        this.token(\\"=>\\");
      }
      this.space();
      this.print(node.returnType, node);
    }
    function FunctionTypeParam(node) {
      this.print(node.name, node);
      if (node.optional)
        this.token(\\"?\\");
      if (node.name) {
        this.token(\\":\\");
        this.space();
      }
      this.print(node.typeAnnotation, node);
    }
    function InterfaceExtends(node) {
      this.print(node.id, node);
      this.print(node.typeParameters, node);
    }
    function _interfaceish(node) {
      var _node$extends;
      this.print(node.id, node);
      this.print(node.typeParameters, node);
      if ((_node$extends = node.extends) != null && _node$extends.length) {
        this.space();
        this.word(\\"extends\\");
        this.space();
        this.printList(node.extends, node);
      }
      if (node.mixins && node.mixins.length) {
        this.space();
        this.word(\\"mixins\\");
        this.space();
        this.printList(node.mixins, node);
      }
      if (node.implements && node.implements.length) {
        this.space();
        this.word(\\"implements\\");
        this.space();
        this.printList(node.implements, node);
      }
      this.space();
      this.print(node.body, node);
    }
    function _variance(node) {
      if (node.variance) {
        if (node.variance.kind === \\"plus\\") {
          this.token(\\"+\\");
        } else if (node.variance.kind === \\"minus\\") {
          this.token(\\"-\\");
        }
      }
    }
    function InterfaceDeclaration(node) {
      this.word(\\"interface\\");
      this.space();
      this._interfaceish(node);
    }
    function andSeparator() {
      this.space();
      this.token(\\"&\\");
      this.space();
    }
    function InterfaceTypeAnnotation(node) {
      this.word(\\"interface\\");
      if (node.extends && node.extends.length) {
        this.space();
        this.word(\\"extends\\");
        this.space();
        this.printList(node.extends, node);
      }
      this.space();
      this.print(node.body, node);
    }
    function IntersectionTypeAnnotation(node) {
      this.printJoin(node.types, node, {
        separator: andSeparator
      });
    }
    function MixedTypeAnnotation() {
      this.word(\\"mixed\\");
    }
    function EmptyTypeAnnotation() {
      this.word(\\"empty\\");
    }
    function NullableTypeAnnotation(node) {
      this.token(\\"?\\");
      this.print(node.typeAnnotation, node);
    }
    function NumberTypeAnnotation() {
      this.word(\\"number\\");
    }
    function StringTypeAnnotation() {
      this.word(\\"string\\");
    }
    function ThisTypeAnnotation() {
      this.word(\\"this\\");
    }
    function TupleTypeAnnotation(node) {
      this.token(\\"[\\");
      this.printList(node.types, node);
      this.token(\\"]\\");
    }
    function TypeofTypeAnnotation(node) {
      this.word(\\"typeof\\");
      this.space();
      this.print(node.argument, node);
    }
    function TypeAlias(node) {
      this.word(\\"type\\");
      this.space();
      this.print(node.id, node);
      this.print(node.typeParameters, node);
      this.space();
      this.token(\\"=\\");
      this.space();
      this.print(node.right, node);
      this.semicolon();
    }
    function TypeAnnotation(node) {
      this.token(\\":\\");
      this.space();
      if (node.optional)
        this.token(\\"?\\");
      this.print(node.typeAnnotation, node);
    }
    function TypeParameterInstantiation(node) {
      this.token(\\"<\\");
      this.printList(node.params, node, {});
      this.token(\\">\\");
    }
    function TypeParameter(node) {
      this._variance(node);
      this.word(node.name);
      if (node.bound) {
        this.print(node.bound, node);
      }
      if (node.default) {
        this.space();
        this.token(\\"=\\");
        this.space();
        this.print(node.default, node);
      }
    }
    function OpaqueType(node) {
      this.word(\\"opaque\\");
      this.space();
      this.word(\\"type\\");
      this.space();
      this.print(node.id, node);
      this.print(node.typeParameters, node);
      if (node.supertype) {
        this.token(\\":\\");
        this.space();
        this.print(node.supertype, node);
      }
      if (node.impltype) {
        this.space();
        this.token(\\"=\\");
        this.space();
        this.print(node.impltype, node);
      }
      this.semicolon();
    }
    function ObjectTypeAnnotation(node) {
      if (node.exact) {
        this.token(\\"{|\\");
      } else {
        this.token(\\"{\\");
      }
      const props = [...node.properties, ...node.callProperties || [], ...node.indexers || [], ...node.internalSlots || []];
      if (props.length) {
        this.space();
        this.printJoin(props, node, {
          addNewlines(leading) {
            if (leading && !props[0])
              return 1;
          },
          indent: true,
          statement: true,
          iterator: () => {
            if (props.length !== 1 || node.inexact) {
              this.token(\\",\\");
              this.space();
            }
          }
        });
        this.space();
      }
      if (node.inexact) {
        this.indent();
        this.token(\\"...\\");
        if (props.length) {
          this.newline();
        }
        this.dedent();
      }
      if (node.exact) {
        this.token(\\"|}\\");
      } else {
        this.token(\\"}\\");
      }
    }
    function ObjectTypeInternalSlot(node) {
      if (node.static) {
        this.word(\\"static\\");
        this.space();
      }
      this.token(\\"[\\");
      this.token(\\"[\\");
      this.print(node.id, node);
      this.token(\\"]\\");
      this.token(\\"]\\");
      if (node.optional)
        this.token(\\"?\\");
      if (!node.method) {
        this.token(\\":\\");
        this.space();
      }
      this.print(node.value, node);
    }
    function ObjectTypeCallProperty(node) {
      if (node.static) {
        this.word(\\"static\\");
        this.space();
      }
      this.print(node.value, node);
    }
    function ObjectTypeIndexer(node) {
      if (node.static) {
        this.word(\\"static\\");
        this.space();
      }
      this._variance(node);
      this.token(\\"[\\");
      if (node.id) {
        this.print(node.id, node);
        this.token(\\":\\");
        this.space();
      }
      this.print(node.key, node);
      this.token(\\"]\\");
      this.token(\\":\\");
      this.space();
      this.print(node.value, node);
    }
    function ObjectTypeProperty(node) {
      if (node.proto) {
        this.word(\\"proto\\");
        this.space();
      }
      if (node.static) {
        this.word(\\"static\\");
        this.space();
      }
      if (node.kind === \\"get\\" || node.kind === \\"set\\") {
        this.word(node.kind);
        this.space();
      }
      this._variance(node);
      this.print(node.key, node);
      if (node.optional)
        this.token(\\"?\\");
      if (!node.method) {
        this.token(\\":\\");
        this.space();
      }
      this.print(node.value, node);
    }
    function ObjectTypeSpreadProperty(node) {
      this.token(\\"...\\");
      this.print(node.argument, node);
    }
    function QualifiedTypeIdentifier(node) {
      this.print(node.qualification, node);
      this.token(\\".\\");
      this.print(node.id, node);
    }
    function SymbolTypeAnnotation() {
      this.word(\\"symbol\\");
    }
    function orSeparator() {
      this.space();
      this.token(\\"|\\");
      this.space();
    }
    function UnionTypeAnnotation(node) {
      this.printJoin(node.types, node, {
        separator: orSeparator
      });
    }
    function TypeCastExpression(node) {
      this.token(\\"(\\");
      this.print(node.expression, node);
      this.print(node.typeAnnotation, node);
      this.token(\\")\\");
    }
    function Variance(node) {
      if (node.kind === \\"plus\\") {
        this.token(\\"+\\");
      } else {
        this.token(\\"-\\");
      }
    }
    function VoidTypeAnnotation() {
      this.word(\\"void\\");
    }
    function IndexedAccessType(node) {
      this.print(node.objectType, node);
      this.token(\\"[\\");
      this.print(node.indexType, node);
      this.token(\\"]\\");
    }
    function OptionalIndexedAccessType(node) {
      this.print(node.objectType, node);
      if (node.optional) {
        this.token(\\"?.\\");
      }
      this.token(\\"[\\");
      this.print(node.indexType, node);
      this.token(\\"]\\");
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/base.js
var require_base = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/base.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.BlockStatement = BlockStatement;
    exports.Directive = Directive;
    exports.DirectiveLiteral = DirectiveLiteral;
    exports.File = File;
    exports.InterpreterDirective = InterpreterDirective;
    exports.Placeholder = Placeholder;
    exports.Program = Program;
    function File(node) {
      if (node.program) {
        this.print(node.program.interpreter, node);
      }
      this.print(node.program, node);
    }
    function Program(node) {
      this.printInnerComments(node, false);
      this.printSequence(node.directives, node);
      if (node.directives && node.directives.length)
        this.newline();
      this.printSequence(node.body, node);
    }
    function BlockStatement(node) {
      var _node$directives;
      this.token(\\"{\\");
      this.printInnerComments(node);
      const hasDirectives = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;
      if (node.body.length || hasDirectives) {
        this.newline();
        this.printSequence(node.directives, node, {
          indent: true
        });
        if (hasDirectives)
          this.newline();
        this.printSequence(node.body, node, {
          indent: true
        });
        this.removeTrailingNewline();
        this.source(\\"end\\", node.loc);
        if (!this.endsWith(10))
          this.newline();
        this.rightBrace();
      } else {
        this.source(\\"end\\", node.loc);
        this.token(\\"}\\");
      }
    }
    function Directive(node) {
      this.print(node.value, node);
      this.semicolon();
    }
    var unescapedSingleQuoteRE = /(?:^|[^\\\\\\\\])(?:\\\\\\\\\\\\\\\\)*'/;
    var unescapedDoubleQuoteRE = /(?:^|[^\\\\\\\\])(?:\\\\\\\\\\\\\\\\)*\\"/;
    function DirectiveLiteral(node) {
      const raw = this.getPossibleRaw(node);
      if (!this.format.minified && raw != null) {
        this.token(raw);
        return;
      }
      const {
        value
      } = node;
      if (!unescapedDoubleQuoteRE.test(value)) {
        this.token(\`\\"\${value}\\"\`);
      } else if (!unescapedSingleQuoteRE.test(value)) {
        this.token(\`'\${value}'\`);
      } else {
        throw new Error(\\"Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.\\");
      }
    }
    function InterpreterDirective(node) {
      this.token(\`#!\${node.value}
\`);
    }
    function Placeholder(node) {
      this.token(\\"%%\\");
      this.print(node.name);
      this.token(\\"%%\\");
      if (node.expectedNode === \\"Statement\\") {
        this.semicolon();
      }
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/jsx.js
var require_jsx2 = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/jsx.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.JSXAttribute = JSXAttribute;
    exports.JSXClosingElement = JSXClosingElement;
    exports.JSXClosingFragment = JSXClosingFragment;
    exports.JSXElement = JSXElement;
    exports.JSXEmptyExpression = JSXEmptyExpression;
    exports.JSXExpressionContainer = JSXExpressionContainer;
    exports.JSXFragment = JSXFragment;
    exports.JSXIdentifier = JSXIdentifier;
    exports.JSXMemberExpression = JSXMemberExpression;
    exports.JSXNamespacedName = JSXNamespacedName;
    exports.JSXOpeningElement = JSXOpeningElement;
    exports.JSXOpeningFragment = JSXOpeningFragment;
    exports.JSXSpreadAttribute = JSXSpreadAttribute;
    exports.JSXSpreadChild = JSXSpreadChild;
    exports.JSXText = JSXText;
    function JSXAttribute(node) {
      this.print(node.name, node);
      if (node.value) {
        this.token(\\"=\\");
        this.print(node.value, node);
      }
    }
    function JSXIdentifier(node) {
      this.word(node.name);
    }
    function JSXNamespacedName(node) {
      this.print(node.namespace, node);
      this.token(\\":\\");
      this.print(node.name, node);
    }
    function JSXMemberExpression(node) {
      this.print(node.object, node);
      this.token(\\".\\");
      this.print(node.property, node);
    }
    function JSXSpreadAttribute(node) {
      this.token(\\"{\\");
      this.token(\\"...\\");
      this.print(node.argument, node);
      this.token(\\"}\\");
    }
    function JSXExpressionContainer(node) {
      this.token(\\"{\\");
      this.print(node.expression, node);
      this.token(\\"}\\");
    }
    function JSXSpreadChild(node) {
      this.token(\\"{\\");
      this.token(\\"...\\");
      this.print(node.expression, node);
      this.token(\\"}\\");
    }
    function JSXText(node) {
      const raw = this.getPossibleRaw(node);
      if (raw != null) {
        this.token(raw);
      } else {
        this.token(node.value);
      }
    }
    function JSXElement(node) {
      const open = node.openingElement;
      this.print(open, node);
      if (open.selfClosing)
        return;
      this.indent();
      for (const child of node.children) {
        this.print(child, node);
      }
      this.dedent();
      this.print(node.closingElement, node);
    }
    function spaceSeparator() {
      this.space();
    }
    function JSXOpeningElement(node) {
      this.token(\\"<\\");
      this.print(node.name, node);
      this.print(node.typeParameters, node);
      if (node.attributes.length > 0) {
        this.space();
        this.printJoin(node.attributes, node, {
          separator: spaceSeparator
        });
      }
      if (node.selfClosing) {
        this.space();
        this.token(\\"/>\\");
      } else {
        this.token(\\">\\");
      }
    }
    function JSXClosingElement(node) {
      this.token(\\"</\\");
      this.print(node.name, node);
      this.token(\\">\\");
    }
    function JSXEmptyExpression(node) {
      this.printInnerComments(node);
    }
    function JSXFragment(node) {
      this.print(node.openingFragment, node);
      this.indent();
      for (const child of node.children) {
        this.print(child, node);
      }
      this.dedent();
      this.print(node.closingFragment, node);
    }
    function JSXOpeningFragment() {
      this.token(\\"<\\");
      this.token(\\">\\");
    }
    function JSXClosingFragment() {
      this.token(\\"</\\");
      this.token(\\">\\");
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/typescript.js
var require_typescript2 = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/typescript.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.TSAnyKeyword = TSAnyKeyword;
    exports.TSArrayType = TSArrayType;
    exports.TSAsExpression = TSAsExpression;
    exports.TSBigIntKeyword = TSBigIntKeyword;
    exports.TSBooleanKeyword = TSBooleanKeyword;
    exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
    exports.TSConditionalType = TSConditionalType;
    exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
    exports.TSConstructorType = TSConstructorType;
    exports.TSDeclareFunction = TSDeclareFunction;
    exports.TSDeclareMethod = TSDeclareMethod;
    exports.TSEnumDeclaration = TSEnumDeclaration;
    exports.TSEnumMember = TSEnumMember;
    exports.TSExportAssignment = TSExportAssignment;
    exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
    exports.TSExternalModuleReference = TSExternalModuleReference;
    exports.TSFunctionType = TSFunctionType;
    exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
    exports.TSImportType = TSImportType;
    exports.TSIndexSignature = TSIndexSignature;
    exports.TSIndexedAccessType = TSIndexedAccessType;
    exports.TSInferType = TSInferType;
    exports.TSInterfaceBody = TSInterfaceBody;
    exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
    exports.TSIntersectionType = TSIntersectionType;
    exports.TSIntrinsicKeyword = TSIntrinsicKeyword;
    exports.TSLiteralType = TSLiteralType;
    exports.TSMappedType = TSMappedType;
    exports.TSMethodSignature = TSMethodSignature;
    exports.TSModuleBlock = TSModuleBlock;
    exports.TSModuleDeclaration = TSModuleDeclaration;
    exports.TSNamedTupleMember = TSNamedTupleMember;
    exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
    exports.TSNeverKeyword = TSNeverKeyword;
    exports.TSNonNullExpression = TSNonNullExpression;
    exports.TSNullKeyword = TSNullKeyword;
    exports.TSNumberKeyword = TSNumberKeyword;
    exports.TSObjectKeyword = TSObjectKeyword;
    exports.TSOptionalType = TSOptionalType;
    exports.TSParameterProperty = TSParameterProperty;
    exports.TSParenthesizedType = TSParenthesizedType;
    exports.TSPropertySignature = TSPropertySignature;
    exports.TSQualifiedName = TSQualifiedName;
    exports.TSRestType = TSRestType;
    exports.TSStringKeyword = TSStringKeyword;
    exports.TSSymbolKeyword = TSSymbolKeyword;
    exports.TSThisType = TSThisType;
    exports.TSTupleType = TSTupleType;
    exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
    exports.TSTypeAnnotation = TSTypeAnnotation;
    exports.TSTypeAssertion = TSTypeAssertion;
    exports.TSTypeLiteral = TSTypeLiteral;
    exports.TSTypeOperator = TSTypeOperator;
    exports.TSTypeParameter = TSTypeParameter;
    exports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
    exports.TSTypePredicate = TSTypePredicate;
    exports.TSTypeQuery = TSTypeQuery;
    exports.TSTypeReference = TSTypeReference;
    exports.TSUndefinedKeyword = TSUndefinedKeyword;
    exports.TSUnionType = TSUnionType;
    exports.TSUnknownKeyword = TSUnknownKeyword;
    exports.TSVoidKeyword = TSVoidKeyword;
    exports.tsPrintBraced = tsPrintBraced;
    exports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;
    exports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
    exports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
    exports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;
    exports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;
    exports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;
    function TSTypeAnnotation(node) {
      this.token(\\":\\");
      this.space();
      if (node.optional)
        this.token(\\"?\\");
      this.print(node.typeAnnotation, node);
    }
    function TSTypeParameterInstantiation(node, parent) {
      this.token(\\"<\\");
      this.printList(node.params, node, {});
      if (parent.type === \\"ArrowFunctionExpression\\" && node.params.length === 1) {
        this.token(\\",\\");
      }
      this.token(\\">\\");
    }
    function TSTypeParameter(node) {
      this.word(node.name);
      if (node.constraint) {
        this.space();
        this.word(\\"extends\\");
        this.space();
        this.print(node.constraint, node);
      }
      if (node.default) {
        this.space();
        this.token(\\"=\\");
        this.space();
        this.print(node.default, node);
      }
    }
    function TSParameterProperty(node) {
      if (node.accessibility) {
        this.word(node.accessibility);
        this.space();
      }
      if (node.readonly) {
        this.word(\\"readonly\\");
        this.space();
      }
      this._param(node.parameter);
    }
    function TSDeclareFunction(node) {
      if (node.declare) {
        this.word(\\"declare\\");
        this.space();
      }
      this._functionHead(node);
      this.token(\\";\\");
    }
    function TSDeclareMethod(node) {
      this._classMethodHead(node);
      this.token(\\";\\");
    }
    function TSQualifiedName(node) {
      this.print(node.left, node);
      this.token(\\".\\");
      this.print(node.right, node);
    }
    function TSCallSignatureDeclaration(node) {
      this.tsPrintSignatureDeclarationBase(node);
      this.token(\\";\\");
    }
    function TSConstructSignatureDeclaration(node) {
      this.word(\\"new\\");
      this.space();
      this.tsPrintSignatureDeclarationBase(node);
      this.token(\\";\\");
    }
    function TSPropertySignature(node) {
      const {
        readonly,
        initializer
      } = node;
      if (readonly) {
        this.word(\\"readonly\\");
        this.space();
      }
      this.tsPrintPropertyOrMethodName(node);
      this.print(node.typeAnnotation, node);
      if (initializer) {
        this.space();
        this.token(\\"=\\");
        this.space();
        this.print(initializer, node);
      }
      this.token(\\";\\");
    }
    function tsPrintPropertyOrMethodName(node) {
      if (node.computed) {
        this.token(\\"[\\");
      }
      this.print(node.key, node);
      if (node.computed) {
        this.token(\\"]\\");
      }
      if (node.optional) {
        this.token(\\"?\\");
      }
    }
    function TSMethodSignature(node) {
      const {
        kind
      } = node;
      if (kind === \\"set\\" || kind === \\"get\\") {
        this.word(kind);
        this.space();
      }
      this.tsPrintPropertyOrMethodName(node);
      this.tsPrintSignatureDeclarationBase(node);
      this.token(\\";\\");
    }
    function TSIndexSignature(node) {
      const {
        readonly,
        static: isStatic
      } = node;
      if (isStatic) {
        this.word(\\"static\\");
        this.space();
      }
      if (readonly) {
        this.word(\\"readonly\\");
        this.space();
      }
      this.token(\\"[\\");
      this._parameters(node.parameters, node);
      this.token(\\"]\\");
      this.print(node.typeAnnotation, node);
      this.token(\\";\\");
    }
    function TSAnyKeyword() {
      this.word(\\"any\\");
    }
    function TSBigIntKeyword() {
      this.word(\\"bigint\\");
    }
    function TSUnknownKeyword() {
      this.word(\\"unknown\\");
    }
    function TSNumberKeyword() {
      this.word(\\"number\\");
    }
    function TSObjectKeyword() {
      this.word(\\"object\\");
    }
    function TSBooleanKeyword() {
      this.word(\\"boolean\\");
    }
    function TSStringKeyword() {
      this.word(\\"string\\");
    }
    function TSSymbolKeyword() {
      this.word(\\"symbol\\");
    }
    function TSVoidKeyword() {
      this.word(\\"void\\");
    }
    function TSUndefinedKeyword() {
      this.word(\\"undefined\\");
    }
    function TSNullKeyword() {
      this.word(\\"null\\");
    }
    function TSNeverKeyword() {
      this.word(\\"never\\");
    }
    function TSIntrinsicKeyword() {
      this.word(\\"intrinsic\\");
    }
    function TSThisType() {
      this.word(\\"this\\");
    }
    function TSFunctionType(node) {
      this.tsPrintFunctionOrConstructorType(node);
    }
    function TSConstructorType(node) {
      if (node.abstract) {
        this.word(\\"abstract\\");
        this.space();
      }
      this.word(\\"new\\");
      this.space();
      this.tsPrintFunctionOrConstructorType(node);
    }
    function tsPrintFunctionOrConstructorType(node) {
      const {
        typeParameters
      } = node;
      const parameters = node.parameters;
      this.print(typeParameters, node);
      this.token(\\"(\\");
      this._parameters(parameters, node);
      this.token(\\")\\");
      this.space();
      this.token(\\"=>\\");
      this.space();
      const returnType = node.typeAnnotation;
      this.print(returnType.typeAnnotation, node);
    }
    function TSTypeReference(node) {
      this.print(node.typeName, node);
      this.print(node.typeParameters, node);
    }
    function TSTypePredicate(node) {
      if (node.asserts) {
        this.word(\\"asserts\\");
        this.space();
      }
      this.print(node.parameterName);
      if (node.typeAnnotation) {
        this.space();
        this.word(\\"is\\");
        this.space();
        this.print(node.typeAnnotation.typeAnnotation);
      }
    }
    function TSTypeQuery(node) {
      this.word(\\"typeof\\");
      this.space();
      this.print(node.exprName);
    }
    function TSTypeLiteral(node) {
      this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
    }
    function tsPrintTypeLiteralOrInterfaceBody(members, node) {
      this.tsPrintBraced(members, node);
    }
    function tsPrintBraced(members, node) {
      this.token(\\"{\\");
      if (members.length) {
        this.indent();
        this.newline();
        for (const member of members) {
          this.print(member, node);
          this.newline();
        }
        this.dedent();
        this.rightBrace();
      } else {
        this.token(\\"}\\");
      }
    }
    function TSArrayType(node) {
      this.print(node.elementType, node);
      this.token(\\"[]\\");
    }
    function TSTupleType(node) {
      this.token(\\"[\\");
      this.printList(node.elementTypes, node);
      this.token(\\"]\\");
    }
    function TSOptionalType(node) {
      this.print(node.typeAnnotation, node);
      this.token(\\"?\\");
    }
    function TSRestType(node) {
      this.token(\\"...\\");
      this.print(node.typeAnnotation, node);
    }
    function TSNamedTupleMember(node) {
      this.print(node.label, node);
      if (node.optional)
        this.token(\\"?\\");
      this.token(\\":\\");
      this.space();
      this.print(node.elementType, node);
    }
    function TSUnionType(node) {
      this.tsPrintUnionOrIntersectionType(node, \\"|\\");
    }
    function TSIntersectionType(node) {
      this.tsPrintUnionOrIntersectionType(node, \\"&\\");
    }
    function tsPrintUnionOrIntersectionType(node, sep) {
      this.printJoin(node.types, node, {
        separator() {
          this.space();
          this.token(sep);
          this.space();
        }
      });
    }
    function TSConditionalType(node) {
      this.print(node.checkType);
      this.space();
      this.word(\\"extends\\");
      this.space();
      this.print(node.extendsType);
      this.space();
      this.token(\\"?\\");
      this.space();
      this.print(node.trueType);
      this.space();
      this.token(\\":\\");
      this.space();
      this.print(node.falseType);
    }
    function TSInferType(node) {
      this.token(\\"infer\\");
      this.space();
      this.print(node.typeParameter);
    }
    function TSParenthesizedType(node) {
      this.token(\\"(\\");
      this.print(node.typeAnnotation, node);
      this.token(\\")\\");
    }
    function TSTypeOperator(node) {
      this.word(node.operator);
      this.space();
      this.print(node.typeAnnotation, node);
    }
    function TSIndexedAccessType(node) {
      this.print(node.objectType, node);
      this.token(\\"[\\");
      this.print(node.indexType, node);
      this.token(\\"]\\");
    }
    function TSMappedType(node) {
      const {
        nameType,
        optional,
        readonly,
        typeParameter
      } = node;
      this.token(\\"{\\");
      this.space();
      if (readonly) {
        tokenIfPlusMinus(this, readonly);
        this.word(\\"readonly\\");
        this.space();
      }
      this.token(\\"[\\");
      this.word(typeParameter.name);
      this.space();
      this.word(\\"in\\");
      this.space();
      this.print(typeParameter.constraint, typeParameter);
      if (nameType) {
        this.space();
        this.word(\\"as\\");
        this.space();
        this.print(nameType, node);
      }
      this.token(\\"]\\");
      if (optional) {
        tokenIfPlusMinus(this, optional);
        this.token(\\"?\\");
      }
      this.token(\\":\\");
      this.space();
      this.print(node.typeAnnotation, node);
      this.space();
      this.token(\\"}\\");
    }
    function tokenIfPlusMinus(self, tok) {
      if (tok !== true) {
        self.token(tok);
      }
    }
    function TSLiteralType(node) {
      this.print(node.literal, node);
    }
    function TSExpressionWithTypeArguments(node) {
      this.print(node.expression, node);
      this.print(node.typeParameters, node);
    }
    function TSInterfaceDeclaration(node) {
      const {
        declare,
        id,
        typeParameters,
        extends: extendz,
        body
      } = node;
      if (declare) {
        this.word(\\"declare\\");
        this.space();
      }
      this.word(\\"interface\\");
      this.space();
      this.print(id, node);
      this.print(typeParameters, node);
      if (extendz != null && extendz.length) {
        this.space();
        this.word(\\"extends\\");
        this.space();
        this.printList(extendz, node);
      }
      this.space();
      this.print(body, node);
    }
    function TSInterfaceBody(node) {
      this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
    }
    function TSTypeAliasDeclaration(node) {
      const {
        declare,
        id,
        typeParameters,
        typeAnnotation
      } = node;
      if (declare) {
        this.word(\\"declare\\");
        this.space();
      }
      this.word(\\"type\\");
      this.space();
      this.print(id, node);
      this.print(typeParameters, node);
      this.space();
      this.token(\\"=\\");
      this.space();
      this.print(typeAnnotation, node);
      this.token(\\";\\");
    }
    function TSAsExpression(node) {
      const {
        expression,
        typeAnnotation
      } = node;
      this.print(expression, node);
      this.space();
      this.word(\\"as\\");
      this.space();
      this.print(typeAnnotation, node);
    }
    function TSTypeAssertion(node) {
      const {
        typeAnnotation,
        expression
      } = node;
      this.token(\\"<\\");
      this.print(typeAnnotation, node);
      this.token(\\">\\");
      this.space();
      this.print(expression, node);
    }
    function TSEnumDeclaration(node) {
      const {
        declare,
        const: isConst,
        id,
        members
      } = node;
      if (declare) {
        this.word(\\"declare\\");
        this.space();
      }
      if (isConst) {
        this.word(\\"const\\");
        this.space();
      }
      this.word(\\"enum\\");
      this.space();
      this.print(id, node);
      this.space();
      this.tsPrintBraced(members, node);
    }
    function TSEnumMember(node) {
      const {
        id,
        initializer
      } = node;
      this.print(id, node);
      if (initializer) {
        this.space();
        this.token(\\"=\\");
        this.space();
        this.print(initializer, node);
      }
      this.token(\\",\\");
    }
    function TSModuleDeclaration(node) {
      const {
        declare,
        id
      } = node;
      if (declare) {
        this.word(\\"declare\\");
        this.space();
      }
      if (!node.global) {
        this.word(id.type === \\"Identifier\\" ? \\"namespace\\" : \\"module\\");
        this.space();
      }
      this.print(id, node);
      if (!node.body) {
        this.token(\\";\\");
        return;
      }
      let body = node.body;
      while (body.type === \\"TSModuleDeclaration\\") {
        this.token(\\".\\");
        this.print(body.id, body);
        body = body.body;
      }
      this.space();
      this.print(body, node);
    }
    function TSModuleBlock(node) {
      this.tsPrintBraced(node.body, node);
    }
    function TSImportType(node) {
      const {
        argument,
        qualifier,
        typeParameters
      } = node;
      this.word(\\"import\\");
      this.token(\\"(\\");
      this.print(argument, node);
      this.token(\\")\\");
      if (qualifier) {
        this.token(\\".\\");
        this.print(qualifier, node);
      }
      if (typeParameters) {
        this.print(typeParameters, node);
      }
    }
    function TSImportEqualsDeclaration(node) {
      const {
        isExport,
        id,
        moduleReference
      } = node;
      if (isExport) {
        this.word(\\"export\\");
        this.space();
      }
      this.word(\\"import\\");
      this.space();
      this.print(id, node);
      this.space();
      this.token(\\"=\\");
      this.space();
      this.print(moduleReference, node);
      this.token(\\";\\");
    }
    function TSExternalModuleReference(node) {
      this.token(\\"require(\\");
      this.print(node.expression, node);
      this.token(\\")\\");
    }
    function TSNonNullExpression(node) {
      this.print(node.expression, node);
      this.token(\\"!\\");
    }
    function TSExportAssignment(node) {
      this.word(\\"export\\");
      this.space();
      this.token(\\"=\\");
      this.space();
      this.print(node.expression, node);
      this.token(\\";\\");
    }
    function TSNamespaceExportDeclaration(node) {
      this.word(\\"export\\");
      this.space();
      this.word(\\"as\\");
      this.space();
      this.word(\\"namespace\\");
      this.space();
      this.print(node.id, node);
    }
    function tsPrintSignatureDeclarationBase(node) {
      const {
        typeParameters
      } = node;
      const parameters = node.parameters;
      this.print(typeParameters, node);
      this.token(\\"(\\");
      this._parameters(parameters, node);
      this.token(\\")\\");
      const returnType = node.typeAnnotation;
      this.print(returnType, node);
    }
    function tsPrintClassMemberModifiers(node, isField) {
      if (isField && node.declare) {
        this.word(\\"declare\\");
        this.space();
      }
      if (node.accessibility) {
        this.word(node.accessibility);
        this.space();
      }
      if (node.static) {
        this.word(\\"static\\");
        this.space();
      }
      if (node.override) {
        this.word(\\"override\\");
        this.space();
      }
      if (node.abstract) {
        this.word(\\"abstract\\");
        this.space();
      }
      if (isField && node.readonly) {
        this.word(\\"readonly\\");
        this.space();
      }
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/index.js
var require_generators = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/generators/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    var _templateLiterals = require_template_literals();
    Object.keys(_templateLiterals).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _templateLiterals[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _templateLiterals[key];
        }
      });
    });
    var _expressions = require_expressions();
    Object.keys(_expressions).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _expressions[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _expressions[key];
        }
      });
    });
    var _statements = require_statements();
    Object.keys(_statements).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _statements[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _statements[key];
        }
      });
    });
    var _classes = require_classes();
    Object.keys(_classes).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _classes[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _classes[key];
        }
      });
    });
    var _methods = require_methods();
    Object.keys(_methods).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _methods[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _methods[key];
        }
      });
    });
    var _modules = require_modules();
    Object.keys(_modules).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _modules[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _modules[key];
        }
      });
    });
    var _types = require_types();
    Object.keys(_types).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _types[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _types[key];
        }
      });
    });
    var _flow = require_flow2();
    Object.keys(_flow).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _flow[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _flow[key];
        }
      });
    });
    var _base = require_base();
    Object.keys(_base).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _base[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _base[key];
        }
      });
    });
    var _jsx = require_jsx2();
    Object.keys(_jsx).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _jsx[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _jsx[key];
        }
      });
    });
    var _typescript = require_typescript2();
    Object.keys(_typescript).forEach(function(key) {
      if (key === \\"default\\" || key === \\"__esModule\\")
        return;
      if (key in exports && exports[key] === _typescript[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _typescript[key];
        }
      });
    });
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/printer.js
var require_printer = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/printer.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _buffer = require_buffer();
    var n = require_node2();
    var _t = require_lib2();
    var generatorFunctions = require_generators();
    var {
      isProgram,
      isFile,
      isEmptyStatement
    } = _t;
    var SCIENTIFIC_NOTATION = /e/i;
    var ZERO_DECIMAL_INTEGER = /\\\\.0+$/;
    var NON_DECIMAL_LITERAL = /^0[box]/;
    var PURE_ANNOTATION_RE = /^\\\\s*[@#]__PURE__\\\\s*$/;
    var {
      needsParens,
      needsWhitespaceAfter,
      needsWhitespaceBefore
    } = n;
    var Printer = class {
      constructor(format, map) {
        this.inForStatementInitCounter = 0;
        this._printStack = [];
        this._indent = 0;
        this._insideAux = false;
        this._parenPushNewlineState = null;
        this._noLineTerminator = false;
        this._printAuxAfterOnNextUserNode = false;
        this._printedComments = /* @__PURE__ */ new WeakSet();
        this._endsWithInteger = false;
        this._endsWithWord = false;
        this.format = format;
        this._buf = new _buffer.default(map);
      }
      generate(ast) {
        this.print(ast);
        this._maybeAddAuxComment();
        return this._buf.get();
      }
      indent() {
        if (this.format.compact || this.format.concise)
          return;
        this._indent++;
      }
      dedent() {
        if (this.format.compact || this.format.concise)
          return;
        this._indent--;
      }
      semicolon(force = false) {
        this._maybeAddAuxComment();
        this._append(\\";\\", !force);
      }
      rightBrace() {
        if (this.format.minified) {
          this._buf.removeLastSemicolon();
        }
        this.token(\\"}\\");
      }
      space(force = false) {
        if (this.format.compact)
          return;
        if (force) {
          this._space();
        } else if (this._buf.hasContent()) {
          const lastCp = this.getLastChar();
          if (lastCp !== 32 && lastCp !== 10) {
            this._space();
          }
        }
      }
      word(str) {
        if (this._endsWithWord || this.endsWith(47) && str.charCodeAt(0) === 47) {
          this._space();
        }
        this._maybeAddAuxComment();
        this._append(str);
        this._endsWithWord = true;
      }
      number(str) {
        this.word(str);
        this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;
      }
      token(str) {
        const lastChar = this.getLastChar();
        const strFirst = str.charCodeAt(0);
        if (str === \\"--\\" && lastChar === 33 || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {
          this._space();
        }
        this._maybeAddAuxComment();
        this._append(str);
      }
      newline(i = 1) {
        if (this.format.retainLines || this.format.compact)
          return;
        if (this.format.concise) {
          this.space();
          return;
        }
        const charBeforeNewline = this.endsWithCharAndNewline();
        if (charBeforeNewline === 10)
          return;
        if (charBeforeNewline === 123 || charBeforeNewline === 58) {
          i--;
        }
        if (i <= 0)
          return;
        for (let j = 0; j < i; j++) {
          this._newline();
        }
      }
      endsWith(char) {
        return this.getLastChar() === char;
      }
      getLastChar() {
        return this._buf.getLastChar();
      }
      endsWithCharAndNewline() {
        return this._buf.endsWithCharAndNewline();
      }
      removeTrailingNewline() {
        this._buf.removeTrailingNewline();
      }
      exactSource(loc, cb) {
        this._catchUp(\\"start\\", loc);
        this._buf.exactSource(loc, cb);
      }
      source(prop, loc) {
        this._catchUp(prop, loc);
        this._buf.source(prop, loc);
      }
      withSource(prop, loc, cb) {
        this._catchUp(prop, loc);
        this._buf.withSource(prop, loc, cb);
      }
      _space() {
        this._append(\\" \\", true);
      }
      _newline() {
        this._append(\\"\\\\n\\", true);
      }
      _append(str, queue = false) {
        this._maybeAddParen(str);
        this._maybeIndent(str);
        if (queue)
          this._buf.queue(str);
        else
          this._buf.append(str);
        this._endsWithWord = false;
        this._endsWithInteger = false;
      }
      _maybeIndent(str) {
        if (this._indent && this.endsWith(10) && str.charCodeAt(0) !== 10) {
          this._buf.queue(this._getIndent());
        }
      }
      _maybeAddParen(str) {
        const parenPushNewlineState = this._parenPushNewlineState;
        if (!parenPushNewlineState)
          return;
        let i;
        for (i = 0; i < str.length && str[i] === \\" \\"; i++)
          continue;
        if (i === str.length) {
          return;
        }
        const cha = str[i];
        if (cha !== \\"\\\\n\\") {
          if (cha !== \\"/\\" || i + 1 === str.length) {
            this._parenPushNewlineState = null;
            return;
          }
          const chaPost = str[i + 1];
          if (chaPost === \\"*\\") {
            if (PURE_ANNOTATION_RE.test(str.slice(i + 2, str.length - 2))) {
              return;
            }
          } else if (chaPost !== \\"/\\") {
            this._parenPushNewlineState = null;
            return;
          }
        }
        this.token(\\"(\\");
        this.indent();
        parenPushNewlineState.printed = true;
      }
      _catchUp(prop, loc) {
        if (!this.format.retainLines)
          return;
        const pos = loc ? loc[prop] : null;
        if ((pos == null ? void 0 : pos.line) != null) {
          const count = pos.line - this._buf.getCurrentLine();
          for (let i = 0; i < count; i++) {
            this._newline();
          }
        }
      }
      _getIndent() {
        return this.format.indent.style.repeat(this._indent);
      }
      startTerminatorless(isLabel = false) {
        if (isLabel) {
          this._noLineTerminator = true;
          return null;
        } else {
          return this._parenPushNewlineState = {
            printed: false
          };
        }
      }
      endTerminatorless(state) {
        this._noLineTerminator = false;
        if (state != null && state.printed) {
          this.dedent();
          this.newline();
          this.token(\\")\\");
        }
      }
      print(node, parent) {
        if (!node)
          return;
        const oldConcise = this.format.concise;
        if (node._compact) {
          this.format.concise = true;
        }
        const printMethod = this[node.type];
        if (!printMethod) {
          throw new ReferenceError(\`unknown node of type \${JSON.stringify(node.type)} with constructor \${JSON.stringify(node == null ? void 0 : node.constructor.name)}\`);
        }
        this._printStack.push(node);
        const oldInAux = this._insideAux;
        this._insideAux = !node.loc;
        this._maybeAddAuxComment(this._insideAux && !oldInAux);
        let shouldPrintParens = needsParens(node, parent, this._printStack);
        if (this.format.retainFunctionParens && node.type === \\"FunctionExpression\\" && node.extra && node.extra.parenthesized) {
          shouldPrintParens = true;
        }
        if (shouldPrintParens)
          this.token(\\"(\\");
        this._printLeadingComments(node);
        const loc = isProgram(node) || isFile(node) ? null : node.loc;
        this.withSource(\\"start\\", loc, () => {
          printMethod.call(this, node, parent);
        });
        this._printTrailingComments(node);
        if (shouldPrintParens)
          this.token(\\")\\");
        this._printStack.pop();
        this.format.concise = oldConcise;
        this._insideAux = oldInAux;
      }
      _maybeAddAuxComment(enteredPositionlessNode) {
        if (enteredPositionlessNode)
          this._printAuxBeforeComment();
        if (!this._insideAux)
          this._printAuxAfterComment();
      }
      _printAuxBeforeComment() {
        if (this._printAuxAfterOnNextUserNode)
          return;
        this._printAuxAfterOnNextUserNode = true;
        const comment = this.format.auxiliaryCommentBefore;
        if (comment) {
          this._printComment({
            type: \\"CommentBlock\\",
            value: comment
          });
        }
      }
      _printAuxAfterComment() {
        if (!this._printAuxAfterOnNextUserNode)
          return;
        this._printAuxAfterOnNextUserNode = false;
        const comment = this.format.auxiliaryCommentAfter;
        if (comment) {
          this._printComment({
            type: \\"CommentBlock\\",
            value: comment
          });
        }
      }
      getPossibleRaw(node) {
        const extra = node.extra;
        if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
          return extra.raw;
        }
      }
      printJoin(nodes, parent, opts = {}) {
        if (!(nodes != null && nodes.length))
          return;
        if (opts.indent)
          this.indent();
        const newlineOpts = {
          addNewlines: opts.addNewlines
        };
        for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          if (!node)
            continue;
          if (opts.statement)
            this._printNewline(true, node, parent, newlineOpts);
          this.print(node, parent);
          if (opts.iterator) {
            opts.iterator(node, i);
          }
          if (opts.separator && i < nodes.length - 1) {
            opts.separator.call(this);
          }
          if (opts.statement)
            this._printNewline(false, node, parent, newlineOpts);
        }
        if (opts.indent)
          this.dedent();
      }
      printAndIndentOnComments(node, parent) {
        const indent = node.leadingComments && node.leadingComments.length > 0;
        if (indent)
          this.indent();
        this.print(node, parent);
        if (indent)
          this.dedent();
      }
      printBlock(parent) {
        const node = parent.body;
        if (!isEmptyStatement(node)) {
          this.space();
        }
        this.print(node, parent);
      }
      _printTrailingComments(node) {
        this._printComments(this._getComments(false, node));
      }
      _printLeadingComments(node) {
        this._printComments(this._getComments(true, node), true);
      }
      printInnerComments(node, indent = true) {
        var _node$innerComments;
        if (!((_node$innerComments = node.innerComments) != null && _node$innerComments.length))
          return;
        if (indent)
          this.indent();
        this._printComments(node.innerComments);
        if (indent)
          this.dedent();
      }
      printSequence(nodes, parent, opts = {}) {
        opts.statement = true;
        return this.printJoin(nodes, parent, opts);
      }
      printList(items, parent, opts = {}) {
        if (opts.separator == null) {
          opts.separator = commaSeparator;
        }
        return this.printJoin(items, parent, opts);
      }
      _printNewline(leading, node, parent, opts) {
        if (this.format.retainLines || this.format.compact)
          return;
        if (this.format.concise) {
          this.space();
          return;
        }
        let lines = 0;
        if (this._buf.hasContent()) {
          if (!leading)
            lines++;
          if (opts.addNewlines)
            lines += opts.addNewlines(leading, node) || 0;
          const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;
          if (needs(node, parent))
            lines++;
        }
        this.newline(Math.min(2, lines));
      }
      _getComments(leading, node) {
        return node && (leading ? node.leadingComments : node.trailingComments) || [];
      }
      _printComment(comment, skipNewLines) {
        if (!this.format.shouldPrintComment(comment.value))
          return;
        if (comment.ignore)
          return;
        if (this._printedComments.has(comment))
          return;
        this._printedComments.add(comment);
        const isBlockComment = comment.type === \\"CommentBlock\\";
        const printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;
        if (printNewLines && this._buf.hasContent())
          this.newline(1);
        const lastCharCode = this.getLastChar();
        if (lastCharCode !== 91 && lastCharCode !== 123) {
          this.space();
        }
        let val = !isBlockComment && !this._noLineTerminator ? \`//\${comment.value}
\` : \`/*\${comment.value}*/\`;
        if (isBlockComment && this.format.indent.adjustMultilineComment) {
          var _comment$loc;
          const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;
          if (offset) {
            const newlineRegex = new RegExp(\\"\\\\\\\\n\\\\\\\\s{1,\\" + offset + \\"}\\", \\"g\\");
            val = val.replace(newlineRegex, \\"\\\\n\\");
          }
          const indentSize = Math.max(this._getIndent().length, this.format.retainLines ? 0 : this._buf.getCurrentColumn());
          val = val.replace(/\\\\n(?!$)/g, \`
\${\\" \\".repeat(indentSize)}\`);
        }
        if (this.endsWith(47))
          this._space();
        this.withSource(\\"start\\", comment.loc, () => {
          this._append(val);
        });
        if (printNewLines)
          this.newline(1);
      }
      _printComments(comments, inlinePureAnnotation) {
        if (!(comments != null && comments.length))
          return;
        if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {
          this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));
        } else {
          for (const comment of comments) {
            this._printComment(comment);
          }
        }
      }
      printAssertions(node) {
        var _node$assertions;
        if ((_node$assertions = node.assertions) != null && _node$assertions.length) {
          this.space();
          this.word(\\"assert\\");
          this.space();
          this.token(\\"{\\");
          this.space();
          this.printList(node.assertions, node);
          this.space();
          this.token(\\"}\\");
        }
      }
    };
    Object.assign(Printer.prototype, generatorFunctions);
    {
      Printer.prototype.Noop = function Noop() {
      };
    }
    var _default = Printer;
    exports.default = _default;
    function commaSeparator() {
      this.token(\\",\\");
      this.space();
    }
  }
});

// node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/index.js
var require_lib4 = __commonJS({
  \\"node_modules/.pnpm/@babel+generator@7.16.8/node_modules/@babel/generator/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.CodeGenerator = void 0;
    exports.default = generate;
    var _sourceMap = require_source_map2();
    var _printer = require_printer();
    var Generator = class extends _printer.default {
      constructor(ast, opts = {}, code) {
        const format = normalizeOptions(code, opts);
        const map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
        super(format, map);
        this.ast = void 0;
        this.ast = ast;
      }
      generate() {
        return super.generate(this.ast);
      }
    };
    function normalizeOptions(code, opts) {
      const format = {
        auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
        auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
        shouldPrintComment: opts.shouldPrintComment,
        retainLines: opts.retainLines,
        retainFunctionParens: opts.retainFunctionParens,
        comments: opts.comments == null || opts.comments,
        compact: opts.compact,
        minified: opts.minified,
        concise: opts.concise,
        indent: {
          adjustMultilineComment: true,
          style: \\"  \\",
          base: 0
        },
        decoratorsBeforeExport: !!opts.decoratorsBeforeExport,
        jsescOption: Object.assign({
          quotes: \\"double\\",
          wrap: true,
          minimal: false
        }, opts.jsescOption),
        recordAndTupleSyntaxType: opts.recordAndTupleSyntaxType,
        topicToken: opts.topicToken
      };
      {
        format.jsonCompatibleStrings = opts.jsonCompatibleStrings;
      }
      if (format.minified) {
        format.compact = true;
        format.shouldPrintComment = format.shouldPrintComment || (() => format.comments);
      } else {
        format.shouldPrintComment = format.shouldPrintComment || ((value) => format.comments || value.indexOf(\\"@license\\") >= 0 || value.indexOf(\\"@preserve\\") >= 0);
      }
      if (format.compact === \\"auto\\") {
        format.compact = code.length > 5e5;
        if (format.compact) {
          console.error(\`[BABEL] Note: The code generator has deoptimised the styling of \${opts.filename} as it exceeds the max of \${\\"500KB\\"}.\`);
        }
      }
      if (format.compact) {
        format.indent.adjustMultilineComment = false;
      }
      return format;
    }
    var CodeGenerator = class {
      constructor(ast, opts, code) {
        this._generator = void 0;
        this._generator = new Generator(ast, opts, code);
      }
      generate() {
        return this._generator.generate();
      }
    };
    exports.CodeGenerator = CodeGenerator;
    function generate(ast, opts, code) {
      const gen = new Generator(ast, opts, code);
      return gen.generate();
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/ancestry.js
var require_ancestry = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/ancestry.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.find = find;
    exports.findParent = findParent;
    exports.getAncestry = getAncestry;
    exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
    exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
    exports.getFunctionParent = getFunctionParent;
    exports.getStatementParent = getStatementParent;
    exports.inType = inType;
    exports.isAncestor = isAncestor;
    exports.isDescendant = isDescendant;
    var _t = require_lib2();
    var _index = require_path();
    var {
      VISITOR_KEYS
    } = _t;
    function findParent(callback) {
      let path = this;
      while (path = path.parentPath) {
        if (callback(path))
          return path;
      }
      return null;
    }
    function find(callback) {
      let path = this;
      do {
        if (callback(path))
          return path;
      } while (path = path.parentPath);
      return null;
    }
    function getFunctionParent() {
      return this.findParent((p) => p.isFunction());
    }
    function getStatementParent() {
      let path = this;
      do {
        if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
          break;
        } else {
          path = path.parentPath;
        }
      } while (path);
      if (path && (path.isProgram() || path.isFile())) {
        throw new Error(\\"File/Program node, we can't possibly find a statement parent to this\\");
      }
      return path;
    }
    function getEarliestCommonAncestorFrom(paths) {
      return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
        let earliest;
        const keys = VISITOR_KEYS[deepest.type];
        for (const ancestry of ancestries) {
          const path = ancestry[i + 1];
          if (!earliest) {
            earliest = path;
            continue;
          }
          if (path.listKey && earliest.listKey === path.listKey) {
            if (path.key < earliest.key) {
              earliest = path;
              continue;
            }
          }
          const earliestKeyIndex = keys.indexOf(earliest.parentKey);
          const currentKeyIndex = keys.indexOf(path.parentKey);
          if (earliestKeyIndex > currentKeyIndex) {
            earliest = path;
          }
        }
        return earliest;
      });
    }
    function getDeepestCommonAncestorFrom(paths, filter) {
      if (!paths.length) {
        return this;
      }
      if (paths.length === 1) {
        return paths[0];
      }
      let minDepth = Infinity;
      let lastCommonIndex, lastCommon;
      const ancestries = paths.map((path) => {
        const ancestry = [];
        do {
          ancestry.unshift(path);
        } while ((path = path.parentPath) && path !== this);
        if (ancestry.length < minDepth) {
          minDepth = ancestry.length;
        }
        return ancestry;
      });
      const first = ancestries[0];
      depthLoop:
        for (let i = 0; i < minDepth; i++) {
          const shouldMatch = first[i];
          for (const ancestry of ancestries) {
            if (ancestry[i] !== shouldMatch) {
              break depthLoop;
            }
          }
          lastCommonIndex = i;
          lastCommon = shouldMatch;
        }
      if (lastCommon) {
        if (filter) {
          return filter(lastCommon, lastCommonIndex, ancestries);
        } else {
          return lastCommon;
        }
      } else {
        throw new Error(\\"Couldn't find intersection\\");
      }
    }
    function getAncestry() {
      let path = this;
      const paths = [];
      do {
        paths.push(path);
      } while (path = path.parentPath);
      return paths;
    }
    function isAncestor(maybeDescendant) {
      return maybeDescendant.isDescendant(this);
    }
    function isDescendant(maybeAncestor) {
      return !!this.findParent((parent) => parent === maybeAncestor);
    }
    function inType(...candidateTypes) {
      let path = this;
      while (path) {
        for (const type of candidateTypes) {
          if (path.node.type === type)
            return true;
        }
        path = path.parentPath;
      }
      return false;
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js
var require_inferer_reference = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = _default;
    var _t = require_lib2();
    var {
      BOOLEAN_NUMBER_BINARY_OPERATORS,
      createFlowUnionType,
      createTSUnionType,
      createTypeAnnotationBasedOnTypeof,
      createUnionTypeAnnotation,
      isTSTypeAnnotation,
      numberTypeAnnotation,
      voidTypeAnnotation
    } = _t;
    function _default(node) {
      if (!this.isReferenced())
        return;
      const binding = this.scope.getBinding(node.name);
      if (binding) {
        if (binding.identifier.typeAnnotation) {
          return binding.identifier.typeAnnotation;
        } else {
          return getTypeAnnotationBindingConstantViolations(binding, this, node.name);
        }
      }
      if (node.name === \\"undefined\\") {
        return voidTypeAnnotation();
      } else if (node.name === \\"NaN\\" || node.name === \\"Infinity\\") {
        return numberTypeAnnotation();
      } else if (node.name === \\"arguments\\") {
      }
    }
    function getTypeAnnotationBindingConstantViolations(binding, path, name) {
      const types = [];
      const functionConstantViolations = [];
      let constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);
      const testType = getConditionalAnnotation(binding, path, name);
      if (testType) {
        const testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);
        constantViolations = constantViolations.filter((path2) => testConstantViolations.indexOf(path2) < 0);
        types.push(testType.typeAnnotation);
      }
      if (constantViolations.length) {
        constantViolations.push(...functionConstantViolations);
        for (const violation of constantViolations) {
          types.push(violation.getTypeAnnotation());
        }
      }
      if (!types.length) {
        return;
      }
      if (isTSTypeAnnotation(types[0]) && createTSUnionType) {
        return createTSUnionType(types);
      }
      if (createFlowUnionType) {
        return createFlowUnionType(types);
      }
      return createUnionTypeAnnotation(types);
    }
    function getConstantViolationsBefore(binding, path, functions) {
      const violations = binding.constantViolations.slice();
      violations.unshift(binding.path);
      return violations.filter((violation) => {
        violation = violation.resolve();
        const status = violation._guessExecutionStatusRelativeTo(path);
        if (functions && status === \\"unknown\\")
          functions.push(violation);
        return status === \\"before\\";
      });
    }
    function inferAnnotationFromBinaryExpression(name, path) {
      const operator = path.node.operator;
      const right = path.get(\\"right\\").resolve();
      const left = path.get(\\"left\\").resolve();
      let target;
      if (left.isIdentifier({
        name
      })) {
        target = right;
      } else if (right.isIdentifier({
        name
      })) {
        target = left;
      }
      if (target) {
        if (operator === \\"===\\") {
          return target.getTypeAnnotation();
        }
        if (BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
          return numberTypeAnnotation();
        }
        return;
      }
      if (operator !== \\"===\\" && operator !== \\"==\\")
        return;
      let typeofPath;
      let typePath;
      if (left.isUnaryExpression({
        operator: \\"typeof\\"
      })) {
        typeofPath = left;
        typePath = right;
      } else if (right.isUnaryExpression({
        operator: \\"typeof\\"
      })) {
        typeofPath = right;
        typePath = left;
      }
      if (!typeofPath)
        return;
      if (!typeofPath.get(\\"argument\\").isIdentifier({
        name
      }))
        return;
      typePath = typePath.resolve();
      if (!typePath.isLiteral())
        return;
      const typeValue = typePath.node.value;
      if (typeof typeValue !== \\"string\\")
        return;
      return createTypeAnnotationBasedOnTypeof(typeValue);
    }
    function getParentConditionalPath(binding, path, name) {
      let parentPath;
      while (parentPath = path.parentPath) {
        if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
          if (path.key === \\"test\\") {
            return;
          }
          return parentPath;
        }
        if (parentPath.isFunction()) {
          if (parentPath.parentPath.scope.getBinding(name) !== binding)
            return;
        }
        path = parentPath;
      }
    }
    function getConditionalAnnotation(binding, path, name) {
      const ifStatement = getParentConditionalPath(binding, path, name);
      if (!ifStatement)
        return;
      const test = ifStatement.get(\\"test\\");
      const paths = [test];
      const types = [];
      for (let i = 0; i < paths.length; i++) {
        const path2 = paths[i];
        if (path2.isLogicalExpression()) {
          if (path2.node.operator === \\"&&\\") {
            paths.push(path2.get(\\"left\\"));
            paths.push(path2.get(\\"right\\"));
          }
        } else if (path2.isBinaryExpression()) {
          const type = inferAnnotationFromBinaryExpression(name, path2);
          if (type)
            types.push(type);
        }
      }
      if (types.length) {
        if (isTSTypeAnnotation(types[0]) && createTSUnionType) {
          return {
            typeAnnotation: createTSUnionType(types),
            ifStatement
          };
        }
        if (createFlowUnionType) {
          return {
            typeAnnotation: createFlowUnionType(types),
            ifStatement
          };
        }
        return {
          typeAnnotation: createUnionTypeAnnotation(types),
          ifStatement
        };
      }
      return getConditionalAnnotation(ifStatement, name);
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/inference/inferers.js
var require_inferers = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/inference/inferers.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.ArrayExpression = ArrayExpression;
    exports.AssignmentExpression = AssignmentExpression;
    exports.BinaryExpression = BinaryExpression;
    exports.BooleanLiteral = BooleanLiteral;
    exports.CallExpression = CallExpression;
    exports.ConditionalExpression = ConditionalExpression;
    exports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;
    Object.defineProperty(exports, \\"Identifier\\", {
      enumerable: true,
      get: function() {
        return _infererReference.default;
      }
    });
    exports.LogicalExpression = LogicalExpression;
    exports.NewExpression = NewExpression;
    exports.NullLiteral = NullLiteral;
    exports.NumericLiteral = NumericLiteral;
    exports.ObjectExpression = ObjectExpression;
    exports.ParenthesizedExpression = ParenthesizedExpression;
    exports.RegExpLiteral = RegExpLiteral;
    exports.RestElement = RestElement;
    exports.SequenceExpression = SequenceExpression;
    exports.StringLiteral = StringLiteral;
    exports.TaggedTemplateExpression = TaggedTemplateExpression;
    exports.TemplateLiteral = TemplateLiteral;
    exports.TypeCastExpression = TypeCastExpression;
    exports.UnaryExpression = UnaryExpression;
    exports.UpdateExpression = UpdateExpression;
    exports.VariableDeclarator = VariableDeclarator;
    var _t = require_lib2();
    var _infererReference = require_inferer_reference();
    var {
      BOOLEAN_BINARY_OPERATORS,
      BOOLEAN_UNARY_OPERATORS,
      NUMBER_BINARY_OPERATORS,
      NUMBER_UNARY_OPERATORS,
      STRING_UNARY_OPERATORS,
      anyTypeAnnotation,
      arrayTypeAnnotation,
      booleanTypeAnnotation,
      buildMatchMemberExpression,
      createFlowUnionType,
      createTSUnionType,
      createUnionTypeAnnotation,
      genericTypeAnnotation,
      identifier,
      isTSTypeAnnotation,
      nullLiteralTypeAnnotation,
      numberTypeAnnotation,
      stringTypeAnnotation,
      tupleTypeAnnotation,
      unionTypeAnnotation,
      voidTypeAnnotation
    } = _t;
    function VariableDeclarator() {
      var _type;
      const id = this.get(\\"id\\");
      if (!id.isIdentifier())
        return;
      const init = this.get(\\"init\\");
      let type = init.getTypeAnnotation();
      if (((_type = type) == null ? void 0 : _type.type) === \\"AnyTypeAnnotation\\") {
        if (init.isCallExpression() && init.get(\\"callee\\").isIdentifier({
          name: \\"Array\\"
        }) && !init.scope.hasBinding(\\"Array\\", true)) {
          type = ArrayExpression();
        }
      }
      return type;
    }
    function TypeCastExpression(node) {
      return node.typeAnnotation;
    }
    TypeCastExpression.validParent = true;
    function NewExpression(node) {
      if (this.get(\\"callee\\").isIdentifier()) {
        return genericTypeAnnotation(node.callee);
      }
    }
    function TemplateLiteral() {
      return stringTypeAnnotation();
    }
    function UnaryExpression(node) {
      const operator = node.operator;
      if (operator === \\"void\\") {
        return voidTypeAnnotation();
      } else if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
        return numberTypeAnnotation();
      } else if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
        return stringTypeAnnotation();
      } else if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
        return booleanTypeAnnotation();
      }
    }
    function BinaryExpression(node) {
      const operator = node.operator;
      if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
        return numberTypeAnnotation();
      } else if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
        return booleanTypeAnnotation();
      } else if (operator === \\"+\\") {
        const right = this.get(\\"right\\");
        const left = this.get(\\"left\\");
        if (left.isBaseType(\\"number\\") && right.isBaseType(\\"number\\")) {
          return numberTypeAnnotation();
        } else if (left.isBaseType(\\"string\\") || right.isBaseType(\\"string\\")) {
          return stringTypeAnnotation();
        }
        return unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
      }
    }
    function LogicalExpression() {
      const argumentTypes = [this.get(\\"left\\").getTypeAnnotation(), this.get(\\"right\\").getTypeAnnotation()];
      if (isTSTypeAnnotation(argumentTypes[0]) && createTSUnionType) {
        return createTSUnionType(argumentTypes);
      }
      if (createFlowUnionType) {
        return createFlowUnionType(argumentTypes);
      }
      return createUnionTypeAnnotation(argumentTypes);
    }
    function ConditionalExpression() {
      const argumentTypes = [this.get(\\"consequent\\").getTypeAnnotation(), this.get(\\"alternate\\").getTypeAnnotation()];
      if (isTSTypeAnnotation(argumentTypes[0]) && createTSUnionType) {
        return createTSUnionType(argumentTypes);
      }
      if (createFlowUnionType) {
        return createFlowUnionType(argumentTypes);
      }
      return createUnionTypeAnnotation(argumentTypes);
    }
    function SequenceExpression() {
      return this.get(\\"expressions\\").pop().getTypeAnnotation();
    }
    function ParenthesizedExpression() {
      return this.get(\\"expression\\").getTypeAnnotation();
    }
    function AssignmentExpression() {
      return this.get(\\"right\\").getTypeAnnotation();
    }
    function UpdateExpression(node) {
      const operator = node.operator;
      if (operator === \\"++\\" || operator === \\"--\\") {
        return numberTypeAnnotation();
      }
    }
    function StringLiteral() {
      return stringTypeAnnotation();
    }
    function NumericLiteral() {
      return numberTypeAnnotation();
    }
    function BooleanLiteral() {
      return booleanTypeAnnotation();
    }
    function NullLiteral() {
      return nullLiteralTypeAnnotation();
    }
    function RegExpLiteral() {
      return genericTypeAnnotation(identifier(\\"RegExp\\"));
    }
    function ObjectExpression() {
      return genericTypeAnnotation(identifier(\\"Object\\"));
    }
    function ArrayExpression() {
      return genericTypeAnnotation(identifier(\\"Array\\"));
    }
    function RestElement() {
      return ArrayExpression();
    }
    RestElement.validParent = true;
    function Func() {
      return genericTypeAnnotation(identifier(\\"Function\\"));
    }
    var isArrayFrom = buildMatchMemberExpression(\\"Array.from\\");
    var isObjectKeys = buildMatchMemberExpression(\\"Object.keys\\");
    var isObjectValues = buildMatchMemberExpression(\\"Object.values\\");
    var isObjectEntries = buildMatchMemberExpression(\\"Object.entries\\");
    function CallExpression() {
      const {
        callee
      } = this.node;
      if (isObjectKeys(callee)) {
        return arrayTypeAnnotation(stringTypeAnnotation());
      } else if (isArrayFrom(callee) || isObjectValues(callee)) {
        return arrayTypeAnnotation(anyTypeAnnotation());
      } else if (isObjectEntries(callee)) {
        return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
      }
      return resolveCall(this.get(\\"callee\\"));
    }
    function TaggedTemplateExpression() {
      return resolveCall(this.get(\\"tag\\"));
    }
    function resolveCall(callee) {
      callee = callee.resolve();
      if (callee.isFunction()) {
        if (callee.is(\\"async\\")) {
          if (callee.is(\\"generator\\")) {
            return genericTypeAnnotation(identifier(\\"AsyncIterator\\"));
          } else {
            return genericTypeAnnotation(identifier(\\"Promise\\"));
          }
        } else {
          if (callee.node.returnType) {
            return callee.node.returnType;
          } else {
          }
        }
      }
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/inference/index.js
var require_inference = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/inference/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports._getTypeAnnotation = _getTypeAnnotation;
    exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
    exports.couldBeBaseType = couldBeBaseType;
    exports.getTypeAnnotation = getTypeAnnotation;
    exports.isBaseType = isBaseType;
    exports.isGenericType = isGenericType;
    var inferers = require_inferers();
    var _t = require_lib2();
    var {
      anyTypeAnnotation,
      isAnyTypeAnnotation,
      isBooleanTypeAnnotation,
      isEmptyTypeAnnotation,
      isFlowBaseAnnotation,
      isGenericTypeAnnotation,
      isIdentifier,
      isMixedTypeAnnotation,
      isNumberTypeAnnotation,
      isStringTypeAnnotation,
      isTypeAnnotation,
      isUnionTypeAnnotation,
      isVoidTypeAnnotation,
      stringTypeAnnotation,
      voidTypeAnnotation
    } = _t;
    function getTypeAnnotation() {
      if (this.typeAnnotation)
        return this.typeAnnotation;
      let type = this._getTypeAnnotation() || anyTypeAnnotation();
      if (isTypeAnnotation(type))
        type = type.typeAnnotation;
      return this.typeAnnotation = type;
    }
    var typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
    function _getTypeAnnotation() {
      const node = this.node;
      if (!node) {
        if (this.key === \\"init\\" && this.parentPath.isVariableDeclarator()) {
          const declar = this.parentPath.parentPath;
          const declarParent = declar.parentPath;
          if (declar.key === \\"left\\" && declarParent.isForInStatement()) {
            return stringTypeAnnotation();
          }
          if (declar.key === \\"left\\" && declarParent.isForOfStatement()) {
            return anyTypeAnnotation();
          }
          return voidTypeAnnotation();
        } else {
          return;
        }
      }
      if (node.typeAnnotation) {
        return node.typeAnnotation;
      }
      if (typeAnnotationInferringNodes.has(node)) {
        return;
      }
      typeAnnotationInferringNodes.add(node);
      try {
        var _inferer;
        let inferer = inferers[node.type];
        if (inferer) {
          return inferer.call(this, node);
        }
        inferer = inferers[this.parentPath.type];
        if ((_inferer = inferer) != null && _inferer.validParent) {
          return this.parentPath.getTypeAnnotation();
        }
      } finally {
        typeAnnotationInferringNodes.delete(node);
      }
    }
    function isBaseType(baseName, soft) {
      return _isBaseType(baseName, this.getTypeAnnotation(), soft);
    }
    function _isBaseType(baseName, type, soft) {
      if (baseName === \\"string\\") {
        return isStringTypeAnnotation(type);
      } else if (baseName === \\"number\\") {
        return isNumberTypeAnnotation(type);
      } else if (baseName === \\"boolean\\") {
        return isBooleanTypeAnnotation(type);
      } else if (baseName === \\"any\\") {
        return isAnyTypeAnnotation(type);
      } else if (baseName === \\"mixed\\") {
        return isMixedTypeAnnotation(type);
      } else if (baseName === \\"empty\\") {
        return isEmptyTypeAnnotation(type);
      } else if (baseName === \\"void\\") {
        return isVoidTypeAnnotation(type);
      } else {
        if (soft) {
          return false;
        } else {
          throw new Error(\`Unknown base type \${baseName}\`);
        }
      }
    }
    function couldBeBaseType(name) {
      const type = this.getTypeAnnotation();
      if (isAnyTypeAnnotation(type))
        return true;
      if (isUnionTypeAnnotation(type)) {
        for (const type2 of type.types) {
          if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
            return true;
          }
        }
        return false;
      } else {
        return _isBaseType(name, type, true);
      }
    }
    function baseTypeStrictlyMatches(rightArg) {
      const left = this.getTypeAnnotation();
      const right = rightArg.getTypeAnnotation();
      if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {
        return right.type === left.type;
      }
      return false;
    }
    function isGenericType(genericName) {
      const type = this.getTypeAnnotation();
      return isGenericTypeAnnotation(type) && isIdentifier(type.id, {
        name: genericName
      });
    }
  }
});

// node_modules/.pnpm/js-tokens@4.0.0/node_modules/js-tokens/index.js
var require_js_tokens = __commonJS({
  \\"node_modules/.pnpm/js-tokens@4.0.0/node_modules/js-tokens/index.js\\"(exports) {
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = /((['\\"])(?:(?!\\\\2|\\\\\\\\).|\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S]))*(\\\\2)?|\`(?:[^\`\\\\\\\\$]|\\\\\\\\[\\\\s\\\\S]|\\\\$(?!\\\\{)|\\\\$\\\\{(?:[^{}]|\\\\{[^}]*\\\\}?)*\\\\}?)*(\`)?)|(\\\\/\\\\/.*)|(\\\\/\\\\*(?:[^*]|\\\\*(?!\\\\/))*(\\\\*\\\\/)?)|(\\\\/(?!\\\\*)(?:\\\\[(?:(?![\\\\]\\\\\\\\]).|\\\\\\\\.)*\\\\]|(?![\\\\/\\\\]\\\\\\\\]).|\\\\\\\\.)+\\\\/(?:(?!\\\\s*(?:\\\\b|[\\\\u0080-\\\\uFFFF$\\\\\\\\'\\"~({]|[+\\\\-!](?!=)|\\\\.?\\\\d))|[gmiyus]{1,6}\\\\b(?![\\\\u0080-\\\\uFFFF$\\\\\\\\]|\\\\s*(?:[+\\\\-*%&|^<>!=?({]|\\\\/(?![\\\\/*])))))|(0[xX][\\\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][+-]?\\\\d+)?)|((?!\\\\d)(?:(?!\\\\s)[$\\\\w\\\\u0080-\\\\uFFFF]|\\\\\\\\u[\\\\da-fA-F]{4}|\\\\\\\\u\\\\{[\\\\da-fA-F]+\\\\})+)|(--|\\\\+\\\\+|&&|\\\\|\\\\||=>|\\\\.{3}|(?:[+\\\\-\\\\/%&|^]|\\\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\\\](){}])|(\\\\s+)|(^$|[\\\\s\\\\S])/g;
    exports.matchToToken = function(match) {
      var token = { type: \\"invalid\\", value: match[0], closed: void 0 };
      if (match[1])
        token.type = \\"string\\", token.closed = !!(match[3] || match[4]);
      else if (match[5])
        token.type = \\"comment\\";
      else if (match[6])
        token.type = \\"comment\\", token.closed = !!match[7];
      else if (match[8])
        token.type = \\"regex\\";
      else if (match[9])
        token.type = \\"number\\";
      else if (match[10])
        token.type = \\"name\\";
      else if (match[11])
        token.type = \\"punctuator\\";
      else if (match[12])
        token.type = \\"whitespace\\";
      return token;
    };
  }
});

// node_modules/.pnpm/escape-string-regexp@1.0.5/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS({
  \\"node_modules/.pnpm/escape-string-regexp@1.0.5/node_modules/escape-string-regexp/index.js\\"(exports, module2) {
    \\"use strict\\";
    var matchOperatorsRe = /[|\\\\\\\\{}()[\\\\]^$+*?.]/g;
    module2.exports = function(str) {
      if (typeof str !== \\"string\\") {
        throw new TypeError(\\"Expected a string\\");
      }
      return str.replace(matchOperatorsRe, \\"\\\\\\\\$&\\");
    };
  }
});

// node_modules/.pnpm/color-name@1.1.3/node_modules/color-name/index.js
var require_color_name = __commonJS({
  \\"node_modules/.pnpm/color-name@1.1.3/node_modules/color-name/index.js\\"(exports, module2) {
    \\"use strict\\";
    module2.exports = {
      \\"aliceblue\\": [240, 248, 255],
      \\"antiquewhite\\": [250, 235, 215],
      \\"aqua\\": [0, 255, 255],
      \\"aquamarine\\": [127, 255, 212],
      \\"azure\\": [240, 255, 255],
      \\"beige\\": [245, 245, 220],
      \\"bisque\\": [255, 228, 196],
      \\"black\\": [0, 0, 0],
      \\"blanchedalmond\\": [255, 235, 205],
      \\"blue\\": [0, 0, 255],
      \\"blueviolet\\": [138, 43, 226],
      \\"brown\\": [165, 42, 42],
      \\"burlywood\\": [222, 184, 135],
      \\"cadetblue\\": [95, 158, 160],
      \\"chartreuse\\": [127, 255, 0],
      \\"chocolate\\": [210, 105, 30],
      \\"coral\\": [255, 127, 80],
      \\"cornflowerblue\\": [100, 149, 237],
      \\"cornsilk\\": [255, 248, 220],
      \\"crimson\\": [220, 20, 60],
      \\"cyan\\": [0, 255, 255],
      \\"darkblue\\": [0, 0, 139],
      \\"darkcyan\\": [0, 139, 139],
      \\"darkgoldenrod\\": [184, 134, 11],
      \\"darkgray\\": [169, 169, 169],
      \\"darkgreen\\": [0, 100, 0],
      \\"darkgrey\\": [169, 169, 169],
      \\"darkkhaki\\": [189, 183, 107],
      \\"darkmagenta\\": [139, 0, 139],
      \\"darkolivegreen\\": [85, 107, 47],
      \\"darkorange\\": [255, 140, 0],
      \\"darkorchid\\": [153, 50, 204],
      \\"darkred\\": [139, 0, 0],
      \\"darksalmon\\": [233, 150, 122],
      \\"darkseagreen\\": [143, 188, 143],
      \\"darkslateblue\\": [72, 61, 139],
      \\"darkslategray\\": [47, 79, 79],
      \\"darkslategrey\\": [47, 79, 79],
      \\"darkturquoise\\": [0, 206, 209],
      \\"darkviolet\\": [148, 0, 211],
      \\"deeppink\\": [255, 20, 147],
      \\"deepskyblue\\": [0, 191, 255],
      \\"dimgray\\": [105, 105, 105],
      \\"dimgrey\\": [105, 105, 105],
      \\"dodgerblue\\": [30, 144, 255],
      \\"firebrick\\": [178, 34, 34],
      \\"floralwhite\\": [255, 250, 240],
      \\"forestgreen\\": [34, 139, 34],
      \\"fuchsia\\": [255, 0, 255],
      \\"gainsboro\\": [220, 220, 220],
      \\"ghostwhite\\": [248, 248, 255],
      \\"gold\\": [255, 215, 0],
      \\"goldenrod\\": [218, 165, 32],
      \\"gray\\": [128, 128, 128],
      \\"green\\": [0, 128, 0],
      \\"greenyellow\\": [173, 255, 47],
      \\"grey\\": [128, 128, 128],
      \\"honeydew\\": [240, 255, 240],
      \\"hotpink\\": [255, 105, 180],
      \\"indianred\\": [205, 92, 92],
      \\"indigo\\": [75, 0, 130],
      \\"ivory\\": [255, 255, 240],
      \\"khaki\\": [240, 230, 140],
      \\"lavender\\": [230, 230, 250],
      \\"lavenderblush\\": [255, 240, 245],
      \\"lawngreen\\": [124, 252, 0],
      \\"lemonchiffon\\": [255, 250, 205],
      \\"lightblue\\": [173, 216, 230],
      \\"lightcoral\\": [240, 128, 128],
      \\"lightcyan\\": [224, 255, 255],
      \\"lightgoldenrodyellow\\": [250, 250, 210],
      \\"lightgray\\": [211, 211, 211],
      \\"lightgreen\\": [144, 238, 144],
      \\"lightgrey\\": [211, 211, 211],
      \\"lightpink\\": [255, 182, 193],
      \\"lightsalmon\\": [255, 160, 122],
      \\"lightseagreen\\": [32, 178, 170],
      \\"lightskyblue\\": [135, 206, 250],
      \\"lightslategray\\": [119, 136, 153],
      \\"lightslategrey\\": [119, 136, 153],
      \\"lightsteelblue\\": [176, 196, 222],
      \\"lightyellow\\": [255, 255, 224],
      \\"lime\\": [0, 255, 0],
      \\"limegreen\\": [50, 205, 50],
      \\"linen\\": [250, 240, 230],
      \\"magenta\\": [255, 0, 255],
      \\"maroon\\": [128, 0, 0],
      \\"mediumaquamarine\\": [102, 205, 170],
      \\"mediumblue\\": [0, 0, 205],
      \\"mediumorchid\\": [186, 85, 211],
      \\"mediumpurple\\": [147, 112, 219],
      \\"mediumseagreen\\": [60, 179, 113],
      \\"mediumslateblue\\": [123, 104, 238],
      \\"mediumspringgreen\\": [0, 250, 154],
      \\"mediumturquoise\\": [72, 209, 204],
      \\"mediumvioletred\\": [199, 21, 133],
      \\"midnightblue\\": [25, 25, 112],
      \\"mintcream\\": [245, 255, 250],
      \\"mistyrose\\": [255, 228, 225],
      \\"moccasin\\": [255, 228, 181],
      \\"navajowhite\\": [255, 222, 173],
      \\"navy\\": [0, 0, 128],
      \\"oldlace\\": [253, 245, 230],
      \\"olive\\": [128, 128, 0],
      \\"olivedrab\\": [107, 142, 35],
      \\"orange\\": [255, 165, 0],
      \\"orangered\\": [255, 69, 0],
      \\"orchid\\": [218, 112, 214],
      \\"palegoldenrod\\": [238, 232, 170],
      \\"palegreen\\": [152, 251, 152],
      \\"paleturquoise\\": [175, 238, 238],
      \\"palevioletred\\": [219, 112, 147],
      \\"papayawhip\\": [255, 239, 213],
      \\"peachpuff\\": [255, 218, 185],
      \\"peru\\": [205, 133, 63],
      \\"pink\\": [255, 192, 203],
      \\"plum\\": [221, 160, 221],
      \\"powderblue\\": [176, 224, 230],
      \\"purple\\": [128, 0, 128],
      \\"rebeccapurple\\": [102, 51, 153],
      \\"red\\": [255, 0, 0],
      \\"rosybrown\\": [188, 143, 143],
      \\"royalblue\\": [65, 105, 225],
      \\"saddlebrown\\": [139, 69, 19],
      \\"salmon\\": [250, 128, 114],
      \\"sandybrown\\": [244, 164, 96],
      \\"seagreen\\": [46, 139, 87],
      \\"seashell\\": [255, 245, 238],
      \\"sienna\\": [160, 82, 45],
      \\"silver\\": [192, 192, 192],
      \\"skyblue\\": [135, 206, 235],
      \\"slateblue\\": [106, 90, 205],
      \\"slategray\\": [112, 128, 144],
      \\"slategrey\\": [112, 128, 144],
      \\"snow\\": [255, 250, 250],
      \\"springgreen\\": [0, 255, 127],
      \\"steelblue\\": [70, 130, 180],
      \\"tan\\": [210, 180, 140],
      \\"teal\\": [0, 128, 128],
      \\"thistle\\": [216, 191, 216],
      \\"tomato\\": [255, 99, 71],
      \\"turquoise\\": [64, 224, 208],
      \\"violet\\": [238, 130, 238],
      \\"wheat\\": [245, 222, 179],
      \\"white\\": [255, 255, 255],
      \\"whitesmoke\\": [245, 245, 245],
      \\"yellow\\": [255, 255, 0],
      \\"yellowgreen\\": [154, 205, 50]
    };
  }
});

// node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  \\"node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/conversions.js\\"(exports, module2) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }
    var key;
    var convert = module2.exports = {
      rgb: { channels: 3, labels: \\"rgb\\" },
      hsl: { channels: 3, labels: \\"hsl\\" },
      hsv: { channels: 3, labels: \\"hsv\\" },
      hwb: { channels: 3, labels: \\"hwb\\" },
      cmyk: { channels: 4, labels: \\"cmyk\\" },
      xyz: { channels: 3, labels: \\"xyz\\" },
      lab: { channels: 3, labels: \\"lab\\" },
      lch: { channels: 3, labels: \\"lch\\" },
      hex: { channels: 1, labels: [\\"hex\\"] },
      keyword: { channels: 1, labels: [\\"keyword\\"] },
      ansi16: { channels: 1, labels: [\\"ansi16\\"] },
      ansi256: { channels: 1, labels: [\\"ansi256\\"] },
      hcg: { channels: 3, labels: [\\"h\\", \\"c\\", \\"g\\"] },
      apple: { channels: 3, labels: [\\"r16\\", \\"g16\\", \\"b16\\"] },
      gray: { channels: 1, labels: [\\"gray\\"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!(\\"channels\\" in convert[model])) {
          throw new Error(\\"missing channels property: \\" + model);
        }
        if (!(\\"labels\\" in convert[model])) {
          throw new Error(\\"missing channel labels property: \\" + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error(\\"channel and label counts mismatch: \\" + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], \\"channels\\", { value: channels });
        Object.defineProperty(convert[model], \\"labels\\", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s;
      var l;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);
      var diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a2;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a2 = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a2, b];
    };
    convert.hsl.rgb = function(hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      t1 = 2 * l - t2;
      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v;
      var f;
      var n;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh);
      var r;
      var g;
      var b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a2;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a2 = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a2, b];
    };
    convert.lab.xyz = function(lab) {
      var l = lab[0];
      var a2 = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a2 / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      var l = lab[0];
      var a2 = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a2);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a2 * a2 + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a2;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a2 = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a2, b];
    };
    convert.rgb.ansi16 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return \\"000000\\".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      var colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split(\\"\\").map(function(char) {
          return char + char;
        }).join(\\"\\");
      }
      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = 1;
      var f = 0;
      if (l < 0.5) {
        c = 2 * s * l;
      } else {
        c = 2 * s * (1 - l);
      }
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      var f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1 - c) + 0.5 * c;
      var s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return \\"000000\\".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/route.js
var require_route = __commonJS({
  \\"node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/route.js\\"(exports, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    module2.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  \\"node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/index.js\\"(exports, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if (\\"conversion\\" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === \\"object\\") {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if (\\"conversion\\" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], \\"channels\\", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], \\"labels\\", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

// node_modules/.pnpm/ansi-styles@3.2.1/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  \\"node_modules/.pnpm/ansi-styles@3.2.1/node_modules/ansi-styles/index.js\\"(exports, module2) {
    \\"use strict\\";
    var colorConvert = require_color_convert();
    var wrapAnsi16 = (fn, offset) => function() {
      const code = fn.apply(colorConvert, arguments);
      return \`\\\\x1B[\${code + offset}m\`;
    };
    var wrapAnsi256 = (fn, offset) => function() {
      const code = fn.apply(colorConvert, arguments);
      return \`\\\\x1B[\${38 + offset};5;\${code}m\`;
    };
    var wrapAnsi16m = (fn, offset) => function() {
      const rgb = fn.apply(colorConvert, arguments);
      return \`\\\\x1B[\${38 + offset};2;\${rgb[0]};\${rgb[1]};\${rgb[2]}m\`;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          gray: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.grey = styles.color.gray;
      for (const groupName of Object.keys(styles)) {
        const group = styles[groupName];
        for (const styleName of Object.keys(group)) {
          const style = group[styleName];
          styles[styleName] = {
            open: \`\\\\x1B[\${style[0]}m\`,
            close: \`\\\\x1B[\${style[1]}m\`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
        Object.defineProperty(styles, \\"codes\\", {
          value: codes,
          enumerable: false
        });
      }
      const ansi2ansi = (n) => n;
      const rgb2rgb = (r, g, b) => [r, g, b];
      styles.color.close = \\"\\\\x1B[39m\\";
      styles.bgColor.close = \\"\\\\x1B[49m\\";
      styles.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
      };
      styles.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
      };
      styles.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
      };
      styles.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
      };
      styles.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
      };
      styles.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
      };
      for (let key of Object.keys(colorConvert)) {
        if (typeof colorConvert[key] !== \\"object\\") {
          continue;
        }
        const suite = colorConvert[key];
        if (key === \\"ansi16\\") {
          key = \\"ansi\\";
        }
        if (\\"ansi16\\" in suite) {
          styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
          styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
        }
        if (\\"ansi256\\" in suite) {
          styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
          styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
        }
        if (\\"rgb\\" in suite) {
          styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
          styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
        }
      }
      return styles;
    }
    Object.defineProperty(module2, \\"exports\\", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

// node_modules/.pnpm/has-flag@3.0.0/node_modules/has-flag/index.js
var require_has_flag2 = __commonJS({
  \\"node_modules/.pnpm/has-flag@3.0.0/node_modules/has-flag/index.js\\"(exports, module2) {
    \\"use strict\\";
    module2.exports = (flag, argv) => {
      argv = argv || process.argv;
      const prefix = flag.startsWith(\\"-\\") ? \\"\\" : flag.length === 1 ? \\"-\\" : \\"--\\";
      const pos = argv.indexOf(prefix + flag);
      const terminatorPos = argv.indexOf(\\"--\\");
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

// node_modules/.pnpm/supports-color@5.5.0/node_modules/supports-color/index.js
var require_supports_color2 = __commonJS({
  \\"node_modules/.pnpm/supports-color@5.5.0/node_modules/supports-color/index.js\\"(exports, module2) {
    \\"use strict\\";
    var os = require(\\"os\\");
    var hasFlag = require_has_flag2();
    var env = process.env;
    var forceColor;
    if (hasFlag(\\"no-color\\") || hasFlag(\\"no-colors\\") || hasFlag(\\"color=false\\")) {
      forceColor = false;
    } else if (hasFlag(\\"color\\") || hasFlag(\\"colors\\") || hasFlag(\\"color=true\\") || hasFlag(\\"color=always\\")) {
      forceColor = true;
    }
    if (\\"FORCE_COLOR\\" in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag(\\"color=16m\\") || hasFlag(\\"color=full\\") || hasFlag(\\"color=truecolor\\")) {
        return 3;
      }
      if (hasFlag(\\"color=256\\")) {
        return 2;
      }
      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }
      const min = forceColor ? 1 : 0;
      if (process.platform === \\"win32\\") {
        const osRelease = os.release().split(\\".\\");
        if (Number(process.versions.node.split(\\".\\")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if (\\"CI\\" in env) {
        if ([\\"TRAVIS\\", \\"CIRCLECI\\", \\"APPVEYOR\\", \\"GITLAB_CI\\"].some((sign) => sign in env) || env.CI_NAME === \\"codeship\\") {
          return 1;
        }
        return min;
      }
      if (\\"TEAMCITY_VERSION\\" in env) {
        return /^(9\\\\.(0*[1-9]\\\\d*)\\\\.|\\\\d{2,}\\\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === \\"truecolor\\") {
        return 3;
      }
      if (\\"TERM_PROGRAM\\" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || \\"\\").split(\\".\\")[0], 10);
        switch (env.TERM_PROGRAM) {
          case \\"iTerm.app\\":
            return version >= 3 ? 3 : 2;
          case \\"Apple_Terminal\\":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if (\\"COLORTERM\\" in env) {
        return 1;
      }
      if (env.TERM === \\"dumb\\") {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

// node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/templates.js
var require_templates = __commonJS({
  \\"node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/templates.js\\"(exports, module2) {
    \\"use strict\\";
    var TEMPLATE_REGEX = /(?:\\\\\\\\(u[a-f\\\\d]{4}|x[a-f\\\\d]{2}|.))|(?:\\\\{(~)?(\\\\w+(?:\\\\([^)]*\\\\))?(?:\\\\.\\\\w+(?:\\\\([^)]*\\\\))?)*)(?:[ \\\\t]|(?=\\\\r?\\\\n)))|(\\\\})|((?:.|[\\\\r\\\\n\\\\f])+?)/gi;
    var STYLE_REGEX = /(?:^|\\\\.)(\\\\w+)(?:\\\\(([^)]*)\\\\))?/g;
    var STRING_REGEX = /^(['\\"])((?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\])*)\\\\1$/;
    var ESCAPE_REGEX = /\\\\\\\\(u[a-f\\\\d]{4}|x[a-f\\\\d]{2}|.)|([^\\\\\\\\])/gi;
    var ESCAPES = /* @__PURE__ */ new Map([
      [\\"n\\", \\"\\\\n\\"],
      [\\"r\\", \\"\\\\r\\"],
      [\\"t\\", \\"	\\"],
      [\\"b\\", \\"\\\\b\\"],
      [\\"f\\", \\"\\\\f\\"],
      [\\"v\\", \\"\\\\v\\"],
      [\\"0\\", \\"\\\\0\\"],
      [\\"\\\\\\\\\\", \\"\\\\\\\\\\"],
      [\\"e\\", \\"\\\\x1B\\"],
      [\\"a\\", \\"\\\\x07\\"]
    ]);
    function unescape(c) {
      if (c[0] === \\"u\\" && c.length === 5 || c[0] === \\"x\\" && c.length === 3) {
        return String.fromCharCode(parseInt(c.slice(1), 16));
      }
      return ESCAPES.get(c) || c;
    }
    function parseArguments(name, args) {
      const results = [];
      const chunks = args.trim().split(/\\\\s*,\\\\s*/g);
      let matches;
      for (const chunk of chunks) {
        if (!isNaN(chunk)) {
          results.push(Number(chunk));
        } else if (matches = chunk.match(STRING_REGEX)) {
          results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
        } else {
          throw new Error(\`Invalid Chalk template style argument: \${chunk} (in style '\${name}')\`);
        }
      }
      return results;
    }
    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      const results = [];
      let matches;
      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        const name = matches[1];
        if (matches[2]) {
          const args = parseArguments(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }
      return results;
    }
    function buildStyle(chalk, styles) {
      const enabled = {};
      for (const layer of styles) {
        for (const style of layer.styles) {
          enabled[style[0]] = layer.inverse ? null : style.slice(1);
        }
      }
      let current = chalk;
      for (const styleName of Object.keys(enabled)) {
        if (Array.isArray(enabled[styleName])) {
          if (!(styleName in current)) {
            throw new Error(\`Unknown Chalk style: \${styleName}\`);
          }
          if (enabled[styleName].length > 0) {
            current = current[styleName].apply(current, enabled[styleName]);
          } else {
            current = current[styleName];
          }
        }
      }
      return current;
    }
    module2.exports = (chalk, tmp) => {
      const styles = [];
      const chunks = [];
      let chunk = [];
      tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
        if (escapeChar) {
          chunk.push(unescape(escapeChar));
        } else if (style) {
          const str = chunk.join(\\"\\");
          chunk = [];
          chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
          styles.push({ inverse, styles: parseStyle(style) });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error(\\"Found extraneous } in Chalk template literal\\");
          }
          chunks.push(buildStyle(chalk, styles)(chunk.join(\\"\\")));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(chr);
        }
      });
      chunks.push(chunk.join(\\"\\"));
      if (styles.length > 0) {
        const errMsg = \`Chalk template literal is missing \${styles.length} closing bracket\${styles.length === 1 ? \\"\\" : \\"s\\"} (\\\\\`}\\\\\`)\`;
        throw new Error(errMsg);
      }
      return chunks.join(\\"\\");
    };
  }
});

// node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/index.js
var require_chalk = __commonJS({
  \\"node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/index.js\\"(exports, module2) {
    \\"use strict\\";
    var escapeStringRegexp = require_escape_string_regexp();
    var ansiStyles = require_ansi_styles();
    var stdoutColor = require_supports_color2().stdout;
    var template = require_templates();
    var isSimpleWindowsTerm = process.platform === \\"win32\\" && !(process.env.TERM || \\"\\").toLowerCase().startsWith(\\"xterm\\");
    var levelMapping = [\\"ansi\\", \\"ansi\\", \\"ansi256\\", \\"ansi16m\\"];
    var skipModels = /* @__PURE__ */ new Set([\\"gray\\"]);
    var styles = /* @__PURE__ */ Object.create(null);
    function applyOptions(obj, options) {
      options = options || {};
      const scLevel = stdoutColor ? stdoutColor.level : 0;
      obj.level = options.level === void 0 ? scLevel : options.level;
      obj.enabled = \\"enabled\\" in options ? options.enabled : obj.level > 0;
    }
    function Chalk(options) {
      if (!this || !(this instanceof Chalk) || this.template) {
        const chalk = {};
        applyOptions(chalk, options);
        chalk.template = function() {
          const args = [].slice.call(arguments);
          return chalkTag.apply(null, [chalk.template].concat(args));
        };
        Object.setPrototypeOf(chalk, Chalk.prototype);
        Object.setPrototypeOf(chalk.template, chalk);
        chalk.template.constructor = Chalk;
        return chalk.template;
      }
      applyOptions(this, options);
    }
    if (isSimpleWindowsTerm) {
      ansiStyles.blue.open = \\"\\\\x1B[94m\\";
    }
    for (const key of Object.keys(ansiStyles)) {
      ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), \\"g\\");
      styles[key] = {
        get() {
          const codes = ansiStyles[key];
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
        }
      };
    }
    styles.visible = {
      get() {
        return build.call(this, this._styles || [], true, \\"visible\\");
      }
    };
    ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), \\"g\\");
    for (const model of Object.keys(ansiStyles.color.ansi)) {
      if (skipModels.has(model)) {
        continue;
      }
      styles[model] = {
        get() {
          const level = this.level;
          return function() {
            const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
            const codes = {
              open,
              close: ansiStyles.color.close,
              closeRe: ansiStyles.color.closeRe
            };
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    }
    ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), \\"g\\");
    for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
      if (skipModels.has(model)) {
        continue;
      }
      const bgModel = \\"bg\\" + model[0].toUpperCase() + model.slice(1);
      styles[bgModel] = {
        get() {
          const level = this.level;
          return function() {
            const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
            const codes = {
              open,
              close: ansiStyles.bgColor.close,
              closeRe: ansiStyles.bgColor.closeRe
            };
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    }
    var proto = Object.defineProperties(() => {
    }, styles);
    function build(_styles, _empty, key) {
      const builder = function() {
        return applyStyle.apply(builder, arguments);
      };
      builder._styles = _styles;
      builder._empty = _empty;
      const self = this;
      Object.defineProperty(builder, \\"level\\", {
        enumerable: true,
        get() {
          return self.level;
        },
        set(level) {
          self.level = level;
        }
      });
      Object.defineProperty(builder, \\"enabled\\", {
        enumerable: true,
        get() {
          return self.enabled;
        },
        set(enabled) {
          self.enabled = enabled;
        }
      });
      builder.hasGrey = this.hasGrey || key === \\"gray\\" || key === \\"grey\\";
      builder.__proto__ = proto;
      return builder;
    }
    function applyStyle() {
      const args = arguments;
      const argsLen = args.length;
      let str = String(arguments[0]);
      if (argsLen === 0) {
        return \\"\\";
      }
      if (argsLen > 1) {
        for (let a2 = 1; a2 < argsLen; a2++) {
          str += \\" \\" + args[a2];
        }
      }
      if (!this.enabled || this.level <= 0 || !str) {
        return this._empty ? \\"\\" : str;
      }
      const originalDim = ansiStyles.dim.open;
      if (isSimpleWindowsTerm && this.hasGrey) {
        ansiStyles.dim.open = \\"\\";
      }
      for (const code of this._styles.slice().reverse()) {
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
        str = str.replace(/\\\\r?\\\\n/g, \`\${code.close}$&\${code.open}\`);
      }
      ansiStyles.dim.open = originalDim;
      return str;
    }
    function chalkTag(chalk, strings) {
      if (!Array.isArray(strings)) {
        return [].slice.call(arguments, 1).join(\\" \\");
      }
      const args = [].slice.call(arguments, 2);
      const parts = [strings.raw[0]];
      for (let i = 1; i < strings.length; i++) {
        parts.push(String(args[i - 1]).replace(/[{}\\\\\\\\]/g, \\"\\\\\\\\$&\\"));
        parts.push(String(strings.raw[i]));
      }
      return template(chalk, parts.join(\\"\\"));
    }
    Object.defineProperties(Chalk.prototype, styles);
    module2.exports = Chalk();
    module2.exports.supportsColor = stdoutColor;
    module2.exports.default = module2.exports;
  }
});

// node_modules/.pnpm/@babel+highlight@7.16.7/node_modules/@babel/highlight/lib/index.js
var require_lib5 = __commonJS({
  \\"node_modules/.pnpm/@babel+highlight@7.16.7/node_modules/@babel/highlight/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = highlight;
    exports.getChalk = getChalk;
    exports.shouldHighlight = shouldHighlight;
    var _jsTokens = require_js_tokens();
    var _helperValidatorIdentifier = require_lib();
    var _chalk = require_chalk();
    var sometimesKeywords = /* @__PURE__ */ new Set([\\"as\\", \\"async\\", \\"from\\", \\"get\\", \\"of\\", \\"set\\"]);
    function getDefs(chalk) {
      return {
        keyword: chalk.cyan,
        capitalized: chalk.yellow,
        jsxIdentifier: chalk.yellow,
        punctuator: chalk.yellow,
        number: chalk.magenta,
        string: chalk.green,
        regex: chalk.magenta,
        comment: chalk.grey,
        invalid: chalk.white.bgRed.bold
      };
    }
    var NEWLINE = /\\\\r\\\\n|[\\\\n\\\\r\\\\u2028\\\\u2029]/;
    var BRACKET = /^[()[\\\\]{}]$/;
    var tokenize;
    {
      const JSX_TAG = /^[a-z][\\\\w-]*$/i;
      const getTokenType = function(token, offset, text) {
        if (token.type === \\"name\\") {
          if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
            return \\"keyword\\";
          }
          if (JSX_TAG.test(token.value) && (text[offset - 1] === \\"<\\" || text.substr(offset - 2, 2) == \\"</\\")) {
            return \\"jsxIdentifier\\";
          }
          if (token.value[0] !== token.value[0].toLowerCase()) {
            return \\"capitalized\\";
          }
        }
        if (token.type === \\"punctuator\\" && BRACKET.test(token.value)) {
          return \\"bracket\\";
        }
        if (token.type === \\"invalid\\" && (token.value === \\"@\\" || token.value === \\"#\\")) {
          return \\"punctuator\\";
        }
        return token.type;
      };
      tokenize = function* (text) {
        let match;
        while (match = _jsTokens.default.exec(text)) {
          const token = _jsTokens.matchToToken(match);
          yield {
            type: getTokenType(token, match.index, text),
            value: token.value
          };
        }
      };
    }
    function highlightTokens(defs, text) {
      let highlighted = \\"\\";
      for (const {
        type,
        value
      } of tokenize(text)) {
        const colorize = defs[type];
        if (colorize) {
          highlighted += value.split(NEWLINE).map((str) => colorize(str)).join(\\"\\\\n\\");
        } else {
          highlighted += value;
        }
      }
      return highlighted;
    }
    function shouldHighlight(options) {
      return !!_chalk.supportsColor || options.forceColor;
    }
    function getChalk(options) {
      return options.forceColor ? new _chalk.constructor({
        enabled: true,
        level: 1
      }) : _chalk;
    }
    function highlight(code, options = {}) {
      if (shouldHighlight(options)) {
        const chalk = getChalk(options);
        const defs = getDefs(chalk);
        return highlightTokens(defs, code);
      } else {
        return code;
      }
    }
  }
});

// node_modules/.pnpm/@babel+code-frame@7.16.7/node_modules/@babel/code-frame/lib/index.js
var require_lib6 = __commonJS({
  \\"node_modules/.pnpm/@babel+code-frame@7.16.7/node_modules/@babel/code-frame/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.codeFrameColumns = codeFrameColumns;
    exports.default = _default;
    var _highlight = require_lib5();
    var deprecationWarningShown = false;
    function getDefs(chalk) {
      return {
        gutter: chalk.grey,
        marker: chalk.red.bold,
        message: chalk.red.bold
      };
    }
    var NEWLINE = /\\\\r\\\\n|[\\\\n\\\\r\\\\u2028\\\\u2029]/;
    function getMarkerLines(loc, source, opts) {
      const startLoc = Object.assign({
        column: 0,
        line: -1
      }, loc.start);
      const endLoc = Object.assign({}, startLoc, loc.end);
      const {
        linesAbove = 2,
        linesBelow = 3
      } = opts || {};
      const startLine = startLoc.line;
      const startColumn = startLoc.column;
      const endLine = endLoc.line;
      const endColumn = endLoc.column;
      let start = Math.max(startLine - (linesAbove + 1), 0);
      let end = Math.min(source.length, endLine + linesBelow);
      if (startLine === -1) {
        start = 0;
      }
      if (endLine === -1) {
        end = source.length;
      }
      const lineDiff = endLine - startLine;
      const markerLines = {};
      if (lineDiff) {
        for (let i = 0; i <= lineDiff; i++) {
          const lineNumber = i + startLine;
          if (!startColumn) {
            markerLines[lineNumber] = true;
          } else if (i === 0) {
            const sourceLength = source[lineNumber - 1].length;
            markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
          } else if (i === lineDiff) {
            markerLines[lineNumber] = [0, endColumn];
          } else {
            const sourceLength = source[lineNumber - i].length;
            markerLines[lineNumber] = [0, sourceLength];
          }
        }
      } else {
        if (startColumn === endColumn) {
          if (startColumn) {
            markerLines[startLine] = [startColumn, 0];
          } else {
            markerLines[startLine] = true;
          }
        } else {
          markerLines[startLine] = [startColumn, endColumn - startColumn];
        }
      }
      return {
        start,
        end,
        markerLines
      };
    }
    function codeFrameColumns(rawLines, loc, opts = {}) {
      const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
      const chalk = (0, _highlight.getChalk)(opts);
      const defs = getDefs(chalk);
      const maybeHighlight = (chalkFn, string) => {
        return highlighted ? chalkFn(string) : string;
      };
      const lines = rawLines.split(NEWLINE);
      const {
        start,
        end,
        markerLines
      } = getMarkerLines(loc, lines, opts);
      const hasColumns = loc.start && typeof loc.start.column === \\"number\\";
      const numberMaxWidth = String(end).length;
      const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
      let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {
        const number = start + 1 + index;
        const paddedNumber = \` \${number}\`.slice(-numberMaxWidth);
        const gutter = \` \${paddedNumber} |\`;
        const hasMarker = markerLines[number];
        const lastMarkerLine = !markerLines[number + 1];
        if (hasMarker) {
          let markerLine = \\"\\";
          if (Array.isArray(hasMarker)) {
            const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\\\\t]/g, \\" \\");
            const numberOfMarkers = hasMarker[1] || 1;
            markerLine = [\\"\\\\n \\", maybeHighlight(defs.gutter, gutter.replace(/\\\\d/g, \\" \\")), \\" \\", markerSpacing, maybeHighlight(defs.marker, \\"^\\").repeat(numberOfMarkers)].join(\\"\\");
            if (lastMarkerLine && opts.message) {
              markerLine += \\" \\" + maybeHighlight(defs.message, opts.message);
            }
          }
          return [maybeHighlight(defs.marker, \\">\\"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? \` \${line}\` : \\"\\", markerLine].join(\\"\\");
        } else {
          return \` \${maybeHighlight(defs.gutter, gutter)}\${line.length > 0 ? \` \${line}\` : \\"\\"}\`;
        }
      }).join(\\"\\\\n\\");
      if (opts.message && !hasColumns) {
        frame = \`\${\\" \\".repeat(numberMaxWidth + 1)}\${opts.message}
\${frame}\`;
      }
      if (highlighted) {
        return chalk.reset(frame);
      } else {
        return frame;
      }
    }
    function _default(rawLines, lineNumber, colNumber, opts = {}) {
      if (!deprecationWarningShown) {
        deprecationWarningShown = true;
        const message = \\"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use \`codeFrameColumns\`.\\";
        if (process.emitWarning) {
          process.emitWarning(message, \\"DeprecationWarning\\");
        } else {
          const deprecationError = new Error(message);
          deprecationError.name = \\"DeprecationWarning\\";
          console.warn(new Error(message));
        }
      }
      colNumber = Math.max(colNumber, 0);
      const location = {
        start: {
          column: colNumber,
          line: lineNumber
        }
      };
      return codeFrameColumns(rawLines, location, opts);
    }
  }
});

// node_modules/.pnpm/@babel+parser@7.16.12/node_modules/@babel/parser/lib/index.js
var require_lib7 = __commonJS({
  \\"node_modules/.pnpm/@babel+parser@7.16.12/node_modules/@babel/parser/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", { value: true });
    var Position = class {
      constructor(line, col, index) {
        this.line = void 0;
        this.column = void 0;
        this.index = void 0;
        this.line = line;
        this.column = col;
        indexes.set(this, index);
      }
    };
    var SourceLocation = class {
      constructor(start, end) {
        this.start = void 0;
        this.end = void 0;
        this.filename = void 0;
        this.identifierName = void 0;
        this.start = start;
        this.end = end;
      }
    };
    var indexes = /* @__PURE__ */ new WeakMap();
    function createPositionWithColumnOffset(position, columnOffset) {
      const {
        line,
        column
      } = position;
      return new Position(line, column + columnOffset, indexes.get(position) + columnOffset);
    }
    var BaseParser = class {
      constructor() {
        this.sawUnambiguousESM = false;
        this.ambiguousScriptDifferentAst = false;
      }
      hasPlugin(pluginConfig) {
        if (typeof pluginConfig === \\"string\\") {
          return this.plugins.has(pluginConfig);
        } else {
          const [pluginName, pluginOptions] = pluginConfig;
          if (!this.hasPlugin(pluginName)) {
            return false;
          }
          const actualOptions = this.plugins.get(pluginName);
          for (const key of Object.keys(pluginOptions)) {
            if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
              return false;
            }
          }
          return true;
        }
      }
      getPluginOption(plugin, name) {
        var _this$plugins$get;
        return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
      }
    };
    function setTrailingComments(node, comments) {
      if (node.trailingComments === void 0) {
        node.trailingComments = comments;
      } else {
        node.trailingComments.unshift(...comments);
      }
    }
    function setLeadingComments(node, comments) {
      if (node.leadingComments === void 0) {
        node.leadingComments = comments;
      } else {
        node.leadingComments.unshift(...comments);
      }
    }
    function setInnerComments(node, comments) {
      if (node.innerComments === void 0) {
        node.innerComments = comments;
      } else {
        node.innerComments.unshift(...comments);
      }
    }
    function adjustInnerComments(node, elements, commentWS) {
      let lastElement = null;
      let i = elements.length;
      while (lastElement === null && i > 0) {
        lastElement = elements[--i];
      }
      if (lastElement === null || lastElement.start > commentWS.start) {
        setInnerComments(node, commentWS.comments);
      } else {
        setTrailingComments(lastElement, commentWS.comments);
      }
    }
    var CommentsParser = class extends BaseParser {
      addComment(comment) {
        if (this.filename)
          comment.loc.filename = this.filename;
        this.state.comments.push(comment);
      }
      processComment(node) {
        const {
          commentStack
        } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0)
          return;
        let i = commentStackLength - 1;
        const lastCommentWS = commentStack[i];
        if (lastCommentWS.start === node.end) {
          lastCommentWS.leadingNode = node;
          i--;
        }
        const {
          start: nodeStart
        } = node;
        for (; i >= 0; i--) {
          const commentWS = commentStack[i];
          const commentEnd = commentWS.end;
          if (commentEnd > nodeStart) {
            commentWS.containingNode = node;
            this.finalizeComment(commentWS);
            commentStack.splice(i, 1);
          } else {
            if (commentEnd === nodeStart) {
              commentWS.trailingNode = node;
            }
            break;
          }
        }
      }
      finalizeComment(commentWS) {
        const {
          comments
        } = commentWS;
        if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
          if (commentWS.leadingNode !== null) {
            setTrailingComments(commentWS.leadingNode, comments);
          }
          if (commentWS.trailingNode !== null) {
            setLeadingComments(commentWS.trailingNode, comments);
          }
        } else {
          const {
            containingNode: node,
            start: commentStart
          } = commentWS;
          if (this.input.charCodeAt(commentStart - 1) === 44) {
            switch (node.type) {
              case \\"ObjectExpression\\":
              case \\"ObjectPattern\\":
              case \\"RecordExpression\\":
                adjustInnerComments(node, node.properties, commentWS);
                break;
              case \\"CallExpression\\":
              case \\"OptionalCallExpression\\":
                adjustInnerComments(node, node.arguments, commentWS);
                break;
              case \\"FunctionDeclaration\\":
              case \\"FunctionExpression\\":
              case \\"ArrowFunctionExpression\\":
              case \\"ObjectMethod\\":
              case \\"ClassMethod\\":
              case \\"ClassPrivateMethod\\":
                adjustInnerComments(node, node.params, commentWS);
                break;
              case \\"ArrayExpression\\":
              case \\"ArrayPattern\\":
              case \\"TupleExpression\\":
                adjustInnerComments(node, node.elements, commentWS);
                break;
              case \\"ExportNamedDeclaration\\":
              case \\"ImportDeclaration\\":
                adjustInnerComments(node, node.specifiers, commentWS);
                break;
              default: {
                setInnerComments(node, comments);
              }
            }
          } else {
            setInnerComments(node, comments);
          }
        }
      }
      finalizeRemainingComments() {
        const {
          commentStack
        } = this.state;
        for (let i = commentStack.length - 1; i >= 0; i--) {
          this.finalizeComment(commentStack[i]);
        }
        this.state.commentStack = [];
      }
      resetPreviousNodeTrailingComments(node) {
        const {
          commentStack
        } = this.state;
        const {
          length
        } = commentStack;
        if (length === 0)
          return;
        const commentWS = commentStack[length - 1];
        if (commentWS.leadingNode === node) {
          commentWS.leadingNode = null;
        }
      }
      takeSurroundingComments(node, start, end) {
        const {
          commentStack
        } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0)
          return;
        let i = commentStackLength - 1;
        for (; i >= 0; i--) {
          const commentWS = commentStack[i];
          const commentEnd = commentWS.end;
          const commentStart = commentWS.start;
          if (commentStart === end) {
            commentWS.leadingNode = node;
          } else if (commentEnd === start) {
            commentWS.trailingNode = node;
          } else if (commentEnd < start) {
            break;
          }
        }
      }
    };
    var ErrorCodes = Object.freeze({
      SyntaxError: \\"BABEL_PARSER_SYNTAX_ERROR\\",
      SourceTypeModuleError: \\"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\\"
    });
    var ErrorMessages = makeErrorTemplates({
      AccessorIsGenerator: \\"A %0ter cannot be a generator.\\",
      ArgumentsInClass: \\"'arguments' is only allowed in functions and class methods.\\",
      AsyncFunctionInSingleStatementContext: \\"Async functions can only be declared at the top level or inside a block.\\",
      AwaitBindingIdentifier: \\"Can not use 'await' as identifier inside an async function.\\",
      AwaitBindingIdentifierInStaticBlock: \\"Can not use 'await' as identifier inside a static block.\\",
      AwaitExpressionFormalParameter: \\"'await' is not allowed in async function parameters.\\",
      AwaitNotInAsyncContext: \\"'await' is only allowed within async functions and at the top levels of modules.\\",
      AwaitNotInAsyncFunction: \\"'await' is only allowed within async functions.\\",
      BadGetterArity: \\"A 'get' accesor must not have any formal parameters.\\",
      BadSetterArity: \\"A 'set' accesor must have exactly one formal parameter.\\",
      BadSetterRestParameter: \\"A 'set' accesor function argument must not be a rest parameter.\\",
      ConstructorClassField: \\"Classes may not have a field named 'constructor'.\\",
      ConstructorClassPrivateField: \\"Classes may not have a private field named '#constructor'.\\",
      ConstructorIsAccessor: \\"Class constructor may not be an accessor.\\",
      ConstructorIsAsync: \\"Constructor can't be an async function.\\",
      ConstructorIsGenerator: \\"Constructor can't be a generator.\\",
      DeclarationMissingInitializer: \\"'%0' require an initialization value.\\",
      DecoratorBeforeExport: \\"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\\",
      DecoratorConstructor: \\"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\\",
      DecoratorExportClass: \\"Using the export keyword between a decorator and a class is not allowed. Please use \`export @dec class\` instead.\\",
      DecoratorSemicolon: \\"Decorators must not be followed by a semicolon.\\",
      DecoratorStaticBlock: \\"Decorators can't be used with a static block.\\",
      DeletePrivateField: \\"Deleting a private field is not allowed.\\",
      DestructureNamedImport: \\"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\\",
      DuplicateConstructor: \\"Duplicate constructor in the same class.\\",
      DuplicateDefaultExport: \\"Only one default export allowed per module.\\",
      DuplicateExport: \\"\`%0\` has already been exported. Exported identifiers must be unique.\\",
      DuplicateProto: \\"Redefinition of __proto__ property.\\",
      DuplicateRegExpFlags: \\"Duplicate regular expression flag.\\",
      ElementAfterRest: \\"Rest element must be last element.\\",
      EscapedCharNotAnIdentifier: \\"Invalid Unicode escape.\\",
      ExportBindingIsString: \\"A string literal cannot be used as an exported binding without \`from\`.\\\\n- Did you mean \`export { '%0' as '%1' } from 'some-module'\`?\\",
      ExportDefaultFromAsIdentifier: \\"'from' is not allowed as an identifier after 'export default'.\\",
      ForInOfLoopInitializer: \\"'%0' loop variable declaration may not have an initializer.\\",
      ForOfAsync: \\"The left-hand side of a for-of loop may not be 'async'.\\",
      ForOfLet: \\"The left-hand side of a for-of loop may not start with 'let'.\\",
      GeneratorInSingleStatementContext: \\"Generators can only be declared at the top level or inside a block.\\",
      IllegalBreakContinue: \\"Unsyntactic %0.\\",
      IllegalLanguageModeDirective: \\"Illegal 'use strict' directive in function with non-simple parameter list.\\",
      IllegalReturn: \\"'return' outside of function.\\",
      ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\\\n- Did you mean \`import { \\"%0\\" as foo }\`?',
      ImportCallArgumentTrailingComma: \\"Trailing comma is disallowed inside import(...) arguments.\\",
      ImportCallArity: \\"\`import()\` requires exactly %0.\\",
      ImportCallNotNewExpression: \\"Cannot use new with import(...).\\",
      ImportCallSpreadArgument: \\"\`...\` is not allowed in \`import()\`.\\",
      InvalidBigIntLiteral: \\"Invalid BigIntLiteral.\\",
      InvalidCodePoint: \\"Code point out of bounds.\\",
      InvalidCoverInitializedName: \\"Invalid shorthand property initializer.\\",
      InvalidDecimal: \\"Invalid decimal.\\",
      InvalidDigit: \\"Expected number in radix %0.\\",
      InvalidEscapeSequence: \\"Bad character escape sequence.\\",
      InvalidEscapeSequenceTemplate: \\"Invalid escape sequence in template.\\",
      InvalidEscapedReservedWord: \\"Escape sequence in keyword %0.\\",
      InvalidIdentifier: \\"Invalid identifier %0.\\",
      InvalidLhs: \\"Invalid left-hand side in %0.\\",
      InvalidLhsBinding: \\"Binding invalid left-hand side in %0.\\",
      InvalidNumber: \\"Invalid number.\\",
      InvalidOrMissingExponent: \\"Floating-point numbers require a valid exponent after the 'e'.\\",
      InvalidOrUnexpectedToken: \\"Unexpected character '%0'.\\",
      InvalidParenthesizedAssignment: \\"Invalid parenthesized assignment pattern.\\",
      InvalidPrivateFieldResolution: \\"Private name #%0 is not defined.\\",
      InvalidPropertyBindingPattern: \\"Binding member expression.\\",
      InvalidRecordProperty: \\"Only properties and spread elements are allowed in record definitions.\\",
      InvalidRestAssignmentPattern: \\"Invalid rest operator's argument.\\",
      LabelRedeclaration: \\"Label '%0' is already declared.\\",
      LetInLexicalBinding: \\"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\\",
      LineTerminatorBeforeArrow: \\"No line break is allowed before '=>'.\\",
      MalformedRegExpFlags: \\"Invalid regular expression flag.\\",
      MissingClassName: \\"A class name is required.\\",
      MissingEqInAssignment: \\"Only '=' operator can be used for specifying default value.\\",
      MissingSemicolon: \\"Missing semicolon.\\",
      MissingUnicodeEscape: \\"Expecting Unicode escape sequence \\\\\\\\uXXXX.\\",
      MixingCoalesceWithLogical: \\"Nullish coalescing operator(??) requires parens when mixing with logical operators.\\",
      ModuleAttributeDifferentFromType: \\"The only accepted module attribute is \`type\`.\\",
      ModuleAttributeInvalidValue: \\"Only string literals are allowed as module attribute values.\\",
      ModuleAttributesWithDuplicateKeys: 'Duplicate key \\"%0\\" is not allowed in module attributes.',
      ModuleExportNameHasLoneSurrogate: \\"An export name cannot include a lone surrogate, found '\\\\\\\\u%0'.\\",
      ModuleExportUndefined: \\"Export '%0' is not defined.\\",
      MultipleDefaultsInSwitch: \\"Multiple default clauses.\\",
      NewlineAfterThrow: \\"Illegal newline after throw.\\",
      NoCatchOrFinally: \\"Missing catch or finally clause.\\",
      NumberIdentifier: \\"Identifier directly after number.\\",
      NumericSeparatorInEscapeSequence: \\"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\\",
      ObsoleteAwaitStar: \\"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\\",
      OptionalChainingNoNew: \\"Constructors in/after an Optional Chain are not allowed.\\",
      OptionalChainingNoTemplate: \\"Tagged Template Literals are not allowed in optionalChain.\\",
      OverrideOnConstructor: \\"'override' modifier cannot appear on a constructor declaration.\\",
      ParamDupe: \\"Argument name clash.\\",
      PatternHasAccessor: \\"Object pattern can't contain getter or setter.\\",
      PatternHasMethod: \\"Object pattern can't contain methods.\\",
      PipeBodyIsTighter: \\"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\\",
      PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \\"proposal\\": \\"hack\\" or \\"smart\\" option.',
      PipeTopicUnbound: \\"Topic reference is unbound; it must be inside a pipe body.\\",
      PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \\"proposal\\": \\"hack\\", \\"topicToken\\": \\"%0\\" }.',
      PipeTopicUnused: \\"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\\",
      PipeUnparenthesizedBody: \\"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\\",
      PipelineBodyNoArrow: 'Unexpected arrow \\"=>\\" after pipeline body; arrow function in pipeline body must be parenthesized.',
      PipelineBodySequenceExpression: \\"Pipeline body may not be a comma-separated sequence expression.\\",
      PipelineHeadSequenceExpression: \\"Pipeline head should not be a comma-separated sequence expression.\\",
      PipelineTopicUnused: \\"Pipeline is in topic style but does not use topic reference.\\",
      PrimaryTopicNotAllowed: \\"Topic reference was used in a lexical context without topic binding.\\",
      PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \\"proposal\\": \\"hack\\" or \\"smart\\" option.',
      PrivateInExpectedIn: \\"Private names are only allowed in property accesses (\`obj.#%0\`) or in \`in\` expressions (\`#%0 in obj\`).\\",
      PrivateNameRedeclaration: \\"Duplicate private name #%0.\\",
      RecordExpressionBarIncorrectEndSyntaxType: \\"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\\",
      RecordExpressionBarIncorrectStartSyntaxType: \\"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\\",
      RecordExpressionHashIncorrectStartSyntaxType: \\"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\\",
      RecordNoProto: \\"'__proto__' is not allowed in Record expressions.\\",
      RestTrailingComma: \\"Unexpected trailing comma after rest element.\\",
      SloppyFunction: \\"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\\",
      StaticPrototype: \\"Classes may not have static property named prototype.\\",
      StrictDelete: \\"Deleting local variable in strict mode.\\",
      StrictEvalArguments: \\"Assigning to '%0' in strict mode.\\",
      StrictEvalArgumentsBinding: \\"Binding '%0' in strict mode.\\",
      StrictFunction: \\"In strict mode code, functions can only be declared at top level or inside a block.\\",
      StrictNumericEscape: \\"The only valid numeric escape in strict mode is '\\\\\\\\0'.\\",
      StrictOctalLiteral: \\"Legacy octal literals are not allowed in strict mode.\\",
      StrictWith: \\"'with' in strict mode.\\",
      SuperNotAllowed: \\"\`super()\` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\\",
      SuperPrivateField: \\"Private fields can't be accessed on super.\\",
      TrailingDecorator: \\"Decorators must be attached to a class element.\\",
      TupleExpressionBarIncorrectEndSyntaxType: \\"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\\",
      TupleExpressionBarIncorrectStartSyntaxType: \\"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\\",
      TupleExpressionHashIncorrectStartSyntaxType: \\"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\\",
      UnexpectedArgumentPlaceholder: \\"Unexpected argument placeholder.\\",
      UnexpectedAwaitAfterPipelineBody: 'Unexpected \\"await\\" after pipeline body; await must have parentheses in minimal proposal.',
      UnexpectedDigitAfterHash: \\"Unexpected digit after hash token.\\",
      UnexpectedImportExport: \\"'import' and 'export' may only appear at the top level.\\",
      UnexpectedKeyword: \\"Unexpected keyword '%0'.\\",
      UnexpectedLeadingDecorator: \\"Leading decorators must be attached to a class declaration.\\",
      UnexpectedLexicalDeclaration: \\"Lexical declaration cannot appear in a single-statement context.\\",
      UnexpectedNewTarget: \\"\`new.target\` can only be used in functions or class properties.\\",
      UnexpectedNumericSeparator: \\"A numeric separator is only allowed between two digits.\\",
      UnexpectedPrivateField: \\"Unexpected private name.\\",
      UnexpectedReservedWord: \\"Unexpected reserved word '%0'.\\",
      UnexpectedSuper: \\"'super' is only allowed in object methods and classes.\\",
      UnexpectedToken: \\"Unexpected token '%0'.\\",
      UnexpectedTokenUnaryExponentiation: \\"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\\",
      UnsupportedBind: \\"Binding should be performed on object property.\\",
      UnsupportedDecoratorExport: \\"A decorated export must export a class declaration.\\",
      UnsupportedDefaultExport: \\"Only expressions, functions or classes are allowed as the \`default\` export.\\",
      UnsupportedImport: \\"\`import\` can only be used in \`import()\` or \`import.meta\`.\\",
      UnsupportedMetaProperty: \\"The only valid meta property for %0 is %0.%1.\\",
      UnsupportedParameterDecorator: \\"Decorators cannot be used to decorate parameters.\\",
      UnsupportedPropertyDecorator: \\"Decorators cannot be used to decorate object literal properties.\\",
      UnsupportedSuper: \\"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\\",
      UnterminatedComment: \\"Unterminated comment.\\",
      UnterminatedRegExp: \\"Unterminated regular expression.\\",
      UnterminatedString: \\"Unterminated string constant.\\",
      UnterminatedTemplate: \\"Unterminated template.\\",
      VarRedeclaration: \\"Identifier '%0' has already been declared.\\",
      YieldBindingIdentifier: \\"Can not use 'yield' as identifier inside a generator.\\",
      YieldInParameter: \\"Yield expression is not allowed in formal parameters.\\",
      ZeroDigitNumericSeparator: \\"Numeric separator can not be used after leading 0.\\"
    }, ErrorCodes.SyntaxError);
    var SourceTypeModuleErrorMessages = makeErrorTemplates({
      ImportMetaOutsideModule: \`import.meta may appear only with 'sourceType: \\"module\\"'\`,
      ImportOutsideModule: \`'import' and 'export' may appear only with 'sourceType: \\"module\\"'\`
    }, ErrorCodes.SourceTypeModuleError);
    function keepReasonCodeCompat(reasonCode, syntaxPlugin) {
      {
        if (syntaxPlugin === \\"flow\\" && reasonCode === \\"PatternIsOptional\\") {
          return \\"OptionalBindingPattern\\";
        }
      }
      return reasonCode;
    }
    function makeErrorTemplates(messages, code, syntaxPlugin) {
      const templates = {};
      Object.keys(messages).forEach((reasonCode) => {
        templates[reasonCode] = Object.freeze({
          code,
          reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),
          template: messages[reasonCode]
        });
      });
      return Object.freeze(templates);
    }
    var ParserError = class extends CommentsParser {
      raise({
        code,
        reasonCode,
        template
      }, origin, ...params) {
        return this.raiseWithData(origin.node ? origin.node.loc.start : origin.at, {
          code,
          reasonCode
        }, template, ...params);
      }
      raiseOverwrite(loc, {
        code,
        template
      }, ...params) {
        const pos = indexes.get(loc);
        const message = template.replace(/%(\\\\d+)/g, (_, i) => params[i]) + \` (\${loc.line}:\${loc.column})\`;
        if (this.options.errorRecovery) {
          const errors = this.state.errors;
          for (let i = errors.length - 1; i >= 0; i--) {
            const error = errors[i];
            if (error.pos === pos) {
              return Object.assign(error, {
                message
              });
            } else if (error.pos < pos) {
              break;
            }
          }
        }
        return this._raise({
          code,
          loc,
          pos
        }, message);
      }
      raiseWithData(loc, data, errorTemplate, ...params) {
        const pos = indexes.get(loc);
        const message = errorTemplate.replace(/%(\\\\d+)/g, (_, i) => params[i]) + \` (\${loc.line}:\${loc.column})\`;
        return this._raise(Object.assign({
          loc,
          pos
        }, data), message);
      }
      _raise(errorContext, message) {
        const err = new SyntaxError(message);
        Object.assign(err, errorContext);
        if (this.options.errorRecovery) {
          if (!this.isLookahead)
            this.state.errors.push(err);
          return err;
        } else {
          throw err;
        }
      }
    };
    var estree = (superClass) => class extends superClass {
      parseRegExpLiteral({
        pattern,
        flags
      }) {
        let regex = null;
        try {
          regex = new RegExp(pattern, flags);
        } catch (e) {
        }
        const node = this.estreeParseLiteral(regex);
        node.regex = {
          pattern,
          flags
        };
        return node;
      }
      parseBigIntLiteral(value) {
        let bigInt;
        try {
          bigInt = BigInt(value);
        } catch (_unused) {
          bigInt = null;
        }
        const node = this.estreeParseLiteral(bigInt);
        node.bigint = String(node.value || value);
        return node;
      }
      parseDecimalLiteral(value) {
        const decimal = null;
        const node = this.estreeParseLiteral(decimal);
        node.decimal = String(node.value || value);
        return node;
      }
      estreeParseLiteral(value) {
        return this.parseLiteral(value, \\"Literal\\");
      }
      parseStringLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      parseNumericLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      parseNullLiteral() {
        return this.estreeParseLiteral(null);
      }
      parseBooleanLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      directiveToStmt(directive) {
        const directiveLiteral = directive.value;
        const stmt = this.startNodeAt(directive.start, directive.loc.start);
        const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);
        expression.value = directiveLiteral.extra.expressionValue;
        expression.raw = directiveLiteral.extra.raw;
        stmt.expression = this.finishNodeAt(expression, \\"Literal\\", directiveLiteral.loc.end);
        stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
        return this.finishNodeAt(stmt, \\"ExpressionStatement\\", directive.loc.end);
      }
      initFunction(node, isAsync) {
        super.initFunction(node, isAsync);
        node.expression = false;
      }
      checkDeclaration(node) {
        if (node != null && this.isObjectProperty(node)) {
          this.checkDeclaration(node.value);
        } else {
          super.checkDeclaration(node);
        }
      }
      getObjectOrClassMethodParams(method) {
        return method.value.params;
      }
      isValidDirective(stmt) {
        var _stmt$expression$extr;
        return stmt.type === \\"ExpressionStatement\\" && stmt.expression.type === \\"Literal\\" && typeof stmt.expression.value === \\"string\\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
      }
      parseBlockBody(node, ...args) {
        super.parseBlockBody(node, ...args);
        const directiveStatements = node.directives.map((d) => this.directiveToStmt(d));
        node.body = directiveStatements.concat(node.body);
        delete node.directives;
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \\"ClassMethod\\", true);
        if (method.typeParameters) {
          method.value.typeParameters = method.typeParameters;
          delete method.typeParameters;
        }
        classBody.body.push(method);
      }
      parsePrivateName() {
        const node = super.parsePrivateName();
        {
          if (!this.getPluginOption(\\"estree\\", \\"classFeatures\\")) {
            return node;
          }
        }
        return this.convertPrivateNameToPrivateIdentifier(node);
      }
      convertPrivateNameToPrivateIdentifier(node) {
        const name = super.getPrivateNameSV(node);
        node = node;
        delete node.id;
        node.name = name;
        node.type = \\"PrivateIdentifier\\";
        return node;
      }
      isPrivateName(node) {
        {
          if (!this.getPluginOption(\\"estree\\", \\"classFeatures\\")) {
            return super.isPrivateName(node);
          }
        }
        return node.type === \\"PrivateIdentifier\\";
      }
      getPrivateNameSV(node) {
        {
          if (!this.getPluginOption(\\"estree\\", \\"classFeatures\\")) {
            return super.getPrivateNameSV(node);
          }
        }
        return node.name;
      }
      parseLiteral(value, type) {
        const node = super.parseLiteral(value, type);
        node.raw = node.extra.raw;
        delete node.extra;
        return node;
      }
      parseFunctionBody(node, allowExpression, isMethod = false) {
        super.parseFunctionBody(node, allowExpression, isMethod);
        node.expression = node.body.type !== \\"BlockStatement\\";
      }
      parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        let funcNode = this.startNode();
        funcNode.kind = node.kind;
        funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
        funcNode.type = \\"FunctionExpression\\";
        delete funcNode.kind;
        node.value = funcNode;
        if (type === \\"ClassPrivateMethod\\") {
          node.computed = false;
        }
        type = \\"MethodDefinition\\";
        return this.finishNode(node, type);
      }
      parseClassProperty(...args) {
        const propertyNode = super.parseClassProperty(...args);
        {
          if (!this.getPluginOption(\\"estree\\", \\"classFeatures\\")) {
            return propertyNode;
          }
        }
        propertyNode.type = \\"PropertyDefinition\\";
        return propertyNode;
      }
      parseClassPrivateProperty(...args) {
        const propertyNode = super.parseClassPrivateProperty(...args);
        {
          if (!this.getPluginOption(\\"estree\\", \\"classFeatures\\")) {
            return propertyNode;
          }
        }
        propertyNode.type = \\"PropertyDefinition\\";
        propertyNode.computed = false;
        return propertyNode;
      }
      parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
        if (node) {
          node.type = \\"Property\\";
          if (node.kind === \\"method\\")
            node.kind = \\"init\\";
          node.shorthand = false;
        }
        return node;
      }
      parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
        const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
        if (node) {
          node.kind = \\"init\\";
          node.type = \\"Property\\";
        }
        return node;
      }
      isAssignable(node, isBinding) {
        if (node != null && this.isObjectProperty(node)) {
          return this.isAssignable(node.value, isBinding);
        }
        return super.isAssignable(node, isBinding);
      }
      toAssignable(node, isLHS = false) {
        if (node != null && this.isObjectProperty(node)) {
          this.toAssignable(node.value, isLHS);
          return node;
        }
        return super.toAssignable(node, isLHS);
      }
      toAssignableObjectExpressionProp(prop, ...args) {
        if (prop.kind === \\"get\\" || prop.kind === \\"set\\") {
          this.raise(ErrorMessages.PatternHasAccessor, {
            node: prop.key
          });
        } else if (prop.method) {
          this.raise(ErrorMessages.PatternHasMethod, {
            node: prop.key
          });
        } else {
          super.toAssignableObjectExpressionProp(prop, ...args);
        }
      }
      finishCallExpression(node, optional) {
        super.finishCallExpression(node, optional);
        if (node.callee.type === \\"Import\\") {
          node.type = \\"ImportExpression\\";
          node.source = node.arguments[0];
          if (this.hasPlugin(\\"importAssertions\\")) {
            var _node$arguments$;
            node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
          }
          delete node.arguments;
          delete node.callee;
        }
        return node;
      }
      toReferencedArguments(node) {
        if (node.type === \\"ImportExpression\\") {
          return;
        }
        super.toReferencedArguments(node);
      }
      parseExport(node) {
        super.parseExport(node);
        switch (node.type) {
          case \\"ExportAllDeclaration\\":
            node.exported = null;
            break;
          case \\"ExportNamedDeclaration\\":
            if (node.specifiers.length === 1 && node.specifiers[0].type === \\"ExportNamespaceSpecifier\\") {
              node.type = \\"ExportAllDeclaration\\";
              node.exported = node.specifiers[0].exported;
              delete node.specifiers;
            }
            break;
        }
        return node;
      }
      parseSubscript(base, startPos, startLoc, noCalls, state) {
        const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);
        if (state.optionalChainMember) {
          if (node.type === \\"OptionalMemberExpression\\" || node.type === \\"OptionalCallExpression\\") {
            node.type = node.type.substring(8);
          }
          if (state.stop) {
            const chain = this.startNodeAtNode(node);
            chain.expression = node;
            return this.finishNode(chain, \\"ChainExpression\\");
          }
        } else if (node.type === \\"MemberExpression\\" || node.type === \\"CallExpression\\") {
          node.optional = false;
        }
        return node;
      }
      hasPropertyAsPrivateName(node) {
        if (node.type === \\"ChainExpression\\") {
          node = node.expression;
        }
        return super.hasPropertyAsPrivateName(node);
      }
      isOptionalChain(node) {
        return node.type === \\"ChainExpression\\";
      }
      isObjectProperty(node) {
        return node.type === \\"Property\\" && node.kind === \\"init\\" && !node.method;
      }
      isObjectMethod(node) {
        return node.method || node.kind === \\"get\\" || node.kind === \\"set\\";
      }
    };
    var TokContext = class {
      constructor(token, preserveSpace) {
        this.token = void 0;
        this.preserveSpace = void 0;
        this.token = token;
        this.preserveSpace = !!preserveSpace;
      }
    };
    var types = {
      brace: new TokContext(\\"{\\"),
      j_oTag: new TokContext(\\"<tag\\"),
      j_cTag: new TokContext(\\"</tag\\"),
      j_expr: new TokContext(\\"<tag>...</tag>\\", true)
    };
    {
      types.template = new TokContext(\\"\`\\", true);
    }
    var beforeExpr = true;
    var startsExpr = true;
    var isLoop = true;
    var isAssign = true;
    var prefix = true;
    var postfix = true;
    var ExportedTokenType = class {
      constructor(label, conf = {}) {
        this.label = void 0;
        this.keyword = void 0;
        this.beforeExpr = void 0;
        this.startsExpr = void 0;
        this.rightAssociative = void 0;
        this.isLoop = void 0;
        this.isAssign = void 0;
        this.prefix = void 0;
        this.postfix = void 0;
        this.binop = void 0;
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.rightAssociative = !!conf.rightAssociative;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop != null ? conf.binop : null;
        {
          this.updateContext = null;
        }
      }
    };
    var keywords$1 = /* @__PURE__ */ new Map();
    function createKeyword(name, options = {}) {
      options.keyword = name;
      const token = createToken(name, options);
      keywords$1.set(name, token);
      return token;
    }
    function createBinop(name, binop) {
      return createToken(name, {
        beforeExpr,
        binop
      });
    }
    var tokenTypeCounter = -1;
    var tokenTypes = [];
    var tokenLabels = [];
    var tokenBinops = [];
    var tokenBeforeExprs = [];
    var tokenStartsExprs = [];
    var tokenPrefixes = [];
    function createToken(name, options = {}) {
      var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
      ++tokenTypeCounter;
      tokenLabels.push(name);
      tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
      tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
      tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
      tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
      tokenTypes.push(new ExportedTokenType(name, options));
      return tokenTypeCounter;
    }
    function createKeywordLike(name, options = {}) {
      var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
      ++tokenTypeCounter;
      keywords$1.set(name, tokenTypeCounter);
      tokenLabels.push(name);
      tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
      tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
      tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
      tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
      tokenTypes.push(new ExportedTokenType(\\"name\\", options));
      return tokenTypeCounter;
    }
    var tt = {
      bracketL: createToken(\\"[\\", {
        beforeExpr,
        startsExpr
      }),
      bracketHashL: createToken(\\"#[\\", {
        beforeExpr,
        startsExpr
      }),
      bracketBarL: createToken(\\"[|\\", {
        beforeExpr,
        startsExpr
      }),
      bracketR: createToken(\\"]\\"),
      bracketBarR: createToken(\\"|]\\"),
      braceL: createToken(\\"{\\", {
        beforeExpr,
        startsExpr
      }),
      braceBarL: createToken(\\"{|\\", {
        beforeExpr,
        startsExpr
      }),
      braceHashL: createToken(\\"#{\\", {
        beforeExpr,
        startsExpr
      }),
      braceR: createToken(\\"}\\", {
        beforeExpr
      }),
      braceBarR: createToken(\\"|}\\"),
      parenL: createToken(\\"(\\", {
        beforeExpr,
        startsExpr
      }),
      parenR: createToken(\\")\\"),
      comma: createToken(\\",\\", {
        beforeExpr
      }),
      semi: createToken(\\";\\", {
        beforeExpr
      }),
      colon: createToken(\\":\\", {
        beforeExpr
      }),
      doubleColon: createToken(\\"::\\", {
        beforeExpr
      }),
      dot: createToken(\\".\\"),
      question: createToken(\\"?\\", {
        beforeExpr
      }),
      questionDot: createToken(\\"?.\\"),
      arrow: createToken(\\"=>\\", {
        beforeExpr
      }),
      template: createToken(\\"template\\"),
      ellipsis: createToken(\\"...\\", {
        beforeExpr
      }),
      backQuote: createToken(\\"\`\\", {
        startsExpr
      }),
      dollarBraceL: createToken(\\"\${\\", {
        beforeExpr,
        startsExpr
      }),
      templateTail: createToken(\\"...\`\\", {
        startsExpr
      }),
      templateNonTail: createToken(\\"...\${\\", {
        beforeExpr,
        startsExpr
      }),
      at: createToken(\\"@\\"),
      hash: createToken(\\"#\\", {
        startsExpr
      }),
      interpreterDirective: createToken(\\"#!...\\"),
      eq: createToken(\\"=\\", {
        beforeExpr,
        isAssign
      }),
      assign: createToken(\\"_=\\", {
        beforeExpr,
        isAssign
      }),
      slashAssign: createToken(\\"_=\\", {
        beforeExpr,
        isAssign
      }),
      xorAssign: createToken(\\"_=\\", {
        beforeExpr,
        isAssign
      }),
      moduloAssign: createToken(\\"_=\\", {
        beforeExpr,
        isAssign
      }),
      incDec: createToken(\\"++/--\\", {
        prefix,
        postfix,
        startsExpr
      }),
      bang: createToken(\\"!\\", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      tilde: createToken(\\"~\\", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      pipeline: createBinop(\\"|>\\", 0),
      nullishCoalescing: createBinop(\\"??\\", 1),
      logicalOR: createBinop(\\"||\\", 1),
      logicalAND: createBinop(\\"&&\\", 2),
      bitwiseOR: createBinop(\\"|\\", 3),
      bitwiseXOR: createBinop(\\"^\\", 4),
      bitwiseAND: createBinop(\\"&\\", 5),
      equality: createBinop(\\"==/!=/===/!==\\", 6),
      lt: createBinop(\\"</>/<=/>=\\", 7),
      gt: createBinop(\\"</>/<=/>=\\", 7),
      relational: createBinop(\\"</>/<=/>=\\", 7),
      bitShift: createBinop(\\"<</>>/>>>\\", 8),
      plusMin: createToken(\\"+/-\\", {
        beforeExpr,
        binop: 9,
        prefix,
        startsExpr
      }),
      modulo: createToken(\\"%\\", {
        binop: 10,
        startsExpr
      }),
      star: createToken(\\"*\\", {
        binop: 10
      }),
      slash: createBinop(\\"/\\", 10),
      exponent: createToken(\\"**\\", {
        beforeExpr,
        binop: 11,
        rightAssociative: true
      }),
      _in: createKeyword(\\"in\\", {
        beforeExpr,
        binop: 7
      }),
      _instanceof: createKeyword(\\"instanceof\\", {
        beforeExpr,
        binop: 7
      }),
      _break: createKeyword(\\"break\\"),
      _case: createKeyword(\\"case\\", {
        beforeExpr
      }),
      _catch: createKeyword(\\"catch\\"),
      _continue: createKeyword(\\"continue\\"),
      _debugger: createKeyword(\\"debugger\\"),
      _default: createKeyword(\\"default\\", {
        beforeExpr
      }),
      _else: createKeyword(\\"else\\", {
        beforeExpr
      }),
      _finally: createKeyword(\\"finally\\"),
      _function: createKeyword(\\"function\\", {
        startsExpr
      }),
      _if: createKeyword(\\"if\\"),
      _return: createKeyword(\\"return\\", {
        beforeExpr
      }),
      _switch: createKeyword(\\"switch\\"),
      _throw: createKeyword(\\"throw\\", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _try: createKeyword(\\"try\\"),
      _var: createKeyword(\\"var\\"),
      _const: createKeyword(\\"const\\"),
      _with: createKeyword(\\"with\\"),
      _new: createKeyword(\\"new\\", {
        beforeExpr,
        startsExpr
      }),
      _this: createKeyword(\\"this\\", {
        startsExpr
      }),
      _super: createKeyword(\\"super\\", {
        startsExpr
      }),
      _class: createKeyword(\\"class\\", {
        startsExpr
      }),
      _extends: createKeyword(\\"extends\\", {
        beforeExpr
      }),
      _export: createKeyword(\\"export\\"),
      _import: createKeyword(\\"import\\", {
        startsExpr
      }),
      _null: createKeyword(\\"null\\", {
        startsExpr
      }),
      _true: createKeyword(\\"true\\", {
        startsExpr
      }),
      _false: createKeyword(\\"false\\", {
        startsExpr
      }),
      _typeof: createKeyword(\\"typeof\\", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _void: createKeyword(\\"void\\", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _delete: createKeyword(\\"delete\\", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _do: createKeyword(\\"do\\", {
        isLoop,
        beforeExpr
      }),
      _for: createKeyword(\\"for\\", {
        isLoop
      }),
      _while: createKeyword(\\"while\\", {
        isLoop
      }),
      _as: createKeywordLike(\\"as\\", {
        startsExpr
      }),
      _assert: createKeywordLike(\\"assert\\", {
        startsExpr
      }),
      _async: createKeywordLike(\\"async\\", {
        startsExpr
      }),
      _await: createKeywordLike(\\"await\\", {
        startsExpr
      }),
      _from: createKeywordLike(\\"from\\", {
        startsExpr
      }),
      _get: createKeywordLike(\\"get\\", {
        startsExpr
      }),
      _let: createKeywordLike(\\"let\\", {
        startsExpr
      }),
      _meta: createKeywordLike(\\"meta\\", {
        startsExpr
      }),
      _of: createKeywordLike(\\"of\\", {
        startsExpr
      }),
      _sent: createKeywordLike(\\"sent\\", {
        startsExpr
      }),
      _set: createKeywordLike(\\"set\\", {
        startsExpr
      }),
      _static: createKeywordLike(\\"static\\", {
        startsExpr
      }),
      _yield: createKeywordLike(\\"yield\\", {
        startsExpr
      }),
      _asserts: createKeywordLike(\\"asserts\\", {
        startsExpr
      }),
      _checks: createKeywordLike(\\"checks\\", {
        startsExpr
      }),
      _exports: createKeywordLike(\\"exports\\", {
        startsExpr
      }),
      _global: createKeywordLike(\\"global\\", {
        startsExpr
      }),
      _implements: createKeywordLike(\\"implements\\", {
        startsExpr
      }),
      _intrinsic: createKeywordLike(\\"intrinsic\\", {
        startsExpr
      }),
      _infer: createKeywordLike(\\"infer\\", {
        startsExpr
      }),
      _is: createKeywordLike(\\"is\\", {
        startsExpr
      }),
      _mixins: createKeywordLike(\\"mixins\\", {
        startsExpr
      }),
      _proto: createKeywordLike(\\"proto\\", {
        startsExpr
      }),
      _require: createKeywordLike(\\"require\\", {
        startsExpr
      }),
      _keyof: createKeywordLike(\\"keyof\\", {
        startsExpr
      }),
      _readonly: createKeywordLike(\\"readonly\\", {
        startsExpr
      }),
      _unique: createKeywordLike(\\"unique\\", {
        startsExpr
      }),
      _abstract: createKeywordLike(\\"abstract\\", {
        startsExpr
      }),
      _declare: createKeywordLike(\\"declare\\", {
        startsExpr
      }),
      _enum: createKeywordLike(\\"enum\\", {
        startsExpr
      }),
      _module: createKeywordLike(\\"module\\", {
        startsExpr
      }),
      _namespace: createKeywordLike(\\"namespace\\", {
        startsExpr
      }),
      _interface: createKeywordLike(\\"interface\\", {
        startsExpr
      }),
      _type: createKeywordLike(\\"type\\", {
        startsExpr
      }),
      _opaque: createKeywordLike(\\"opaque\\", {
        startsExpr
      }),
      name: createToken(\\"name\\", {
        startsExpr
      }),
      string: createToken(\\"string\\", {
        startsExpr
      }),
      num: createToken(\\"num\\", {
        startsExpr
      }),
      bigint: createToken(\\"bigint\\", {
        startsExpr
      }),
      decimal: createToken(\\"decimal\\", {
        startsExpr
      }),
      regexp: createToken(\\"regexp\\", {
        startsExpr
      }),
      privateName: createToken(\\"#name\\", {
        startsExpr
      }),
      eof: createToken(\\"eof\\"),
      jsxName: createToken(\\"jsxName\\"),
      jsxText: createToken(\\"jsxText\\", {
        beforeExpr: true
      }),
      jsxTagStart: createToken(\\"jsxTagStart\\", {
        startsExpr: true
      }),
      jsxTagEnd: createToken(\\"jsxTagEnd\\"),
      placeholder: createToken(\\"%%\\", {
        startsExpr: true
      })
    };
    function tokenIsIdentifier(token) {
      return token >= 89 && token <= 124;
    }
    function tokenKeywordOrIdentifierIsKeyword(token) {
      return token <= 88;
    }
    function tokenIsKeywordOrIdentifier(token) {
      return token >= 54 && token <= 124;
    }
    function tokenIsLiteralPropertyName(token) {
      return token >= 54 && token <= 128;
    }
    function tokenComesBeforeExpression(token) {
      return tokenBeforeExprs[token];
    }
    function tokenCanStartExpression(token) {
      return tokenStartsExprs[token];
    }
    function tokenIsAssignment(token) {
      return token >= 29 && token <= 33;
    }
    function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
      return token >= 121 && token <= 123;
    }
    function tokenIsLoop(token) {
      return token >= 86 && token <= 88;
    }
    function tokenIsKeyword(token) {
      return token >= 54 && token <= 88;
    }
    function tokenIsOperator(token) {
      return token >= 37 && token <= 55;
    }
    function tokenIsPostfix(token) {
      return token === 34;
    }
    function tokenIsPrefix(token) {
      return tokenPrefixes[token];
    }
    function tokenIsTSTypeOperator(token) {
      return token >= 113 && token <= 115;
    }
    function tokenIsTSDeclarationStart(token) {
      return token >= 116 && token <= 122;
    }
    function tokenLabelName(token) {
      return tokenLabels[token];
    }
    function tokenOperatorPrecedence(token) {
      return tokenBinops[token];
    }
    function tokenIsRightAssociative(token) {
      return token === 53;
    }
    function tokenIsTemplate(token) {
      return token >= 24 && token <= 25;
    }
    function getExportedToken(token) {
      return tokenTypes[token];
    }
    {
      tokenTypes[8].updateContext = (context) => {
        context.pop();
      };
      tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
        context.push(types.brace);
      };
      tokenTypes[22].updateContext = (context) => {
        if (context[context.length - 1] === types.template) {
          context.pop();
        } else {
          context.push(types.template);
        }
      };
      tokenTypes[134].updateContext = (context) => {
        context.push(types.j_expr, types.j_oTag);
      };
    }
    var nonASCIIidentifierStartChars = \\"\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0560-\\\\u0588\\\\u05D0-\\\\u05EA\\\\u05EF-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u0860-\\\\u086A\\\\u0870-\\\\u0887\\\\u0889-\\\\u088E\\\\u08A0-\\\\u08C9\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u09FC\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0AF9\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58-\\\\u0C5A\\\\u0C5D\\\\u0C60\\\\u0C61\\\\u0C80\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D04-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D54-\\\\u0D56\\\\u0D5F-\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E86-\\\\u0E8A\\\\u0E8C-\\\\u0EA3\\\\u0EA5\\\\u0EA7-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F5\\\\u13F8-\\\\u13FD\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u1711\\\\u171F-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1878\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4C\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1C80-\\\\u1C88\\\\u1C90-\\\\u1CBA\\\\u1CBD-\\\\u1CBF\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF3\\\\u1CF5\\\\u1CF6\\\\u1CFA\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2118-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309B-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312F\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BF\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DBF\\\\u4E00-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA7CA\\\\uA7D0\\\\uA7D1\\\\uA7D3\\\\uA7D5-\\\\uA7D9\\\\uA7F2-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA8FD\\\\uA8FE\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB69\\\\uAB70-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC\\";
    var nonASCIIidentifierChars = \\"\\\\u200C\\\\u200D\\\\xB7\\\\u0300-\\\\u036F\\\\u0387\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u0669\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u06F0-\\\\u06F9\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07C0-\\\\u07C9\\\\u07EB-\\\\u07F3\\\\u07FD\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0859-\\\\u085B\\\\u0898-\\\\u089F\\\\u08CA-\\\\u08E1\\\\u08E3-\\\\u0903\\\\u093A-\\\\u093C\\\\u093E-\\\\u094F\\\\u0951-\\\\u0957\\\\u0962\\\\u0963\\\\u0966-\\\\u096F\\\\u0981-\\\\u0983\\\\u09BC\\\\u09BE-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CD\\\\u09D7\\\\u09E2\\\\u09E3\\\\u09E6-\\\\u09EF\\\\u09FE\\\\u0A01-\\\\u0A03\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A66-\\\\u0A71\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0ABC\\\\u0ABE-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0AFA-\\\\u0AFF\\\\u0B01-\\\\u0B03\\\\u0B3C\\\\u0B3E-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B55-\\\\u0B57\\\\u0B62\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B82\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C04\\\\u0C3C\\\\u0C3E-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0CBC\\\\u0CBE-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CE2\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0D00-\\\\u0D03\\\\u0D3B\\\\u0D3C\\\\u0D3E-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4D\\\\u0D57\\\\u0D62\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D81-\\\\u0D83\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0EB1\\\\u0EB4-\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E\\\\u0F3F\\\\u0F71-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F8D-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102B-\\\\u103E\\\\u1040-\\\\u1049\\\\u1056-\\\\u1059\\\\u105E-\\\\u1060\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1071-\\\\u1074\\\\u1082-\\\\u108D\\\\u108F-\\\\u109D\\\\u135D-\\\\u135F\\\\u1369-\\\\u1371\\\\u1712-\\\\u1715\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B4-\\\\u17D3\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u180F-\\\\u1819\\\\u18A9\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19DA\\\\u1A17-\\\\u1A1B\\\\u1A55-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AB0-\\\\u1ABD\\\\u1ABF-\\\\u1ACE\\\\u1B00-\\\\u1B04\\\\u1B34-\\\\u1B44\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1B82\\\\u1BA1-\\\\u1BAD\\\\u1BB0-\\\\u1BB9\\\\u1BE6-\\\\u1BF3\\\\u1C24-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE8\\\\u1CED\\\\u1CF4\\\\u1CF7-\\\\u1CF9\\\\u1DC0-\\\\u1DFF\\\\u203F\\\\u2040\\\\u2054\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2D7F\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA620-\\\\uA629\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA69E\\\\uA69F\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA823-\\\\uA827\\\\uA82C\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C5\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F1\\\\uA8FF-\\\\uA909\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA953\\\\uA980-\\\\uA983\\\\uA9B3-\\\\uA9C0\\\\uA9D0-\\\\uA9D9\\\\uA9E5\\\\uA9F0-\\\\uA9F9\\\\uAA29-\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA7B-\\\\uAA7D\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uAAEB-\\\\uAAEF\\\\uAAF5\\\\uAAF6\\\\uABE3-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2F\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF10-\\\\uFF19\\\\uFF3F\\";
    var nonASCIIidentifierStart = new RegExp(\\"[\\" + nonASCIIidentifierStartChars + \\"]\\");
    var nonASCIIidentifier = new RegExp(\\"[\\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \\"]\\");
    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
    var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
    var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
    function isInAstralSet(code, set) {
      let pos = 65536;
      for (let i = 0, length = set.length; i < length; i += 2) {
        pos += set[i];
        if (pos > code)
          return false;
        pos += set[i + 1];
        if (pos >= code)
          return true;
      }
      return false;
    }
    function isIdentifierStart(code) {
      if (code < 65)
        return code === 36;
      if (code <= 90)
        return true;
      if (code < 97)
        return code === 95;
      if (code <= 122)
        return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
      }
      return isInAstralSet(code, astralIdentifierStartCodes);
    }
    function isIdentifierChar(code) {
      if (code < 48)
        return code === 36;
      if (code < 58)
        return true;
      if (code < 65)
        return false;
      if (code <= 90)
        return true;
      if (code < 97)
        return code === 95;
      if (code <= 122)
        return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
      }
      return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
    }
    var reservedWords = {
      keyword: [\\"break\\", \\"case\\", \\"catch\\", \\"continue\\", \\"debugger\\", \\"default\\", \\"do\\", \\"else\\", \\"finally\\", \\"for\\", \\"function\\", \\"if\\", \\"return\\", \\"switch\\", \\"throw\\", \\"try\\", \\"var\\", \\"const\\", \\"while\\", \\"with\\", \\"new\\", \\"this\\", \\"super\\", \\"class\\", \\"extends\\", \\"export\\", \\"import\\", \\"null\\", \\"true\\", \\"false\\", \\"in\\", \\"instanceof\\", \\"typeof\\", \\"void\\", \\"delete\\"],
      strict: [\\"implements\\", \\"interface\\", \\"let\\", \\"package\\", \\"private\\", \\"protected\\", \\"public\\", \\"static\\", \\"yield\\"],
      strictBind: [\\"eval\\", \\"arguments\\"]
    };
    var keywords = new Set(reservedWords.keyword);
    var reservedWordsStrictSet = new Set(reservedWords.strict);
    var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
    function isReservedWord(word, inModule) {
      return inModule && word === \\"await\\" || word === \\"enum\\";
    }
    function isStrictReservedWord(word, inModule) {
      return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
    }
    function isStrictBindOnlyReservedWord(word) {
      return reservedWordsStrictBindSet.has(word);
    }
    function isStrictBindReservedWord(word, inModule) {
      return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
    }
    function isKeyword(word) {
      return keywords.has(word);
    }
    function isIteratorStart(current, next) {
      return current === 64 && next === 64;
    }
    var reservedWordLikeSet = /* @__PURE__ */ new Set([\\"break\\", \\"case\\", \\"catch\\", \\"continue\\", \\"debugger\\", \\"default\\", \\"do\\", \\"else\\", \\"finally\\", \\"for\\", \\"function\\", \\"if\\", \\"return\\", \\"switch\\", \\"throw\\", \\"try\\", \\"var\\", \\"const\\", \\"while\\", \\"with\\", \\"new\\", \\"this\\", \\"super\\", \\"class\\", \\"extends\\", \\"export\\", \\"import\\", \\"null\\", \\"true\\", \\"false\\", \\"in\\", \\"instanceof\\", \\"typeof\\", \\"void\\", \\"delete\\", \\"implements\\", \\"interface\\", \\"let\\", \\"package\\", \\"private\\", \\"protected\\", \\"public\\", \\"static\\", \\"yield\\", \\"eval\\", \\"arguments\\", \\"enum\\", \\"await\\"]);
    function canBeReservedWord(word) {
      return reservedWordLikeSet.has(word);
    }
    var SCOPE_OTHER = 0;
    var SCOPE_PROGRAM = 1;
    var SCOPE_FUNCTION = 2;
    var SCOPE_ARROW = 4;
    var SCOPE_SIMPLE_CATCH = 8;
    var SCOPE_SUPER = 16;
    var SCOPE_DIRECT_SUPER = 32;
    var SCOPE_CLASS = 64;
    var SCOPE_STATIC_BLOCK = 128;
    var SCOPE_TS_MODULE = 256;
    var SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
    var BIND_KIND_VALUE = 1;
    var BIND_KIND_TYPE = 2;
    var BIND_SCOPE_VAR = 4;
    var BIND_SCOPE_LEXICAL = 8;
    var BIND_SCOPE_FUNCTION = 16;
    var BIND_FLAGS_NONE = 64;
    var BIND_FLAGS_CLASS = 128;
    var BIND_FLAGS_TS_ENUM = 256;
    var BIND_FLAGS_TS_CONST_ENUM = 512;
    var BIND_FLAGS_TS_EXPORT_ONLY = 1024;
    var BIND_FLAGS_FLOW_DECLARE_FN = 2048;
    var BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS;
    var BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0;
    var BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0;
    var BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0;
    var BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS;
    var BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0;
    var BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM;
    var BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;
    var BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE;
    var BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE;
    var BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM;
    var BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;
    var BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
    var CLASS_ELEMENT_FLAG_STATIC = 4;
    var CLASS_ELEMENT_KIND_GETTER = 2;
    var CLASS_ELEMENT_KIND_SETTER = 1;
    var CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
    var CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC;
    var CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC;
    var CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER;
    var CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER;
    var CLASS_ELEMENT_OTHER = 0;
    var Scope = class {
      constructor(flags) {
        this.var = /* @__PURE__ */ new Set();
        this.lexical = /* @__PURE__ */ new Set();
        this.functions = /* @__PURE__ */ new Set();
        this.flags = flags;
      }
    };
    var ScopeHandler = class {
      constructor(raise, inModule) {
        this.scopeStack = [];
        this.undefinedExports = /* @__PURE__ */ new Map();
        this.raise = raise;
        this.inModule = inModule;
      }
      get inFunction() {
        return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;
      }
      get allowSuper() {
        return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;
      }
      get allowDirectSuper() {
        return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;
      }
      get inClass() {
        return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;
      }
      get inClassAndNotInNonArrowFunction() {
        const flags = this.currentThisScopeFlags();
        return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;
      }
      get inStaticBlock() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & SCOPE_STATIC_BLOCK) {
            return true;
          }
          if (flags & (SCOPE_VAR | SCOPE_CLASS)) {
            return false;
          }
        }
      }
      get inNonArrowFunction() {
        return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;
      }
      get treatFunctionsAsVar() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      }
      createScope(flags) {
        return new Scope(flags);
      }
      enter(flags) {
        this.scopeStack.push(this.createScope(flags));
      }
      exit() {
        this.scopeStack.pop();
      }
      treatFunctionsAsVarInScope(scope) {
        return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);
      }
      declareName(name, bindingType, loc) {
        let scope = this.currentScope();
        if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {
          this.checkRedeclarationInScope(scope, name, bindingType, loc);
          if (bindingType & BIND_SCOPE_FUNCTION) {
            scope.functions.add(name);
          } else {
            scope.lexical.add(name);
          }
          if (bindingType & BIND_SCOPE_LEXICAL) {
            this.maybeExportDefined(scope, name);
          }
        } else if (bindingType & BIND_SCOPE_VAR) {
          for (let i = this.scopeStack.length - 1; i >= 0; --i) {
            scope = this.scopeStack[i];
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            scope.var.add(name);
            this.maybeExportDefined(scope, name);
            if (scope.flags & SCOPE_VAR)
              break;
          }
        }
        if (this.inModule && scope.flags & SCOPE_PROGRAM) {
          this.undefinedExports.delete(name);
        }
      }
      maybeExportDefined(scope, name) {
        if (this.inModule && scope.flags & SCOPE_PROGRAM) {
          this.undefinedExports.delete(name);
        }
      }
      checkRedeclarationInScope(scope, name, bindingType, loc) {
        if (this.isRedeclaredInScope(scope, name, bindingType)) {
          this.raise(ErrorMessages.VarRedeclaration, {
            at: loc
          }, name);
        }
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (!(bindingType & BIND_KIND_VALUE))
          return false;
        if (bindingType & BIND_SCOPE_LEXICAL) {
          return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
        }
        if (bindingType & BIND_SCOPE_FUNCTION) {
          return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
        }
        return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
      }
      checkLocalExport(id) {
        const {
          name
        } = id;
        const topLevelScope = this.scopeStack[0];
        if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
          this.undefinedExports.set(name, id.loc.start);
        }
      }
      currentScope() {
        return this.scopeStack[this.scopeStack.length - 1];
      }
      currentVarScopeFlags() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & SCOPE_VAR) {
            return flags;
          }
        }
      }
      currentThisScopeFlags() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {
            return flags;
          }
        }
      }
    };
    var FlowScope = class extends Scope {
      constructor(...args) {
        super(...args);
        this.declareFunctions = /* @__PURE__ */ new Set();
      }
    };
    var FlowScopeHandler = class extends ScopeHandler {
      createScope(flags) {
        return new FlowScope(flags);
      }
      declareName(name, bindingType, loc) {
        const scope = this.currentScope();
        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
          this.checkRedeclarationInScope(scope, name, bindingType, loc);
          this.maybeExportDefined(scope, name);
          scope.declareFunctions.add(name);
          return;
        }
        super.declareName(...arguments);
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (super.isRedeclaredInScope(...arguments))
          return true;
        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
          return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
        }
        return false;
      }
      checkLocalExport(id) {
        if (!this.scopeStack[0].declareFunctions.has(id.name)) {
          super.checkLocalExport(id);
        }
      }
    };
    var lineBreak = /\\\\r\\\\n?|[\\\\n\\\\u2028\\\\u2029]/;
    var lineBreakG = new RegExp(lineBreak.source, \\"g\\");
    function isNewLine(code) {
      switch (code) {
        case 10:
        case 13:
        case 8232:
        case 8233:
          return true;
        default:
          return false;
      }
    }
    var skipWhiteSpace = /(?:\\\\s|\\\\/\\\\/.*|\\\\/\\\\*[^]*?\\\\*\\\\/)*/g;
    var skipWhiteSpaceInLine = /(?:[^\\\\S\\\\n\\\\r\\\\u2028\\\\u2029]|\\\\/\\\\/.*|\\\\/\\\\*.*?\\\\*\\\\/)*/y;
    var skipWhiteSpaceToLineBreak = new RegExp(\\"(?=(\\" + skipWhiteSpaceInLine.source + \\"))\\\\\\\\1\\" + /(?=[\\\\n\\\\r\\\\u2028\\\\u2029]|\\\\/\\\\*(?!.*?\\\\*\\\\/)|$)/.source, \\"y\\");
    function isWhitespace(code) {
      switch (code) {
        case 9:
        case 11:
        case 12:
        case 32:
        case 160:
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    }
    var State = class {
      constructor() {
        this.strict = void 0;
        this.curLine = void 0;
        this.lineStart = void 0;
        this.startLoc = void 0;
        this.endLoc = void 0;
        this.errors = [];
        this.potentialArrowAt = -1;
        this.noArrowAt = [];
        this.noArrowParamsConversionAt = [];
        this.maybeInArrowParameters = false;
        this.inType = false;
        this.noAnonFunctionType = false;
        this.hasFlowComment = false;
        this.isAmbientContext = false;
        this.inAbstractClass = false;
        this.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        this.soloAwait = false;
        this.inFSharpPipelineDirectBody = false;
        this.labels = [];
        this.decoratorStack = [[]];
        this.comments = [];
        this.commentStack = [];
        this.pos = 0;
        this.type = 131;
        this.value = null;
        this.start = 0;
        this.end = 0;
        this.lastTokEndLoc = null;
        this.lastTokStartLoc = null;
        this.lastTokStart = 0;
        this.context = [types.brace];
        this.canStartJSXElement = true;
        this.containsEsc = false;
        this.strictErrors = /* @__PURE__ */ new Map();
        this.tokensLength = 0;
      }
      init({
        strictMode,
        sourceType,
        startLine,
        startColumn
      }) {
        this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \\"module\\";
        this.curLine = startLine;
        this.lineStart = -startColumn;
        this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
      }
      curPosition() {
        return new Position(this.curLine, this.pos - this.lineStart, this.pos);
      }
      clone(skipArrays) {
        const state = new State();
        const keys = Object.keys(this);
        for (let i = 0, length = keys.length; i < length; i++) {
          const key = keys[i];
          let val = this[key];
          if (!skipArrays && Array.isArray(val)) {
            val = val.slice();
          }
          state[key] = val;
        }
        return state;
      }
    };
    var _isDigit = function isDigit(code) {
      return code >= 48 && code <= 57;
    };
    var VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100]);
    var forbiddenNumericSeparatorSiblings = {
      decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],
      hex: [46, 88, 95, 120]
    };
    var allowedNumericSeparatorSiblings = {};
    allowedNumericSeparatorSiblings.bin = [48, 49];
    allowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];
    allowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];
    allowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];
    var Token = class {
      constructor(state) {
        this.type = state.type;
        this.value = state.value;
        this.start = state.start;
        this.end = state.end;
        this.loc = new SourceLocation(state.startLoc, state.endLoc);
      }
    };
    var Tokenizer = class extends ParserError {
      constructor(options, input) {
        super();
        this.isLookahead = void 0;
        this.tokens = [];
        this.state = new State();
        this.state.init(options);
        this.input = input;
        this.length = input.length;
        this.isLookahead = false;
      }
      pushToken(token) {
        this.tokens.length = this.state.tokensLength;
        this.tokens.push(token);
        ++this.state.tokensLength;
      }
      next() {
        this.checkKeywordEscapes();
        if (this.options.tokens) {
          this.pushToken(new Token(this.state));
        }
        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
      }
      eat(type) {
        if (this.match(type)) {
          this.next();
          return true;
        } else {
          return false;
        }
      }
      match(type) {
        return this.state.type === type;
      }
      createLookaheadState(state) {
        return {
          pos: state.pos,
          value: null,
          type: state.type,
          start: state.start,
          end: state.end,
          context: [this.curContext()],
          inType: state.inType,
          startLoc: state.startLoc,
          lastTokEndLoc: state.lastTokEndLoc,
          curLine: state.curLine,
          lineStart: state.lineStart,
          curPosition: state.curPosition
        };
      }
      lookahead() {
        const old = this.state;
        this.state = this.createLookaheadState(old);
        this.isLookahead = true;
        this.nextToken();
        this.isLookahead = false;
        const curr = this.state;
        this.state = old;
        return curr;
      }
      nextTokenStart() {
        return this.nextTokenStartSince(this.state.pos);
      }
      nextTokenStartSince(pos) {
        skipWhiteSpace.lastIndex = pos;
        return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
      }
      lookaheadCharCode() {
        return this.input.charCodeAt(this.nextTokenStart());
      }
      codePointAtPos(pos) {
        let cp = this.input.charCodeAt(pos);
        if ((cp & 64512) === 55296 && ++pos < this.input.length) {
          const trail = this.input.charCodeAt(pos);
          if ((trail & 64512) === 56320) {
            cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
          }
        }
        return cp;
      }
      setStrict(strict) {
        this.state.strict = strict;
        if (strict) {
          this.state.strictErrors.forEach(({
            message,
            loc
          }) => this.raise(message, {
            at: loc
          }));
          this.state.strictErrors.clear();
        }
      }
      curContext() {
        return this.state.context[this.state.context.length - 1];
      }
      nextToken() {
        this.skipSpace();
        this.state.start = this.state.pos;
        if (!this.isLookahead)
          this.state.startLoc = this.state.curPosition();
        if (this.state.pos >= this.length) {
          this.finishToken(131);
          return;
        }
        this.getTokenFromCode(this.codePointAtPos(this.state.pos));
      }
      skipBlockComment() {
        let startLoc;
        if (!this.isLookahead)
          startLoc = this.state.curPosition();
        const start = this.state.pos;
        const end = this.input.indexOf(\\"*/\\", start + 2);
        if (end === -1) {
          throw this.raise(ErrorMessages.UnterminatedComment, {
            at: this.state.curPosition()
          });
        }
        this.state.pos = end + 2;
        lineBreakG.lastIndex = start + 2;
        while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
          ++this.state.curLine;
          this.state.lineStart = lineBreakG.lastIndex;
        }
        if (this.isLookahead)
          return;
        const comment = {
          type: \\"CommentBlock\\",
          value: this.input.slice(start + 2, end),
          start,
          end: end + 2,
          loc: new SourceLocation(startLoc, this.state.curPosition())
        };
        if (this.options.tokens)
          this.pushToken(comment);
        return comment;
      }
      skipLineComment(startSkip) {
        const start = this.state.pos;
        let startLoc;
        if (!this.isLookahead)
          startLoc = this.state.curPosition();
        let ch = this.input.charCodeAt(this.state.pos += startSkip);
        if (this.state.pos < this.length) {
          while (!isNewLine(ch) && ++this.state.pos < this.length) {
            ch = this.input.charCodeAt(this.state.pos);
          }
        }
        if (this.isLookahead)
          return;
        const end = this.state.pos;
        const value = this.input.slice(start + startSkip, end);
        const comment = {
          type: \\"CommentLine\\",
          value,
          start,
          end,
          loc: new SourceLocation(startLoc, this.state.curPosition())
        };
        if (this.options.tokens)
          this.pushToken(comment);
        return comment;
      }
      skipSpace() {
        const spaceStart = this.state.pos;
        const comments = [];
        loop:
          while (this.state.pos < this.length) {
            const ch = this.input.charCodeAt(this.state.pos);
            switch (ch) {
              case 32:
              case 160:
              case 9:
                ++this.state.pos;
                break;
              case 13:
                if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                  ++this.state.pos;
                }
              case 10:
              case 8232:
              case 8233:
                ++this.state.pos;
                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
                break;
              case 47:
                switch (this.input.charCodeAt(this.state.pos + 1)) {
                  case 42: {
                    const comment = this.skipBlockComment();
                    if (comment !== void 0) {
                      this.addComment(comment);
                      if (this.options.attachComment)
                        comments.push(comment);
                    }
                    break;
                  }
                  case 47: {
                    const comment = this.skipLineComment(2);
                    if (comment !== void 0) {
                      this.addComment(comment);
                      if (this.options.attachComment)
                        comments.push(comment);
                    }
                    break;
                  }
                  default:
                    break loop;
                }
                break;
              default:
                if (isWhitespace(ch)) {
                  ++this.state.pos;
                } else if (ch === 45 && !this.inModule) {
                  const pos = this.state.pos;
                  if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                    const comment = this.skipLineComment(3);
                    if (comment !== void 0) {
                      this.addComment(comment);
                      if (this.options.attachComment)
                        comments.push(comment);
                    }
                  } else {
                    break loop;
                  }
                } else if (ch === 60 && !this.inModule) {
                  const pos = this.state.pos;
                  if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                    const comment = this.skipLineComment(4);
                    if (comment !== void 0) {
                      this.addComment(comment);
                      if (this.options.attachComment)
                        comments.push(comment);
                    }
                  } else {
                    break loop;
                  }
                } else {
                  break loop;
                }
            }
          }
        if (comments.length > 0) {
          const end = this.state.pos;
          const CommentWhitespace = {
            start: spaceStart,
            end,
            comments,
            leadingNode: null,
            trailingNode: null,
            containingNode: null
          };
          this.state.commentStack.push(CommentWhitespace);
        }
      }
      finishToken(type, val) {
        this.state.end = this.state.pos;
        this.state.endLoc = this.state.curPosition();
        const prevType = this.state.type;
        this.state.type = type;
        this.state.value = val;
        if (!this.isLookahead) {
          this.updateContext(prevType);
        }
      }
      replaceToken(type) {
        this.state.type = type;
        this.updateContext();
      }
      readToken_numberSign() {
        if (this.state.pos === 0 && this.readToken_interpreter()) {
          return;
        }
        const nextPos = this.state.pos + 1;
        const next = this.codePointAtPos(nextPos);
        if (next >= 48 && next <= 57) {
          throw this.raise(ErrorMessages.UnexpectedDigitAfterHash, {
            at: this.state.curPosition()
          });
        }
        if (next === 123 || next === 91 && this.hasPlugin(\\"recordAndTuple\\")) {
          this.expectPlugin(\\"recordAndTuple\\");
          if (this.getPluginOption(\\"recordAndTuple\\", \\"syntaxType\\") !== \\"hash\\") {
            throw this.raise(next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType, {
              at: this.state.curPosition()
            });
          }
          this.state.pos += 2;
          if (next === 123) {
            this.finishToken(7);
          } else {
            this.finishToken(1);
          }
        } else if (isIdentifierStart(next)) {
          ++this.state.pos;
          this.finishToken(130, this.readWord1(next));
        } else if (next === 92) {
          ++this.state.pos;
          this.finishToken(130, this.readWord1());
        } else {
          this.finishOp(27, 1);
        }
      }
      readToken_dot() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next >= 48 && next <= 57) {
          this.readNumber(true);
          return;
        }
        if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
          this.state.pos += 3;
          this.finishToken(21);
        } else {
          ++this.state.pos;
          this.finishToken(16);
        }
      }
      readToken_slash() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          this.finishOp(31, 2);
        } else {
          this.finishOp(52, 1);
        }
      }
      readToken_interpreter() {
        if (this.state.pos !== 0 || this.length < 2)
          return false;
        let ch = this.input.charCodeAt(this.state.pos + 1);
        if (ch !== 33)
          return false;
        const start = this.state.pos;
        this.state.pos += 1;
        while (!isNewLine(ch) && ++this.state.pos < this.length) {
          ch = this.input.charCodeAt(this.state.pos);
        }
        const value = this.input.slice(start + 2, this.state.pos);
        this.finishToken(28, value);
        return true;
      }
      readToken_mult_modulo(code) {
        let type = code === 42 ? 51 : 50;
        let width = 1;
        let next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 42 && next === 42) {
          width++;
          next = this.input.charCodeAt(this.state.pos + 2);
          type = 53;
        }
        if (next === 61 && !this.state.inType) {
          width++;
          type = code === 37 ? 33 : 30;
        }
        this.finishOp(type, width);
      }
      readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
          if (this.input.charCodeAt(this.state.pos + 2) === 61) {
            this.finishOp(30, 3);
          } else {
            this.finishOp(code === 124 ? 39 : 40, 2);
          }
          return;
        }
        if (code === 124) {
          if (next === 62) {
            this.finishOp(37, 2);
            return;
          }
          if (this.hasPlugin(\\"recordAndTuple\\") && next === 125) {
            if (this.getPluginOption(\\"recordAndTuple\\", \\"syntaxType\\") !== \\"bar\\") {
              throw this.raise(ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType, {
                at: this.state.curPosition()
              });
            }
            this.state.pos += 2;
            this.finishToken(9);
            return;
          }
          if (this.hasPlugin(\\"recordAndTuple\\") && next === 93) {
            if (this.getPluginOption(\\"recordAndTuple\\", \\"syntaxType\\") !== \\"bar\\") {
              throw this.raise(ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType, {
                at: this.state.curPosition()
              });
            }
            this.state.pos += 2;
            this.finishToken(4);
            return;
          }
        }
        if (next === 61) {
          this.finishOp(30, 2);
          return;
        }
        this.finishOp(code === 124 ? 41 : 43, 1);
      }
      readToken_caret() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61 && !this.state.inType) {
          this.finishOp(32, 2);
        } else {
          this.finishOp(42, 1);
        }
      }
      readToken_plus_min(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
          this.finishOp(34, 2);
          return;
        }
        if (next === 61) {
          this.finishOp(30, 2);
        } else {
          this.finishOp(49, 1);
        }
      }
      readToken_lt() {
        const {
          pos
        } = this.state;
        const next = this.input.charCodeAt(pos + 1);
        if (next === 60) {
          if (this.input.charCodeAt(pos + 2) === 61) {
            this.finishOp(30, 3);
            return;
          }
          this.finishOp(48, 2);
          return;
        }
        if (next === 61) {
          this.finishOp(47, 2);
          return;
        }
        this.finishOp(45, 1);
      }
      readToken_gt() {
        const {
          pos
        } = this.state;
        const next = this.input.charCodeAt(pos + 1);
        if (next === 62) {
          const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(pos + size) === 61) {
            this.finishOp(30, size + 1);
            return;
          }
          this.finishOp(48, size);
          return;
        }
        if (next === 61) {
          this.finishOp(47, 2);
          return;
        }
        this.finishOp(46, 1);
      }
      readToken_eq_excl(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          this.finishOp(44, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
          return;
        }
        if (code === 61 && next === 62) {
          this.state.pos += 2;
          this.finishToken(19);
          return;
        }
        this.finishOp(code === 61 ? 29 : 35, 1);
      }
      readToken_question() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        const next2 = this.input.charCodeAt(this.state.pos + 2);
        if (next === 63) {
          if (next2 === 61) {
            this.finishOp(30, 3);
          } else {
            this.finishOp(38, 2);
          }
        } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
          this.state.pos += 2;
          this.finishToken(18);
        } else {
          ++this.state.pos;
          this.finishToken(17);
        }
      }
      getTokenFromCode(code) {
        switch (code) {
          case 46:
            this.readToken_dot();
            return;
          case 40:
            ++this.state.pos;
            this.finishToken(10);
            return;
          case 41:
            ++this.state.pos;
            this.finishToken(11);
            return;
          case 59:
            ++this.state.pos;
            this.finishToken(13);
            return;
          case 44:
            ++this.state.pos;
            this.finishToken(12);
            return;
          case 91:
            if (this.hasPlugin(\\"recordAndTuple\\") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption(\\"recordAndTuple\\", \\"syntaxType\\") !== \\"bar\\") {
                throw this.raise(ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType, {
                  at: this.state.curPosition()
                });
              }
              this.state.pos += 2;
              this.finishToken(2);
            } else {
              ++this.state.pos;
              this.finishToken(0);
            }
            return;
          case 93:
            ++this.state.pos;
            this.finishToken(3);
            return;
          case 123:
            if (this.hasPlugin(\\"recordAndTuple\\") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption(\\"recordAndTuple\\", \\"syntaxType\\") !== \\"bar\\") {
                throw this.raise(ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType, {
                  at: this.state.curPosition()
                });
              }
              this.state.pos += 2;
              this.finishToken(6);
            } else {
              ++this.state.pos;
              this.finishToken(5);
            }
            return;
          case 125:
            ++this.state.pos;
            this.finishToken(8);
            return;
          case 58:
            if (this.hasPlugin(\\"functionBind\\") && this.input.charCodeAt(this.state.pos + 1) === 58) {
              this.finishOp(15, 2);
            } else {
              ++this.state.pos;
              this.finishToken(14);
            }
            return;
          case 63:
            this.readToken_question();
            return;
          case 96:
            this.readTemplateToken();
            return;
          case 48: {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next === 120 || next === 88) {
              this.readRadixNumber(16);
              return;
            }
            if (next === 111 || next === 79) {
              this.readRadixNumber(8);
              return;
            }
            if (next === 98 || next === 66) {
              this.readRadixNumber(2);
              return;
            }
          }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            this.readNumber(false);
            return;
          case 34:
          case 39:
            this.readString(code);
            return;
          case 47:
            this.readToken_slash();
            return;
          case 37:
          case 42:
            this.readToken_mult_modulo(code);
            return;
          case 124:
          case 38:
            this.readToken_pipe_amp(code);
            return;
          case 94:
            this.readToken_caret();
            return;
          case 43:
          case 45:
            this.readToken_plus_min(code);
            return;
          case 60:
            this.readToken_lt();
            return;
          case 62:
            this.readToken_gt();
            return;
          case 61:
          case 33:
            this.readToken_eq_excl(code);
            return;
          case 126:
            this.finishOp(36, 1);
            return;
          case 64:
            ++this.state.pos;
            this.finishToken(26);
            return;
          case 35:
            this.readToken_numberSign();
            return;
          case 92:
            this.readWord();
            return;
          default:
            if (isIdentifierStart(code)) {
              this.readWord(code);
              return;
            }
        }
        throw this.raise(ErrorMessages.InvalidOrUnexpectedToken, {
          at: this.state.curPosition()
        }, String.fromCodePoint(code));
      }
      finishOp(type, size) {
        const str = this.input.slice(this.state.pos, this.state.pos + size);
        this.state.pos += size;
        this.finishToken(type, str);
      }
      readRegexp() {
        const startLoc = this.state.startLoc;
        const start = this.state.start + 1;
        let escaped, inClass;
        let {
          pos
        } = this.state;
        for (; ; ++pos) {
          if (pos >= this.length) {
            throw this.raise(ErrorMessages.UnterminatedRegExp, {
              at: createPositionWithColumnOffset(startLoc, 1)
            });
          }
          const ch = this.input.charCodeAt(pos);
          if (isNewLine(ch)) {
            throw this.raise(ErrorMessages.UnterminatedRegExp, {
              at: createPositionWithColumnOffset(startLoc, 1)
            });
          }
          if (escaped) {
            escaped = false;
          } else {
            if (ch === 91) {
              inClass = true;
            } else if (ch === 93 && inClass) {
              inClass = false;
            } else if (ch === 47 && !inClass) {
              break;
            }
            escaped = ch === 92;
          }
        }
        const content = this.input.slice(start, pos);
        ++pos;
        let mods = \\"\\";
        while (pos < this.length) {
          const cp = this.codePointAtPos(pos);
          const char = String.fromCharCode(cp);
          if (VALID_REGEX_FLAGS.has(cp)) {
            if (mods.includes(char)) {
              this.raise(ErrorMessages.DuplicateRegExpFlags, {
                at: createPositionWithColumnOffset(startLoc, pos + 2 - start)
              });
            }
          } else if (isIdentifierChar(cp) || cp === 92) {
            this.raise(ErrorMessages.MalformedRegExpFlags, {
              at: createPositionWithColumnOffset(startLoc, pos + 2 - start)
            });
          } else {
            break;
          }
          ++pos;
          mods += char;
        }
        this.state.pos = pos;
        this.finishToken(129, {
          pattern: content,
          flags: mods
        });
      }
      readInt(radix, len, forceLen, allowNumSeparator = true) {
        const start = this.state.pos;
        const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
        const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;
        let invalid = false;
        let total = 0;
        for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
          const code = this.input.charCodeAt(this.state.pos);
          let val;
          if (code === 95) {
            const prev = this.input.charCodeAt(this.state.pos - 1);
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (allowedSiblings.indexOf(next) === -1) {
              this.raise(ErrorMessages.UnexpectedNumericSeparator, {
                at: this.state.curPosition()
              });
            } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {
              this.raise(ErrorMessages.UnexpectedNumericSeparator, {
                at: this.state.curPosition()
              });
            }
            if (!allowNumSeparator) {
              this.raise(ErrorMessages.NumericSeparatorInEscapeSequence, {
                at: this.state.curPosition()
              });
            }
            ++this.state.pos;
            continue;
          }
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (_isDigit(code)) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            if (this.options.errorRecovery && val <= 9) {
              val = 0;
              this.raise(ErrorMessages.InvalidDigit, {
                at: this.state.curPosition()
              }, radix);
            } else if (forceLen) {
              val = 0;
              invalid = true;
            } else {
              break;
            }
          }
          ++this.state.pos;
          total = total * radix + val;
        }
        if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {
          return null;
        }
        return total;
      }
      readRadixNumber(radix) {
        const startLoc = this.state.curPosition();
        let isBigInt = false;
        this.state.pos += 2;
        const val = this.readInt(radix);
        if (val == null) {
          this.raise(ErrorMessages.InvalidDigit, {
            at: createPositionWithColumnOffset(startLoc, 2)
          }, radix);
        }
        const next = this.input.charCodeAt(this.state.pos);
        if (next === 110) {
          ++this.state.pos;
          isBigInt = true;
        } else if (next === 109) {
          throw this.raise(ErrorMessages.InvalidDecimal, {
            at: startLoc
          });
        }
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
          throw this.raise(ErrorMessages.NumberIdentifier, {
            at: this.state.curPosition()
          });
        }
        if (isBigInt) {
          const str = this.input.slice(indexes.get(startLoc), this.state.pos).replace(/[_n]/g, \\"\\");
          this.finishToken(127, str);
          return;
        }
        this.finishToken(126, val);
      }
      readNumber(startsWithDot) {
        const start = this.state.pos;
        const startLoc = this.state.curPosition();
        let isFloat = false;
        let isBigInt = false;
        let isDecimal = false;
        let hasExponent = false;
        let isOctal = false;
        if (!startsWithDot && this.readInt(10) === null) {
          this.raise(ErrorMessages.InvalidNumber, {
            at: this.state.curPosition()
          });
        }
        const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        if (hasLeadingZero) {
          const integer = this.input.slice(start, this.state.pos);
          this.recordStrictModeErrors(ErrorMessages.StrictOctalLiteral, startLoc);
          if (!this.state.strict) {
            const underscorePos = integer.indexOf(\\"_\\");
            if (underscorePos > 0) {
              this.raise(ErrorMessages.ZeroDigitNumericSeparator, {
                at: createPositionWithColumnOffset(startLoc, underscorePos)
              });
            }
          }
          isOctal = hasLeadingZero && !/[89]/.test(integer);
        }
        let next = this.input.charCodeAt(this.state.pos);
        if (next === 46 && !isOctal) {
          ++this.state.pos;
          this.readInt(10);
          isFloat = true;
          next = this.input.charCodeAt(this.state.pos);
        }
        if ((next === 69 || next === 101) && !isOctal) {
          next = this.input.charCodeAt(++this.state.pos);
          if (next === 43 || next === 45) {
            ++this.state.pos;
          }
          if (this.readInt(10) === null) {
            this.raise(ErrorMessages.InvalidOrMissingExponent, {
              at: startLoc
            });
          }
          isFloat = true;
          hasExponent = true;
          next = this.input.charCodeAt(this.state.pos);
        }
        if (next === 110) {
          if (isFloat || hasLeadingZero) {
            this.raise(ErrorMessages.InvalidBigIntLiteral, {
              at: startLoc
            });
          }
          ++this.state.pos;
          isBigInt = true;
        }
        if (next === 109) {
          this.expectPlugin(\\"decimal\\", this.state.curPosition());
          if (hasExponent || hasLeadingZero) {
            this.raise(ErrorMessages.InvalidDecimal, {
              at: startLoc
            });
          }
          ++this.state.pos;
          isDecimal = true;
        }
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
          throw this.raise(ErrorMessages.NumberIdentifier, {
            at: this.state.curPosition()
          });
        }
        const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \\"\\");
        if (isBigInt) {
          this.finishToken(127, str);
          return;
        }
        if (isDecimal) {
          this.finishToken(128, str);
          return;
        }
        const val = isOctal ? parseInt(str, 8) : parseFloat(str);
        this.finishToken(126, val);
      }
      readCodePoint(throwOnInvalid) {
        const ch = this.input.charCodeAt(this.state.pos);
        let code;
        if (ch === 123) {
          ++this.state.pos;
          code = this.readHexChar(this.input.indexOf(\\"}\\", this.state.pos) - this.state.pos, true, throwOnInvalid);
          ++this.state.pos;
          if (code !== null && code > 1114111) {
            if (throwOnInvalid) {
              this.raise(ErrorMessages.InvalidCodePoint, {
                at: this.state.curPosition()
              });
            } else {
              return null;
            }
          }
        } else {
          code = this.readHexChar(4, false, throwOnInvalid);
        }
        return code;
      }
      readString(quote) {
        let out = \\"\\", chunkStart = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(ErrorMessages.UnterminatedString, {
              at: this.state.startLoc
            });
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote)
            break;
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.state.pos;
          } else if (ch === 8232 || ch === 8233) {
            ++this.state.pos;
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
          } else if (isNewLine(ch)) {
            throw this.raise(ErrorMessages.UnterminatedString, {
              at: this.state.startLoc
            });
          } else {
            ++this.state.pos;
          }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        this.finishToken(125, out);
      }
      readTemplateContinuation() {
        if (!this.match(8)) {
          this.unexpected(null, 8);
        }
        this.state.pos--;
        this.readTemplateToken();
      }
      readTemplateToken() {
        let out = \\"\\", chunkStart = this.state.pos, containsInvalid = false;
        ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(ErrorMessages.UnterminatedTemplate, {
              at: createPositionWithColumnOffset(this.state.startLoc, 1)
            });
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === 96) {
            ++this.state.pos;
            out += this.input.slice(chunkStart, this.state.pos);
            this.finishToken(24, containsInvalid ? null : out);
            return;
          }
          if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
            this.state.pos += 2;
            out += this.input.slice(chunkStart, this.state.pos);
            this.finishToken(25, containsInvalid ? null : out);
            return;
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.state.pos);
            const escaped = this.readEscapedChar(true);
            if (escaped === null) {
              containsInvalid = true;
            } else {
              out += escaped;
            }
            chunkStart = this.state.pos;
          } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            ++this.state.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.state.pos) === 10) {
                  ++this.state.pos;
                }
              case 10:
                out += \\"\\\\n\\";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }
      }
      recordStrictModeErrors(message, loc) {
        const index = indexes.get(loc);
        if (this.state.strict && !this.state.strictErrors.has(index)) {
          this.raise(message, {
            at: loc
          });
        } else {
          this.state.strictErrors.set(index, {
            loc,
            message
          });
        }
      }
      readEscapedChar(inTemplate) {
        const throwOnInvalid = !inTemplate;
        const ch = this.input.charCodeAt(++this.state.pos);
        ++this.state.pos;
        switch (ch) {
          case 110:
            return \\"\\\\n\\";
          case 114:
            return \\"\\\\r\\";
          case 120: {
            const code = this.readHexChar(2, false, throwOnInvalid);
            return code === null ? null : String.fromCharCode(code);
          }
          case 117: {
            const code = this.readCodePoint(throwOnInvalid);
            return code === null ? null : String.fromCodePoint(code);
          }
          case 116:
            return \\"	\\";
          case 98:
            return \\"\\\\b\\";
          case 118:
            return \\"\\\\v\\";
          case 102:
            return \\"\\\\f\\";
          case 13:
            if (this.input.charCodeAt(this.state.pos) === 10) {
              ++this.state.pos;
            }
          case 10:
            this.state.lineStart = this.state.pos;
            ++this.state.curLine;
          case 8232:
          case 8233:
            return \\"\\";
          case 56:
          case 57:
            if (inTemplate) {
              return null;
            } else {
              this.recordStrictModeErrors(ErrorMessages.StrictNumericEscape, createPositionWithColumnOffset(this.state.curPosition(), -1));
            }
          default:
            if (ch >= 48 && ch <= 55) {
              const codePos = createPositionWithColumnOffset(this.state.curPosition(), -1);
              const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);
              let octalStr = match[0];
              let octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              this.state.pos += octalStr.length - 1;
              const next = this.input.charCodeAt(this.state.pos);
              if (octalStr !== \\"0\\" || next === 56 || next === 57) {
                if (inTemplate) {
                  return null;
                } else {
                  this.recordStrictModeErrors(ErrorMessages.StrictNumericEscape, codePos);
                }
              }
              return String.fromCharCode(octal);
            }
            return String.fromCharCode(ch);
        }
      }
      readHexChar(len, forceLen, throwOnInvalid) {
        const codeLoc = this.state.curPosition();
        const n = this.readInt(16, len, forceLen, false);
        if (n === null) {
          if (throwOnInvalid) {
            this.raise(ErrorMessages.InvalidEscapeSequence, {
              at: codeLoc
            });
          } else {
            this.state.pos = indexes.get(codeLoc) - 1;
          }
        }
        return n;
      }
      readWord1(firstCode) {
        this.state.containsEsc = false;
        let word = \\"\\";
        const start = this.state.pos;
        let chunkStart = this.state.pos;
        if (firstCode !== void 0) {
          this.state.pos += firstCode <= 65535 ? 1 : 2;
        }
        while (this.state.pos < this.length) {
          const ch = this.codePointAtPos(this.state.pos);
          if (isIdentifierChar(ch)) {
            this.state.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.state.containsEsc = true;
            word += this.input.slice(chunkStart, this.state.pos);
            const escStart = this.state.curPosition();
            const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
            if (this.input.charCodeAt(++this.state.pos) !== 117) {
              this.raise(ErrorMessages.MissingUnicodeEscape, {
                at: this.state.curPosition()
              });
              chunkStart = this.state.pos - 1;
              continue;
            }
            ++this.state.pos;
            const esc = this.readCodePoint(true);
            if (esc !== null) {
              if (!identifierCheck(esc)) {
                this.raise(ErrorMessages.EscapedCharNotAnIdentifier, {
                  at: escStart
                });
              }
              word += String.fromCodePoint(esc);
            }
            chunkStart = this.state.pos;
          } else {
            break;
          }
        }
        return word + this.input.slice(chunkStart, this.state.pos);
      }
      readWord(firstCode) {
        const word = this.readWord1(firstCode);
        const type = keywords$1.get(word);
        if (type !== void 0) {
          this.finishToken(type, tokenLabelName(type));
        } else {
          this.finishToken(124, word);
        }
      }
      checkKeywordEscapes() {
        const {
          type
        } = this.state;
        if (tokenIsKeyword(type) && this.state.containsEsc) {
          this.raise(ErrorMessages.InvalidEscapedReservedWord, {
            at: this.state.startLoc
          }, tokenLabelName(type));
        }
      }
      updateContext(prevType) {
      }
    };
    var ClassScope = class {
      constructor() {
        this.privateNames = /* @__PURE__ */ new Set();
        this.loneAccessors = /* @__PURE__ */ new Map();
        this.undefinedPrivateNames = /* @__PURE__ */ new Map();
      }
    };
    var ClassScopeHandler = class {
      constructor(raise) {
        this.stack = [];
        this.undefinedPrivateNames = /* @__PURE__ */ new Map();
        this.raise = raise;
      }
      current() {
        return this.stack[this.stack.length - 1];
      }
      enter() {
        this.stack.push(new ClassScope());
      }
      exit() {
        const oldClassScope = this.stack.pop();
        const current = this.current();
        for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
          if (current) {
            if (!current.undefinedPrivateNames.has(name)) {
              current.undefinedPrivateNames.set(name, loc);
            }
          } else {
            this.raise(ErrorMessages.InvalidPrivateFieldResolution, {
              at: loc
            }, name);
          }
        }
      }
      declarePrivateName(name, elementType, loc) {
        const {
          privateNames,
          loneAccessors,
          undefinedPrivateNames
        } = this.current();
        let redefined = privateNames.has(name);
        if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
          const accessor = redefined && loneAccessors.get(name);
          if (accessor) {
            const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
            const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
            const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
            const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
            redefined = oldKind === newKind || oldStatic !== newStatic;
            if (!redefined)
              loneAccessors.delete(name);
          } else if (!redefined) {
            loneAccessors.set(name, elementType);
          }
        }
        if (redefined) {
          this.raise(ErrorMessages.PrivateNameRedeclaration, {
            at: loc
          }, name);
        }
        privateNames.add(name);
        undefinedPrivateNames.delete(name);
      }
      usePrivateName(name, loc) {
        let classScope;
        for (classScope of this.stack) {
          if (classScope.privateNames.has(name))
            return;
        }
        if (classScope) {
          classScope.undefinedPrivateNames.set(name, loc);
        } else {
          this.raise(ErrorMessages.InvalidPrivateFieldResolution, {
            at: loc
          }, name);
        }
      }
    };
    var kExpression = 0;
    var kMaybeArrowParameterDeclaration = 1;
    var kMaybeAsyncArrowParameterDeclaration = 2;
    var kParameterDeclaration = 3;
    var ExpressionScope = class {
      constructor(type = kExpression) {
        this.type = void 0;
        this.type = type;
      }
      canBeArrowParameterDeclaration() {
        return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
      }
      isCertainlyParameterDeclaration() {
        return this.type === kParameterDeclaration;
      }
    };
    var ArrowHeadParsingScope = class extends ExpressionScope {
      constructor(type) {
        super(type);
        this.errors = /* @__PURE__ */ new Map();
      }
      recordDeclarationError(message, loc) {
        this.errors.set(indexes.get(loc), {
          message,
          loc
        });
      }
      clearDeclarationError(loc) {
        this.errors.delete(indexes.get(loc));
      }
      iterateErrors(iterator) {
        this.errors.forEach(iterator);
      }
    };
    var ExpressionScopeHandler = class {
      constructor(raise) {
        this.stack = [new ExpressionScope()];
        this.raise = raise;
      }
      enter(scope) {
        this.stack.push(scope);
      }
      exit() {
        this.stack.pop();
      }
      recordParameterInitializerError(loc, template) {
        const {
          stack
        } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while (!scope.isCertainlyParameterDeclaration()) {
          if (scope.canBeArrowParameterDeclaration()) {
            scope.recordDeclarationError(template, loc);
          } else {
            return;
          }
          scope = stack[--i];
        }
        this.raise(template, {
          at: loc
        });
      }
      recordParenthesizedIdentifierError(template, loc) {
        const {
          stack
        } = this;
        const scope = stack[stack.length - 1];
        if (scope.isCertainlyParameterDeclaration()) {
          this.raise(template, {
            at: loc
          });
        } else if (scope.canBeArrowParameterDeclaration()) {
          scope.recordDeclarationError(template, loc);
        } else {
          return;
        }
      }
      recordAsyncArrowParametersError(template, loc) {
        const {
          stack
        } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while (scope.canBeArrowParameterDeclaration()) {
          if (scope.type === kMaybeAsyncArrowParameterDeclaration) {
            scope.recordDeclarationError(template, loc);
          }
          scope = stack[--i];
        }
      }
      validateAsPattern() {
        const {
          stack
        } = this;
        const currentScope = stack[stack.length - 1];
        if (!currentScope.canBeArrowParameterDeclaration())
          return;
        currentScope.iterateErrors(({
          message,
          loc
        }) => {
          this.raise(message, {
            at: loc
          });
          let i = stack.length - 2;
          let scope = stack[i];
          while (scope.canBeArrowParameterDeclaration()) {
            scope.clearDeclarationError(loc);
            scope = stack[--i];
          }
        });
      }
    };
    function newParameterDeclarationScope() {
      return new ExpressionScope(kParameterDeclaration);
    }
    function newArrowHeadScope() {
      return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
    }
    function newAsyncArrowScope() {
      return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);
    }
    function newExpressionScope() {
      return new ExpressionScope();
    }
    var PARAM = 0;
    var PARAM_YIELD = 1;
    var PARAM_AWAIT = 2;
    var PARAM_RETURN = 4;
    var PARAM_IN = 8;
    var ProductionParameterHandler = class {
      constructor() {
        this.stacks = [];
      }
      enter(flags) {
        this.stacks.push(flags);
      }
      exit() {
        this.stacks.pop();
      }
      currentFlags() {
        return this.stacks[this.stacks.length - 1];
      }
      get hasAwait() {
        return (this.currentFlags() & PARAM_AWAIT) > 0;
      }
      get hasYield() {
        return (this.currentFlags() & PARAM_YIELD) > 0;
      }
      get hasReturn() {
        return (this.currentFlags() & PARAM_RETURN) > 0;
      }
      get hasIn() {
        return (this.currentFlags() & PARAM_IN) > 0;
      }
    };
    function functionFlags(isAsync, isGenerator) {
      return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
    }
    var UtilParser = class extends Tokenizer {
      addExtra(node, key, value, enumerable = true) {
        if (!node)
          return;
        const extra = node.extra = node.extra || {};
        if (enumerable) {
          extra[key] = value;
        } else {
          Object.defineProperty(extra, key, {
            enumerable,
            value
          });
        }
      }
      isContextual(token) {
        return this.state.type === token && !this.state.containsEsc;
      }
      isUnparsedContextual(nameStart, name) {
        const nameEnd = nameStart + name.length;
        if (this.input.slice(nameStart, nameEnd) === name) {
          const nextCh = this.input.charCodeAt(nameEnd);
          return !(isIdentifierChar(nextCh) || (nextCh & 64512) === 55296);
        }
        return false;
      }
      isLookaheadContextual(name) {
        const next = this.nextTokenStart();
        return this.isUnparsedContextual(next, name);
      }
      eatContextual(token) {
        if (this.isContextual(token)) {
          this.next();
          return true;
        }
        return false;
      }
      expectContextual(token, template) {
        if (!this.eatContextual(token)) {
          if (template != null) {
            throw this.raise(template, {
              at: this.state.startLoc
            });
          }
          throw this.unexpected(null, token);
        }
      }
      canInsertSemicolon() {
        return this.match(131) || this.match(8) || this.hasPrecedingLineBreak();
      }
      hasPrecedingLineBreak() {
        return lineBreak.test(this.input.slice(indexes.get(this.state.lastTokEndLoc), this.state.start));
      }
      hasFollowingLineBreak() {
        skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
        return skipWhiteSpaceToLineBreak.test(this.input);
      }
      isLineTerminator() {
        return this.eat(13) || this.canInsertSemicolon();
      }
      semicolon(allowAsi = true) {
        if (allowAsi ? this.isLineTerminator() : this.eat(13))
          return;
        this.raise(ErrorMessages.MissingSemicolon, {
          at: this.state.lastTokEndLoc
        });
      }
      expect(type, loc) {
        this.eat(type) || this.unexpected(loc, type);
      }
      assertNoSpace(message = \\"Unexpected space.\\") {
        if (this.state.start > indexes.get(this.state.lastTokEndLoc)) {
          this.raise({
            code: ErrorCodes.SyntaxError,
            reasonCode: \\"UnexpectedSpace\\",
            template: message
          }, {
            at: this.state.lastTokEndLoc
          });
        }
      }
      unexpected(loc, type) {
        throw this.raise({
          code: ErrorCodes.SyntaxError,
          reasonCode: \\"UnexpectedToken\\",
          template: type != null ? \`Unexpected token, expected \\"\${tokenLabelName(type)}\\"\` : \\"Unexpected token\\"
        }, {
          at: loc != null ? loc : this.state.startLoc
        });
      }
      getPluginNamesFromConfigs(pluginConfigs) {
        return pluginConfigs.map((c) => {
          if (typeof c === \\"string\\") {
            return c;
          } else {
            return c[0];
          }
        });
      }
      expectPlugin(pluginConfig, loc) {
        if (!this.hasPlugin(pluginConfig)) {
          throw this.raiseWithData(loc != null ? loc : this.state.startLoc, {
            missingPlugin: this.getPluginNamesFromConfigs([pluginConfig])
          }, \`This experimental syntax requires enabling the parser plugin: \${JSON.stringify(pluginConfig)}.\`);
        }
        return true;
      }
      expectOnePlugin(pluginConfigs) {
        if (!pluginConfigs.some((c) => this.hasPlugin(c))) {
          throw this.raiseWithData(this.state.startLoc, {
            missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs)
          }, \`This experimental syntax requires enabling one of the following parser plugin(s): \${pluginConfigs.map((c) => JSON.stringify(c)).join(\\", \\")}.\`);
        }
      }
      tryParse(fn, oldState = this.state.clone()) {
        const abortSignal = {
          node: null
        };
        try {
          const node = fn((node2 = null) => {
            abortSignal.node = node2;
            throw abortSignal;
          });
          if (this.state.errors.length > oldState.errors.length) {
            const failState = this.state;
            this.state = oldState;
            this.state.tokensLength = failState.tokensLength;
            return {
              node,
              error: failState.errors[oldState.errors.length],
              thrown: false,
              aborted: false,
              failState
            };
          }
          return {
            node,
            error: null,
            thrown: false,
            aborted: false,
            failState: null
          };
        } catch (error) {
          const failState = this.state;
          this.state = oldState;
          if (error instanceof SyntaxError) {
            return {
              node: null,
              error,
              thrown: true,
              aborted: false,
              failState
            };
          }
          if (error === abortSignal) {
            return {
              node: abortSignal.node,
              error: null,
              thrown: false,
              aborted: true,
              failState
            };
          }
          throw error;
        }
      }
      checkExpressionErrors(refExpressionErrors, andThrow) {
        if (!refExpressionErrors)
          return false;
        const {
          shorthandAssignLoc,
          doubleProtoLoc,
          optionalParametersLoc
        } = refExpressionErrors;
        const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc;
        if (!andThrow) {
          return hasErrors;
        }
        if (shorthandAssignLoc != null) {
          this.raise(ErrorMessages.InvalidCoverInitializedName, {
            at: shorthandAssignLoc
          });
        }
        if (doubleProtoLoc != null) {
          this.raise(ErrorMessages.DuplicateProto, {
            at: doubleProtoLoc
          });
        }
        if (optionalParametersLoc != null) {
          this.unexpected(optionalParametersLoc);
        }
      }
      isLiteralPropertyName() {
        return tokenIsLiteralPropertyName(this.state.type);
      }
      isPrivateName(node) {
        return node.type === \\"PrivateName\\";
      }
      getPrivateNameSV(node) {
        return node.id.name;
      }
      hasPropertyAsPrivateName(node) {
        return (node.type === \\"MemberExpression\\" || node.type === \\"OptionalMemberExpression\\") && this.isPrivateName(node.property);
      }
      isOptionalChain(node) {
        return node.type === \\"OptionalMemberExpression\\" || node.type === \\"OptionalCallExpression\\";
      }
      isObjectProperty(node) {
        return node.type === \\"ObjectProperty\\";
      }
      isObjectMethod(node) {
        return node.type === \\"ObjectMethod\\";
      }
      initializeScopes(inModule = this.options.sourceType === \\"module\\") {
        const oldLabels = this.state.labels;
        this.state.labels = [];
        const oldExportedIdentifiers = this.exportedIdentifiers;
        this.exportedIdentifiers = /* @__PURE__ */ new Set();
        const oldInModule = this.inModule;
        this.inModule = inModule;
        const oldScope = this.scope;
        const ScopeHandler2 = this.getScopeHandler();
        this.scope = new ScopeHandler2(this.raise.bind(this), this.inModule);
        const oldProdParam = this.prodParam;
        this.prodParam = new ProductionParameterHandler();
        const oldClassScope = this.classScope;
        this.classScope = new ClassScopeHandler(this.raise.bind(this));
        const oldExpressionScope = this.expressionScope;
        this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));
        return () => {
          this.state.labels = oldLabels;
          this.exportedIdentifiers = oldExportedIdentifiers;
          this.inModule = oldInModule;
          this.scope = oldScope;
          this.prodParam = oldProdParam;
          this.classScope = oldClassScope;
          this.expressionScope = oldExpressionScope;
        };
      }
      enterInitialScopes() {
        let paramFlags = PARAM;
        if (this.inModule) {
          paramFlags |= PARAM_AWAIT;
        }
        this.scope.enter(SCOPE_PROGRAM);
        this.prodParam.enter(paramFlags);
      }
    };
    var ExpressionErrors = class {
      constructor() {
        this.shorthandAssignLoc = null;
        this.doubleProtoLoc = null;
        this.optionalParametersLoc = null;
      }
    };
    var Node = class {
      constructor(parser, pos, loc) {
        this.type = \\"\\";
        this.start = pos;
        this.end = 0;
        this.loc = new SourceLocation(loc);
        if (parser != null && parser.options.ranges)
          this.range = [pos, 0];
        if (parser != null && parser.filename)
          this.loc.filename = parser.filename;
      }
    };
    var NodePrototype = Node.prototype;
    {
      NodePrototype.__clone = function() {
        const newNode = new Node();
        const keys = Object.keys(this);
        for (let i = 0, length = keys.length; i < length; i++) {
          const key = keys[i];
          if (key !== \\"leadingComments\\" && key !== \\"trailingComments\\" && key !== \\"innerComments\\") {
            newNode[key] = this[key];
          }
        }
        return newNode;
      };
    }
    function clonePlaceholder(node) {
      return cloneIdentifier(node);
    }
    function cloneIdentifier(node) {
      const {
        type,
        start,
        end,
        loc,
        range,
        extra,
        name
      } = node;
      const cloned = Object.create(NodePrototype);
      cloned.type = type;
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range;
      cloned.extra = extra;
      cloned.name = name;
      if (type === \\"Placeholder\\") {
        cloned.expectedNode = node.expectedNode;
      }
      return cloned;
    }
    function cloneStringLiteral(node) {
      const {
        type,
        start,
        end,
        loc,
        range,
        extra
      } = node;
      if (type === \\"Placeholder\\") {
        return clonePlaceholder(node);
      }
      const cloned = Object.create(NodePrototype);
      cloned.type = type;
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range;
      if (node.raw !== void 0) {
        cloned.raw = node.raw;
      } else {
        cloned.extra = extra;
      }
      cloned.value = node.value;
      return cloned;
    }
    var NodeUtils = class extends UtilParser {
      startNode() {
        return new Node(this, this.state.start, this.state.startLoc);
      }
      startNodeAt(pos, loc) {
        return new Node(this, pos, loc);
      }
      startNodeAtNode(type) {
        return this.startNodeAt(type.start, type.loc.start);
      }
      finishNode(node, type) {
        return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
      }
      finishNodeAt(node, type, endLoc) {
        node.type = type;
        node.end = indexes.get(endLoc);
        node.loc.end = endLoc;
        if (this.options.ranges)
          node.range[1] = node.end;
        if (this.options.attachComment)
          this.processComment(node);
        return node;
      }
      resetStartLocation(node, start, startLoc) {
        node.start = start;
        node.loc.start = startLoc;
        if (this.options.ranges)
          node.range[0] = start;
      }
      resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
        node.end = indexes.get(endLoc);
        node.loc.end = endLoc;
        if (this.options.ranges)
          node.range[1] = node.end;
      }
      resetStartLocationFromNode(node, locationNode) {
        this.resetStartLocation(node, locationNode.start, locationNode.loc.start);
      }
    };
    var reservedTypes = /* @__PURE__ */ new Set([\\"_\\", \\"any\\", \\"bool\\", \\"boolean\\", \\"empty\\", \\"extends\\", \\"false\\", \\"interface\\", \\"mixed\\", \\"null\\", \\"number\\", \\"static\\", \\"string\\", \\"true\\", \\"typeof\\", \\"void\\"]);
    var FlowErrors = makeErrorTemplates({
      AmbiguousConditionalArrow: \\"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\\",
      AmbiguousDeclareModuleKind: \\"Found both \`declare module.exports\` and \`declare export\` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\\",
      AssignReservedType: \\"Cannot overwrite reserved type %0.\\",
      DeclareClassElement: \\"The \`declare\` modifier can only appear on class fields.\\",
      DeclareClassFieldInitializer: \\"Initializers are not allowed in fields with the \`declare\` modifier.\\",
      DuplicateDeclareModuleExports: \\"Duplicate \`declare module.exports\` statement.\\",
      EnumBooleanMemberNotInitialized: \\"Boolean enum members need to be initialized. Use either \`%0 = true,\` or \`%0 = false,\` in enum \`%1\`.\\",
      EnumDuplicateMemberName: \\"Enum member names need to be unique, but the name \`%0\` has already been used before in enum \`%1\`.\\",
      EnumInconsistentMemberValues: \\"Enum \`%0\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\\",
      EnumInvalidExplicitType: \\"Enum type \`%1\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`%0\`.\\",
      EnumInvalidExplicitTypeUnknownSupplied: \\"Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`%0\`.\\",
      EnumInvalidMemberInitializerPrimaryType: \\"Enum \`%0\` has type \`%2\`, so the initializer of \`%1\` needs to be a %2 literal.\\",
      EnumInvalidMemberInitializerSymbolType: \\"Symbol enum members cannot be initialized. Use \`%1,\` in enum \`%0\`.\\",
      EnumInvalidMemberInitializerUnknownType: \\"The enum member initializer for \`%1\` needs to be a literal (either a boolean, number, or string) in enum \`%0\`.\\",
      EnumInvalidMemberName: \\"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`%0\`, consider using \`%1\`, in enum \`%2\`.\\",
      EnumNumberMemberNotInitialized: \\"Number enum members need to be initialized, e.g. \`%1 = 1\` in enum \`%0\`.\\",
      EnumStringMemberInconsistentlyInitailized: \\"String enum members need to consistently either all use initializers, or use no initializers, in enum \`%0\`.\\",
      GetterMayNotHaveThisParam: \\"A getter cannot have a \`this\` parameter.\\",
      ImportTypeShorthandOnlyInPureImport: \\"The \`type\` and \`typeof\` keywords on named imports can only be used on regular \`import\` statements. It cannot be used with \`import type\` or \`import typeof\` statements.\\",
      InexactInsideExact: \\"Explicit inexact syntax cannot appear inside an explicit exact object type.\\",
      InexactInsideNonObject: \\"Explicit inexact syntax cannot appear in class or interface definitions.\\",
      InexactVariance: \\"Explicit inexact syntax cannot have variance.\\",
      InvalidNonTypeImportInDeclareModule: \\"Imports within a \`declare module\` body must always be \`import type\` or \`import typeof\`.\\",
      MissingTypeParamDefault: \\"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\\",
      NestedDeclareModule: \\"\`declare module\` cannot be used inside another \`declare module\`.\\",
      NestedFlowComment: \\"Cannot have a flow comment inside another flow comment.\\",
      PatternIsOptional: \\"A binding pattern parameter cannot be optional in an implementation signature.\\",
      SetterMayNotHaveThisParam: \\"A setter cannot have a \`this\` parameter.\\",
      SpreadVariance: \\"Spread properties cannot have variance.\\",
      ThisParamAnnotationRequired: \\"A type annotation is required for the \`this\` parameter.\\",
      ThisParamBannedInConstructor: \\"Constructors cannot have a \`this\` parameter; constructors don't bind \`this\` like other functions.\\",
      ThisParamMayNotBeOptional: \\"The \`this\` parameter cannot be optional.\\",
      ThisParamMustBeFirst: \\"The \`this\` parameter must be the first function parameter.\\",
      ThisParamNoDefault: \\"The \`this\` parameter may not have a default value.\\",
      TypeBeforeInitializer: \\"Type annotations must come before default assignments, e.g. instead of \`age = 25: number\` use \`age: number = 25\`.\\",
      TypeCastInPattern: \\"The type cast expression is expected to be wrapped with parenthesis.\\",
      UnexpectedExplicitInexactInObject: \\"Explicit inexact syntax must appear at the end of an inexact object.\\",
      UnexpectedReservedType: \\"Unexpected reserved type %0.\\",
      UnexpectedReservedUnderscore: \\"\`_\` is only allowed as a type argument to call or new.\\",
      UnexpectedSpaceBetweenModuloChecks: \\"Spaces between \`%\` and \`checks\` are not allowed here.\\",
      UnexpectedSpreadType: \\"Spread operator cannot appear in class or interface definitions.\\",
      UnexpectedSubtractionOperand: 'Unexpected token, expected \\"number\\" or \\"bigint\\".',
      UnexpectedTokenAfterTypeParameter: \\"Expected an arrow function after this type parameter declaration.\\",
      UnexpectedTypeParameterBeforeAsyncArrowFunction: \\"Type parameters must come after the async keyword, e.g. instead of \`<T> async () => {}\`, use \`async <T>() => {}\`.\\",
      UnsupportedDeclareExportKind: \\"\`declare export %0\` is not supported. Use \`%1\` instead.\\",
      UnsupportedStatementInDeclareModule: \\"Only declares and type imports are allowed inside declare module.\\",
      UnterminatedFlowComment: \\"Unterminated flow-comment.\\"
    }, ErrorCodes.SyntaxError, \\"flow\\");
    function isEsModuleType(bodyElement) {
      return bodyElement.type === \\"DeclareExportAllDeclaration\\" || bodyElement.type === \\"DeclareExportDeclaration\\" && (!bodyElement.declaration || bodyElement.declaration.type !== \\"TypeAlias\\" && bodyElement.declaration.type !== \\"InterfaceDeclaration\\");
    }
    function hasTypeImportKind(node) {
      return node.importKind === \\"type\\" || node.importKind === \\"typeof\\";
    }
    function isMaybeDefaultImport(type) {
      return tokenIsKeywordOrIdentifier(type) && type !== 93;
    }
    var exportSuggestions = {
      const: \\"declare export var\\",
      let: \\"declare export var\\",
      type: \\"export type\\",
      interface: \\"export interface\\"
    };
    function partition(list, test) {
      const list1 = [];
      const list2 = [];
      for (let i = 0; i < list.length; i++) {
        (test(list[i], i, list) ? list1 : list2).push(list[i]);
      }
      return [list1, list2];
    }
    var FLOW_PRAGMA_REGEX = /\\\\*?\\\\s*@((?:no)?flow)\\\\b/;
    var flow = (superClass) => class extends superClass {
      constructor(...args) {
        super(...args);
        this.flowPragma = void 0;
      }
      getScopeHandler() {
        return FlowScopeHandler;
      }
      shouldParseTypes() {
        return this.getPluginOption(\\"flow\\", \\"all\\") || this.flowPragma === \\"flow\\";
      }
      shouldParseEnums() {
        return !!this.getPluginOption(\\"flow\\", \\"enums\\");
      }
      finishToken(type, val) {
        if (type !== 125 && type !== 13 && type !== 28) {
          if (this.flowPragma === void 0) {
            this.flowPragma = null;
          }
        }
        return super.finishToken(type, val);
      }
      addComment(comment) {
        if (this.flowPragma === void 0) {
          const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
          if (!matches)
            ;
          else if (matches[1] === \\"flow\\") {
            this.flowPragma = \\"flow\\";
          } else if (matches[1] === \\"noflow\\") {
            this.flowPragma = \\"noflow\\";
          } else {
            throw new Error(\\"Unexpected flow pragma\\");
          }
        }
        return super.addComment(comment);
      }
      flowParseTypeInitialiser(tok) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(tok || 14);
        const type = this.flowParseType();
        this.state.inType = oldInType;
        return type;
      }
      flowParsePredicate() {
        const node = this.startNode();
        const moduloLoc = this.state.startLoc;
        this.next();
        this.expectContextual(103);
        if (this.state.lastTokStart > indexes.get(moduloLoc) + 1) {
          this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {
            at: moduloLoc
          });
        }
        if (this.eat(10)) {
          node.value = this.parseExpression();
          this.expect(11);
          return this.finishNode(node, \\"DeclaredPredicate\\");
        } else {
          return this.finishNode(node, \\"InferredPredicate\\");
        }
      }
      flowParseTypeAndPredicateInitialiser() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(14);
        let type = null;
        let predicate = null;
        if (this.match(50)) {
          this.state.inType = oldInType;
          predicate = this.flowParsePredicate();
        } else {
          type = this.flowParseType();
          this.state.inType = oldInType;
          if (this.match(50)) {
            predicate = this.flowParsePredicate();
          }
        }
        return [type, predicate];
      }
      flowParseDeclareClass(node) {
        this.next();
        this.flowParseInterfaceish(node, true);
        return this.finishNode(node, \\"DeclareClass\\");
      }
      flowParseDeclareFunction(node) {
        this.next();
        const id = node.id = this.parseIdentifier();
        const typeNode = this.startNode();
        const typeContainer = this.startNode();
        if (this.match(45)) {
          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          typeNode.typeParameters = null;
        }
        this.expect(10);
        const tmp = this.flowParseFunctionTypeParams();
        typeNode.params = tmp.params;
        typeNode.rest = tmp.rest;
        typeNode.this = tmp._this;
        this.expect(11);
        [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
        typeContainer.typeAnnotation = this.finishNode(typeNode, \\"FunctionTypeAnnotation\\");
        id.typeAnnotation = this.finishNode(typeContainer, \\"TypeAnnotation\\");
        this.resetEndLocation(id);
        this.semicolon();
        this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);
        return this.finishNode(node, \\"DeclareFunction\\");
      }
      flowParseDeclare(node, insideModule) {
        if (this.match(76)) {
          return this.flowParseDeclareClass(node);
        } else if (this.match(64)) {
          return this.flowParseDeclareFunction(node);
        } else if (this.match(70)) {
          return this.flowParseDeclareVariable(node);
        } else if (this.eatContextual(119)) {
          if (this.match(16)) {
            return this.flowParseDeclareModuleExports(node);
          } else {
            if (insideModule) {
              this.raise(FlowErrors.NestedDeclareModule, {
                at: this.state.lastTokStartLoc
              });
            }
            return this.flowParseDeclareModule(node);
          }
        } else if (this.isContextual(122)) {
          return this.flowParseDeclareTypeAlias(node);
        } else if (this.isContextual(123)) {
          return this.flowParseDeclareOpaqueType(node);
        } else if (this.isContextual(121)) {
          return this.flowParseDeclareInterface(node);
        } else if (this.match(78)) {
          return this.flowParseDeclareExportDeclaration(node, insideModule);
        } else {
          throw this.unexpected();
        }
      }
      flowParseDeclareVariable(node) {
        this.next();
        node.id = this.flowParseTypeAnnotatableIdentifier(true);
        this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);
        this.semicolon();
        return this.finishNode(node, \\"DeclareVariable\\");
      }
      flowParseDeclareModule(node) {
        this.scope.enter(SCOPE_OTHER);
        if (this.match(125)) {
          node.id = this.parseExprAtom();
        } else {
          node.id = this.parseIdentifier();
        }
        const bodyNode = node.body = this.startNode();
        const body = bodyNode.body = [];
        this.expect(5);
        while (!this.match(8)) {
          let bodyNode2 = this.startNode();
          if (this.match(79)) {
            this.next();
            if (!this.isContextual(122) && !this.match(83)) {
              this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {
                at: this.state.lastTokStartLoc
              });
            }
            this.parseImport(bodyNode2);
          } else {
            this.expectContextual(117, FlowErrors.UnsupportedStatementInDeclareModule);
            bodyNode2 = this.flowParseDeclare(bodyNode2, true);
          }
          body.push(bodyNode2);
        }
        this.scope.exit();
        this.expect(8);
        this.finishNode(bodyNode, \\"BlockStatement\\");
        let kind = null;
        let hasModuleExport = false;
        body.forEach((bodyElement) => {
          if (isEsModuleType(bodyElement)) {
            if (kind === \\"CommonJS\\") {
              this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
                node: bodyElement
              });
            }
            kind = \\"ES\\";
          } else if (bodyElement.type === \\"DeclareModuleExports\\") {
            if (hasModuleExport) {
              this.raise(FlowErrors.DuplicateDeclareModuleExports, {
                node: bodyElement
              });
            }
            if (kind === \\"ES\\") {
              this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
                node: bodyElement
              });
            }
            kind = \\"CommonJS\\";
            hasModuleExport = true;
          }
        });
        node.kind = kind || \\"CommonJS\\";
        return this.finishNode(node, \\"DeclareModule\\");
      }
      flowParseDeclareExportDeclaration(node, insideModule) {
        this.expect(78);
        if (this.eat(61)) {
          if (this.match(64) || this.match(76)) {
            node.declaration = this.flowParseDeclare(this.startNode());
          } else {
            node.declaration = this.flowParseType();
            this.semicolon();
          }
          node.default = true;
          return this.finishNode(node, \\"DeclareExportDeclaration\\");
        } else {
          if (this.match(71) || this.isLet() || (this.isContextual(122) || this.isContextual(121)) && !insideModule) {
            const label = this.state.value;
            const suggestion = exportSuggestions[label];
            throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {
              at: this.state.startLoc
            }, label, suggestion);
          }
          if (this.match(70) || this.match(64) || this.match(76) || this.isContextual(123)) {
            node.declaration = this.flowParseDeclare(this.startNode());
            node.default = false;
            return this.finishNode(node, \\"DeclareExportDeclaration\\");
          } else if (this.match(51) || this.match(5) || this.isContextual(121) || this.isContextual(122) || this.isContextual(123)) {
            node = this.parseExport(node);
            if (node.type === \\"ExportNamedDeclaration\\") {
              node.type = \\"ExportDeclaration\\";
              node.default = false;
              delete node.exportKind;
            }
            node.type = \\"Declare\\" + node.type;
            return node;
          }
        }
        throw this.unexpected();
      }
      flowParseDeclareModuleExports(node) {
        this.next();
        this.expectContextual(104);
        node.typeAnnotation = this.flowParseTypeAnnotation();
        this.semicolon();
        return this.finishNode(node, \\"DeclareModuleExports\\");
      }
      flowParseDeclareTypeAlias(node) {
        this.next();
        this.flowParseTypeAlias(node);
        node.type = \\"DeclareTypeAlias\\";
        return node;
      }
      flowParseDeclareOpaqueType(node) {
        this.next();
        this.flowParseOpaqueType(node, true);
        node.type = \\"DeclareOpaqueType\\";
        return node;
      }
      flowParseDeclareInterface(node) {
        this.next();
        this.flowParseInterfaceish(node);
        return this.finishNode(node, \\"DeclareInterface\\");
      }
      flowParseInterfaceish(node, isClass = false) {
        node.id = this.flowParseRestrictedIdentifier(!isClass, true);
        this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);
        if (this.match(45)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node.typeParameters = null;
        }
        node.extends = [];
        node.implements = [];
        node.mixins = [];
        if (this.eat(77)) {
          do {
            node.extends.push(this.flowParseInterfaceExtends());
          } while (!isClass && this.eat(12));
        }
        if (this.isContextual(110)) {
          this.next();
          do {
            node.mixins.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        if (this.isContextual(106)) {
          this.next();
          do {
            node.implements.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        node.body = this.flowParseObjectType({
          allowStatic: isClass,
          allowExact: false,
          allowSpread: false,
          allowProto: isClass,
          allowInexact: false
        });
      }
      flowParseInterfaceExtends() {
        const node = this.startNode();
        node.id = this.flowParseQualifiedTypeIdentifier();
        if (this.match(45)) {
          node.typeParameters = this.flowParseTypeParameterInstantiation();
        } else {
          node.typeParameters = null;
        }
        return this.finishNode(node, \\"InterfaceExtends\\");
      }
      flowParseInterface(node) {
        this.flowParseInterfaceish(node);
        return this.finishNode(node, \\"InterfaceDeclaration\\");
      }
      checkNotUnderscore(word) {
        if (word === \\"_\\") {
          this.raise(FlowErrors.UnexpectedReservedUnderscore, {
            at: this.state.startLoc
          });
        }
      }
      checkReservedType(word, startLoc, declaration) {
        if (!reservedTypes.has(word))
          return;
        this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {
          at: startLoc
        }, word);
      }
      flowParseRestrictedIdentifier(liberal, declaration) {
        this.checkReservedType(this.state.value, this.state.startLoc, declaration);
        return this.parseIdentifier(liberal);
      }
      flowParseTypeAlias(node) {
        node.id = this.flowParseRestrictedIdentifier(false, true);
        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);
        if (this.match(45)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node.typeParameters = null;
        }
        node.right = this.flowParseTypeInitialiser(29);
        this.semicolon();
        return this.finishNode(node, \\"TypeAlias\\");
      }
      flowParseOpaqueType(node, declare) {
        this.expectContextual(122);
        node.id = this.flowParseRestrictedIdentifier(true, true);
        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);
        if (this.match(45)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node.typeParameters = null;
        }
        node.supertype = null;
        if (this.match(14)) {
          node.supertype = this.flowParseTypeInitialiser(14);
        }
        node.impltype = null;
        if (!declare) {
          node.impltype = this.flowParseTypeInitialiser(29);
        }
        this.semicolon();
        return this.finishNode(node, \\"OpaqueType\\");
      }
      flowParseTypeParameter(requireDefault = false) {
        const nodeStartLoc = this.state.startLoc;
        const node = this.startNode();
        const variance = this.flowParseVariance();
        const ident = this.flowParseTypeAnnotatableIdentifier();
        node.name = ident.name;
        node.variance = variance;
        node.bound = ident.typeAnnotation;
        if (this.match(29)) {
          this.eat(29);
          node.default = this.flowParseType();
        } else {
          if (requireDefault) {
            this.raise(FlowErrors.MissingTypeParamDefault, {
              at: nodeStartLoc
            });
          }
        }
        return this.finishNode(node, \\"TypeParameter\\");
      }
      flowParseTypeParameterDeclaration() {
        const oldInType = this.state.inType;
        const node = this.startNode();
        node.params = [];
        this.state.inType = true;
        if (this.match(45) || this.match(134)) {
          this.next();
        } else {
          this.unexpected();
        }
        let defaultRequired = false;
        do {
          const typeParameter = this.flowParseTypeParameter(defaultRequired);
          node.params.push(typeParameter);
          if (typeParameter.default) {
            defaultRequired = true;
          }
          if (!this.match(46)) {
            this.expect(12);
          }
        } while (!this.match(46));
        this.expect(46);
        this.state.inType = oldInType;
        return this.finishNode(node, \\"TypeParameterDeclaration\\");
      }
      flowParseTypeParameterInstantiation() {
        const node = this.startNode();
        const oldInType = this.state.inType;
        node.params = [];
        this.state.inType = true;
        this.expect(45);
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = false;
        while (!this.match(46)) {
          node.params.push(this.flowParseType());
          if (!this.match(46)) {
            this.expect(12);
          }
        }
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        this.expect(46);
        this.state.inType = oldInType;
        return this.finishNode(node, \\"TypeParameterInstantiation\\");
      }
      flowParseTypeParameterInstantiationCallOrNew() {
        const node = this.startNode();
        const oldInType = this.state.inType;
        node.params = [];
        this.state.inType = true;
        this.expect(45);
        while (!this.match(46)) {
          node.params.push(this.flowParseTypeOrImplicitInstantiation());
          if (!this.match(46)) {
            this.expect(12);
          }
        }
        this.expect(46);
        this.state.inType = oldInType;
        return this.finishNode(node, \\"TypeParameterInstantiation\\");
      }
      flowParseInterfaceType() {
        const node = this.startNode();
        this.expectContextual(121);
        node.extends = [];
        if (this.eat(77)) {
          do {
            node.extends.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        node.body = this.flowParseObjectType({
          allowStatic: false,
          allowExact: false,
          allowSpread: false,
          allowProto: false,
          allowInexact: false
        });
        return this.finishNode(node, \\"InterfaceTypeAnnotation\\");
      }
      flowParseObjectPropertyKey() {
        return this.match(126) || this.match(125) ? this.parseExprAtom() : this.parseIdentifier(true);
      }
      flowParseObjectTypeIndexer(node, isStatic, variance) {
        node.static = isStatic;
        if (this.lookahead().type === 14) {
          node.id = this.flowParseObjectPropertyKey();
          node.key = this.flowParseTypeInitialiser();
        } else {
          node.id = null;
          node.key = this.flowParseType();
        }
        this.expect(3);
        node.value = this.flowParseTypeInitialiser();
        node.variance = variance;
        return this.finishNode(node, \\"ObjectTypeIndexer\\");
      }
      flowParseObjectTypeInternalSlot(node, isStatic) {
        node.static = isStatic;
        node.id = this.flowParseObjectPropertyKey();
        this.expect(3);
        this.expect(3);
        if (this.match(45) || this.match(10)) {
          node.method = true;
          node.optional = false;
          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));
        } else {
          node.method = false;
          if (this.eat(17)) {
            node.optional = true;
          }
          node.value = this.flowParseTypeInitialiser();
        }
        return this.finishNode(node, \\"ObjectTypeInternalSlot\\");
      }
      flowParseObjectTypeMethodish(node) {
        node.params = [];
        node.rest = null;
        node.typeParameters = null;
        node.this = null;
        if (this.match(45)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        this.expect(10);
        if (this.match(74)) {
          node.this = this.flowParseFunctionTypeParam(true);
          node.this.name = null;
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        while (!this.match(11) && !this.match(21)) {
          node.params.push(this.flowParseFunctionTypeParam(false));
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        if (this.eat(21)) {
          node.rest = this.flowParseFunctionTypeParam(false);
        }
        this.expect(11);
        node.returnType = this.flowParseTypeInitialiser();
        return this.finishNode(node, \\"FunctionTypeAnnotation\\");
      }
      flowParseObjectTypeCallProperty(node, isStatic) {
        const valueNode = this.startNode();
        node.static = isStatic;
        node.value = this.flowParseObjectTypeMethodish(valueNode);
        return this.finishNode(node, \\"ObjectTypeCallProperty\\");
      }
      flowParseObjectType({
        allowStatic,
        allowExact,
        allowSpread,
        allowProto,
        allowInexact
      }) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const nodeStart = this.startNode();
        nodeStart.callProperties = [];
        nodeStart.properties = [];
        nodeStart.indexers = [];
        nodeStart.internalSlots = [];
        let endDelim;
        let exact;
        let inexact = false;
        if (allowExact && this.match(6)) {
          this.expect(6);
          endDelim = 9;
          exact = true;
        } else {
          this.expect(5);
          endDelim = 8;
          exact = false;
        }
        nodeStart.exact = exact;
        while (!this.match(endDelim)) {
          let isStatic = false;
          let protoStartLoc = null;
          let inexactStartLoc = null;
          const node = this.startNode();
          if (allowProto && this.isContextual(111)) {
            const lookahead = this.lookahead();
            if (lookahead.type !== 14 && lookahead.type !== 17) {
              this.next();
              protoStartLoc = this.state.startLoc;
              allowStatic = false;
            }
          }
          if (allowStatic && this.isContextual(100)) {
            const lookahead = this.lookahead();
            if (lookahead.type !== 14 && lookahead.type !== 17) {
              this.next();
              isStatic = true;
            }
          }
          const variance = this.flowParseVariance();
          if (this.eat(0)) {
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }
            if (this.eat(0)) {
              if (variance) {
                this.unexpected(variance.loc.start);
              }
              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
            } else {
              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
            }
          } else if (this.match(10) || this.match(45)) {
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }
            if (variance) {
              this.unexpected(variance.loc.start);
            }
            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
          } else {
            let kind = \\"init\\";
            if (this.isContextual(94) || this.isContextual(99)) {
              const lookahead = this.lookahead();
              if (tokenIsLiteralPropertyName(lookahead.type)) {
                kind = this.state.value;
                this.next();
              }
            }
            const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
            if (propOrInexact === null) {
              inexact = true;
              inexactStartLoc = this.state.lastTokStartLoc;
            } else {
              nodeStart.properties.push(propOrInexact);
            }
          }
          this.flowObjectTypeSemicolon();
          if (inexactStartLoc && !this.match(8) && !this.match(9)) {
            this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {
              at: inexactStartLoc
            });
          }
        }
        this.expect(endDelim);
        if (allowSpread) {
          nodeStart.inexact = inexact;
        }
        const out = this.finishNode(nodeStart, \\"ObjectTypeAnnotation\\");
        this.state.inType = oldInType;
        return out;
      }
      flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
        if (this.eat(21)) {
          const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
          if (isInexactToken) {
            if (!allowSpread) {
              this.raise(FlowErrors.InexactInsideNonObject, {
                at: this.state.lastTokStartLoc
              });
            } else if (!allowInexact) {
              this.raise(FlowErrors.InexactInsideExact, {
                at: this.state.lastTokStartLoc
              });
            }
            if (variance) {
              this.raise(FlowErrors.InexactVariance, {
                node: variance
              });
            }
            return null;
          }
          if (!allowSpread) {
            this.raise(FlowErrors.UnexpectedSpreadType, {
              at: this.state.lastTokStartLoc
            });
          }
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (variance) {
            this.raise(FlowErrors.SpreadVariance, {
              node: variance
            });
          }
          node.argument = this.flowParseType();
          return this.finishNode(node, \\"ObjectTypeSpreadProperty\\");
        } else {
          node.key = this.flowParseObjectPropertyKey();
          node.static = isStatic;
          node.proto = protoStartLoc != null;
          node.kind = kind;
          let optional = false;
          if (this.match(45) || this.match(10)) {
            node.method = true;
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }
            if (variance) {
              this.unexpected(variance.loc.start);
            }
            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));
            if (kind === \\"get\\" || kind === \\"set\\") {
              this.flowCheckGetterSetterParams(node);
            }
            if (!allowSpread && node.key.name === \\"constructor\\" && node.value.this) {
              this.raise(FlowErrors.ThisParamBannedInConstructor, {
                node: node.value.this
              });
            }
          } else {
            if (kind !== \\"init\\")
              this.unexpected();
            node.method = false;
            if (this.eat(17)) {
              optional = true;
            }
            node.value = this.flowParseTypeInitialiser();
            node.variance = variance;
          }
          node.optional = optional;
          return this.finishNode(node, \\"ObjectTypeProperty\\");
        }
      }
      flowCheckGetterSetterParams(property) {
        const paramCount = property.kind === \\"get\\" ? 0 : 1;
        const length = property.value.params.length + (property.value.rest ? 1 : 0);
        if (property.value.this) {
          this.raise(property.kind === \\"get\\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {
            node: property.value.this
          });
        }
        if (length !== paramCount) {
          this.raise(property.kind === \\"get\\" ? ErrorMessages.BadGetterArity : ErrorMessages.BadSetterArity, {
            node: property
          });
        }
        if (property.kind === \\"set\\" && property.value.rest) {
          this.raise(ErrorMessages.BadSetterRestParameter, {
            node: property
          });
        }
      }
      flowObjectTypeSemicolon() {
        if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
          this.unexpected();
        }
      }
      flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
        startPos = startPos || this.state.start;
        startLoc = startLoc || this.state.startLoc;
        let node = id || this.flowParseRestrictedIdentifier(true);
        while (this.eat(16)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.qualification = node;
          node2.id = this.flowParseRestrictedIdentifier(true);
          node = this.finishNode(node2, \\"QualifiedTypeIdentifier\\");
        }
        return node;
      }
      flowParseGenericType(startPos, startLoc, id) {
        const node = this.startNodeAt(startPos, startLoc);
        node.typeParameters = null;
        node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);
        if (this.match(45)) {
          node.typeParameters = this.flowParseTypeParameterInstantiation();
        }
        return this.finishNode(node, \\"GenericTypeAnnotation\\");
      }
      flowParseTypeofType() {
        const node = this.startNode();
        this.expect(83);
        node.argument = this.flowParsePrimaryType();
        return this.finishNode(node, \\"TypeofTypeAnnotation\\");
      }
      flowParseTupleType() {
        const node = this.startNode();
        node.types = [];
        this.expect(0);
        while (this.state.pos < this.length && !this.match(3)) {
          node.types.push(this.flowParseType());
          if (this.match(3))
            break;
          this.expect(12);
        }
        this.expect(3);
        return this.finishNode(node, \\"TupleTypeAnnotation\\");
      }
      flowParseFunctionTypeParam(first) {
        let name = null;
        let optional = false;
        let typeAnnotation = null;
        const node = this.startNode();
        const lh = this.lookahead();
        const isThis = this.state.type === 74;
        if (lh.type === 14 || lh.type === 17) {
          if (isThis && !first) {
            this.raise(FlowErrors.ThisParamMustBeFirst, {
              node
            });
          }
          name = this.parseIdentifier(isThis);
          if (this.eat(17)) {
            optional = true;
            if (isThis) {
              this.raise(FlowErrors.ThisParamMayNotBeOptional, {
                node
              });
            }
          }
          typeAnnotation = this.flowParseTypeInitialiser();
        } else {
          typeAnnotation = this.flowParseType();
        }
        node.name = name;
        node.optional = optional;
        node.typeAnnotation = typeAnnotation;
        return this.finishNode(node, \\"FunctionTypeParam\\");
      }
      reinterpretTypeAsFunctionTypeParam(type) {
        const node = this.startNodeAt(type.start, type.loc.start);
        node.name = null;
        node.optional = false;
        node.typeAnnotation = type;
        return this.finishNode(node, \\"FunctionTypeParam\\");
      }
      flowParseFunctionTypeParams(params = []) {
        let rest = null;
        let _this = null;
        if (this.match(74)) {
          _this = this.flowParseFunctionTypeParam(true);
          _this.name = null;
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        while (!this.match(11) && !this.match(21)) {
          params.push(this.flowParseFunctionTypeParam(false));
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        if (this.eat(21)) {
          rest = this.flowParseFunctionTypeParam(false);
        }
        return {
          params,
          rest,
          _this
        };
      }
      flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
        switch (id.name) {
          case \\"any\\":
            return this.finishNode(node, \\"AnyTypeAnnotation\\");
          case \\"bool\\":
          case \\"boolean\\":
            return this.finishNode(node, \\"BooleanTypeAnnotation\\");
          case \\"mixed\\":
            return this.finishNode(node, \\"MixedTypeAnnotation\\");
          case \\"empty\\":
            return this.finishNode(node, \\"EmptyTypeAnnotation\\");
          case \\"number\\":
            return this.finishNode(node, \\"NumberTypeAnnotation\\");
          case \\"string\\":
            return this.finishNode(node, \\"StringTypeAnnotation\\");
          case \\"symbol\\":
            return this.finishNode(node, \\"SymbolTypeAnnotation\\");
          default:
            this.checkNotUnderscore(id.name);
            return this.flowParseGenericType(startPos, startLoc, id);
        }
      }
      flowParsePrimaryType() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const node = this.startNode();
        let tmp;
        let type;
        let isGroupedType = false;
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        switch (this.state.type) {
          case 5:
            return this.flowParseObjectType({
              allowStatic: false,
              allowExact: false,
              allowSpread: true,
              allowProto: false,
              allowInexact: true
            });
          case 6:
            return this.flowParseObjectType({
              allowStatic: false,
              allowExact: true,
              allowSpread: true,
              allowProto: false,
              allowInexact: false
            });
          case 0:
            this.state.noAnonFunctionType = false;
            type = this.flowParseTupleType();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            return type;
          case 45:
            node.typeParameters = this.flowParseTypeParameterDeclaration();
            this.expect(10);
            tmp = this.flowParseFunctionTypeParams();
            node.params = tmp.params;
            node.rest = tmp.rest;
            node.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node.returnType = this.flowParseType();
            return this.finishNode(node, \\"FunctionTypeAnnotation\\");
          case 10:
            this.next();
            if (!this.match(11) && !this.match(21)) {
              if (tokenIsIdentifier(this.state.type) || this.match(74)) {
                const token = this.lookahead().type;
                isGroupedType = token !== 17 && token !== 14;
              } else {
                isGroupedType = true;
              }
            }
            if (isGroupedType) {
              this.state.noAnonFunctionType = false;
              type = this.flowParseType();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
                this.expect(11);
                return type;
              } else {
                this.eat(12);
              }
            }
            if (type) {
              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
            } else {
              tmp = this.flowParseFunctionTypeParams();
            }
            node.params = tmp.params;
            node.rest = tmp.rest;
            node.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node.returnType = this.flowParseType();
            node.typeParameters = null;
            return this.finishNode(node, \\"FunctionTypeAnnotation\\");
          case 125:
            return this.parseLiteral(this.state.value, \\"StringLiteralTypeAnnotation\\");
          case 81:
          case 82:
            node.value = this.match(81);
            this.next();
            return this.finishNode(node, \\"BooleanLiteralTypeAnnotation\\");
          case 49:
            if (this.state.value === \\"-\\") {
              this.next();
              if (this.match(126)) {
                return this.parseLiteralAtNode(-this.state.value, \\"NumberLiteralTypeAnnotation\\", node);
              }
              if (this.match(127)) {
                return this.parseLiteralAtNode(-this.state.value, \\"BigIntLiteralTypeAnnotation\\", node);
              }
              throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {
                at: this.state.startLoc
              });
            }
            throw this.unexpected();
          case 126:
            return this.parseLiteral(this.state.value, \\"NumberLiteralTypeAnnotation\\");
          case 127:
            return this.parseLiteral(this.state.value, \\"BigIntLiteralTypeAnnotation\\");
          case 84:
            this.next();
            return this.finishNode(node, \\"VoidTypeAnnotation\\");
          case 80:
            this.next();
            return this.finishNode(node, \\"NullLiteralTypeAnnotation\\");
          case 74:
            this.next();
            return this.finishNode(node, \\"ThisTypeAnnotation\\");
          case 51:
            this.next();
            return this.finishNode(node, \\"ExistsTypeAnnotation\\");
          case 83:
            return this.flowParseTypeofType();
          default:
            if (tokenIsKeyword(this.state.type)) {
              const label = tokenLabelName(this.state.type);
              this.next();
              return super.createIdentifier(node, label);
            } else if (tokenIsIdentifier(this.state.type)) {
              if (this.isContextual(121)) {
                return this.flowParseInterfaceType();
              }
              return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
            }
        }
        throw this.unexpected();
      }
      flowParsePostfixType() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let type = this.flowParsePrimaryType();
        let seenOptionalIndexedAccess = false;
        while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
          const node = this.startNodeAt(startPos, startLoc);
          const optional = this.eat(18);
          seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
          this.expect(0);
          if (!optional && this.match(3)) {
            node.elementType = type;
            this.next();
            type = this.finishNode(node, \\"ArrayTypeAnnotation\\");
          } else {
            node.objectType = type;
            node.indexType = this.flowParseType();
            this.expect(3);
            if (seenOptionalIndexedAccess) {
              node.optional = optional;
              type = this.finishNode(node, \\"OptionalIndexedAccessType\\");
            } else {
              type = this.finishNode(node, \\"IndexedAccessType\\");
            }
          }
        }
        return type;
      }
      flowParsePrefixType() {
        const node = this.startNode();
        if (this.eat(17)) {
          node.typeAnnotation = this.flowParsePrefixType();
          return this.finishNode(node, \\"NullableTypeAnnotation\\");
        } else {
          return this.flowParsePostfixType();
        }
      }
      flowParseAnonFunctionWithoutParens() {
        const param = this.flowParsePrefixType();
        if (!this.state.noAnonFunctionType && this.eat(19)) {
          const node = this.startNodeAt(param.start, param.loc.start);
          node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
          node.rest = null;
          node.this = null;
          node.returnType = this.flowParseType();
          node.typeParameters = null;
          return this.finishNode(node, \\"FunctionTypeAnnotation\\");
        }
        return param;
      }
      flowParseIntersectionType() {
        const node = this.startNode();
        this.eat(43);
        const type = this.flowParseAnonFunctionWithoutParens();
        node.types = [type];
        while (this.eat(43)) {
          node.types.push(this.flowParseAnonFunctionWithoutParens());
        }
        return node.types.length === 1 ? type : this.finishNode(node, \\"IntersectionTypeAnnotation\\");
      }
      flowParseUnionType() {
        const node = this.startNode();
        this.eat(41);
        const type = this.flowParseIntersectionType();
        node.types = [type];
        while (this.eat(41)) {
          node.types.push(this.flowParseIntersectionType());
        }
        return node.types.length === 1 ? type : this.finishNode(node, \\"UnionTypeAnnotation\\");
      }
      flowParseType() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const type = this.flowParseUnionType();
        this.state.inType = oldInType;
        return type;
      }
      flowParseTypeOrImplicitInstantiation() {
        if (this.state.type === 124 && this.state.value === \\"_\\") {
          const startPos = this.state.start;
          const startLoc = this.state.startLoc;
          const node = this.parseIdentifier();
          return this.flowParseGenericType(startPos, startLoc, node);
        } else {
          return this.flowParseType();
        }
      }
      flowParseTypeAnnotation() {
        const node = this.startNode();
        node.typeAnnotation = this.flowParseTypeInitialiser();
        return this.finishNode(node, \\"TypeAnnotation\\");
      }
      flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
        const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
        if (this.match(14)) {
          ident.typeAnnotation = this.flowParseTypeAnnotation();
          this.resetEndLocation(ident);
        }
        return ident;
      }
      typeCastToParameter(node) {
        node.expression.typeAnnotation = node.typeAnnotation;
        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
        return node.expression;
      }
      flowParseVariance() {
        let variance = null;
        if (this.match(49)) {
          variance = this.startNode();
          if (this.state.value === \\"+\\") {
            variance.kind = \\"plus\\";
          } else {
            variance.kind = \\"minus\\";
          }
          this.next();
          this.finishNode(variance, \\"Variance\\");
        }
        return variance;
      }
      parseFunctionBody(node, allowExpressionBody, isMethod = false) {
        if (allowExpressionBody) {
          return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
        }
        return super.parseFunctionBody(node, false, isMethod);
      }
      parseFunctionBodyAndFinish(node, type, isMethod = false) {
        if (this.match(14)) {
          const typeNode = this.startNode();
          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \\"TypeAnnotation\\") : null;
        }
        super.parseFunctionBodyAndFinish(node, type, isMethod);
      }
      parseStatement(context, topLevel) {
        if (this.state.strict && this.isContextual(121)) {
          const lookahead = this.lookahead();
          if (tokenIsKeywordOrIdentifier(lookahead.type)) {
            const node = this.startNode();
            this.next();
            return this.flowParseInterface(node);
          }
        } else if (this.shouldParseEnums() && this.isContextual(118)) {
          const node = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(node);
        }
        const stmt = super.parseStatement(context, topLevel);
        if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) {
          this.flowPragma = null;
        }
        return stmt;
      }
      parseExpressionStatement(node, expr) {
        if (expr.type === \\"Identifier\\") {
          if (expr.name === \\"declare\\") {
            if (this.match(76) || tokenIsIdentifier(this.state.type) || this.match(64) || this.match(70) || this.match(78)) {
              return this.flowParseDeclare(node);
            }
          } else if (tokenIsIdentifier(this.state.type)) {
            if (expr.name === \\"interface\\") {
              return this.flowParseInterface(node);
            } else if (expr.name === \\"type\\") {
              return this.flowParseTypeAlias(node);
            } else if (expr.name === \\"opaque\\") {
              return this.flowParseOpaqueType(node, false);
            }
          }
        }
        return super.parseExpressionStatement(node, expr);
      }
      shouldParseExportDeclaration() {
        const {
          type
        } = this.state;
        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 118) {
          return !this.state.containsEsc;
        }
        return super.shouldParseExportDeclaration();
      }
      isExportDefaultSpecifier() {
        const {
          type
        } = this.state;
        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 118) {
          return this.state.containsEsc;
        }
        return super.isExportDefaultSpecifier();
      }
      parseExportDefaultExpression() {
        if (this.shouldParseEnums() && this.isContextual(118)) {
          const node = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(node);
        }
        return super.parseExportDefaultExpression();
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (!this.match(17))
          return expr;
        if (this.state.maybeInArrowParameters) {
          const nextCh = this.lookaheadCharCode();
          if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
            this.setOptionalParametersError(refExpressionErrors);
            return expr;
          }
        }
        this.expect(17);
        const state = this.state.clone();
        const originalNoArrowAt = this.state.noArrowAt;
        const node = this.startNodeAt(startPos, startLoc);
        let {
          consequent,
          failed
        } = this.tryParseConditionalConsequent();
        let [valid, invalid] = this.getArrowLikeExpressions(consequent);
        if (failed || invalid.length > 0) {
          const noArrowAt = [...originalNoArrowAt];
          if (invalid.length > 0) {
            this.state = state;
            this.state.noArrowAt = noArrowAt;
            for (let i = 0; i < invalid.length; i++) {
              noArrowAt.push(invalid[i].start);
            }
            ({
              consequent,
              failed
            } = this.tryParseConditionalConsequent());
            [valid, invalid] = this.getArrowLikeExpressions(consequent);
          }
          if (failed && valid.length > 1) {
            this.raise(FlowErrors.AmbiguousConditionalArrow, {
              at: state.startLoc
            });
          }
          if (failed && valid.length === 1) {
            this.state = state;
            noArrowAt.push(valid[0].start);
            this.state.noArrowAt = noArrowAt;
            ({
              consequent,
              failed
            } = this.tryParseConditionalConsequent());
          }
        }
        this.getArrowLikeExpressions(consequent, true);
        this.state.noArrowAt = originalNoArrowAt;
        this.expect(14);
        node.test = expr;
        node.consequent = consequent;
        node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0));
        return this.finishNode(node, \\"ConditionalExpression\\");
      }
      tryParseConditionalConsequent() {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        const consequent = this.parseMaybeAssignAllowIn();
        const failed = !this.match(14);
        this.state.noArrowParamsConversionAt.pop();
        return {
          consequent,
          failed
        };
      }
      getArrowLikeExpressions(node, disallowInvalid) {
        const stack = [node];
        const arrows = [];
        while (stack.length !== 0) {
          const node2 = stack.pop();
          if (node2.type === \\"ArrowFunctionExpression\\") {
            if (node2.typeParameters || !node2.returnType) {
              this.finishArrowValidation(node2);
            } else {
              arrows.push(node2);
            }
            stack.push(node2.body);
          } else if (node2.type === \\"ConditionalExpression\\") {
            stack.push(node2.consequent);
            stack.push(node2.alternate);
          }
        }
        if (disallowInvalid) {
          arrows.forEach((node2) => this.finishArrowValidation(node2));
          return [arrows, []];
        }
        return partition(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
      }
      finishArrowValidation(node) {
        var _node$extra;
        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
        super.checkParams(node, false, true);
        this.scope.exit();
      }
      forwardNoArrowParamsConversionAt(node, parse2) {
        let result;
        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
          this.state.noArrowParamsConversionAt.push(this.state.start);
          result = parse2();
          this.state.noArrowParamsConversionAt.pop();
        } else {
          result = parse2();
        }
        return result;
      }
      parseParenItem(node, startPos, startLoc) {
        node = super.parseParenItem(node, startPos, startLoc);
        if (this.eat(17)) {
          node.optional = true;
          this.resetEndLocation(node);
        }
        if (this.match(14)) {
          const typeCastNode = this.startNodeAt(startPos, startLoc);
          typeCastNode.expression = node;
          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
          return this.finishNode(typeCastNode, \\"TypeCastExpression\\");
        }
        return node;
      }
      assertModuleNodeAllowed(node) {
        if (node.type === \\"ImportDeclaration\\" && (node.importKind === \\"type\\" || node.importKind === \\"typeof\\") || node.type === \\"ExportNamedDeclaration\\" && node.exportKind === \\"type\\" || node.type === \\"ExportAllDeclaration\\" && node.exportKind === \\"type\\") {
          return;
        }
        super.assertModuleNodeAllowed(node);
      }
      parseExport(node) {
        const decl = super.parseExport(node);
        if (decl.type === \\"ExportNamedDeclaration\\" || decl.type === \\"ExportAllDeclaration\\") {
          decl.exportKind = decl.exportKind || \\"value\\";
        }
        return decl;
      }
      parseExportDeclaration(node) {
        if (this.isContextual(122)) {
          node.exportKind = \\"type\\";
          const declarationNode = this.startNode();
          this.next();
          if (this.match(5)) {
            node.specifiers = this.parseExportSpecifiers(true);
            this.parseExportFrom(node);
            return null;
          } else {
            return this.flowParseTypeAlias(declarationNode);
          }
        } else if (this.isContextual(123)) {
          node.exportKind = \\"type\\";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseOpaqueType(declarationNode, false);
        } else if (this.isContextual(121)) {
          node.exportKind = \\"type\\";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseInterface(declarationNode);
        } else if (this.shouldParseEnums() && this.isContextual(118)) {
          node.exportKind = \\"value\\";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(declarationNode);
        } else {
          return super.parseExportDeclaration(node);
        }
      }
      eatExportStar(node) {
        if (super.eatExportStar(...arguments))
          return true;
        if (this.isContextual(122) && this.lookahead().type === 51) {
          node.exportKind = \\"type\\";
          this.next();
          this.next();
          return true;
        }
        return false;
      }
      maybeParseExportNamespaceSpecifier(node) {
        const {
          startLoc
        } = this.state;
        const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
        if (hasNamespace && node.exportKind === \\"type\\") {
          this.unexpected(startLoc);
        }
        return hasNamespace;
      }
      parseClassId(node, isStatement, optionalId) {
        super.parseClassId(node, isStatement, optionalId);
        if (this.match(45)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
      }
      parseClassMember(classBody, member, state) {
        const {
          startLoc
        } = this.state;
        if (this.isContextual(117)) {
          if (this.parseClassMemberFromModifier(classBody, member)) {
            return;
          }
          member.declare = true;
        }
        super.parseClassMember(classBody, member, state);
        if (member.declare) {
          if (member.type !== \\"ClassProperty\\" && member.type !== \\"ClassPrivateProperty\\" && member.type !== \\"PropertyDefinition\\") {
            this.raise(FlowErrors.DeclareClassElement, {
              at: startLoc
            });
          } else if (member.value) {
            this.raise(FlowErrors.DeclareClassFieldInitializer, {
              node: member.value
            });
          }
        }
      }
      isIterator(word) {
        return word === \\"iterator\\" || word === \\"asyncIterator\\";
      }
      readIterator() {
        const word = super.readWord1();
        const fullWord = \\"@@\\" + word;
        if (!this.isIterator(word) || !this.state.inType) {
          this.raise(ErrorMessages.InvalidIdentifier, {
            at: this.state.curPosition()
          }, fullWord);
        }
        this.finishToken(124, fullWord);
      }
      getTokenFromCode(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 123 && next === 124) {
          return this.finishOp(6, 2);
        } else if (this.state.inType && (code === 62 || code === 60)) {
          return this.finishOp(code === 62 ? 46 : 45, 1);
        } else if (this.state.inType && code === 63) {
          if (next === 46) {
            return this.finishOp(18, 2);
          }
          return this.finishOp(17, 1);
        } else if (isIteratorStart(code, next)) {
          this.state.pos += 2;
          return this.readIterator();
        } else {
          return super.getTokenFromCode(code);
        }
      }
      isAssignable(node, isBinding) {
        if (node.type === \\"TypeCastExpression\\") {
          return this.isAssignable(node.expression, isBinding);
        } else {
          return super.isAssignable(node, isBinding);
        }
      }
      toAssignable(node, isLHS = false) {
        if (node.type === \\"TypeCastExpression\\") {
          return super.toAssignable(this.typeCastToParameter(node), isLHS);
        } else {
          return super.toAssignable(node, isLHS);
        }
      }
      toAssignableList(exprList, trailingCommaLoc, isLHS) {
        for (let i = 0; i < exprList.length; i++) {
          const expr = exprList[i];
          if ((expr == null ? void 0 : expr.type) === \\"TypeCastExpression\\") {
            exprList[i] = this.typeCastToParameter(expr);
          }
        }
        return super.toAssignableList(exprList, trailingCommaLoc, isLHS);
      }
      toReferencedList(exprList, isParenthesizedExpr) {
        for (let i = 0; i < exprList.length; i++) {
          var _expr$extra;
          const expr = exprList[i];
          if (expr && expr.type === \\"TypeCastExpression\\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
            this.raise(FlowErrors.TypeCastInPattern, {
              node: expr.typeAnnotation
            });
          }
        }
        return exprList;
      }
      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
        if (canBePattern && !this.state.maybeInArrowParameters) {
          this.toReferencedList(node.elements);
        }
        return node;
      }
      checkLVal(expr, ...args) {
        if (expr.type !== \\"TypeCastExpression\\") {
          return super.checkLVal(expr, ...args);
        }
      }
      parseClassProperty(node) {
        if (this.match(14)) {
          node.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return super.parseClassProperty(node);
      }
      parseClassPrivateProperty(node) {
        if (this.match(14)) {
          node.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return super.parseClassPrivateProperty(node);
      }
      isClassMethod() {
        return this.match(45) || super.isClassMethod();
      }
      isClassProperty() {
        return this.match(14) || super.isClassProperty();
      }
      isNonstaticConstructor(method) {
        return !this.match(14) && super.isNonstaticConstructor(method);
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        if (method.variance) {
          this.unexpected(method.variance.loc.start);
        }
        delete method.variance;
        if (this.match(45)) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
        if (method.params && isConstructor) {
          const params = method.params;
          if (params.length > 0 && this.isThisParam(params[0])) {
            this.raise(FlowErrors.ThisParamBannedInConstructor, {
              node: method
            });
          }
        } else if (method.type === \\"MethodDefinition\\" && isConstructor && method.value.params) {
          const params = method.value.params;
          if (params.length > 0 && this.isThisParam(params[0])) {
            this.raise(FlowErrors.ThisParamBannedInConstructor, {
              node: method
            });
          }
        }
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        if (method.variance) {
          this.unexpected(method.variance.loc.start);
        }
        delete method.variance;
        if (this.match(45)) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
      }
      parseClassSuper(node) {
        super.parseClassSuper(node);
        if (node.superClass && this.match(45)) {
          node.superTypeParameters = this.flowParseTypeParameterInstantiation();
        }
        if (this.isContextual(106)) {
          this.next();
          const implemented = node.implements = [];
          do {
            const node2 = this.startNode();
            node2.id = this.flowParseRestrictedIdentifier(true);
            if (this.match(45)) {
              node2.typeParameters = this.flowParseTypeParameterInstantiation();
            } else {
              node2.typeParameters = null;
            }
            implemented.push(this.finishNode(node2, \\"ClassImplements\\"));
          } while (this.eat(12));
        }
      }
      checkGetterSetterParams(method) {
        super.checkGetterSetterParams(method);
        const params = this.getObjectOrClassMethodParams(method);
        if (params.length > 0) {
          const param = params[0];
          if (this.isThisParam(param) && method.kind === \\"get\\") {
            this.raise(FlowErrors.GetterMayNotHaveThisParam, {
              node: param
            });
          } else if (this.isThisParam(param)) {
            this.raise(FlowErrors.SetterMayNotHaveThisParam, {
              node: param
            });
          }
        }
      }
      parsePropertyNamePrefixOperator(node) {
        node.variance = this.flowParseVariance();
      }
      parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        if (prop.variance) {
          this.unexpected(prop.variance.loc.start);
        }
        delete prop.variance;
        let typeParameters;
        if (this.match(45) && !isAccessor) {
          typeParameters = this.flowParseTypeParameterDeclaration();
          if (!this.match(10))
            this.unexpected();
        }
        super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
        if (typeParameters) {
          (prop.value || prop).typeParameters = typeParameters;
        }
      }
      parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
          if (param.type !== \\"Identifier\\") {
            this.raise(FlowErrors.PatternIsOptional, {
              node: param
            });
          }
          if (this.isThisParam(param)) {
            this.raise(FlowErrors.ThisParamMayNotBeOptional, {
              node: param
            });
          }
          param.optional = true;
        }
        if (this.match(14)) {
          param.typeAnnotation = this.flowParseTypeAnnotation();
        } else if (this.isThisParam(param)) {
          this.raise(FlowErrors.ThisParamAnnotationRequired, {
            node: param
          });
        }
        if (this.match(29) && this.isThisParam(param)) {
          this.raise(FlowErrors.ThisParamNoDefault, {
            node: param
          });
        }
        this.resetEndLocation(param);
        return param;
      }
      parseMaybeDefault(startPos, startLoc, left) {
        const node = super.parseMaybeDefault(startPos, startLoc, left);
        if (node.type === \\"AssignmentPattern\\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
          this.raise(FlowErrors.TypeBeforeInitializer, {
            node: node.typeAnnotation
          });
        }
        return node;
      }
      shouldParseDefaultImport(node) {
        if (!hasTypeImportKind(node)) {
          return super.shouldParseDefaultImport(node);
        }
        return isMaybeDefaultImport(this.state.type);
      }
      parseImportSpecifierLocal(node, specifier, type, contextDescription) {
        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
        node.specifiers.push(this.finishNode(specifier, type));
      }
      maybeParseDefaultImportSpecifier(node) {
        node.importKind = \\"value\\";
        let kind = null;
        if (this.match(83)) {
          kind = \\"typeof\\";
        } else if (this.isContextual(122)) {
          kind = \\"type\\";
        }
        if (kind) {
          const lh = this.lookahead();
          const {
            type
          } = lh;
          if (kind === \\"type\\" && type === 51) {
            this.unexpected(null, lh.type);
          }
          if (isMaybeDefaultImport(type) || type === 5 || type === 51) {
            this.next();
            node.importKind = kind;
          }
        }
        return super.maybeParseDefaultImportSpecifier(node);
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        const firstIdent = specifier.imported;
        let specifierTypeKind = null;
        if (firstIdent.type === \\"Identifier\\") {
          if (firstIdent.name === \\"type\\") {
            specifierTypeKind = \\"type\\";
          } else if (firstIdent.name === \\"typeof\\") {
            specifierTypeKind = \\"typeof\\";
          }
        }
        let isBinding = false;
        if (this.isContextual(89) && !this.isLookaheadContextual(\\"as\\")) {
          const as_ident = this.parseIdentifier(true);
          if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
            specifier.imported = as_ident;
            specifier.importKind = specifierTypeKind;
            specifier.local = cloneIdentifier(as_ident);
          } else {
            specifier.imported = firstIdent;
            specifier.importKind = null;
            specifier.local = this.parseIdentifier();
          }
        } else {
          if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
            specifier.imported = this.parseIdentifier(true);
            specifier.importKind = specifierTypeKind;
          } else {
            if (importedIsString) {
              throw this.raise(ErrorMessages.ImportBindingIsString, {
                node: specifier
              }, firstIdent.value);
            }
            specifier.imported = firstIdent;
            specifier.importKind = null;
          }
          if (this.eatContextual(89)) {
            specifier.local = this.parseIdentifier();
          } else {
            isBinding = true;
            specifier.local = cloneIdentifier(specifier.imported);
          }
        }
        const specifierIsTypeImport = hasTypeImportKind(specifier);
        if (isInTypeOnlyImport && specifierIsTypeImport) {
          this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {
            node: specifier
          });
        }
        if (isInTypeOnlyImport || specifierIsTypeImport) {
          this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
        }
        if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
          this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
        }
        this.checkLVal(specifier.local, \\"import specifier\\", BIND_LEXICAL);
        return this.finishNode(specifier, \\"ImportSpecifier\\");
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 74:
            return this.parseIdentifier(true);
          default:
            return super.parseBindingAtom();
        }
      }
      parseFunctionParams(node, allowModifiers) {
        const kind = node.kind;
        if (kind !== \\"get\\" && kind !== \\"set\\" && this.match(45)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.parseFunctionParams(node, allowModifiers);
      }
      parseVarId(decl, kind) {
        super.parseVarId(decl, kind);
        if (this.match(14)) {
          decl.id.typeAnnotation = this.flowParseTypeAnnotation();
          this.resetEndLocation(decl.id);
        }
      }
      parseAsyncArrowFromCallExpression(node, call) {
        if (this.match(14)) {
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = true;
          node.returnType = this.flowParseTypeAnnotation();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
        }
        return super.parseAsyncArrowFromCallExpression(node, call);
      }
      shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
      }
      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        var _jsx;
        let state = null;
        let jsx2;
        if (this.hasPlugin(\\"jsx\\") && (this.match(134) || this.match(45))) {
          state = this.state.clone();
          jsx2 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
          if (!jsx2.error)
            return jsx2.node;
          const {
            context
          } = this.state;
          const currentContext = context[context.length - 1];
          if (currentContext === types.j_oTag || currentContext === types.j_expr) {
            context.pop();
          }
        }
        if ((_jsx = jsx2) != null && _jsx.error || this.match(45)) {
          var _jsx2, _jsx3;
          state = state || this.state.clone();
          let typeParameters;
          const arrow = this.tryParse((abort) => {
            var _arrowExpression$extr;
            typeParameters = this.flowParseTypeParameterDeclaration();
            const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
              const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              this.resetStartLocationFromNode(result, typeParameters);
              return result;
            });
            if ((_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized)
              abort();
            const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
            if (expr.type !== \\"ArrowFunctionExpression\\")
              abort();
            expr.typeParameters = typeParameters;
            this.resetStartLocationFromNode(expr, typeParameters);
            return arrowExpression2;
          }, state);
          let arrowExpression = null;
          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \\"ArrowFunctionExpression\\") {
            if (!arrow.error && !arrow.aborted) {
              if (arrow.node.async) {
                this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
                  node: typeParameters
                });
              }
              return arrow.node;
            }
            arrowExpression = arrow.node;
          }
          if ((_jsx2 = jsx2) != null && _jsx2.node) {
            this.state = jsx2.failState;
            return jsx2.node;
          }
          if (arrowExpression) {
            this.state = arrow.failState;
            return arrowExpression;
          }
          if ((_jsx3 = jsx2) != null && _jsx3.thrown)
            throw jsx2.error;
          if (arrow.thrown)
            throw arrow.error;
          throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {
            node: typeParameters
          });
        }
        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
      }
      parseArrow(node) {
        if (this.match(14)) {
          const result = this.tryParse(() => {
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true;
            const typeNode = this.startNode();
            [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            if (this.canInsertSemicolon())
              this.unexpected();
            if (!this.match(19))
              this.unexpected();
            return typeNode;
          });
          if (result.thrown)
            return null;
          if (result.error)
            this.state = result.failState;
          node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \\"TypeAnnotation\\") : null;
        }
        return super.parseArrow(node);
      }
      shouldParseArrow(params) {
        return this.match(14) || super.shouldParseArrow(params);
      }
      setArrowFunctionParameters(node, params) {
        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
          node.params = params;
        } else {
          super.setArrowFunctionParameters(node, params);
        }
      }
      checkParams(node, allowDuplicates, isArrowFunction) {
        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
          return;
        }
        for (let i = 0; i < node.params.length; i++) {
          if (this.isThisParam(node.params[i]) && i > 0) {
            this.raise(FlowErrors.ThisParamMustBeFirst, {
              node: node.params[i]
            });
          }
        }
        return super.checkParams(...arguments);
      }
      parseParenAndDistinguishExpression(canBeArrow) {
        return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
      }
      parseSubscripts(base, startPos, startLoc, noCalls) {
        if (base.type === \\"Identifier\\" && base.name === \\"async\\" && this.state.noArrowAt.indexOf(startPos) !== -1) {
          this.next();
          const node = this.startNodeAt(startPos, startLoc);
          node.callee = base;
          node.arguments = this.parseCallExpressionArguments(11, false);
          base = this.finishNode(node, \\"CallExpression\\");
        } else if (base.type === \\"Identifier\\" && base.name === \\"async\\" && this.match(45)) {
          const state = this.state.clone();
          const arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);
          if (!arrow.error && !arrow.aborted)
            return arrow.node;
          const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);
          if (result.node && !result.error)
            return result.node;
          if (arrow.node) {
            this.state = arrow.failState;
            return arrow.node;
          }
          if (result.node) {
            this.state = result.failState;
            return result.node;
          }
          throw arrow.error || result.error;
        }
        return super.parseSubscripts(base, startPos, startLoc, noCalls);
      }
      parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {
        if (this.match(18) && this.isLookaheadToken_lt()) {
          subscriptState.optionalChainMember = true;
          if (noCalls) {
            subscriptState.stop = true;
            return base;
          }
          this.next();
          const node = this.startNodeAt(startPos, startLoc);
          node.callee = base;
          node.typeArguments = this.flowParseTypeParameterInstantiation();
          this.expect(10);
          node.arguments = this.parseCallExpressionArguments(11, false);
          node.optional = true;
          return this.finishCallExpression(node, true);
        } else if (!noCalls && this.shouldParseTypes() && this.match(45)) {
          const node = this.startNodeAt(startPos, startLoc);
          node.callee = base;
          const result = this.tryParse(() => {
            node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
            this.expect(10);
            node.arguments = this.parseCallExpressionArguments(11, false);
            if (subscriptState.optionalChainMember)
              node.optional = false;
            return this.finishCallExpression(node, subscriptState.optionalChainMember);
          });
          if (result.node) {
            if (result.error)
              this.state = result.failState;
            return result.node;
          }
        }
        return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);
      }
      parseNewArguments(node) {
        let targs = null;
        if (this.shouldParseTypes() && this.match(45)) {
          targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
        }
        node.typeArguments = targs;
        super.parseNewArguments(node);
      }
      parseAsyncArrowWithTypeParameters(startPos, startLoc) {
        const node = this.startNodeAt(startPos, startLoc);
        this.parseFunctionParams(node);
        if (!this.parseArrow(node))
          return;
        return this.parseArrowExpression(node, void 0, true);
      }
      readToken_mult_modulo(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 42 && next === 47 && this.state.hasFlowComment) {
          this.state.hasFlowComment = false;
          this.state.pos += 2;
          this.nextToken();
          return;
        }
        super.readToken_mult_modulo(code);
      }
      readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 124 && next === 125) {
          this.finishOp(9, 2);
          return;
        }
        super.readToken_pipe_amp(code);
      }
      parseTopLevel(file, program) {
        const fileNode = super.parseTopLevel(file, program);
        if (this.state.hasFlowComment) {
          this.raise(FlowErrors.UnterminatedFlowComment, {
            at: this.state.curPosition()
          });
        }
        return fileNode;
      }
      skipBlockComment() {
        if (this.hasPlugin(\\"flowComments\\") && this.skipFlowComment()) {
          if (this.state.hasFlowComment) {
            throw this.raise(FlowErrors.NestedFlowComment, {
              at: this.state.startLoc
            });
          }
          this.hasFlowCommentCompletion();
          this.state.pos += this.skipFlowComment();
          this.state.hasFlowComment = true;
          return;
        }
        if (this.state.hasFlowComment) {
          const end = this.input.indexOf(\\"*-/\\", this.state.pos + 2);
          if (end === -1) {
            throw this.raise(ErrorMessages.UnterminatedComment, {
              at: this.state.curPosition()
            });
          }
          this.state.pos = end + 2 + 3;
          return;
        }
        return super.skipBlockComment();
      }
      skipFlowComment() {
        const {
          pos
        } = this.state;
        let shiftToFirstNonWhiteSpace = 2;
        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
          shiftToFirstNonWhiteSpace++;
        }
        const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
        const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
        if (ch2 === 58 && ch3 === 58) {
          return shiftToFirstNonWhiteSpace + 2;
        }
        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \\"flow-include\\") {
          return shiftToFirstNonWhiteSpace + 12;
        }
        if (ch2 === 58 && ch3 !== 58) {
          return shiftToFirstNonWhiteSpace;
        }
        return false;
      }
      hasFlowCommentCompletion() {
        const end = this.input.indexOf(\\"*/\\", this.state.pos);
        if (end === -1) {
          throw this.raise(ErrorMessages.UnterminatedComment, {
            at: this.state.curPosition()
          });
        }
      }
      flowEnumErrorBooleanMemberNotInitialized(loc, {
        enumName,
        memberName
      }) {
        this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {
          at: loc
        }, memberName, enumName);
      }
      flowEnumErrorInvalidExplicitType(loc, {
        enumName,
        suppliedType
      }) {
        return this.raise(suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, {
          at: loc
        }, enumName, suppliedType);
      }
      flowEnumErrorInvalidMemberInitializer(loc, {
        enumName,
        explicitType,
        memberName
      }) {
        return this.raise(explicitType === \\"boolean\\" || explicitType === \\"number\\" || explicitType === \\"string\\" ? FlowErrors.EnumInvalidMemberInitializerPrimaryType : explicitType === \\"symbol\\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerUnknownType, {
          at: loc
        }, enumName, memberName, explicitType);
      }
      flowEnumErrorNumberMemberNotInitialized(loc, {
        enumName,
        memberName
      }) {
        this.raise(FlowErrors.EnumNumberMemberNotInitialized, {
          at: loc
        }, enumName, memberName);
      }
      flowEnumErrorStringMemberInconsistentlyInitailized(node, {
        enumName
      }) {
        this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {
          node
        }, enumName);
      }
      flowEnumMemberInit() {
        const startLoc = this.state.startLoc;
        const endOfInit = () => this.match(12) || this.match(8);
        switch (this.state.type) {
          case 126: {
            const literal = this.parseNumericLiteral(this.state.value);
            if (endOfInit()) {
              return {
                type: \\"number\\",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: \\"invalid\\",
              loc: startLoc
            };
          }
          case 125: {
            const literal = this.parseStringLiteral(this.state.value);
            if (endOfInit()) {
              return {
                type: \\"string\\",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: \\"invalid\\",
              loc: startLoc
            };
          }
          case 81:
          case 82: {
            const literal = this.parseBooleanLiteral(this.match(81));
            if (endOfInit()) {
              return {
                type: \\"boolean\\",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: \\"invalid\\",
              loc: startLoc
            };
          }
          default:
            return {
              type: \\"invalid\\",
              loc: startLoc
            };
        }
      }
      flowEnumMemberRaw() {
        const loc = this.state.startLoc;
        const id = this.parseIdentifier(true);
        const init = this.eat(29) ? this.flowEnumMemberInit() : {
          type: \\"none\\",
          loc
        };
        return {
          id,
          init
        };
      }
      flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
        const {
          explicitType
        } = context;
        if (explicitType === null) {
          return;
        }
        if (explicitType !== expectedType) {
          this.flowEnumErrorInvalidMemberInitializer(loc, context);
        }
      }
      flowEnumMembers({
        enumName,
        explicitType
      }) {
        const seenNames = /* @__PURE__ */ new Set();
        const members = {
          booleanMembers: [],
          numberMembers: [],
          stringMembers: [],
          defaultedMembers: []
        };
        let hasUnknownMembers = false;
        while (!this.match(8)) {
          if (this.eat(21)) {
            hasUnknownMembers = true;
            break;
          }
          const memberNode = this.startNode();
          const {
            id,
            init
          } = this.flowEnumMemberRaw();
          const memberName = id.name;
          if (memberName === \\"\\") {
            continue;
          }
          if (/^[a-z]/.test(memberName)) {
            this.raise(FlowErrors.EnumInvalidMemberName, {
              node: id
            }, memberName, memberName[0].toUpperCase() + memberName.slice(1), enumName);
          }
          if (seenNames.has(memberName)) {
            this.raise(FlowErrors.EnumDuplicateMemberName, {
              node: id
            }, memberName, enumName);
          }
          seenNames.add(memberName);
          const context = {
            enumName,
            explicitType,
            memberName
          };
          memberNode.id = id;
          switch (init.type) {
            case \\"boolean\\": {
              this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \\"boolean\\");
              memberNode.init = init.value;
              members.booleanMembers.push(this.finishNode(memberNode, \\"EnumBooleanMember\\"));
              break;
            }
            case \\"number\\": {
              this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \\"number\\");
              memberNode.init = init.value;
              members.numberMembers.push(this.finishNode(memberNode, \\"EnumNumberMember\\"));
              break;
            }
            case \\"string\\": {
              this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \\"string\\");
              memberNode.init = init.value;
              members.stringMembers.push(this.finishNode(memberNode, \\"EnumStringMember\\"));
              break;
            }
            case \\"invalid\\": {
              throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
            }
            case \\"none\\": {
              switch (explicitType) {
                case \\"boolean\\":
                  this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                  break;
                case \\"number\\":
                  this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                  break;
                default:
                  members.defaultedMembers.push(this.finishNode(memberNode, \\"EnumDefaultedMember\\"));
              }
            }
          }
          if (!this.match(8)) {
            this.expect(12);
          }
        }
        return {
          members,
          hasUnknownMembers
        };
      }
      flowEnumStringMembers(initializedMembers, defaultedMembers, {
        enumName
      }) {
        if (initializedMembers.length === 0) {
          return defaultedMembers;
        } else if (defaultedMembers.length === 0) {
          return initializedMembers;
        } else if (defaultedMembers.length > initializedMembers.length) {
          for (const member of initializedMembers) {
            this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
              enumName
            });
          }
          return defaultedMembers;
        } else {
          for (const member of defaultedMembers) {
            this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
              enumName
            });
          }
          return initializedMembers;
        }
      }
      flowEnumParseExplicitType({
        enumName
      }) {
        if (this.eatContextual(97)) {
          if (!tokenIsIdentifier(this.state.type)) {
            throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {
              enumName,
              suppliedType: null
            });
          }
          const {
            value
          } = this.state;
          this.next();
          if (value !== \\"boolean\\" && value !== \\"number\\" && value !== \\"string\\" && value !== \\"symbol\\") {
            this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {
              enumName,
              suppliedType: value
            });
          }
          return value;
        }
        return null;
      }
      flowEnumBody(node, id) {
        const enumName = id.name;
        const nameLoc = id.loc.start;
        const explicitType = this.flowEnumParseExplicitType({
          enumName
        });
        this.expect(5);
        const {
          members,
          hasUnknownMembers
        } = this.flowEnumMembers({
          enumName,
          explicitType
        });
        node.hasUnknownMembers = hasUnknownMembers;
        switch (explicitType) {
          case \\"boolean\\":
            node.explicitType = true;
            node.members = members.booleanMembers;
            this.expect(8);
            return this.finishNode(node, \\"EnumBooleanBody\\");
          case \\"number\\":
            node.explicitType = true;
            node.members = members.numberMembers;
            this.expect(8);
            return this.finishNode(node, \\"EnumNumberBody\\");
          case \\"string\\":
            node.explicitType = true;
            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
              enumName
            });
            this.expect(8);
            return this.finishNode(node, \\"EnumStringBody\\");
          case \\"symbol\\":
            node.members = members.defaultedMembers;
            this.expect(8);
            return this.finishNode(node, \\"EnumSymbolBody\\");
          default: {
            const empty = () => {
              node.members = [];
              this.expect(8);
              return this.finishNode(node, \\"EnumStringBody\\");
            };
            node.explicitType = false;
            const boolsLen = members.booleanMembers.length;
            const numsLen = members.numberMembers.length;
            const strsLen = members.stringMembers.length;
            const defaultedLen = members.defaultedMembers.length;
            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
              return empty();
            } else if (!boolsLen && !numsLen) {
              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                enumName
              });
              this.expect(8);
              return this.finishNode(node, \\"EnumStringBody\\");
            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
              for (const member of members.defaultedMembers) {
                this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                  enumName,
                  memberName: member.id.name
                });
              }
              node.members = members.booleanMembers;
              this.expect(8);
              return this.finishNode(node, \\"EnumBooleanBody\\");
            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
              for (const member of members.defaultedMembers) {
                this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                  enumName,
                  memberName: member.id.name
                });
              }
              node.members = members.numberMembers;
              this.expect(8);
              return this.finishNode(node, \\"EnumNumberBody\\");
            } else {
              this.raise(FlowErrors.EnumInconsistentMemberValues, {
                at: nameLoc
              }, enumName);
              return empty();
            }
          }
        }
      }
      flowParseEnumDeclaration(node) {
        const id = this.parseIdentifier();
        node.id = id;
        node.body = this.flowEnumBody(this.startNode(), id);
        return this.finishNode(node, \\"EnumDeclaration\\");
      }
      isLookaheadToken_lt() {
        const next = this.nextTokenStart();
        if (this.input.charCodeAt(next) === 60) {
          const afterNext = this.input.charCodeAt(next + 1);
          return afterNext !== 60 && afterNext !== 61;
        }
        return false;
      }
      maybeUnwrapTypeCastExpression(node) {
        return node.type === \\"TypeCastExpression\\" ? node.expression : node;
      }
    };
    var entities = {
      quot: '\\"',
      amp: \\"&\\",
      apos: \\"'\\",
      lt: \\"<\\",
      gt: \\">\\",
      nbsp: \\"\\\\xA0\\",
      iexcl: \\"\\\\xA1\\",
      cent: \\"\\\\xA2\\",
      pound: \\"\\\\xA3\\",
      curren: \\"\\\\xA4\\",
      yen: \\"\\\\xA5\\",
      brvbar: \\"\\\\xA6\\",
      sect: \\"\\\\xA7\\",
      uml: \\"\\\\xA8\\",
      copy: \\"\\\\xA9\\",
      ordf: \\"\\\\xAA\\",
      laquo: \\"\\\\xAB\\",
      not: \\"\\\\xAC\\",
      shy: \\"\\\\xAD\\",
      reg: \\"\\\\xAE\\",
      macr: \\"\\\\xAF\\",
      deg: \\"\\\\xB0\\",
      plusmn: \\"\\\\xB1\\",
      sup2: \\"\\\\xB2\\",
      sup3: \\"\\\\xB3\\",
      acute: \\"\\\\xB4\\",
      micro: \\"\\\\xB5\\",
      para: \\"\\\\xB6\\",
      middot: \\"\\\\xB7\\",
      cedil: \\"\\\\xB8\\",
      sup1: \\"\\\\xB9\\",
      ordm: \\"\\\\xBA\\",
      raquo: \\"\\\\xBB\\",
      frac14: \\"\\\\xBC\\",
      frac12: \\"\\\\xBD\\",
      frac34: \\"\\\\xBE\\",
      iquest: \\"\\\\xBF\\",
      Agrave: \\"\\\\xC0\\",
      Aacute: \\"\\\\xC1\\",
      Acirc: \\"\\\\xC2\\",
      Atilde: \\"\\\\xC3\\",
      Auml: \\"\\\\xC4\\",
      Aring: \\"\\\\xC5\\",
      AElig: \\"\\\\xC6\\",
      Ccedil: \\"\\\\xC7\\",
      Egrave: \\"\\\\xC8\\",
      Eacute: \\"\\\\xC9\\",
      Ecirc: \\"\\\\xCA\\",
      Euml: \\"\\\\xCB\\",
      Igrave: \\"\\\\xCC\\",
      Iacute: \\"\\\\xCD\\",
      Icirc: \\"\\\\xCE\\",
      Iuml: \\"\\\\xCF\\",
      ETH: \\"\\\\xD0\\",
      Ntilde: \\"\\\\xD1\\",
      Ograve: \\"\\\\xD2\\",
      Oacute: \\"\\\\xD3\\",
      Ocirc: \\"\\\\xD4\\",
      Otilde: \\"\\\\xD5\\",
      Ouml: \\"\\\\xD6\\",
      times: \\"\\\\xD7\\",
      Oslash: \\"\\\\xD8\\",
      Ugrave: \\"\\\\xD9\\",
      Uacute: \\"\\\\xDA\\",
      Ucirc: \\"\\\\xDB\\",
      Uuml: \\"\\\\xDC\\",
      Yacute: \\"\\\\xDD\\",
      THORN: \\"\\\\xDE\\",
      szlig: \\"\\\\xDF\\",
      agrave: \\"\\\\xE0\\",
      aacute: \\"\\\\xE1\\",
      acirc: \\"\\\\xE2\\",
      atilde: \\"\\\\xE3\\",
      auml: \\"\\\\xE4\\",
      aring: \\"\\\\xE5\\",
      aelig: \\"\\\\xE6\\",
      ccedil: \\"\\\\xE7\\",
      egrave: \\"\\\\xE8\\",
      eacute: \\"\\\\xE9\\",
      ecirc: \\"\\\\xEA\\",
      euml: \\"\\\\xEB\\",
      igrave: \\"\\\\xEC\\",
      iacute: \\"\\\\xED\\",
      icirc: \\"\\\\xEE\\",
      iuml: \\"\\\\xEF\\",
      eth: \\"\\\\xF0\\",
      ntilde: \\"\\\\xF1\\",
      ograve: \\"\\\\xF2\\",
      oacute: \\"\\\\xF3\\",
      ocirc: \\"\\\\xF4\\",
      otilde: \\"\\\\xF5\\",
      ouml: \\"\\\\xF6\\",
      divide: \\"\\\\xF7\\",
      oslash: \\"\\\\xF8\\",
      ugrave: \\"\\\\xF9\\",
      uacute: \\"\\\\xFA\\",
      ucirc: \\"\\\\xFB\\",
      uuml: \\"\\\\xFC\\",
      yacute: \\"\\\\xFD\\",
      thorn: \\"\\\\xFE\\",
      yuml: \\"\\\\xFF\\",
      OElig: \\"\\\\u0152\\",
      oelig: \\"\\\\u0153\\",
      Scaron: \\"\\\\u0160\\",
      scaron: \\"\\\\u0161\\",
      Yuml: \\"\\\\u0178\\",
      fnof: \\"\\\\u0192\\",
      circ: \\"\\\\u02C6\\",
      tilde: \\"\\\\u02DC\\",
      Alpha: \\"\\\\u0391\\",
      Beta: \\"\\\\u0392\\",
      Gamma: \\"\\\\u0393\\",
      Delta: \\"\\\\u0394\\",
      Epsilon: \\"\\\\u0395\\",
      Zeta: \\"\\\\u0396\\",
      Eta: \\"\\\\u0397\\",
      Theta: \\"\\\\u0398\\",
      Iota: \\"\\\\u0399\\",
      Kappa: \\"\\\\u039A\\",
      Lambda: \\"\\\\u039B\\",
      Mu: \\"\\\\u039C\\",
      Nu: \\"\\\\u039D\\",
      Xi: \\"\\\\u039E\\",
      Omicron: \\"\\\\u039F\\",
      Pi: \\"\\\\u03A0\\",
      Rho: \\"\\\\u03A1\\",
      Sigma: \\"\\\\u03A3\\",
      Tau: \\"\\\\u03A4\\",
      Upsilon: \\"\\\\u03A5\\",
      Phi: \\"\\\\u03A6\\",
      Chi: \\"\\\\u03A7\\",
      Psi: \\"\\\\u03A8\\",
      Omega: \\"\\\\u03A9\\",
      alpha: \\"\\\\u03B1\\",
      beta: \\"\\\\u03B2\\",
      gamma: \\"\\\\u03B3\\",
      delta: \\"\\\\u03B4\\",
      epsilon: \\"\\\\u03B5\\",
      zeta: \\"\\\\u03B6\\",
      eta: \\"\\\\u03B7\\",
      theta: \\"\\\\u03B8\\",
      iota: \\"\\\\u03B9\\",
      kappa: \\"\\\\u03BA\\",
      lambda: \\"\\\\u03BB\\",
      mu: \\"\\\\u03BC\\",
      nu: \\"\\\\u03BD\\",
      xi: \\"\\\\u03BE\\",
      omicron: \\"\\\\u03BF\\",
      pi: \\"\\\\u03C0\\",
      rho: \\"\\\\u03C1\\",
      sigmaf: \\"\\\\u03C2\\",
      sigma: \\"\\\\u03C3\\",
      tau: \\"\\\\u03C4\\",
      upsilon: \\"\\\\u03C5\\",
      phi: \\"\\\\u03C6\\",
      chi: \\"\\\\u03C7\\",
      psi: \\"\\\\u03C8\\",
      omega: \\"\\\\u03C9\\",
      thetasym: \\"\\\\u03D1\\",
      upsih: \\"\\\\u03D2\\",
      piv: \\"\\\\u03D6\\",
      ensp: \\"\\\\u2002\\",
      emsp: \\"\\\\u2003\\",
      thinsp: \\"\\\\u2009\\",
      zwnj: \\"\\\\u200C\\",
      zwj: \\"\\\\u200D\\",
      lrm: \\"\\\\u200E\\",
      rlm: \\"\\\\u200F\\",
      ndash: \\"\\\\u2013\\",
      mdash: \\"\\\\u2014\\",
      lsquo: \\"\\\\u2018\\",
      rsquo: \\"\\\\u2019\\",
      sbquo: \\"\\\\u201A\\",
      ldquo: \\"\\\\u201C\\",
      rdquo: \\"\\\\u201D\\",
      bdquo: \\"\\\\u201E\\",
      dagger: \\"\\\\u2020\\",
      Dagger: \\"\\\\u2021\\",
      bull: \\"\\\\u2022\\",
      hellip: \\"\\\\u2026\\",
      permil: \\"\\\\u2030\\",
      prime: \\"\\\\u2032\\",
      Prime: \\"\\\\u2033\\",
      lsaquo: \\"\\\\u2039\\",
      rsaquo: \\"\\\\u203A\\",
      oline: \\"\\\\u203E\\",
      frasl: \\"\\\\u2044\\",
      euro: \\"\\\\u20AC\\",
      image: \\"\\\\u2111\\",
      weierp: \\"\\\\u2118\\",
      real: \\"\\\\u211C\\",
      trade: \\"\\\\u2122\\",
      alefsym: \\"\\\\u2135\\",
      larr: \\"\\\\u2190\\",
      uarr: \\"\\\\u2191\\",
      rarr: \\"\\\\u2192\\",
      darr: \\"\\\\u2193\\",
      harr: \\"\\\\u2194\\",
      crarr: \\"\\\\u21B5\\",
      lArr: \\"\\\\u21D0\\",
      uArr: \\"\\\\u21D1\\",
      rArr: \\"\\\\u21D2\\",
      dArr: \\"\\\\u21D3\\",
      hArr: \\"\\\\u21D4\\",
      forall: \\"\\\\u2200\\",
      part: \\"\\\\u2202\\",
      exist: \\"\\\\u2203\\",
      empty: \\"\\\\u2205\\",
      nabla: \\"\\\\u2207\\",
      isin: \\"\\\\u2208\\",
      notin: \\"\\\\u2209\\",
      ni: \\"\\\\u220B\\",
      prod: \\"\\\\u220F\\",
      sum: \\"\\\\u2211\\",
      minus: \\"\\\\u2212\\",
      lowast: \\"\\\\u2217\\",
      radic: \\"\\\\u221A\\",
      prop: \\"\\\\u221D\\",
      infin: \\"\\\\u221E\\",
      ang: \\"\\\\u2220\\",
      and: \\"\\\\u2227\\",
      or: \\"\\\\u2228\\",
      cap: \\"\\\\u2229\\",
      cup: \\"\\\\u222A\\",
      int: \\"\\\\u222B\\",
      there4: \\"\\\\u2234\\",
      sim: \\"\\\\u223C\\",
      cong: \\"\\\\u2245\\",
      asymp: \\"\\\\u2248\\",
      ne: \\"\\\\u2260\\",
      equiv: \\"\\\\u2261\\",
      le: \\"\\\\u2264\\",
      ge: \\"\\\\u2265\\",
      sub: \\"\\\\u2282\\",
      sup: \\"\\\\u2283\\",
      nsub: \\"\\\\u2284\\",
      sube: \\"\\\\u2286\\",
      supe: \\"\\\\u2287\\",
      oplus: \\"\\\\u2295\\",
      otimes: \\"\\\\u2297\\",
      perp: \\"\\\\u22A5\\",
      sdot: \\"\\\\u22C5\\",
      lceil: \\"\\\\u2308\\",
      rceil: \\"\\\\u2309\\",
      lfloor: \\"\\\\u230A\\",
      rfloor: \\"\\\\u230B\\",
      lang: \\"\\\\u2329\\",
      rang: \\"\\\\u232A\\",
      loz: \\"\\\\u25CA\\",
      spades: \\"\\\\u2660\\",
      clubs: \\"\\\\u2663\\",
      hearts: \\"\\\\u2665\\",
      diams: \\"\\\\u2666\\"
    };
    var HEX_NUMBER = /^[\\\\da-fA-F]+$/;
    var DECIMAL_NUMBER = /^\\\\d+$/;
    var JsxErrors = makeErrorTemplates({
      AttributeIsEmpty: \\"JSX attributes must only be assigned a non-empty expression.\\",
      MissingClosingTagElement: \\"Expected corresponding JSX closing tag for <%0>.\\",
      MissingClosingTagFragment: \\"Expected corresponding JSX closing tag for <>.\\",
      UnexpectedSequenceExpression: \\"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\\",
      UnsupportedJsxValue: \\"JSX value should be either an expression or a quoted JSX text.\\",
      UnterminatedJsxContent: \\"Unterminated JSX contents.\\",
      UnwrappedAdjacentJSXElements: \\"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\\"
    }, ErrorCodes.SyntaxError, \\"jsx\\");
    function isFragment(object) {
      return object ? object.type === \\"JSXOpeningFragment\\" || object.type === \\"JSXClosingFragment\\" : false;
    }
    function getQualifiedJSXName(object) {
      if (object.type === \\"JSXIdentifier\\") {
        return object.name;
      }
      if (object.type === \\"JSXNamespacedName\\") {
        return object.namespace.name + \\":\\" + object.name.name;
      }
      if (object.type === \\"JSXMemberExpression\\") {
        return getQualifiedJSXName(object.object) + \\".\\" + getQualifiedJSXName(object.property);
      }
      throw new Error(\\"Node had unexpected type: \\" + object.type);
    }
    var jsx = (superClass) => class extends superClass {
      jsxReadToken() {
        let out = \\"\\";
        let chunkStart = this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(JsxErrors.UnterminatedJsxContent, {
              at: this.state.startLoc
            });
          }
          const ch = this.input.charCodeAt(this.state.pos);
          switch (ch) {
            case 60:
            case 123:
              if (this.state.pos === this.state.start) {
                if (ch === 60 && this.state.canStartJSXElement) {
                  ++this.state.pos;
                  return this.finishToken(134);
                }
                return super.getTokenFromCode(ch);
              }
              out += this.input.slice(chunkStart, this.state.pos);
              return this.finishToken(133, out);
            case 38:
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadEntity();
              chunkStart = this.state.pos;
              break;
            case 62:
            case 125:
            default:
              if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadNewLine(true);
                chunkStart = this.state.pos;
              } else {
                ++this.state.pos;
              }
          }
        }
      }
      jsxReadNewLine(normalizeCRLF) {
        const ch = this.input.charCodeAt(this.state.pos);
        let out;
        ++this.state.pos;
        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
          ++this.state.pos;
          out = normalizeCRLF ? \\"\\\\n\\" : \\"\\\\r\\\\n\\";
        } else {
          out = String.fromCharCode(ch);
        }
        ++this.state.curLine;
        this.state.lineStart = this.state.pos;
        return out;
      }
      jsxReadString(quote) {
        let out = \\"\\";
        let chunkStart = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(ErrorMessages.UnterminatedString, {
              at: this.state.startLoc
            });
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote)
            break;
          if (ch === 38) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadEntity();
            chunkStart = this.state.pos;
          } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadNewLine(false);
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        return this.finishToken(125, out);
      }
      jsxReadEntity() {
        let str = \\"\\";
        let count = 0;
        let entity;
        let ch = this.input[this.state.pos];
        const startPos = ++this.state.pos;
        while (this.state.pos < this.length && count++ < 10) {
          ch = this.input[this.state.pos++];
          if (ch === \\";\\") {
            if (str[0] === \\"#\\") {
              if (str[1] === \\"x\\") {
                str = str.substr(2);
                if (HEX_NUMBER.test(str)) {
                  entity = String.fromCodePoint(parseInt(str, 16));
                }
              } else {
                str = str.substr(1);
                if (DECIMAL_NUMBER.test(str)) {
                  entity = String.fromCodePoint(parseInt(str, 10));
                }
              }
            } else {
              entity = entities[str];
            }
            break;
          }
          str += ch;
        }
        if (!entity) {
          this.state.pos = startPos;
          return \\"&\\";
        }
        return entity;
      }
      jsxReadWord() {
        let ch;
        const start = this.state.pos;
        do {
          ch = this.input.charCodeAt(++this.state.pos);
        } while (isIdentifierChar(ch) || ch === 45);
        return this.finishToken(132, this.input.slice(start, this.state.pos));
      }
      jsxParseIdentifier() {
        const node = this.startNode();
        if (this.match(132)) {
          node.name = this.state.value;
        } else if (tokenIsKeyword(this.state.type)) {
          node.name = tokenLabelName(this.state.type);
        } else {
          this.unexpected();
        }
        this.next();
        return this.finishNode(node, \\"JSXIdentifier\\");
      }
      jsxParseNamespacedName() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const name = this.jsxParseIdentifier();
        if (!this.eat(14))
          return name;
        const node = this.startNodeAt(startPos, startLoc);
        node.namespace = name;
        node.name = this.jsxParseIdentifier();
        return this.finishNode(node, \\"JSXNamespacedName\\");
      }
      jsxParseElementName() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let node = this.jsxParseNamespacedName();
        if (node.type === \\"JSXNamespacedName\\") {
          return node;
        }
        while (this.eat(16)) {
          const newNode = this.startNodeAt(startPos, startLoc);
          newNode.object = node;
          newNode.property = this.jsxParseIdentifier();
          node = this.finishNode(newNode, \\"JSXMemberExpression\\");
        }
        return node;
      }
      jsxParseAttributeValue() {
        let node;
        switch (this.state.type) {
          case 5:
            node = this.startNode();
            this.setContext(types.brace);
            this.next();
            node = this.jsxParseExpressionContainer(node, types.j_oTag);
            if (node.expression.type === \\"JSXEmptyExpression\\") {
              this.raise(JsxErrors.AttributeIsEmpty, {
                node
              });
            }
            return node;
          case 134:
          case 125:
            return this.parseExprAtom();
          default:
            throw this.raise(JsxErrors.UnsupportedJsxValue, {
              at: this.state.startLoc
            });
        }
      }
      jsxParseEmptyExpression() {
        const node = this.startNodeAt(indexes.get(this.state.lastTokEndLoc), this.state.lastTokEndLoc);
        return this.finishNodeAt(node, \\"JSXEmptyExpression\\", this.state.startLoc);
      }
      jsxParseSpreadChild(node) {
        this.next();
        node.expression = this.parseExpression();
        this.setContext(types.j_oTag);
        this.expect(8);
        return this.finishNode(node, \\"JSXSpreadChild\\");
      }
      jsxParseExpressionContainer(node, previousContext) {
        if (this.match(8)) {
          node.expression = this.jsxParseEmptyExpression();
        } else {
          const expression = this.parseExpression();
          node.expression = expression;
        }
        this.setContext(previousContext);
        this.expect(8);
        return this.finishNode(node, \\"JSXExpressionContainer\\");
      }
      jsxParseAttribute() {
        const node = this.startNode();
        if (this.match(5)) {
          this.setContext(types.brace);
          this.next();
          this.expect(21);
          node.argument = this.parseMaybeAssignAllowIn();
          this.setContext(types.j_oTag);
          this.expect(8);
          return this.finishNode(node, \\"JSXSpreadAttribute\\");
        }
        node.name = this.jsxParseNamespacedName();
        node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
        return this.finishNode(node, \\"JSXAttribute\\");
      }
      jsxParseOpeningElementAt(startPos, startLoc) {
        const node = this.startNodeAt(startPos, startLoc);
        if (this.match(135)) {
          this.expect(135);
          return this.finishNode(node, \\"JSXOpeningFragment\\");
        }
        node.name = this.jsxParseElementName();
        return this.jsxParseOpeningElementAfterName(node);
      }
      jsxParseOpeningElementAfterName(node) {
        const attributes = [];
        while (!this.match(52) && !this.match(135)) {
          attributes.push(this.jsxParseAttribute());
        }
        node.attributes = attributes;
        node.selfClosing = this.eat(52);
        this.expect(135);
        return this.finishNode(node, \\"JSXOpeningElement\\");
      }
      jsxParseClosingElementAt(startPos, startLoc) {
        const node = this.startNodeAt(startPos, startLoc);
        if (this.match(135)) {
          this.expect(135);
          return this.finishNode(node, \\"JSXClosingFragment\\");
        }
        node.name = this.jsxParseElementName();
        this.expect(135);
        return this.finishNode(node, \\"JSXClosingElement\\");
      }
      jsxParseElementAt(startPos, startLoc) {
        const node = this.startNodeAt(startPos, startLoc);
        const children = [];
        const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
        let closingElement = null;
        if (!openingElement.selfClosing) {
          contents:
            for (; ; ) {
              switch (this.state.type) {
                case 134:
                  startPos = this.state.start;
                  startLoc = this.state.startLoc;
                  this.next();
                  if (this.eat(52)) {
                    closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
                    break contents;
                  }
                  children.push(this.jsxParseElementAt(startPos, startLoc));
                  break;
                case 133:
                  children.push(this.parseExprAtom());
                  break;
                case 5: {
                  const node2 = this.startNode();
                  this.setContext(types.brace);
                  this.next();
                  if (this.match(21)) {
                    children.push(this.jsxParseSpreadChild(node2));
                  } else {
                    children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                  }
                  break;
                }
                default:
                  throw this.unexpected();
              }
            }
          if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
            this.raise(JsxErrors.MissingClosingTagFragment, {
              node: closingElement
            });
          } else if (!isFragment(openingElement) && isFragment(closingElement)) {
            this.raise(JsxErrors.MissingClosingTagElement, {
              node: closingElement
            }, getQualifiedJSXName(openingElement.name));
          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
              this.raise(JsxErrors.MissingClosingTagElement, {
                node: closingElement
              }, getQualifiedJSXName(openingElement.name));
            }
          }
        }
        if (isFragment(openingElement)) {
          node.openingFragment = openingElement;
          node.closingFragment = closingElement;
        } else {
          node.openingElement = openingElement;
          node.closingElement = closingElement;
        }
        node.children = children;
        if (this.match(45)) {
          throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {
            at: this.state.startLoc
          });
        }
        return isFragment(openingElement) ? this.finishNode(node, \\"JSXFragment\\") : this.finishNode(node, \\"JSXElement\\");
      }
      jsxParseElement() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        this.next();
        return this.jsxParseElementAt(startPos, startLoc);
      }
      setContext(newContext) {
        const {
          context
        } = this.state;
        context[context.length - 1] = newContext;
      }
      parseExprAtom(refExpressionErrors) {
        if (this.match(133)) {
          return this.parseLiteral(this.state.value, \\"JSXText\\");
        } else if (this.match(134)) {
          return this.jsxParseElement();
        } else if (this.match(45) && this.input.charCodeAt(this.state.pos) !== 33) {
          this.replaceToken(134);
          return this.jsxParseElement();
        } else {
          return super.parseExprAtom(refExpressionErrors);
        }
      }
      skipSpace() {
        const curContext = this.curContext();
        if (!curContext.preserveSpace)
          super.skipSpace();
      }
      getTokenFromCode(code) {
        const context = this.curContext();
        if (context === types.j_expr) {
          return this.jsxReadToken();
        }
        if (context === types.j_oTag || context === types.j_cTag) {
          if (isIdentifierStart(code)) {
            return this.jsxReadWord();
          }
          if (code === 62) {
            ++this.state.pos;
            return this.finishToken(135);
          }
          if ((code === 34 || code === 39) && context === types.j_oTag) {
            return this.jsxReadString(code);
          }
        }
        if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
          ++this.state.pos;
          return this.finishToken(134);
        }
        return super.getTokenFromCode(code);
      }
      updateContext(prevType) {
        const {
          context,
          type
        } = this.state;
        if (type === 52 && prevType === 134) {
          context.splice(-2, 2, types.j_cTag);
          this.state.canStartJSXElement = false;
        } else if (type === 134) {
          context.push(types.j_oTag);
        } else if (type === 135) {
          const out = context[context.length - 1];
          if (out === types.j_oTag && prevType === 52 || out === types.j_cTag) {
            context.pop();
            this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
          } else {
            this.setContext(types.j_expr);
            this.state.canStartJSXElement = true;
          }
        } else {
          this.state.canStartJSXElement = tokenComesBeforeExpression(type);
        }
      }
    };
    var TypeScriptScope = class extends Scope {
      constructor(...args) {
        super(...args);
        this.types = /* @__PURE__ */ new Set();
        this.enums = /* @__PURE__ */ new Set();
        this.constEnums = /* @__PURE__ */ new Set();
        this.classes = /* @__PURE__ */ new Set();
        this.exportOnlyBindings = /* @__PURE__ */ new Set();
      }
    };
    var TypeScriptScopeHandler = class extends ScopeHandler {
      createScope(flags) {
        return new TypeScriptScope(flags);
      }
      declareName(name, bindingType, loc) {
        const scope = this.currentScope();
        if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
          this.maybeExportDefined(scope, name);
          scope.exportOnlyBindings.add(name);
          return;
        }
        super.declareName(...arguments);
        if (bindingType & BIND_KIND_TYPE) {
          if (!(bindingType & BIND_KIND_VALUE)) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            this.maybeExportDefined(scope, name);
          }
          scope.types.add(name);
        }
        if (bindingType & BIND_FLAGS_TS_ENUM)
          scope.enums.add(name);
        if (bindingType & BIND_FLAGS_TS_CONST_ENUM)
          scope.constEnums.add(name);
        if (bindingType & BIND_FLAGS_CLASS)
          scope.classes.add(name);
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (scope.enums.has(name)) {
          if (bindingType & BIND_FLAGS_TS_ENUM) {
            const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
            const wasConst = scope.constEnums.has(name);
            return isConst !== wasConst;
          }
          return true;
        }
        if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {
          if (scope.lexical.has(name)) {
            return !!(bindingType & BIND_KIND_VALUE);
          } else {
            return false;
          }
        }
        if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {
          return true;
        }
        return super.isRedeclaredInScope(...arguments);
      }
      checkLocalExport(id) {
        const topLevelScope = this.scopeStack[0];
        const {
          name
        } = id;
        if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {
          super.checkLocalExport(id);
        }
      }
    };
    function nonNull(x) {
      if (x == null) {
        throw new Error(\`Unexpected \${x} value.\`);
      }
      return x;
    }
    function assert(x) {
      if (!x) {
        throw new Error(\\"Assert fail\\");
      }
    }
    var TSErrors = makeErrorTemplates({
      AbstractMethodHasImplementation: \\"Method '%0' cannot have an implementation because it is marked abstract.\\",
      AbstractPropertyHasInitializer: \\"Property '%0' cannot have an initializer because it is marked abstract.\\",
      AccesorCannotDeclareThisParameter: \\"'get' and 'set' accessors cannot declare 'this' parameters.\\",
      AccesorCannotHaveTypeParameters: \\"An accessor cannot have type parameters.\\",
      ClassMethodHasDeclare: \\"Class methods cannot have the 'declare' modifier.\\",
      ClassMethodHasReadonly: \\"Class methods cannot have the 'readonly' modifier.\\",
      ConstructorHasTypeParameters: \\"Type parameters cannot appear on a constructor declaration.\\",
      DeclareAccessor: \\"'declare' is not allowed in %0ters.\\",
      DeclareClassFieldHasInitializer: \\"Initializers are not allowed in ambient contexts.\\",
      DeclareFunctionHasImplementation: \\"An implementation cannot be declared in ambient contexts.\\",
      DuplicateAccessibilityModifier: \\"Accessibility modifier already seen.\\",
      DuplicateModifier: \\"Duplicate modifier: '%0'.\\",
      EmptyHeritageClauseType: \\"'%0' list cannot be empty.\\",
      EmptyTypeArguments: \\"Type argument list cannot be empty.\\",
      EmptyTypeParameters: \\"Type parameter list cannot be empty.\\",
      ExpectedAmbientAfterExportDeclare: \\"'export declare' must be followed by an ambient declaration.\\",
      ImportAliasHasImportType: \\"An import alias can not use 'import type'.\\",
      IncompatibleModifiers: \\"'%0' modifier cannot be used with '%1' modifier.\\",
      IndexSignatureHasAbstract: \\"Index signatures cannot have the 'abstract' modifier.\\",
      IndexSignatureHasAccessibility: \\"Index signatures cannot have an accessibility modifier ('%0').\\",
      IndexSignatureHasDeclare: \\"Index signatures cannot have the 'declare' modifier.\\",
      IndexSignatureHasOverride: \\"'override' modifier cannot appear on an index signature.\\",
      IndexSignatureHasStatic: \\"Index signatures cannot have the 'static' modifier.\\",
      InvalidModifierOnTypeMember: \\"'%0' modifier cannot appear on a type member.\\",
      InvalidModifiersOrder: \\"'%0' modifier must precede '%1' modifier.\\",
      InvalidTupleMemberLabel: \\"Tuple members must be labeled with a simple identifier.\\",
      MissingInterfaceName: \\"'interface' declarations must be followed by an identifier.\\",
      MixedLabeledAndUnlabeledElements: \\"Tuple members must all have names or all not have names.\\",
      NonAbstractClassHasAbstractMethod: \\"Abstract methods can only appear within an abstract class.\\",
      NonClassMethodPropertyHasAbstractModifer: \\"'abstract' modifier can only appear on a class, method, or property declaration.\\",
      OptionalTypeBeforeRequired: \\"A required element cannot follow an optional element.\\",
      OverrideNotInSubClass: \\"This member cannot have an 'override' modifier because its containing class does not extend another class.\\",
      PatternIsOptional: \\"A binding pattern parameter cannot be optional in an implementation signature.\\",
      PrivateElementHasAbstract: \\"Private elements cannot have the 'abstract' modifier.\\",
      PrivateElementHasAccessibility: \\"Private elements cannot have an accessibility modifier ('%0').\\",
      ReadonlyForMethodSignature: \\"'readonly' modifier can only appear on a property declaration or index signature.\\",
      ReservedArrowTypeParam: \\"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in \`<T,>() => ...\`.\\",
      ReservedTypeAssertion: \\"This syntax is reserved in files with the .mts or .cts extension. Use an \`as\` expression instead.\\",
      SetAccesorCannotHaveOptionalParameter: \\"A 'set' accessor cannot have an optional parameter.\\",
      SetAccesorCannotHaveRestParameter: \\"A 'set' accessor cannot have rest parameter.\\",
      SetAccesorCannotHaveReturnType: \\"A 'set' accessor cannot have a return type annotation.\\",
      StaticBlockCannotHaveModifier: \\"Static class blocks cannot have any modifier.\\",
      TypeAnnotationAfterAssign: \\"Type annotations must come before default assignments, e.g. instead of \`age = 25: number\` use \`age: number = 25\`.\\",
      TypeImportCannotSpecifyDefaultAndNamed: \\"A type-only import can specify a default import or named bindings, but not both.\\",
      TypeModifierIsUsedInTypeExports: \\"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\\",
      TypeModifierIsUsedInTypeImports: \\"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\\",
      UnexpectedParameterModifier: \\"A parameter property is only allowed in a constructor implementation.\\",
      UnexpectedReadonly: \\"'readonly' type modifier is only permitted on array and tuple literal types.\\",
      UnexpectedTypeAnnotation: \\"Did not expect a type annotation here.\\",
      UnexpectedTypeCastInParameter: \\"Unexpected type cast in parameter position.\\",
      UnsupportedImportTypeArgument: \\"Argument in a type import must be a string literal.\\",
      UnsupportedParameterPropertyKind: \\"A parameter property may not be declared using a binding pattern.\\",
      UnsupportedSignatureParameterKind: \\"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\\"
    }, ErrorCodes.SyntaxError, \\"typescript\\");
    function keywordTypeFromName(value) {
      switch (value) {
        case \\"any\\":
          return \\"TSAnyKeyword\\";
        case \\"boolean\\":
          return \\"TSBooleanKeyword\\";
        case \\"bigint\\":
          return \\"TSBigIntKeyword\\";
        case \\"never\\":
          return \\"TSNeverKeyword\\";
        case \\"number\\":
          return \\"TSNumberKeyword\\";
        case \\"object\\":
          return \\"TSObjectKeyword\\";
        case \\"string\\":
          return \\"TSStringKeyword\\";
        case \\"symbol\\":
          return \\"TSSymbolKeyword\\";
        case \\"undefined\\":
          return \\"TSUndefinedKeyword\\";
        case \\"unknown\\":
          return \\"TSUnknownKeyword\\";
        default:
          return void 0;
      }
    }
    function tsIsAccessModifier(modifier) {
      return modifier === \\"private\\" || modifier === \\"public\\" || modifier === \\"protected\\";
    }
    var typescript = (superClass) => class extends superClass {
      getScopeHandler() {
        return TypeScriptScopeHandler;
      }
      tsIsIdentifier() {
        return tokenIsIdentifier(this.state.type);
      }
      tsTokenCanFollowModifier() {
        return (this.match(0) || this.match(5) || this.match(51) || this.match(21) || this.match(130) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
      }
      tsNextTokenCanFollowModifier() {
        this.next();
        return this.tsTokenCanFollowModifier();
      }
      tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
        if (!tokenIsIdentifier(this.state.type)) {
          return void 0;
        }
        const modifier = this.state.value;
        if (allowedModifiers.indexOf(modifier) !== -1) {
          if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
            return void 0;
          }
          if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
            return modifier;
          }
        }
        return void 0;
      }
      tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {
        const enforceOrder = (loc, modifier, before, after) => {
          if (modifier === before && modified[after]) {
            this.raise(TSErrors.InvalidModifiersOrder, {
              at: loc
            }, before, after);
          }
        };
        const incompatible = (loc, modifier, mod1, mod2) => {
          if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
            this.raise(TSErrors.IncompatibleModifiers, {
              at: loc
            }, mod1, mod2);
          }
        };
        for (; ; ) {
          const {
            startLoc
          } = this.state;
          const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
          if (!modifier)
            break;
          if (tsIsAccessModifier(modifier)) {
            if (modified.accessibility) {
              this.raise(TSErrors.DuplicateAccessibilityModifier, {
                at: startLoc
              });
            } else {
              enforceOrder(startLoc, modifier, modifier, \\"override\\");
              enforceOrder(startLoc, modifier, modifier, \\"static\\");
              enforceOrder(startLoc, modifier, modifier, \\"readonly\\");
              modified.accessibility = modifier;
            }
          } else {
            if (Object.hasOwnProperty.call(modified, modifier)) {
              this.raise(TSErrors.DuplicateModifier, {
                at: startLoc
              }, modifier);
            } else {
              enforceOrder(startLoc, modifier, \\"static\\", \\"readonly\\");
              enforceOrder(startLoc, modifier, \\"static\\", \\"override\\");
              enforceOrder(startLoc, modifier, \\"override\\", \\"readonly\\");
              enforceOrder(startLoc, modifier, \\"abstract\\", \\"override\\");
              incompatible(startLoc, modifier, \\"declare\\", \\"override\\");
              incompatible(startLoc, modifier, \\"static\\", \\"abstract\\");
            }
            modified[modifier] = true;
          }
          if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
            this.raise(errorTemplate, {
              at: startLoc
            }, modifier);
          }
        }
      }
      tsIsListTerminator(kind) {
        switch (kind) {
          case \\"EnumMembers\\":
          case \\"TypeMembers\\":
            return this.match(8);
          case \\"HeritageClauseElement\\":
            return this.match(5);
          case \\"TupleElementTypes\\":
            return this.match(3);
          case \\"TypeParametersOrArguments\\":
            return this.match(46);
        }
        throw new Error(\\"Unreachable\\");
      }
      tsParseList(kind, parseElement) {
        const result = [];
        while (!this.tsIsListTerminator(kind)) {
          result.push(parseElement());
        }
        return result;
      }
      tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
      }
      tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
        const result = [];
        let trailingCommaPos = -1;
        for (; ; ) {
          if (this.tsIsListTerminator(kind)) {
            break;
          }
          trailingCommaPos = -1;
          const element = parseElement();
          if (element == null) {
            return void 0;
          }
          result.push(element);
          if (this.eat(12)) {
            trailingCommaPos = this.state.lastTokStart;
            continue;
          }
          if (this.tsIsListTerminator(kind)) {
            break;
          }
          if (expectSuccess) {
            this.expect(12);
          }
          return void 0;
        }
        if (refTrailingCommaPos) {
          refTrailingCommaPos.value = trailingCommaPos;
        }
        return result;
      }
      tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
        if (!skipFirstToken) {
          if (bracket) {
            this.expect(0);
          } else {
            this.expect(45);
          }
        }
        const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
        if (bracket) {
          this.expect(3);
        } else {
          this.expect(46);
        }
        return result;
      }
      tsParseImportType() {
        const node = this.startNode();
        this.expect(79);
        this.expect(10);
        if (!this.match(125)) {
          this.raise(TSErrors.UnsupportedImportTypeArgument, {
            at: this.state.startLoc
          });
        }
        node.argument = this.parseExprAtom();
        this.expect(11);
        if (this.eat(16)) {
          node.qualifier = this.tsParseEntityName(true);
        }
        if (this.match(45)) {
          node.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node, \\"TSImportType\\");
      }
      tsParseEntityName(allowReservedWords) {
        let entity = this.parseIdentifier();
        while (this.eat(16)) {
          const node = this.startNodeAtNode(entity);
          node.left = entity;
          node.right = this.parseIdentifier(allowReservedWords);
          entity = this.finishNode(node, \\"TSQualifiedName\\");
        }
        return entity;
      }
      tsParseTypeReference() {
        const node = this.startNode();
        node.typeName = this.tsParseEntityName(false);
        if (!this.hasPrecedingLineBreak() && this.match(45)) {
          node.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node, \\"TSTypeReference\\");
      }
      tsParseThisTypePredicate(lhs) {
        this.next();
        const node = this.startNodeAtNode(lhs);
        node.parameterName = lhs;
        node.typeAnnotation = this.tsParseTypeAnnotation(false);
        node.asserts = false;
        return this.finishNode(node, \\"TSTypePredicate\\");
      }
      tsParseThisTypeNode() {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, \\"TSThisType\\");
      }
      tsParseTypeQuery() {
        const node = this.startNode();
        this.expect(83);
        if (this.match(79)) {
          node.exprName = this.tsParseImportType();
        } else {
          node.exprName = this.tsParseEntityName(true);
        }
        return this.finishNode(node, \\"TSTypeQuery\\");
      }
      tsParseTypeParameter() {
        const node = this.startNode();
        node.name = this.tsParseTypeParameterName();
        node.constraint = this.tsEatThenParseType(77);
        node.default = this.tsEatThenParseType(29);
        return this.finishNode(node, \\"TSTypeParameter\\");
      }
      tsTryParseTypeParameters() {
        if (this.match(45)) {
          return this.tsParseTypeParameters();
        }
      }
      tsParseTypeParameters() {
        const node = this.startNode();
        if (this.match(45) || this.match(134)) {
          this.next();
        } else {
          this.unexpected();
        }
        const refTrailingCommaPos = {
          value: -1
        };
        node.params = this.tsParseBracketedList(\\"TypeParametersOrArguments\\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);
        if (node.params.length === 0) {
          this.raise(TSErrors.EmptyTypeParameters, {
            node
          });
        }
        if (refTrailingCommaPos.value !== -1) {
          this.addExtra(node, \\"trailingComma\\", refTrailingCommaPos.value);
        }
        return this.finishNode(node, \\"TSTypeParameterDeclaration\\");
      }
      tsTryNextParseConstantContext() {
        if (this.lookahead().type === 71) {
          this.next();
          return this.tsParseTypeReference();
        }
        return null;
      }
      tsFillSignature(returnToken, signature) {
        const returnTokenRequired = returnToken === 19;
        const paramsKey = \\"parameters\\";
        const returnTypeKey = \\"typeAnnotation\\";
        signature.typeParameters = this.tsTryParseTypeParameters();
        this.expect(10);
        signature[paramsKey] = this.tsParseBindingListForSignature();
        if (returnTokenRequired) {
          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        } else if (this.match(returnToken)) {
          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        }
      }
      tsParseBindingListForSignature() {
        return this.parseBindingList(11, 41).map((pattern) => {
          if (pattern.type !== \\"Identifier\\" && pattern.type !== \\"RestElement\\" && pattern.type !== \\"ObjectPattern\\" && pattern.type !== \\"ArrayPattern\\") {
            this.raise(TSErrors.UnsupportedSignatureParameterKind, {
              node: pattern
            }, pattern.type);
          }
          return pattern;
        });
      }
      tsParseTypeMemberSemicolon() {
        if (!this.eat(12) && !this.isLineTerminator()) {
          this.expect(13);
        }
      }
      tsParseSignatureMember(kind, node) {
        this.tsFillSignature(14, node);
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node, kind);
      }
      tsIsUnambiguouslyIndexSignature() {
        this.next();
        if (tokenIsIdentifier(this.state.type)) {
          this.next();
          return this.match(14);
        }
        return false;
      }
      tsTryParseIndexSignature(node) {
        if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
          return void 0;
        }
        this.expect(0);
        const id = this.parseIdentifier();
        id.typeAnnotation = this.tsParseTypeAnnotation();
        this.resetEndLocation(id);
        this.expect(3);
        node.parameters = [id];
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          node.typeAnnotation = type;
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node, \\"TSIndexSignature\\");
      }
      tsParsePropertyOrMethodSignature(node, readonly) {
        if (this.eat(17))
          node.optional = true;
        const nodeAny = node;
        if (this.match(10) || this.match(45)) {
          if (readonly) {
            this.raise(TSErrors.ReadonlyForMethodSignature, {
              node
            });
          }
          const method = nodeAny;
          if (method.kind && this.match(45)) {
            this.raise(TSErrors.AccesorCannotHaveTypeParameters, {
              at: this.state.curPosition()
            });
          }
          this.tsFillSignature(14, method);
          this.tsParseTypeMemberSemicolon();
          const paramsKey = \\"parameters\\";
          const returnTypeKey = \\"typeAnnotation\\";
          if (method.kind === \\"get\\") {
            if (method[paramsKey].length > 0) {
              this.raise(ErrorMessages.BadGetterArity, {
                at: this.state.curPosition()
              });
              if (this.isThisParam(method[paramsKey][0])) {
                this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
                  at: this.state.curPosition()
                });
              }
            }
          } else if (method.kind === \\"set\\") {
            if (method[paramsKey].length !== 1) {
              this.raise(ErrorMessages.BadSetterArity, {
                at: this.state.curPosition()
              });
            } else {
              const firstParameter = method[paramsKey][0];
              if (this.isThisParam(firstParameter)) {
                this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
                  at: this.state.curPosition()
                });
              }
              if (firstParameter.type === \\"Identifier\\" && firstParameter.optional) {
                this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {
                  at: this.state.curPosition()
                });
              }
              if (firstParameter.type === \\"RestElement\\") {
                this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {
                  at: this.state.curPosition()
                });
              }
            }
            if (method[returnTypeKey]) {
              this.raise(TSErrors.SetAccesorCannotHaveReturnType, {
                node: method[returnTypeKey]
              });
            }
          } else {
            method.kind = \\"method\\";
          }
          return this.finishNode(method, \\"TSMethodSignature\\");
        } else {
          const property = nodeAny;
          if (readonly)
            property.readonly = true;
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            property.typeAnnotation = type;
          this.tsParseTypeMemberSemicolon();
          return this.finishNode(property, \\"TSPropertySignature\\");
        }
      }
      tsParseTypeMember() {
        const node = this.startNode();
        if (this.match(10) || this.match(45)) {
          return this.tsParseSignatureMember(\\"TSCallSignatureDeclaration\\", node);
        }
        if (this.match(73)) {
          const id = this.startNode();
          this.next();
          if (this.match(10) || this.match(45)) {
            return this.tsParseSignatureMember(\\"TSConstructSignatureDeclaration\\", node);
          } else {
            node.key = this.createIdentifier(id, \\"new\\");
            return this.tsParsePropertyOrMethodSignature(node, false);
          }
        }
        this.tsParseModifiers(node, [\\"readonly\\"], [\\"declare\\", \\"abstract\\", \\"private\\", \\"protected\\", \\"public\\", \\"static\\", \\"override\\"], TSErrors.InvalidModifierOnTypeMember);
        const idx = this.tsTryParseIndexSignature(node);
        if (idx) {
          return idx;
        }
        this.parsePropertyName(node);
        if (!node.computed && node.key.type === \\"Identifier\\" && (node.key.name === \\"get\\" || node.key.name === \\"set\\") && this.tsTokenCanFollowModifier()) {
          node.kind = node.key.name;
          this.parsePropertyName(node);
        }
        return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
      }
      tsParseTypeLiteral() {
        const node = this.startNode();
        node.members = this.tsParseObjectTypeMembers();
        return this.finishNode(node, \\"TSTypeLiteral\\");
      }
      tsParseObjectTypeMembers() {
        this.expect(5);
        const members = this.tsParseList(\\"TypeMembers\\", this.tsParseTypeMember.bind(this));
        this.expect(8);
        return members;
      }
      tsIsStartOfMappedType() {
        this.next();
        if (this.eat(49)) {
          return this.isContextual(114);
        }
        if (this.isContextual(114)) {
          this.next();
        }
        if (!this.match(0)) {
          return false;
        }
        this.next();
        if (!this.tsIsIdentifier()) {
          return false;
        }
        this.next();
        return this.match(54);
      }
      tsParseMappedTypeParameter() {
        const node = this.startNode();
        node.name = this.tsParseTypeParameterName();
        node.constraint = this.tsExpectThenParseType(54);
        return this.finishNode(node, \\"TSTypeParameter\\");
      }
      tsParseMappedType() {
        const node = this.startNode();
        this.expect(5);
        if (this.match(49)) {
          node.readonly = this.state.value;
          this.next();
          this.expectContextual(114);
        } else if (this.eatContextual(114)) {
          node.readonly = true;
        }
        this.expect(0);
        node.typeParameter = this.tsParseMappedTypeParameter();
        node.nameType = this.eatContextual(89) ? this.tsParseType() : null;
        this.expect(3);
        if (this.match(49)) {
          node.optional = this.state.value;
          this.next();
          this.expect(17);
        } else if (this.eat(17)) {
          node.optional = true;
        }
        node.typeAnnotation = this.tsTryParseType();
        this.semicolon();
        this.expect(8);
        return this.finishNode(node, \\"TSMappedType\\");
      }
      tsParseTupleType() {
        const node = this.startNode();
        node.elementTypes = this.tsParseBracketedList(\\"TupleElementTypes\\", this.tsParseTupleElementType.bind(this), true, false);
        let seenOptionalElement = false;
        let labeledElements = null;
        node.elementTypes.forEach((elementNode) => {
          var _labeledElements;
          let {
            type
          } = elementNode;
          if (seenOptionalElement && type !== \\"TSRestType\\" && type !== \\"TSOptionalType\\" && !(type === \\"TSNamedTupleMember\\" && elementNode.optional)) {
            this.raise(TSErrors.OptionalTypeBeforeRequired, {
              node: elementNode
            });
          }
          seenOptionalElement = seenOptionalElement || type === \\"TSNamedTupleMember\\" && elementNode.optional || type === \\"TSOptionalType\\";
          if (type === \\"TSRestType\\") {
            elementNode = elementNode.typeAnnotation;
            type = elementNode.type;
          }
          const isLabeled = type === \\"TSNamedTupleMember\\";
          labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;
          if (labeledElements !== isLabeled) {
            this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {
              node: elementNode
            });
          }
        });
        return this.finishNode(node, \\"TSTupleType\\");
      }
      tsParseTupleElementType() {
        const {
          start: startPos,
          startLoc
        } = this.state;
        const rest = this.eat(21);
        let type = this.tsParseType();
        const optional = this.eat(17);
        const labeled = this.eat(14);
        if (labeled) {
          const labeledNode = this.startNodeAtNode(type);
          labeledNode.optional = optional;
          if (type.type === \\"TSTypeReference\\" && !type.typeParameters && type.typeName.type === \\"Identifier\\") {
            labeledNode.label = type.typeName;
          } else {
            this.raise(TSErrors.InvalidTupleMemberLabel, {
              node: type
            });
            labeledNode.label = type;
          }
          labeledNode.elementType = this.tsParseType();
          type = this.finishNode(labeledNode, \\"TSNamedTupleMember\\");
        } else if (optional) {
          const optionalTypeNode = this.startNodeAtNode(type);
          optionalTypeNode.typeAnnotation = type;
          type = this.finishNode(optionalTypeNode, \\"TSOptionalType\\");
        }
        if (rest) {
          const restNode = this.startNodeAt(startPos, startLoc);
          restNode.typeAnnotation = type;
          type = this.finishNode(restNode, \\"TSRestType\\");
        }
        return type;
      }
      tsParseParenthesizedType() {
        const node = this.startNode();
        this.expect(10);
        node.typeAnnotation = this.tsParseType();
        this.expect(11);
        return this.finishNode(node, \\"TSParenthesizedType\\");
      }
      tsParseFunctionOrConstructorType(type, abstract) {
        const node = this.startNode();
        if (type === \\"TSConstructorType\\") {
          node.abstract = !!abstract;
          if (abstract)
            this.next();
          this.next();
        }
        this.tsFillSignature(19, node);
        return this.finishNode(node, type);
      }
      tsParseLiteralTypeNode() {
        const node = this.startNode();
        node.literal = (() => {
          switch (this.state.type) {
            case 126:
            case 127:
            case 125:
            case 81:
            case 82:
              return this.parseExprAtom();
            default:
              throw this.unexpected();
          }
        })();
        return this.finishNode(node, \\"TSLiteralType\\");
      }
      tsParseTemplateLiteralType() {
        const node = this.startNode();
        node.literal = this.parseTemplate(false);
        return this.finishNode(node, \\"TSLiteralType\\");
      }
      parseTemplateSubstitution() {
        if (this.state.inType)
          return this.tsParseType();
        return super.parseTemplateSubstitution();
      }
      tsParseThisTypeOrThisTypePredicate() {
        const thisKeyword = this.tsParseThisTypeNode();
        if (this.isContextual(109) && !this.hasPrecedingLineBreak()) {
          return this.tsParseThisTypePredicate(thisKeyword);
        } else {
          return thisKeyword;
        }
      }
      tsParseNonArrayType() {
        switch (this.state.type) {
          case 125:
          case 126:
          case 127:
          case 81:
          case 82:
            return this.tsParseLiteralTypeNode();
          case 49:
            if (this.state.value === \\"-\\") {
              const node = this.startNode();
              const nextToken = this.lookahead();
              if (nextToken.type !== 126 && nextToken.type !== 127) {
                throw this.unexpected();
              }
              node.literal = this.parseMaybeUnary();
              return this.finishNode(node, \\"TSLiteralType\\");
            }
            break;
          case 74:
            return this.tsParseThisTypeOrThisTypePredicate();
          case 83:
            return this.tsParseTypeQuery();
          case 79:
            return this.tsParseImportType();
          case 5:
            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
          case 0:
            return this.tsParseTupleType();
          case 10:
            return this.tsParseParenthesizedType();
          case 25:
          case 24:
            return this.tsParseTemplateLiteralType();
          default: {
            const {
              type
            } = this.state;
            if (tokenIsIdentifier(type) || type === 84 || type === 80) {
              const nodeType = type === 84 ? \\"TSVoidKeyword\\" : type === 80 ? \\"TSNullKeyword\\" : keywordTypeFromName(this.state.value);
              if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
                const node = this.startNode();
                this.next();
                return this.finishNode(node, nodeType);
              }
              return this.tsParseTypeReference();
            }
          }
        }
        throw this.unexpected();
      }
      tsParseArrayTypeOrHigher() {
        let type = this.tsParseNonArrayType();
        while (!this.hasPrecedingLineBreak() && this.eat(0)) {
          if (this.match(3)) {
            const node = this.startNodeAtNode(type);
            node.elementType = type;
            this.expect(3);
            type = this.finishNode(node, \\"TSArrayType\\");
          } else {
            const node = this.startNodeAtNode(type);
            node.objectType = type;
            node.indexType = this.tsParseType();
            this.expect(3);
            type = this.finishNode(node, \\"TSIndexedAccessType\\");
          }
        }
        return type;
      }
      tsParseTypeOperator() {
        const node = this.startNode();
        const operator = this.state.value;
        this.next();
        node.operator = operator;
        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
        if (operator === \\"readonly\\") {
          this.tsCheckTypeAnnotationForReadOnly(node);
        }
        return this.finishNode(node, \\"TSTypeOperator\\");
      }
      tsCheckTypeAnnotationForReadOnly(node) {
        switch (node.typeAnnotation.type) {
          case \\"TSTupleType\\":
          case \\"TSArrayType\\":
            return;
          default:
            this.raise(TSErrors.UnexpectedReadonly, {
              node
            });
        }
      }
      tsParseInferType() {
        const node = this.startNode();
        this.expectContextual(108);
        const typeParameter = this.startNode();
        typeParameter.name = this.tsParseTypeParameterName();
        node.typeParameter = this.finishNode(typeParameter, \\"TSTypeParameter\\");
        return this.finishNode(node, \\"TSInferType\\");
      }
      tsParseTypeOperatorOrHigher() {
        const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
        return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(108) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();
      }
      tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
        const node = this.startNode();
        const hasLeadingOperator = this.eat(operator);
        const types2 = [];
        do {
          types2.push(parseConstituentType());
        } while (this.eat(operator));
        if (types2.length === 1 && !hasLeadingOperator) {
          return types2[0];
        }
        node.types = types2;
        return this.finishNode(node, kind);
      }
      tsParseIntersectionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType(\\"TSIntersectionType\\", this.tsParseTypeOperatorOrHigher.bind(this), 43);
      }
      tsParseUnionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType(\\"TSUnionType\\", this.tsParseIntersectionTypeOrHigher.bind(this), 41);
      }
      tsIsStartOfFunctionType() {
        if (this.match(45)) {
          return true;
        }
        return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
      }
      tsSkipParameterStart() {
        if (tokenIsIdentifier(this.state.type) || this.match(74)) {
          this.next();
          return true;
        }
        if (this.match(5)) {
          let braceStackCounter = 1;
          this.next();
          while (braceStackCounter > 0) {
            if (this.match(5)) {
              ++braceStackCounter;
            } else if (this.match(8)) {
              --braceStackCounter;
            }
            this.next();
          }
          return true;
        }
        if (this.match(0)) {
          let braceStackCounter = 1;
          this.next();
          while (braceStackCounter > 0) {
            if (this.match(0)) {
              ++braceStackCounter;
            } else if (this.match(3)) {
              --braceStackCounter;
            }
            this.next();
          }
          return true;
        }
        return false;
      }
      tsIsUnambiguouslyStartOfFunctionType() {
        this.next();
        if (this.match(11) || this.match(21)) {
          return true;
        }
        if (this.tsSkipParameterStart()) {
          if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
            return true;
          }
          if (this.match(11)) {
            this.next();
            if (this.match(19)) {
              return true;
            }
          }
        }
        return false;
      }
      tsParseTypeOrTypePredicateAnnotation(returnToken) {
        return this.tsInType(() => {
          const t = this.startNode();
          this.expect(returnToken);
          const node = this.startNode();
          const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
          if (asserts && this.match(74)) {
            let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
            if (thisTypePredicate.type === \\"TSThisType\\") {
              node.parameterName = thisTypePredicate;
              node.asserts = true;
              node.typeAnnotation = null;
              thisTypePredicate = this.finishNode(node, \\"TSTypePredicate\\");
            } else {
              this.resetStartLocationFromNode(thisTypePredicate, node);
              thisTypePredicate.asserts = true;
            }
            t.typeAnnotation = thisTypePredicate;
            return this.finishNode(t, \\"TSTypeAnnotation\\");
          }
          const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
          if (!typePredicateVariable) {
            if (!asserts) {
              return this.tsParseTypeAnnotation(false, t);
            }
            node.parameterName = this.parseIdentifier();
            node.asserts = asserts;
            node.typeAnnotation = null;
            t.typeAnnotation = this.finishNode(node, \\"TSTypePredicate\\");
            return this.finishNode(t, \\"TSTypeAnnotation\\");
          }
          const type = this.tsParseTypeAnnotation(false);
          node.parameterName = typePredicateVariable;
          node.typeAnnotation = type;
          node.asserts = asserts;
          t.typeAnnotation = this.finishNode(node, \\"TSTypePredicate\\");
          return this.finishNode(t, \\"TSTypeAnnotation\\");
        });
      }
      tsTryParseTypeOrTypePredicateAnnotation() {
        return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
      }
      tsTryParseTypeAnnotation() {
        return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
      }
      tsTryParseType() {
        return this.tsEatThenParseType(14);
      }
      tsParseTypePredicatePrefix() {
        const id = this.parseIdentifier();
        if (this.isContextual(109) && !this.hasPrecedingLineBreak()) {
          this.next();
          return id;
        }
      }
      tsParseTypePredicateAsserts() {
        if (this.state.type !== 102) {
          return false;
        }
        const containsEsc = this.state.containsEsc;
        this.next();
        if (!tokenIsIdentifier(this.state.type) && !this.match(74)) {
          return false;
        }
        if (containsEsc) {
          this.raise(ErrorMessages.InvalidEscapedReservedWord, {
            at: this.state.lastTokStartLoc
          }, \\"asserts\\");
        }
        return true;
      }
      tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
        this.tsInType(() => {
          if (eatColon)
            this.expect(14);
          t.typeAnnotation = this.tsParseType();
        });
        return this.finishNode(t, \\"TSTypeAnnotation\\");
      }
      tsParseType() {
        assert(this.state.inType);
        const type = this.tsParseNonConditionalType();
        if (this.hasPrecedingLineBreak() || !this.eat(77)) {
          return type;
        }
        const node = this.startNodeAtNode(type);
        node.checkType = type;
        node.extendsType = this.tsParseNonConditionalType();
        this.expect(17);
        node.trueType = this.tsParseType();
        this.expect(14);
        node.falseType = this.tsParseType();
        return this.finishNode(node, \\"TSConditionalType\\");
      }
      isAbstractConstructorSignature() {
        return this.isContextual(116) && this.lookahead().type === 73;
      }
      tsParseNonConditionalType() {
        if (this.tsIsStartOfFunctionType()) {
          return this.tsParseFunctionOrConstructorType(\\"TSFunctionType\\");
        }
        if (this.match(73)) {
          return this.tsParseFunctionOrConstructorType(\\"TSConstructorType\\");
        } else if (this.isAbstractConstructorSignature()) {
          return this.tsParseFunctionOrConstructorType(\\"TSConstructorType\\", true);
        }
        return this.tsParseUnionTypeOrHigher();
      }
      tsParseTypeAssertion() {
        if (this.getPluginOption(\\"typescript\\", \\"disallowAmbiguousJSXLike\\")) {
          this.raise(TSErrors.ReservedTypeAssertion, {
            at: this.state.startLoc
          });
        }
        const node = this.startNode();
        const _const = this.tsTryNextParseConstantContext();
        node.typeAnnotation = _const || this.tsNextThenParseType();
        this.expect(46);
        node.expression = this.parseMaybeUnary();
        return this.finishNode(node, \\"TSTypeAssertion\\");
      }
      tsParseHeritageClause(descriptor) {
        const originalStartLoc = this.state.startLoc;
        const delimitedList = this.tsParseDelimitedList(\\"HeritageClauseElement\\", this.tsParseExpressionWithTypeArguments.bind(this));
        if (!delimitedList.length) {
          this.raise(TSErrors.EmptyHeritageClauseType, {
            at: originalStartLoc
          }, descriptor);
        }
        return delimitedList;
      }
      tsParseExpressionWithTypeArguments() {
        const node = this.startNode();
        node.expression = this.tsParseEntityName(false);
        if (this.match(45)) {
          node.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node, \\"TSExpressionWithTypeArguments\\");
      }
      tsParseInterfaceDeclaration(node) {
        if (tokenIsIdentifier(this.state.type)) {
          node.id = this.parseIdentifier();
          this.checkLVal(node.id, \\"typescript interface declaration\\", BIND_TS_INTERFACE);
        } else {
          node.id = null;
          this.raise(TSErrors.MissingInterfaceName, {
            at: this.state.startLoc
          });
        }
        node.typeParameters = this.tsTryParseTypeParameters();
        if (this.eat(77)) {
          node.extends = this.tsParseHeritageClause(\\"extends\\");
        }
        const body = this.startNode();
        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
        node.body = this.finishNode(body, \\"TSInterfaceBody\\");
        return this.finishNode(node, \\"TSInterfaceDeclaration\\");
      }
      tsParseTypeAliasDeclaration(node) {
        node.id = this.parseIdentifier();
        this.checkLVal(node.id, \\"typescript type alias\\", BIND_TS_TYPE);
        node.typeParameters = this.tsTryParseTypeParameters();
        node.typeAnnotation = this.tsInType(() => {
          this.expect(29);
          if (this.isContextual(107) && this.lookahead().type !== 16) {
            const node2 = this.startNode();
            this.next();
            return this.finishNode(node2, \\"TSIntrinsicKeyword\\");
          }
          return this.tsParseType();
        });
        this.semicolon();
        return this.finishNode(node, \\"TSTypeAliasDeclaration\\");
      }
      tsInNoContext(cb) {
        const oldContext = this.state.context;
        this.state.context = [oldContext[0]];
        try {
          return cb();
        } finally {
          this.state.context = oldContext;
        }
      }
      tsInType(cb) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        try {
          return cb();
        } finally {
          this.state.inType = oldInType;
        }
      }
      tsEatThenParseType(token) {
        return !this.match(token) ? void 0 : this.tsNextThenParseType();
      }
      tsExpectThenParseType(token) {
        return this.tsDoThenParseType(() => this.expect(token));
      }
      tsNextThenParseType() {
        return this.tsDoThenParseType(() => this.next());
      }
      tsDoThenParseType(cb) {
        return this.tsInType(() => {
          cb();
          return this.tsParseType();
        });
      }
      tsParseEnumMember() {
        const node = this.startNode();
        node.id = this.match(125) ? this.parseExprAtom() : this.parseIdentifier(true);
        if (this.eat(29)) {
          node.initializer = this.parseMaybeAssignAllowIn();
        }
        return this.finishNode(node, \\"TSEnumMember\\");
      }
      tsParseEnumDeclaration(node, isConst) {
        if (isConst)
          node.const = true;
        node.id = this.parseIdentifier();
        this.checkLVal(node.id, \\"typescript enum declaration\\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);
        this.expect(5);
        node.members = this.tsParseDelimitedList(\\"EnumMembers\\", this.tsParseEnumMember.bind(this));
        this.expect(8);
        return this.finishNode(node, \\"TSEnumDeclaration\\");
      }
      tsParseModuleBlock() {
        const node = this.startNode();
        this.scope.enter(SCOPE_OTHER);
        this.expect(5);
        this.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8);
        this.scope.exit();
        return this.finishNode(node, \\"TSModuleBlock\\");
      }
      tsParseModuleOrNamespaceDeclaration(node, nested = false) {
        node.id = this.parseIdentifier();
        if (!nested) {
          this.checkLVal(node.id, \\"module or namespace declaration\\", BIND_TS_NAMESPACE);
        }
        if (this.eat(16)) {
          const inner = this.startNode();
          this.tsParseModuleOrNamespaceDeclaration(inner, true);
          node.body = inner;
        } else {
          this.scope.enter(SCOPE_TS_MODULE);
          this.prodParam.enter(PARAM);
          node.body = this.tsParseModuleBlock();
          this.prodParam.exit();
          this.scope.exit();
        }
        return this.finishNode(node, \\"TSModuleDeclaration\\");
      }
      tsParseAmbientExternalModuleDeclaration(node) {
        if (this.isContextual(105)) {
          node.global = true;
          node.id = this.parseIdentifier();
        } else if (this.match(125)) {
          node.id = this.parseExprAtom();
        } else {
          this.unexpected();
        }
        if (this.match(5)) {
          this.scope.enter(SCOPE_TS_MODULE);
          this.prodParam.enter(PARAM);
          node.body = this.tsParseModuleBlock();
          this.prodParam.exit();
          this.scope.exit();
        } else {
          this.semicolon();
        }
        return this.finishNode(node, \\"TSModuleDeclaration\\");
      }
      tsParseImportEqualsDeclaration(node, isExport) {
        node.isExport = isExport || false;
        node.id = this.parseIdentifier();
        this.checkLVal(node.id, \\"import equals declaration\\", BIND_LEXICAL);
        this.expect(29);
        const moduleReference = this.tsParseModuleReference();
        if (node.importKind === \\"type\\" && moduleReference.type !== \\"TSExternalModuleReference\\") {
          this.raise(TSErrors.ImportAliasHasImportType, {
            node: moduleReference
          });
        }
        node.moduleReference = moduleReference;
        this.semicolon();
        return this.finishNode(node, \\"TSImportEqualsDeclaration\\");
      }
      tsIsExternalModuleReference() {
        return this.isContextual(112) && this.lookaheadCharCode() === 40;
      }
      tsParseModuleReference() {
        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
      }
      tsParseExternalModuleReference() {
        const node = this.startNode();
        this.expectContextual(112);
        this.expect(10);
        if (!this.match(125)) {
          throw this.unexpected();
        }
        node.expression = this.parseExprAtom();
        this.expect(11);
        return this.finishNode(node, \\"TSExternalModuleReference\\");
      }
      tsLookAhead(f) {
        const state = this.state.clone();
        const res = f();
        this.state = state;
        return res;
      }
      tsTryParseAndCatch(f) {
        const result = this.tryParse((abort) => f() || abort());
        if (result.aborted || !result.node)
          return void 0;
        if (result.error)
          this.state = result.failState;
        return result.node;
      }
      tsTryParse(f) {
        const state = this.state.clone();
        const result = f();
        if (result !== void 0 && result !== false) {
          return result;
        } else {
          this.state = state;
          return void 0;
        }
      }
      tsTryParseDeclare(nany) {
        if (this.isLineTerminator()) {
          return;
        }
        let starttype = this.state.type;
        let kind;
        if (this.isContextual(95)) {
          starttype = 70;
          kind = \\"let\\";
        }
        return this.tsInAmbientContext(() => {
          switch (starttype) {
            case 64:
              nany.declare = true;
              return this.parseFunctionStatement(nany, false, true);
            case 76:
              nany.declare = true;
              return this.parseClass(nany, true, false);
            case 71:
              if (this.match(71) && this.isLookaheadContextual(\\"enum\\")) {
                this.expect(71);
                this.expectContextual(118);
                return this.tsParseEnumDeclaration(nany, true);
              }
            case 70:
              kind = kind || this.state.value;
              return this.parseVarStatement(nany, kind);
            case 105:
              return this.tsParseAmbientExternalModuleDeclaration(nany);
            default: {
              if (tokenIsIdentifier(starttype)) {
                return this.tsParseDeclaration(nany, this.state.value, true);
              }
            }
          }
        });
      }
      tsTryParseExportDeclaration() {
        return this.tsParseDeclaration(this.startNode(), this.state.value, true);
      }
      tsParseExpressionStatement(node, expr) {
        switch (expr.name) {
          case \\"declare\\": {
            const declaration = this.tsTryParseDeclare(node);
            if (declaration) {
              declaration.declare = true;
              return declaration;
            }
            break;
          }
          case \\"global\\":
            if (this.match(5)) {
              this.scope.enter(SCOPE_TS_MODULE);
              this.prodParam.enter(PARAM);
              const mod = node;
              mod.global = true;
              mod.id = expr;
              mod.body = this.tsParseModuleBlock();
              this.scope.exit();
              this.prodParam.exit();
              return this.finishNode(mod, \\"TSModuleDeclaration\\");
            }
            break;
          default:
            return this.tsParseDeclaration(node, expr.name, false);
        }
      }
      tsParseDeclaration(node, value, next) {
        switch (value) {
          case \\"abstract\\":
            if (this.tsCheckLineTerminator(next) && (this.match(76) || tokenIsIdentifier(this.state.type))) {
              return this.tsParseAbstractDeclaration(node);
            }
            break;
          case \\"enum\\":
            if (next || tokenIsIdentifier(this.state.type)) {
              if (next)
                this.next();
              return this.tsParseEnumDeclaration(node, false);
            }
            break;
          case \\"interface\\":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
              return this.tsParseInterfaceDeclaration(node);
            }
            break;
          case \\"module\\":
            if (this.tsCheckLineTerminator(next)) {
              if (this.match(125)) {
                return this.tsParseAmbientExternalModuleDeclaration(node);
              } else if (tokenIsIdentifier(this.state.type)) {
                return this.tsParseModuleOrNamespaceDeclaration(node);
              }
            }
            break;
          case \\"namespace\\":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
              return this.tsParseModuleOrNamespaceDeclaration(node);
            }
            break;
          case \\"type\\":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
              return this.tsParseTypeAliasDeclaration(node);
            }
            break;
        }
      }
      tsCheckLineTerminator(next) {
        if (next) {
          if (this.hasFollowingLineBreak())
            return false;
          this.next();
          return true;
        }
        return !this.isLineTerminator();
      }
      tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
        if (!this.match(45)) {
          return void 0;
        }
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = true;
        const res = this.tsTryParseAndCatch(() => {
          const node = this.startNodeAt(startPos, startLoc);
          node.typeParameters = this.tsParseTypeParameters();
          super.parseFunctionParams(node);
          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
          this.expect(19);
          return node;
        });
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        if (!res) {
          return void 0;
        }
        return this.parseArrowExpression(res, null, true);
      }
      tsParseTypeArguments() {
        const node = this.startNode();
        node.params = this.tsInType(() => this.tsInNoContext(() => {
          this.expect(45);
          return this.tsParseDelimitedList(\\"TypeParametersOrArguments\\", this.tsParseType.bind(this));
        }));
        if (node.params.length === 0) {
          this.raise(TSErrors.EmptyTypeArguments, {
            node
          });
        }
        this.expect(46);
        return this.finishNode(node, \\"TSTypeParameterInstantiation\\");
      }
      tsIsDeclarationStart() {
        return tokenIsTSDeclarationStart(this.state.type);
      }
      isExportDefaultSpecifier() {
        if (this.tsIsDeclarationStart())
          return false;
        return super.isExportDefaultSpecifier();
      }
      parseAssignableListItem(allowModifiers, decorators) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let accessibility;
        let readonly = false;
        let override = false;
        if (allowModifiers !== void 0) {
          const modified = {};
          this.tsParseModifiers(modified, [\\"public\\", \\"private\\", \\"protected\\", \\"override\\", \\"readonly\\"]);
          accessibility = modified.accessibility;
          override = modified.override;
          readonly = modified.readonly;
          if (allowModifiers === false && (accessibility || readonly || override)) {
            this.raise(TSErrors.UnexpectedParameterModifier, {
              at: startLoc
            });
          }
        }
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
        if (accessibility || readonly || override) {
          const pp = this.startNodeAt(startPos, startLoc);
          if (decorators.length) {
            pp.decorators = decorators;
          }
          if (accessibility)
            pp.accessibility = accessibility;
          if (readonly)
            pp.readonly = readonly;
          if (override)
            pp.override = override;
          if (elt.type !== \\"Identifier\\" && elt.type !== \\"AssignmentPattern\\") {
            this.raise(TSErrors.UnsupportedParameterPropertyKind, {
              node: pp
            });
          }
          pp.parameter = elt;
          return this.finishNode(pp, \\"TSParameterProperty\\");
        }
        if (decorators.length) {
          left.decorators = decorators;
        }
        return elt;
      }
      parseFunctionBodyAndFinish(node, type, isMethod = false) {
        if (this.match(14)) {
          node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
        }
        const bodilessType = type === \\"FunctionDeclaration\\" ? \\"TSDeclareFunction\\" : type === \\"ClassMethod\\" || type === \\"ClassPrivateMethod\\" ? \\"TSDeclareMethod\\" : void 0;
        if (bodilessType && !this.match(5) && this.isLineTerminator()) {
          this.finishNode(node, bodilessType);
          return;
        }
        if (bodilessType === \\"TSDeclareFunction\\" && this.state.isAmbientContext) {
          this.raise(TSErrors.DeclareFunctionHasImplementation, {
            node
          });
          if (node.declare) {
            super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
            return;
          }
        }
        super.parseFunctionBodyAndFinish(node, type, isMethod);
      }
      registerFunctionStatementId(node) {
        if (!node.body && node.id) {
          this.checkLVal(node.id, \\"function name\\", BIND_TS_AMBIENT);
        } else {
          super.registerFunctionStatementId(...arguments);
        }
      }
      tsCheckForInvalidTypeCasts(items) {
        items.forEach((node) => {
          if ((node == null ? void 0 : node.type) === \\"TSTypeCastExpression\\") {
            this.raise(TSErrors.UnexpectedTypeAnnotation, {
              node: node.typeAnnotation
            });
          }
        });
      }
      toReferencedList(exprList, isInParens) {
        this.tsCheckForInvalidTypeCasts(exprList);
        return exprList;
      }
      parseArrayLike(...args) {
        const node = super.parseArrayLike(...args);
        if (node.type === \\"ArrayExpression\\") {
          this.tsCheckForInvalidTypeCasts(node.elements);
        }
        return node;
      }
      parseSubscript(base, startPos, startLoc, noCalls, state) {
        if (!this.hasPrecedingLineBreak() && this.match(35)) {
          this.state.canStartJSXElement = false;
          this.next();
          const nonNullExpression = this.startNodeAt(startPos, startLoc);
          nonNullExpression.expression = base;
          return this.finishNode(nonNullExpression, \\"TSNonNullExpression\\");
        }
        let isOptionalCall = false;
        if (this.match(18) && this.lookaheadCharCode() === 60) {
          if (noCalls) {
            state.stop = true;
            return base;
          }
          state.optionalChainMember = isOptionalCall = true;
          this.next();
        }
        if (this.match(45)) {
          let missingParenErrorLoc;
          const result = this.tsTryParseAndCatch(() => {
            if (!noCalls && this.atPossibleAsyncArrow(base)) {
              const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);
              if (asyncArrowFn) {
                return asyncArrowFn;
              }
            }
            const node = this.startNodeAt(startPos, startLoc);
            node.callee = base;
            const typeArguments = this.tsParseTypeArguments();
            if (typeArguments) {
              if (isOptionalCall && !this.match(10)) {
                missingParenErrorLoc = this.state.curPosition();
                this.unexpected();
              }
              if (!noCalls && this.eat(10)) {
                node.arguments = this.parseCallExpressionArguments(11, false);
                this.tsCheckForInvalidTypeCasts(node.arguments);
                node.typeParameters = typeArguments;
                if (state.optionalChainMember) {
                  node.optional = isOptionalCall;
                }
                return this.finishCallExpression(node, state.optionalChainMember);
              } else if (tokenIsTemplate(this.state.type)) {
                const result2 = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
                result2.typeParameters = typeArguments;
                return result2;
              }
            }
            this.unexpected();
          });
          if (missingParenErrorLoc) {
            this.unexpected(missingParenErrorLoc, 10);
          }
          if (result)
            return result;
        }
        return super.parseSubscript(base, startPos, startLoc, noCalls, state);
      }
      parseNewArguments(node) {
        if (this.match(45)) {
          const typeParameters = this.tsTryParseAndCatch(() => {
            const args = this.tsParseTypeArguments();
            if (!this.match(10))
              this.unexpected();
            return args;
          });
          if (typeParameters) {
            node.typeParameters = typeParameters;
          }
        }
        super.parseNewArguments(node);
      }
      parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
        if (tokenOperatorPrecedence(54) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(89)) {
          const node = this.startNodeAt(leftStartPos, leftStartLoc);
          node.expression = left;
          const _const = this.tsTryNextParseConstantContext();
          if (_const) {
            node.typeAnnotation = _const;
          } else {
            node.typeAnnotation = this.tsNextThenParseType();
          }
          this.finishNode(node, \\"TSAsExpression\\");
          this.reScan_lt_gt();
          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
        }
        return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
      }
      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
      }
      checkDuplicateExports() {
      }
      parseImport(node) {
        node.importKind = \\"value\\";
        if (tokenIsIdentifier(this.state.type) || this.match(51) || this.match(5)) {
          let ahead = this.lookahead();
          if (this.isContextual(122) && ahead.type !== 12 && ahead.type !== 93 && ahead.type !== 29) {
            node.importKind = \\"type\\";
            this.next();
            ahead = this.lookahead();
          }
          if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {
            return this.tsParseImportEqualsDeclaration(node);
          }
        }
        const importNode = super.parseImport(node);
        if (importNode.importKind === \\"type\\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \\"ImportDefaultSpecifier\\") {
          this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {
            node: importNode
          });
        }
        return importNode;
      }
      parseExport(node) {
        if (this.match(79)) {
          this.next();
          if (this.isContextual(122) && this.lookaheadCharCode() !== 61) {
            node.importKind = \\"type\\";
            this.next();
          } else {
            node.importKind = \\"value\\";
          }
          return this.tsParseImportEqualsDeclaration(node, true);
        } else if (this.eat(29)) {
          const assign = node;
          assign.expression = this.parseExpression();
          this.semicolon();
          return this.finishNode(assign, \\"TSExportAssignment\\");
        } else if (this.eatContextual(89)) {
          const decl = node;
          this.expectContextual(120);
          decl.id = this.parseIdentifier();
          this.semicolon();
          return this.finishNode(decl, \\"TSNamespaceExportDeclaration\\");
        } else {
          if (this.isContextual(122) && this.lookahead().type === 5) {
            this.next();
            node.exportKind = \\"type\\";
          } else {
            node.exportKind = \\"value\\";
          }
          return super.parseExport(node);
        }
      }
      isAbstractClass() {
        return this.isContextual(116) && this.lookahead().type === 76;
      }
      parseExportDefaultExpression() {
        if (this.isAbstractClass()) {
          const cls = this.startNode();
          this.next();
          cls.abstract = true;
          this.parseClass(cls, true, true);
          return cls;
        }
        if (this.match(121)) {
          const interfaceNode = this.startNode();
          this.next();
          const result = this.tsParseInterfaceDeclaration(interfaceNode);
          if (result)
            return result;
        }
        return super.parseExportDefaultExpression();
      }
      parseStatementContent(context, topLevel) {
        if (this.state.type === 71) {
          const ahead = this.lookahead();
          if (ahead.type === 118) {
            const node = this.startNode();
            this.next();
            this.expectContextual(118);
            return this.tsParseEnumDeclaration(node, true);
          }
        }
        return super.parseStatementContent(context, topLevel);
      }
      parseAccessModifier() {
        return this.tsParseModifier([\\"public\\", \\"protected\\", \\"private\\"]);
      }
      tsHasSomeModifiers(member, modifiers) {
        return modifiers.some((modifier) => {
          if (tsIsAccessModifier(modifier)) {
            return member.accessibility === modifier;
          }
          return !!member[modifier];
        });
      }
      tsIsStartOfStaticBlocks() {
        return this.isContextual(100) && this.lookaheadCharCode() === 123;
      }
      parseClassMember(classBody, member, state) {
        const modifiers = [\\"declare\\", \\"private\\", \\"public\\", \\"protected\\", \\"override\\", \\"abstract\\", \\"readonly\\", \\"static\\"];
        this.tsParseModifiers(member, modifiers, void 0, void 0, true);
        const callParseClassMemberWithIsStatic = () => {
          if (this.tsIsStartOfStaticBlocks()) {
            this.next();
            this.next();
            if (this.tsHasSomeModifiers(member, modifiers)) {
              this.raise(TSErrors.StaticBlockCannotHaveModifier, {
                at: this.state.curPosition()
              });
            }
            this.parseClassStaticBlock(classBody, member);
          } else {
            this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
          }
        };
        if (member.declare) {
          this.tsInAmbientContext(callParseClassMemberWithIsStatic);
        } else {
          callParseClassMemberWithIsStatic();
        }
      }
      parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const idx = this.tsTryParseIndexSignature(member);
        if (idx) {
          classBody.body.push(idx);
          if (member.abstract) {
            this.raise(TSErrors.IndexSignatureHasAbstract, {
              node: member
            });
          }
          if (member.accessibility) {
            this.raise(TSErrors.IndexSignatureHasAccessibility, {
              node: member
            }, member.accessibility);
          }
          if (member.declare) {
            this.raise(TSErrors.IndexSignatureHasDeclare, {
              node: member
            });
          }
          if (member.override) {
            this.raise(TSErrors.IndexSignatureHasOverride, {
              node: member
            });
          }
          return;
        }
        if (!this.state.inAbstractClass && member.abstract) {
          this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {
            node: member
          });
        }
        if (member.override) {
          if (!state.hadSuperClass) {
            this.raise(TSErrors.OverrideNotInSubClass, {
              node: member
            });
          }
        }
        super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
      }
      parsePostMemberNameModifiers(methodOrProp) {
        const optional = this.eat(17);
        if (optional)
          methodOrProp.optional = true;
        if (methodOrProp.readonly && this.match(10)) {
          this.raise(TSErrors.ClassMethodHasReadonly, {
            node: methodOrProp
          });
        }
        if (methodOrProp.declare && this.match(10)) {
          this.raise(TSErrors.ClassMethodHasDeclare, {
            node: methodOrProp
          });
        }
      }
      parseExpressionStatement(node, expr) {
        const decl = expr.type === \\"Identifier\\" ? this.tsParseExpressionStatement(node, expr) : void 0;
        return decl || super.parseExpressionStatement(node, expr);
      }
      shouldParseExportDeclaration() {
        if (this.tsIsDeclarationStart())
          return true;
        return super.shouldParseExportDeclaration();
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (!this.state.maybeInArrowParameters || !this.match(17)) {
          return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);
        }
        const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));
        if (!result.node) {
          if (result.error) {
            super.setOptionalParametersError(refExpressionErrors, result.error);
          }
          return expr;
        }
        if (result.error)
          this.state = result.failState;
        return result.node;
      }
      parseParenItem(node, startPos, startLoc) {
        node = super.parseParenItem(node, startPos, startLoc);
        if (this.eat(17)) {
          node.optional = true;
          this.resetEndLocation(node);
        }
        if (this.match(14)) {
          const typeCastNode = this.startNodeAt(startPos, startLoc);
          typeCastNode.expression = node;
          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
          return this.finishNode(typeCastNode, \\"TSTypeCastExpression\\");
        }
        return node;
      }
      parseExportDeclaration(node) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const isDeclare = this.eatContextual(117);
        if (isDeclare && (this.isContextual(117) || !this.shouldParseExportDeclaration())) {
          throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {
            at: this.state.startLoc
          });
        }
        let declaration;
        if (tokenIsIdentifier(this.state.type)) {
          declaration = this.tsTryParseExportDeclaration();
        }
        if (!declaration) {
          declaration = super.parseExportDeclaration(node);
        }
        if (declaration && (declaration.type === \\"TSInterfaceDeclaration\\" || declaration.type === \\"TSTypeAliasDeclaration\\" || isDeclare)) {
          node.exportKind = \\"type\\";
        }
        if (declaration && isDeclare) {
          this.resetStartLocation(declaration, startPos, startLoc);
          declaration.declare = true;
        }
        return declaration;
      }
      parseClassId(node, isStatement, optionalId) {
        if ((!isStatement || optionalId) && this.isContextual(106)) {
          return;
        }
        super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          node.typeParameters = typeParameters;
      }
      parseClassPropertyAnnotation(node) {
        if (!node.optional && this.eat(35)) {
          node.definite = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          node.typeAnnotation = type;
      }
      parseClassProperty(node) {
        this.parseClassPropertyAnnotation(node);
        if (this.state.isAmbientContext && this.match(29)) {
          this.raise(TSErrors.DeclareClassFieldHasInitializer, {
            at: this.state.startLoc
          });
        }
        if (node.abstract && this.match(29)) {
          const {
            key
          } = node;
          this.raise(TSErrors.AbstractPropertyHasInitializer, {
            at: this.state.startLoc
          }, key.type === \\"Identifier\\" && !node.computed ? key.name : \`[\${this.input.slice(key.start, key.end)}]\`);
        }
        return super.parseClassProperty(node);
      }
      parseClassPrivateProperty(node) {
        if (node.abstract) {
          this.raise(TSErrors.PrivateElementHasAbstract, {
            node
          });
        }
        if (node.accessibility) {
          this.raise(TSErrors.PrivateElementHasAccessibility, {
            node
          }, node.accessibility);
        }
        this.parseClassPropertyAnnotation(node);
        return super.parseClassPrivateProperty(node);
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters && isConstructor) {
          this.raise(TSErrors.ConstructorHasTypeParameters, {
            node: typeParameters
          });
        }
        if (method.declare && (method.kind === \\"get\\" || method.kind === \\"set\\")) {
          this.raise(TSErrors.DeclareAccessor, {
            node: method
          }, method.kind);
        }
        if (typeParameters)
          method.typeParameters = typeParameters;
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          method.typeParameters = typeParameters;
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
      }
      declareClassPrivateMethodInScope(node, kind) {
        if (node.type === \\"TSDeclareMethod\\")
          return;
        if (node.type === \\"MethodDefinition\\" && !node.value.body)
          return;
        super.declareClassPrivateMethodInScope(node, kind);
      }
      parseClassSuper(node) {
        super.parseClassSuper(node);
        if (node.superClass && this.match(45)) {
          node.superTypeParameters = this.tsParseTypeArguments();
        }
        if (this.eatContextual(106)) {
          node.implements = this.tsParseHeritageClause(\\"implements\\");
        }
      }
      parseObjPropValue(prop, ...args) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          prop.typeParameters = typeParameters;
        super.parseObjPropValue(prop, ...args);
      }
      parseFunctionParams(node, allowModifiers) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          node.typeParameters = typeParameters;
        super.parseFunctionParams(node, allowModifiers);
      }
      parseVarId(decl, kind) {
        super.parseVarId(decl, kind);
        if (decl.id.type === \\"Identifier\\" && !this.hasPrecedingLineBreak() && this.eat(35)) {
          decl.definite = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type) {
          decl.id.typeAnnotation = type;
          this.resetEndLocation(decl.id);
        }
      }
      parseAsyncArrowFromCallExpression(node, call) {
        if (this.match(14)) {
          node.returnType = this.tsParseTypeAnnotation();
        }
        return super.parseAsyncArrowFromCallExpression(node, call);
      }
      parseMaybeAssign(...args) {
        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;
        let state;
        let jsx2;
        let typeCast;
        if (this.hasPlugin(\\"jsx\\") && (this.match(134) || this.match(45))) {
          state = this.state.clone();
          jsx2 = this.tryParse(() => super.parseMaybeAssign(...args), state);
          if (!jsx2.error)
            return jsx2.node;
          const {
            context
          } = this.state;
          const currentContext = context[context.length - 1];
          if (currentContext === types.j_oTag || currentContext === types.j_expr) {
            context.pop();
          }
        }
        if (!((_jsx = jsx2) != null && _jsx.error) && !this.match(45)) {
          return super.parseMaybeAssign(...args);
        }
        let typeParameters;
        state = state || this.state.clone();
        const arrow = this.tryParse((abort) => {
          var _expr$extra, _typeParameters;
          typeParameters = this.tsParseTypeParameters();
          const expr = super.parseMaybeAssign(...args);
          if (expr.type !== \\"ArrowFunctionExpression\\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
            abort();
          }
          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
            this.resetStartLocationFromNode(expr, typeParameters);
          }
          expr.typeParameters = typeParameters;
          return expr;
        }, state);
        if (!arrow.error && !arrow.aborted) {
          if (typeParameters)
            this.reportReservedArrowTypeParam(typeParameters);
          return arrow.node;
        }
        if (!jsx2) {
          assert(!this.hasPlugin(\\"jsx\\"));
          typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);
          if (!typeCast.error)
            return typeCast.node;
        }
        if ((_jsx2 = jsx2) != null && _jsx2.node) {
          this.state = jsx2.failState;
          return jsx2.node;
        }
        if (arrow.node) {
          this.state = arrow.failState;
          if (typeParameters)
            this.reportReservedArrowTypeParam(typeParameters);
          return arrow.node;
        }
        if ((_typeCast = typeCast) != null && _typeCast.node) {
          this.state = typeCast.failState;
          return typeCast.node;
        }
        if ((_jsx3 = jsx2) != null && _jsx3.thrown)
          throw jsx2.error;
        if (arrow.thrown)
          throw arrow.error;
        if ((_typeCast2 = typeCast) != null && _typeCast2.thrown)
          throw typeCast.error;
        throw ((_jsx4 = jsx2) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);
      }
      reportReservedArrowTypeParam(node) {
        var _node$extra;
        if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\\"typescript\\", \\"disallowAmbiguousJSXLike\\")) {
          this.raise(TSErrors.ReservedArrowTypeParam, {
            node
          });
        }
      }
      parseMaybeUnary(refExpressionErrors) {
        if (!this.hasPlugin(\\"jsx\\") && this.match(45)) {
          return this.tsParseTypeAssertion();
        } else {
          return super.parseMaybeUnary(refExpressionErrors);
        }
      }
      parseArrow(node) {
        if (this.match(14)) {
          const result = this.tryParse((abort) => {
            const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
            if (this.canInsertSemicolon() || !this.match(19))
              abort();
            return returnType;
          });
          if (result.aborted)
            return;
          if (!result.thrown) {
            if (result.error)
              this.state = result.failState;
            node.returnType = result.node;
          }
        }
        return super.parseArrow(node);
      }
      parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
          if (param.type !== \\"Identifier\\" && !this.state.isAmbientContext && !this.state.inType) {
            this.raise(TSErrors.PatternIsOptional, {
              node: param
            });
          }
          param.optional = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          param.typeAnnotation = type;
        this.resetEndLocation(param);
        return param;
      }
      isAssignable(node, isBinding) {
        switch (node.type) {
          case \\"TSTypeCastExpression\\":
            return this.isAssignable(node.expression, isBinding);
          case \\"TSParameterProperty\\":
            return true;
          default:
            return super.isAssignable(node, isBinding);
        }
      }
      toAssignable(node, isLHS = false) {
        switch (node.type) {
          case \\"TSTypeCastExpression\\":
            return super.toAssignable(this.typeCastToParameter(node), isLHS);
          case \\"TSParameterProperty\\":
            return super.toAssignable(node, isLHS);
          case \\"ParenthesizedExpression\\":
            return this.toAssignableParenthesizedExpression(node, isLHS);
          case \\"TSAsExpression\\":
          case \\"TSNonNullExpression\\":
          case \\"TSTypeAssertion\\":
            node.expression = this.toAssignable(node.expression, isLHS);
            return node;
          default:
            return super.toAssignable(node, isLHS);
        }
      }
      toAssignableParenthesizedExpression(node, isLHS) {
        switch (node.expression.type) {
          case \\"TSAsExpression\\":
          case \\"TSNonNullExpression\\":
          case \\"TSTypeAssertion\\":
          case \\"ParenthesizedExpression\\":
            node.expression = this.toAssignable(node.expression, isLHS);
            return node;
          default:
            return super.toAssignable(node, isLHS);
        }
      }
      checkLVal(expr, contextDescription, ...args) {
        var _expr$extra2;
        switch (expr.type) {
          case \\"TSTypeCastExpression\\":
            return;
          case \\"TSParameterProperty\\":
            this.checkLVal(expr.parameter, \\"parameter property\\", ...args);
            return;
          case \\"TSAsExpression\\":
          case \\"TSTypeAssertion\\":
            if (!args[0] && contextDescription !== \\"parenthesized expression\\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {
              this.raise(ErrorMessages.InvalidLhs, {
                node: expr
              }, contextDescription);
              break;
            }
            this.checkLVal(expr.expression, \\"parenthesized expression\\", ...args);
            return;
          case \\"TSNonNullExpression\\":
            this.checkLVal(expr.expression, contextDescription, ...args);
            return;
          default:
            super.checkLVal(expr, contextDescription, ...args);
            return;
        }
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 74:
            return this.parseIdentifier(true);
          default:
            return super.parseBindingAtom();
        }
      }
      parseMaybeDecoratorArguments(expr) {
        if (this.match(45)) {
          const typeArguments = this.tsParseTypeArguments();
          if (this.match(10)) {
            const call = super.parseMaybeDecoratorArguments(expr);
            call.typeParameters = typeArguments;
            return call;
          }
          this.unexpected(null, 10);
        }
        return super.parseMaybeDecoratorArguments(expr);
      }
      checkCommaAfterRest(close) {
        if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
          this.next();
          return false;
        } else {
          return super.checkCommaAfterRest(close);
        }
      }
      isClassMethod() {
        return this.match(45) || super.isClassMethod();
      }
      isClassProperty() {
        return this.match(35) || this.match(14) || super.isClassProperty();
      }
      parseMaybeDefault(...args) {
        const node = super.parseMaybeDefault(...args);
        if (node.type === \\"AssignmentPattern\\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
          this.raise(TSErrors.TypeAnnotationAfterAssign, {
            node: node.typeAnnotation
          });
        }
        return node;
      }
      getTokenFromCode(code) {
        if (this.state.inType) {
          if (code === 62) {
            return this.finishOp(46, 1);
          }
          if (code === 60) {
            return this.finishOp(45, 1);
          }
        }
        return super.getTokenFromCode(code);
      }
      reScan_lt_gt() {
        const {
          type
        } = this.state;
        if (type === 45) {
          this.state.pos -= 1;
          this.readToken_lt();
        } else if (type === 46) {
          this.state.pos -= 1;
          this.readToken_gt();
        }
      }
      toAssignableList(exprList) {
        for (let i = 0; i < exprList.length; i++) {
          const expr = exprList[i];
          if (!expr)
            continue;
          switch (expr.type) {
            case \\"TSTypeCastExpression\\":
              exprList[i] = this.typeCastToParameter(expr);
              break;
            case \\"TSAsExpression\\":
            case \\"TSTypeAssertion\\":
              if (!this.state.maybeInArrowParameters) {
                exprList[i] = this.typeCastToParameter(expr);
              } else {
                this.raise(TSErrors.UnexpectedTypeCastInParameter, {
                  node: expr
                });
              }
              break;
          }
        }
        return super.toAssignableList(...arguments);
      }
      typeCastToParameter(node) {
        node.expression.typeAnnotation = node.typeAnnotation;
        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
        return node.expression;
      }
      shouldParseArrow(params) {
        if (this.match(14)) {
          return params.every((expr) => this.isAssignable(expr, true));
        }
        return super.shouldParseArrow(params);
      }
      shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
      }
      canHaveLeadingDecorator() {
        return super.canHaveLeadingDecorator() || this.isAbstractClass();
      }
      jsxParseOpeningElementAfterName(node) {
        if (this.match(45)) {
          const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());
          if (typeArguments)
            node.typeParameters = typeArguments;
        }
        return super.jsxParseOpeningElementAfterName(node);
      }
      getGetterSetterExpectedParamCount(method) {
        const baseCount = super.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        const firstParam = params[0];
        const hasContextParam = firstParam && this.isThisParam(firstParam);
        return hasContextParam ? baseCount + 1 : baseCount;
      }
      parseCatchClauseParam() {
        const param = super.parseCatchClauseParam();
        const type = this.tsTryParseTypeAnnotation();
        if (type) {
          param.typeAnnotation = type;
          this.resetEndLocation(param);
        }
        return param;
      }
      tsInAmbientContext(cb) {
        const oldIsAmbientContext = this.state.isAmbientContext;
        this.state.isAmbientContext = true;
        try {
          return cb();
        } finally {
          this.state.isAmbientContext = oldIsAmbientContext;
        }
      }
      parseClass(node, ...args) {
        const oldInAbstractClass = this.state.inAbstractClass;
        this.state.inAbstractClass = !!node.abstract;
        try {
          return super.parseClass(node, ...args);
        } finally {
          this.state.inAbstractClass = oldInAbstractClass;
        }
      }
      tsParseAbstractDeclaration(node) {
        if (this.match(76)) {
          node.abstract = true;
          return this.parseClass(node, true, false);
        } else if (this.isContextual(121)) {
          if (!this.hasFollowingLineBreak()) {
            node.abstract = true;
            this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {
              node
            });
            this.next();
            return this.tsParseInterfaceDeclaration(node);
          }
        } else {
          this.unexpected(null, 76);
        }
      }
      parseMethod(...args) {
        const method = super.parseMethod(...args);
        if (method.abstract) {
          const hasBody = this.hasPlugin(\\"estree\\") ? !!method.value.body : !!method.body;
          if (hasBody) {
            const {
              key
            } = method;
            this.raise(TSErrors.AbstractMethodHasImplementation, {
              node: method
            }, key.type === \\"Identifier\\" && !method.computed ? key.name : \`[\${this.input.slice(key.start, key.end)}]\`);
          }
        }
        return method;
      }
      tsParseTypeParameterName() {
        const typeName = this.parseIdentifier();
        return typeName.name;
      }
      shouldParseAsAmbientContext() {
        return !!this.getPluginOption(\\"typescript\\", \\"dts\\");
      }
      parse() {
        if (this.shouldParseAsAmbientContext()) {
          this.state.isAmbientContext = true;
        }
        return super.parse();
      }
      getExpression() {
        if (this.shouldParseAsAmbientContext()) {
          this.state.isAmbientContext = true;
        }
        return super.getExpression();
      }
      parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
        if (!isString && isMaybeTypeOnly) {
          this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
          return this.finishNode(node, \\"ExportSpecifier\\");
        }
        node.exportKind = \\"value\\";
        return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        if (!importedIsString && isMaybeTypeOnly) {
          this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
          return this.finishNode(specifier, \\"ImportSpecifier\\");
        }
        specifier.importKind = \\"value\\";
        return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);
      }
      parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
        const leftOfAsKey = isImport ? \\"imported\\" : \\"local\\";
        const rightOfAsKey = isImport ? \\"local\\" : \\"exported\\";
        let leftOfAs = node[leftOfAsKey];
        let rightOfAs;
        let hasTypeSpecifier = false;
        let canParseAsKeyword = true;
        const loc = leftOfAs.loc.start;
        if (this.isContextual(89)) {
          const firstAs = this.parseIdentifier();
          if (this.isContextual(89)) {
            const secondAs = this.parseIdentifier();
            if (tokenIsKeywordOrIdentifier(this.state.type)) {
              hasTypeSpecifier = true;
              leftOfAs = firstAs;
              rightOfAs = this.parseIdentifier();
              canParseAsKeyword = false;
            } else {
              rightOfAs = secondAs;
              canParseAsKeyword = false;
            }
          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            canParseAsKeyword = false;
            rightOfAs = this.parseIdentifier();
          } else {
            hasTypeSpecifier = true;
            leftOfAs = firstAs;
          }
        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
          hasTypeSpecifier = true;
          leftOfAs = this.parseIdentifier();
        }
        if (hasTypeSpecifier && isInTypeOnlyImportExport) {
          this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {
            at: loc
          });
        }
        node[leftOfAsKey] = leftOfAs;
        node[rightOfAsKey] = rightOfAs;
        const kindKey = isImport ? \\"importKind\\" : \\"exportKind\\";
        node[kindKey] = hasTypeSpecifier ? \\"type\\" : \\"value\\";
        if (canParseAsKeyword && this.eatContextual(89)) {
          node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
        }
        if (!node[rightOfAsKey]) {
          node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
        }
        if (isImport) {
          this.checkLVal(node[rightOfAsKey], \\"import specifier\\", BIND_LEXICAL);
        }
      }
    };
    var PlaceholderErrors = makeErrorTemplates({
      ClassNameIsRequired: \\"A class name is required.\\"
    }, ErrorCodes.SyntaxError, \\"placeholders\\");
    var placeholders = (superClass) => class extends superClass {
      parsePlaceholder(expectedNode) {
        if (this.match(136)) {
          const node = this.startNode();
          this.next();
          this.assertNoSpace(\\"Unexpected space in placeholder.\\");
          node.name = super.parseIdentifier(true);
          this.assertNoSpace(\\"Unexpected space in placeholder.\\");
          this.expect(136);
          return this.finishPlaceholder(node, expectedNode);
        }
      }
      finishPlaceholder(node, expectedNode) {
        const isFinished = !!(node.expectedNode && node.type === \\"Placeholder\\");
        node.expectedNode = expectedNode;
        return isFinished ? node : this.finishNode(node, \\"Placeholder\\");
      }
      getTokenFromCode(code) {
        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
          return this.finishOp(136, 2);
        }
        return super.getTokenFromCode(...arguments);
      }
      parseExprAtom() {
        return this.parsePlaceholder(\\"Expression\\") || super.parseExprAtom(...arguments);
      }
      parseIdentifier() {
        return this.parsePlaceholder(\\"Identifier\\") || super.parseIdentifier(...arguments);
      }
      checkReservedWord(word) {
        if (word !== void 0)
          super.checkReservedWord(...arguments);
      }
      parseBindingAtom() {
        return this.parsePlaceholder(\\"Pattern\\") || super.parseBindingAtom(...arguments);
      }
      checkLVal(expr) {
        if (expr.type !== \\"Placeholder\\")
          super.checkLVal(...arguments);
      }
      toAssignable(node) {
        if (node && node.type === \\"Placeholder\\" && node.expectedNode === \\"Expression\\") {
          node.expectedNode = \\"Pattern\\";
          return node;
        }
        return super.toAssignable(...arguments);
      }
      isLet(context) {
        if (super.isLet(context)) {
          return true;
        }
        if (!this.isContextual(95)) {
          return false;
        }
        if (context)
          return false;
        const nextToken = this.lookahead();
        if (nextToken.type === 136) {
          return true;
        }
        return false;
      }
      verifyBreakContinue(node) {
        if (node.label && node.label.type === \\"Placeholder\\")
          return;
        super.verifyBreakContinue(...arguments);
      }
      parseExpressionStatement(node, expr) {
        if (expr.type !== \\"Placeholder\\" || expr.extra && expr.extra.parenthesized) {
          return super.parseExpressionStatement(...arguments);
        }
        if (this.match(14)) {
          const stmt = node;
          stmt.label = this.finishPlaceholder(expr, \\"Identifier\\");
          this.next();
          stmt.body = this.parseStatement(\\"label\\");
          return this.finishNode(stmt, \\"LabeledStatement\\");
        }
        this.semicolon();
        node.name = expr.name;
        return this.finishPlaceholder(node, \\"Statement\\");
      }
      parseBlock() {
        return this.parsePlaceholder(\\"BlockStatement\\") || super.parseBlock(...arguments);
      }
      parseFunctionId() {
        return this.parsePlaceholder(\\"Identifier\\") || super.parseFunctionId(...arguments);
      }
      parseClass(node, isStatement, optionalId) {
        const type = isStatement ? \\"ClassDeclaration\\" : \\"ClassExpression\\";
        this.next();
        this.takeDecorators(node);
        const oldStrict = this.state.strict;
        const placeholder = this.parsePlaceholder(\\"Identifier\\");
        if (placeholder) {
          if (this.match(77) || this.match(136) || this.match(5)) {
            node.id = placeholder;
          } else if (optionalId || !isStatement) {
            node.id = null;
            node.body = this.finishPlaceholder(placeholder, \\"ClassBody\\");
            return this.finishNode(node, type);
          } else {
            throw this.raise(PlaceholderErrors.ClassNameIsRequired, {
              at: this.state.startLoc
            });
          }
        } else {
          this.parseClassId(node, isStatement, optionalId);
        }
        this.parseClassSuper(node);
        node.body = this.parsePlaceholder(\\"ClassBody\\") || this.parseClassBody(!!node.superClass, oldStrict);
        return this.finishNode(node, type);
      }
      parseExport(node) {
        const placeholder = this.parsePlaceholder(\\"Identifier\\");
        if (!placeholder)
          return super.parseExport(...arguments);
        if (!this.isContextual(93) && !this.match(12)) {
          node.specifiers = [];
          node.source = null;
          node.declaration = this.finishPlaceholder(placeholder, \\"Declaration\\");
          return this.finishNode(node, \\"ExportNamedDeclaration\\");
        }
        this.expectPlugin(\\"exportDefaultFrom\\");
        const specifier = this.startNode();
        specifier.exported = placeholder;
        node.specifiers = [this.finishNode(specifier, \\"ExportDefaultSpecifier\\")];
        return super.parseExport(node);
      }
      isExportDefaultSpecifier() {
        if (this.match(61)) {
          const next = this.nextTokenStart();
          if (this.isUnparsedContextual(next, \\"from\\")) {
            if (this.input.startsWith(tokenLabelName(136), this.nextTokenStartSince(next + 4))) {
              return true;
            }
          }
        }
        return super.isExportDefaultSpecifier();
      }
      maybeParseExportDefaultSpecifier(node) {
        if (node.specifiers && node.specifiers.length > 0) {
          return true;
        }
        return super.maybeParseExportDefaultSpecifier(...arguments);
      }
      checkExport(node) {
        const {
          specifiers
        } = node;
        if (specifiers != null && specifiers.length) {
          node.specifiers = specifiers.filter((node2) => node2.exported.type === \\"Placeholder\\");
        }
        super.checkExport(node);
        node.specifiers = specifiers;
      }
      parseImport(node) {
        const placeholder = this.parsePlaceholder(\\"Identifier\\");
        if (!placeholder)
          return super.parseImport(...arguments);
        node.specifiers = [];
        if (!this.isContextual(93) && !this.match(12)) {
          node.source = this.finishPlaceholder(placeholder, \\"StringLiteral\\");
          this.semicolon();
          return this.finishNode(node, \\"ImportDeclaration\\");
        }
        const specifier = this.startNodeAtNode(placeholder);
        specifier.local = placeholder;
        this.finishNode(specifier, \\"ImportDefaultSpecifier\\");
        node.specifiers.push(specifier);
        if (this.eat(12)) {
          const hasStarImport = this.maybeParseStarImportSpecifier(node);
          if (!hasStarImport)
            this.parseNamedImportSpecifiers(node);
        }
        this.expectContextual(93);
        node.source = this.parseImportSource();
        this.semicolon();
        return this.finishNode(node, \\"ImportDeclaration\\");
      }
      parseImportSource() {
        return this.parsePlaceholder(\\"StringLiteral\\") || super.parseImportSource(...arguments);
      }
    };
    var v8intrinsic = (superClass) => class extends superClass {
      parseV8Intrinsic() {
        if (this.match(50)) {
          const v8IntrinsicStartLoc = this.state.startLoc;
          const node = this.startNode();
          this.next();
          if (tokenIsIdentifier(this.state.type)) {
            const name = this.parseIdentifierName(this.state.start);
            const identifier = this.createIdentifier(node, name);
            identifier.type = \\"V8IntrinsicIdentifier\\";
            if (this.match(10)) {
              return identifier;
            }
          }
          this.unexpected(v8IntrinsicStartLoc);
        }
      }
      parseExprAtom() {
        return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
      }
    };
    function hasPlugin(plugins, expectedConfig) {
      const [expectedName, expectedOptions] = typeof expectedConfig === \\"string\\" ? [expectedConfig, {}] : expectedConfig;
      const expectedKeys = Object.keys(expectedOptions);
      const expectedOptionsIsEmpty = expectedKeys.length === 0;
      return plugins.some((p) => {
        if (typeof p === \\"string\\") {
          return expectedOptionsIsEmpty && p === expectedName;
        } else {
          const [pluginName, pluginOptions] = p;
          if (pluginName !== expectedName) {
            return false;
          }
          for (const key of expectedKeys) {
            if (pluginOptions[key] !== expectedOptions[key]) {
              return false;
            }
          }
          return true;
        }
      });
    }
    function getPluginOption(plugins, name, option) {
      const plugin = plugins.find((plugin2) => {
        if (Array.isArray(plugin2)) {
          return plugin2[0] === name;
        } else {
          return plugin2 === name;
        }
      });
      if (plugin && Array.isArray(plugin)) {
        return plugin[1][option];
      }
      return null;
    }
    var PIPELINE_PROPOSALS = [\\"minimal\\", \\"fsharp\\", \\"hack\\", \\"smart\\"];
    var TOPIC_TOKENS = [\\"^\\", \\"%\\", \\"#\\"];
    var RECORD_AND_TUPLE_SYNTAX_TYPES = [\\"hash\\", \\"bar\\"];
    function validatePlugins(plugins) {
      if (hasPlugin(plugins, \\"decorators\\")) {
        if (hasPlugin(plugins, \\"decorators-legacy\\")) {
          throw new Error(\\"Cannot use the decorators and decorators-legacy plugin together\\");
        }
        const decoratorsBeforeExport = getPluginOption(plugins, \\"decorators\\", \\"decoratorsBeforeExport\\");
        if (decoratorsBeforeExport == null) {
          throw new Error(\\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.\\");
        } else if (typeof decoratorsBeforeExport !== \\"boolean\\") {
          throw new Error(\\"'decoratorsBeforeExport' must be a boolean.\\");
        }
      }
      if (hasPlugin(plugins, \\"flow\\") && hasPlugin(plugins, \\"typescript\\")) {
        throw new Error(\\"Cannot combine flow and typescript plugins.\\");
      }
      if (hasPlugin(plugins, \\"placeholders\\") && hasPlugin(plugins, \\"v8intrinsic\\")) {
        throw new Error(\\"Cannot combine placeholders and v8intrinsic plugins.\\");
      }
      if (hasPlugin(plugins, \\"pipelineOperator\\")) {
        const proposal = getPluginOption(plugins, \\"pipelineOperator\\", \\"proposal\\");
        if (!PIPELINE_PROPOSALS.includes(proposal)) {
          const proposalList = PIPELINE_PROPOSALS.map((p) => \`\\"\${p}\\"\`).join(\\", \\");
          throw new Error(\`\\"pipelineOperator\\" requires \\"proposal\\" option whose value must be one of: \${proposalList}.\`);
        }
        const tupleSyntaxIsHash = hasPlugin(plugins, [\\"recordAndTuple\\", {
          syntaxType: \\"hash\\"
        }]);
        if (proposal === \\"hack\\") {
          if (hasPlugin(plugins, \\"placeholders\\")) {
            throw new Error(\\"Cannot combine placeholders plugin and Hack-style pipes.\\");
          }
          if (hasPlugin(plugins, \\"v8intrinsic\\")) {
            throw new Error(\\"Cannot combine v8intrinsic plugin and Hack-style pipes.\\");
          }
          const topicToken = getPluginOption(plugins, \\"pipelineOperator\\", \\"topicToken\\");
          if (!TOPIC_TOKENS.includes(topicToken)) {
            const tokenList = TOPIC_TOKENS.map((t) => \`\\"\${t}\\"\`).join(\\", \\");
            throw new Error(\`\\"pipelineOperator\\" in \\"proposal\\": \\"hack\\" mode also requires a \\"topicToken\\" option whose value must be one of: \${tokenList}.\`);
          }
          if (topicToken === \\"#\\" && tupleSyntaxIsHash) {
            throw new Error('Plugin conflict between \`[\\"pipelineOperator\\", { proposal: \\"hack\\", topicToken: \\"#\\" }]\` and \`[\\"recordAndtuple\\", { syntaxType: \\"hash\\"}]\`.');
          }
        } else if (proposal === \\"smart\\" && tupleSyntaxIsHash) {
          throw new Error('Plugin conflict between \`[\\"pipelineOperator\\", { proposal: \\"smart\\" }]\` and \`[\\"recordAndtuple\\", { syntaxType: \\"hash\\"}]\`.');
        }
      }
      if (hasPlugin(plugins, \\"moduleAttributes\\")) {
        {
          if (hasPlugin(plugins, \\"importAssertions\\")) {
            throw new Error(\\"Cannot combine importAssertions and moduleAttributes plugins.\\");
          }
          const moduleAttributesVerionPluginOption = getPluginOption(plugins, \\"moduleAttributes\\", \\"version\\");
          if (moduleAttributesVerionPluginOption !== \\"may-2020\\") {
            throw new Error(\\"The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.\\");
          }
        }
      }
      if (hasPlugin(plugins, \\"recordAndTuple\\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \\"recordAndTuple\\", \\"syntaxType\\"))) {
        throw new Error(\\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \\" + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => \`'\${p}'\`).join(\\", \\"));
      }
      if (hasPlugin(plugins, \\"asyncDoExpressions\\") && !hasPlugin(plugins, \\"doExpressions\\")) {
        const error = new Error(\\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\\");
        error.missingPlugins = \\"doExpressions\\";
        throw error;
      }
    }
    var mixinPlugins = {
      estree,
      jsx,
      flow,
      typescript,
      v8intrinsic,
      placeholders
    };
    var mixinPluginNames = Object.keys(mixinPlugins);
    var defaultOptions = {
      sourceType: \\"script\\",
      sourceFilename: void 0,
      startColumn: 0,
      startLine: 1,
      allowAwaitOutsideFunction: false,
      allowReturnOutsideFunction: false,
      allowImportExportEverywhere: false,
      allowSuperOutsideMethod: false,
      allowUndeclaredExports: false,
      plugins: [],
      strictMode: null,
      ranges: false,
      tokens: false,
      createParenthesizedExpressions: false,
      errorRecovery: false,
      attachComment: true
    };
    function getOptions(opts) {
      const options = {};
      for (const key of Object.keys(defaultOptions)) {
        options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];
      }
      return options;
    }
    var unwrapParenthesizedExpression = (node) => {
      return node.type === \\"ParenthesizedExpression\\" ? unwrapParenthesizedExpression(node.expression) : node;
    };
    var LValParser = class extends NodeUtils {
      toAssignable(node, isLHS = false) {
        var _node$extra, _node$extra3;
        let parenthesized = void 0;
        if (node.type === \\"ParenthesizedExpression\\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
          parenthesized = unwrapParenthesizedExpression(node);
          if (isLHS) {
            if (parenthesized.type === \\"Identifier\\") {
              this.expressionScope.recordParenthesizedIdentifierError(ErrorMessages.InvalidParenthesizedAssignment, node.loc.start);
            } else if (parenthesized.type !== \\"MemberExpression\\") {
              this.raise(ErrorMessages.InvalidParenthesizedAssignment, {
                node
              });
            }
          } else {
            this.raise(ErrorMessages.InvalidParenthesizedAssignment, {
              node
            });
          }
        }
        switch (node.type) {
          case \\"Identifier\\":
          case \\"ObjectPattern\\":
          case \\"ArrayPattern\\":
          case \\"AssignmentPattern\\":
          case \\"RestElement\\":
            break;
          case \\"ObjectExpression\\":
            node.type = \\"ObjectPattern\\";
            for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
              var _node$extra2;
              const prop = node.properties[i];
              const isLast = i === last;
              this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
              if (isLast && prop.type === \\"RestElement\\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
                this.raise(ErrorMessages.RestTrailingComma, {
                  at: node.extra.trailingCommaLoc
                });
              }
            }
            break;
          case \\"ObjectProperty\\":
            this.toAssignable(node.value, isLHS);
            break;
          case \\"SpreadElement\\": {
            this.checkToRestConversion(node);
            node.type = \\"RestElement\\";
            const arg = node.argument;
            this.toAssignable(arg, isLHS);
            break;
          }
          case \\"ArrayExpression\\":
            node.type = \\"ArrayPattern\\";
            this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
            break;
          case \\"AssignmentExpression\\":
            if (node.operator !== \\"=\\") {
              this.raise(ErrorMessages.MissingEqInAssignment, {
                at: node.left.loc.end
              });
            }
            node.type = \\"AssignmentPattern\\";
            delete node.operator;
            this.toAssignable(node.left, isLHS);
            break;
          case \\"ParenthesizedExpression\\":
            this.toAssignable(parenthesized, isLHS);
            break;
        }
        return node;
      }
      toAssignableObjectExpressionProp(prop, isLast, isLHS) {
        if (prop.type === \\"ObjectMethod\\") {
          this.raise(prop.kind === \\"get\\" || prop.kind === \\"set\\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod, {
            node: prop.key
          });
        } else if (prop.type === \\"SpreadElement\\" && !isLast) {
          this.raise(ErrorMessages.RestTrailingComma, {
            node: prop
          });
        } else {
          this.toAssignable(prop, isLHS);
        }
      }
      toAssignableList(exprList, trailingCommaLoc, isLHS) {
        let end = exprList.length;
        if (end) {
          const last = exprList[end - 1];
          if ((last == null ? void 0 : last.type) === \\"RestElement\\") {
            --end;
          } else if ((last == null ? void 0 : last.type) === \\"SpreadElement\\") {
            last.type = \\"RestElement\\";
            let arg = last.argument;
            this.toAssignable(arg, isLHS);
            arg = unwrapParenthesizedExpression(arg);
            if (arg.type !== \\"Identifier\\" && arg.type !== \\"MemberExpression\\" && arg.type !== \\"ArrayPattern\\" && arg.type !== \\"ObjectPattern\\") {
              this.unexpected(arg.start);
            }
            if (trailingCommaLoc) {
              this.raise(ErrorMessages.RestTrailingComma, {
                at: trailingCommaLoc
              });
            }
            --end;
          }
        }
        for (let i = 0; i < end; i++) {
          const elt = exprList[i];
          if (elt) {
            this.toAssignable(elt, isLHS);
            if (elt.type === \\"RestElement\\") {
              this.raise(ErrorMessages.RestTrailingComma, {
                node: elt
              });
            }
          }
        }
        return exprList;
      }
      isAssignable(node, isBinding) {
        switch (node.type) {
          case \\"Identifier\\":
          case \\"ObjectPattern\\":
          case \\"ArrayPattern\\":
          case \\"AssignmentPattern\\":
          case \\"RestElement\\":
            return true;
          case \\"ObjectExpression\\": {
            const last = node.properties.length - 1;
            return node.properties.every((prop, i) => {
              return prop.type !== \\"ObjectMethod\\" && (i === last || prop.type !== \\"SpreadElement\\") && this.isAssignable(prop);
            });
          }
          case \\"ObjectProperty\\":
            return this.isAssignable(node.value);
          case \\"SpreadElement\\":
            return this.isAssignable(node.argument);
          case \\"ArrayExpression\\":
            return node.elements.every((element) => element === null || this.isAssignable(element));
          case \\"AssignmentExpression\\":
            return node.operator === \\"=\\";
          case \\"ParenthesizedExpression\\":
            return this.isAssignable(node.expression);
          case \\"MemberExpression\\":
          case \\"OptionalMemberExpression\\":
            return !isBinding;
          default:
            return false;
        }
      }
      toReferencedList(exprList, isParenthesizedExpr) {
        return exprList;
      }
      toReferencedListDeep(exprList, isParenthesizedExpr) {
        this.toReferencedList(exprList, isParenthesizedExpr);
        for (const expr of exprList) {
          if ((expr == null ? void 0 : expr.type) === \\"ArrayExpression\\") {
            this.toReferencedListDeep(expr.elements);
          }
        }
      }
      parseSpread(refExpressionErrors, refNeedsArrowPos) {
        const node = this.startNode();
        this.next();
        node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0, refNeedsArrowPos);
        return this.finishNode(node, \\"SpreadElement\\");
      }
      parseRestBinding() {
        const node = this.startNode();
        this.next();
        node.argument = this.parseBindingAtom();
        return this.finishNode(node, \\"RestElement\\");
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 0: {
            const node = this.startNode();
            this.next();
            node.elements = this.parseBindingList(3, 93, true);
            return this.finishNode(node, \\"ArrayPattern\\");
          }
          case 5:
            return this.parseObjectLike(8, true);
        }
        return this.parseIdentifier();
      }
      parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
        const elts = [];
        let first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
          }
          if (allowEmpty && this.match(12)) {
            elts.push(null);
          } else if (this.eat(close)) {
            break;
          } else if (this.match(21)) {
            elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));
            if (!this.checkCommaAfterRest(closeCharCode)) {
              this.expect(close);
              break;
            }
          } else {
            const decorators = [];
            if (this.match(26) && this.hasPlugin(\\"decorators\\")) {
              this.raise(ErrorMessages.UnsupportedParameterDecorator, {
                at: this.state.startLoc
              });
            }
            while (this.match(26)) {
              decorators.push(this.parseDecorator());
            }
            elts.push(this.parseAssignableListItem(allowModifiers, decorators));
          }
        }
        return elts;
      }
      parseBindingRestProperty(prop) {
        this.next();
        prop.argument = this.parseIdentifier();
        this.checkCommaAfterRest(125);
        return this.finishNode(prop, \\"RestElement\\");
      }
      parseBindingProperty() {
        const prop = this.startNode();
        const {
          type,
          start: startPos,
          startLoc
        } = this.state;
        if (type === 21) {
          return this.parseBindingRestProperty(prop);
        } else {
          this.parsePropertyName(prop);
        }
        prop.method = false;
        this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);
        return prop;
      }
      parseAssignableListItem(allowModifiers, decorators) {
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
        if (decorators.length) {
          left.decorators = decorators;
        }
        return elt;
      }
      parseAssignableListItemTypes(param) {
        return param;
      }
      parseMaybeDefault(startPos, startLoc, left) {
        var _startLoc, _startPos, _left;
        startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;
        startPos = (_startPos = startPos) != null ? _startPos : this.state.start;
        left = (_left = left) != null ? _left : this.parseBindingAtom();
        if (!this.eat(29))
          return left;
        const node = this.startNodeAt(startPos, startLoc);
        node.left = left;
        node.right = this.parseMaybeAssignAllowIn();
        return this.finishNode(node, \\"AssignmentPattern\\");
      }
      checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {
        switch (expr.type) {
          case \\"Identifier\\": {
            const {
              name
            } = expr;
            if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {
              this.raise(bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, {
                node: expr
              }, name);
            }
            if (checkClashes) {
              if (checkClashes.has(name)) {
                this.raise(ErrorMessages.ParamDupe, {
                  node: expr
                });
              } else {
                checkClashes.add(name);
              }
            }
            if (disallowLetBinding && name === \\"let\\") {
              this.raise(ErrorMessages.LetInLexicalBinding, {
                node: expr
              });
            }
            if (!(bindingType & BIND_NONE)) {
              this.scope.declareName(name, bindingType, expr.loc.start);
            }
            break;
          }
          case \\"MemberExpression\\":
            if (bindingType !== BIND_NONE) {
              this.raise(ErrorMessages.InvalidPropertyBindingPattern, {
                node: expr
              });
            }
            break;
          case \\"ObjectPattern\\":
            for (let prop of expr.properties) {
              if (this.isObjectProperty(prop))
                prop = prop.value;
              else if (this.isObjectMethod(prop))
                continue;
              this.checkLVal(prop, \\"object destructuring pattern\\", bindingType, checkClashes, disallowLetBinding);
            }
            break;
          case \\"ArrayPattern\\":
            for (const elem of expr.elements) {
              if (elem) {
                this.checkLVal(elem, \\"array destructuring pattern\\", bindingType, checkClashes, disallowLetBinding);
              }
            }
            break;
          case \\"AssignmentPattern\\":
            this.checkLVal(expr.left, \\"assignment pattern\\", bindingType, checkClashes);
            break;
          case \\"RestElement\\":
            this.checkLVal(expr.argument, \\"rest element\\", bindingType, checkClashes);
            break;
          case \\"ParenthesizedExpression\\":
            this.checkLVal(expr.expression, \\"parenthesized expression\\", bindingType, checkClashes);
            break;
          default: {
            this.raise(bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, {
              node: expr
            }, contextDescription);
          }
        }
      }
      checkToRestConversion(node) {
        if (node.argument.type !== \\"Identifier\\" && node.argument.type !== \\"MemberExpression\\") {
          this.raise(ErrorMessages.InvalidRestAssignmentPattern, {
            node: node.argument
          });
        }
      }
      checkCommaAfterRest(close) {
        if (!this.match(12)) {
          return false;
        }
        this.raise(this.lookaheadCharCode() === close ? ErrorMessages.RestTrailingComma : ErrorMessages.ElementAfterRest, {
          at: this.state.startLoc
        });
        return true;
      }
    };
    var invalidHackPipeBodies = /* @__PURE__ */ new Map([[\\"ArrowFunctionExpression\\", \\"arrow function\\"], [\\"AssignmentExpression\\", \\"assignment\\"], [\\"ConditionalExpression\\", \\"conditional\\"], [\\"YieldExpression\\", \\"yield\\"]]);
    var ExpressionParser = class extends LValParser {
      checkProto(prop, isRecord, protoRef, refExpressionErrors) {
        if (prop.type === \\"SpreadElement\\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
          return;
        }
        const key = prop.key;
        const name = key.type === \\"Identifier\\" ? key.name : key.value;
        if (name === \\"__proto__\\") {
          if (isRecord) {
            this.raise(ErrorMessages.RecordNoProto, {
              node: key
            });
            return;
          }
          if (protoRef.used) {
            if (refExpressionErrors) {
              if (refExpressionErrors.doubleProtoLoc === null) {
                refExpressionErrors.doubleProtoLoc = key.loc.start;
              }
            } else {
              this.raise(ErrorMessages.DuplicateProto, {
                node: key
              });
            }
          }
          protoRef.used = true;
        }
      }
      shouldExitDescending(expr, potentialArrowAt) {
        return expr.type === \\"ArrowFunctionExpression\\" && expr.start === potentialArrowAt;
      }
      getExpression() {
        this.enterInitialScopes();
        this.nextToken();
        const expr = this.parseExpression();
        if (!this.match(131)) {
          this.unexpected();
        }
        this.finalizeRemainingComments();
        expr.comments = this.state.comments;
        expr.errors = this.state.errors;
        if (this.options.tokens) {
          expr.tokens = this.tokens;
        }
        return expr;
      }
      parseExpression(disallowIn, refExpressionErrors) {
        if (disallowIn) {
          return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
        }
        return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
      }
      parseExpressionBase(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const expr = this.parseMaybeAssign(refExpressionErrors);
        if (this.match(12)) {
          const node = this.startNodeAt(startPos, startLoc);
          node.expressions = [expr];
          while (this.eat(12)) {
            node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
          }
          this.toReferencedList(node.expressions);
          return this.finishNode(node, \\"SequenceExpression\\");
        }
        return expr;
      }
      parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
        return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
      }
      parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
        return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
      }
      setOptionalParametersError(refExpressionErrors, resultError) {
        var _resultError$loc;
        refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
      }
      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        if (this.isContextual(101)) {
          if (this.prodParam.hasYield) {
            let left2 = this.parseYield();
            if (afterLeftParse) {
              left2 = afterLeftParse.call(this, left2, startPos, startLoc);
            }
            return left2;
          }
        }
        let ownExpressionErrors;
        if (refExpressionErrors) {
          ownExpressionErrors = false;
        } else {
          refExpressionErrors = new ExpressionErrors();
          ownExpressionErrors = true;
        }
        const {
          type
        } = this.state;
        if (type === 10 || tokenIsIdentifier(type)) {
          this.state.potentialArrowAt = this.state.start;
        }
        let left = this.parseMaybeConditional(refExpressionErrors);
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }
        if (tokenIsAssignment(this.state.type)) {
          const node = this.startNodeAt(startPos, startLoc);
          const operator = this.state.value;
          node.operator = operator;
          if (this.match(29)) {
            node.left = this.toAssignable(left, true);
            if (refExpressionErrors.doubleProtoLoc != null && indexes.get(refExpressionErrors.doubleProtoLoc) >= startPos) {
              refExpressionErrors.doubleProtoLoc = null;
            }
            if (refExpressionErrors.shorthandAssignLoc != null && indexes.get(refExpressionErrors.shorthandAssignLoc) >= startPos) {
              refExpressionErrors.shorthandAssignLoc = null;
            }
          } else {
            node.left = left;
          }
          this.checkLVal(left, \\"assignment expression\\");
          this.next();
          node.right = this.parseMaybeAssign();
          return this.finishNode(node, \\"AssignmentExpression\\");
        } else if (ownExpressionErrors) {
          this.checkExpressionErrors(refExpressionErrors, true);
        }
        return left;
      }
      parseMaybeConditional(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprOps(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (this.eat(17)) {
          const node = this.startNodeAt(startPos, startLoc);
          node.test = expr;
          node.consequent = this.parseMaybeAssignAllowIn();
          this.expect(14);
          node.alternate = this.parseMaybeAssign();
          return this.finishNode(node, \\"ConditionalExpression\\");
        }
        return expr;
      }
      parseMaybeUnaryOrPrivate(refExpressionErrors) {
        return this.match(130) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
      }
      parseExprOps(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseExprOp(expr, startPos, startLoc, -1);
      }
      parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
        if (this.isPrivateName(left)) {
          const value = this.getPrivateNameSV(left);
          if (minPrec >= tokenOperatorPrecedence(54) || !this.prodParam.hasIn || !this.match(54)) {
            this.raise(ErrorMessages.PrivateInExpectedIn, {
              node: left
            }, value);
          }
          this.classScope.usePrivateName(value, left.loc.start);
        }
        const op = this.state.type;
        if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(54))) {
          let prec = tokenOperatorPrecedence(op);
          if (prec > minPrec) {
            if (op === 37) {
              this.expectPlugin(\\"pipelineOperator\\");
              if (this.state.inFSharpPipelineDirectBody) {
                return left;
              }
              this.checkPipelineAtInfixOperator(left, leftStartLoc);
            }
            const node = this.startNodeAt(leftStartPos, leftStartLoc);
            node.left = left;
            node.operator = this.state.value;
            const logical = op === 39 || op === 40;
            const coalesce = op === 38;
            if (coalesce) {
              prec = tokenOperatorPrecedence(40);
            }
            this.next();
            if (op === 37 && this.hasPlugin([\\"pipelineOperator\\", {
              proposal: \\"minimal\\"
            }])) {
              if (this.state.type === 92 && this.prodParam.hasAwait) {
                throw this.raise(ErrorMessages.UnexpectedAwaitAfterPipelineBody, {
                  at: this.state.startLoc
                });
              }
            }
            node.right = this.parseExprOpRightExpr(op, prec);
            this.finishNode(node, logical || coalesce ? \\"LogicalExpression\\" : \\"BinaryExpression\\");
            const nextOp = this.state.type;
            if (coalesce && (nextOp === 39 || nextOp === 40) || logical && nextOp === 38) {
              throw this.raise(ErrorMessages.MixingCoalesceWithLogical, {
                at: this.state.startLoc
              });
            }
            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
          }
        }
        return left;
      }
      parseExprOpRightExpr(op, prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        switch (op) {
          case 37:
            switch (this.getPluginOption(\\"pipelineOperator\\", \\"proposal\\")) {
              case \\"hack\\":
                return this.withTopicBindingContext(() => {
                  return this.parseHackPipeBody();
                });
              case \\"smart\\":
                return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(101)) {
                    throw this.raise(ErrorMessages.PipeBodyIsTighter, {
                      at: this.state.startLoc
                    }, this.state.value);
                  }
                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
                });
              case \\"fsharp\\":
                return this.withSoloAwaitPermittingContext(() => {
                  return this.parseFSharpPipelineBody(prec);
                });
            }
          default:
            return this.parseExprOpBaseRightExpr(op, prec);
        }
      }
      parseExprOpBaseRightExpr(op, prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
      }
      parseHackPipeBody() {
        var _body$extra;
        const {
          startLoc
        } = this.state;
        const body = this.parseMaybeAssign();
        if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
          this.raise(ErrorMessages.PipeUnparenthesizedBody, {
            at: startLoc
          }, invalidHackPipeBodies.get(body.type));
        }
        if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(ErrorMessages.PipeTopicUnused, {
            at: startLoc
          });
        }
        return body;
      }
      checkExponentialAfterUnary(node) {
        if (this.match(53)) {
          this.raise(ErrorMessages.UnexpectedTokenUnaryExponentiation, {
            node: node.argument
          });
        }
      }
      parseMaybeUnary(refExpressionErrors, sawUnary) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const isAwait = this.isContextual(92);
        if (isAwait && this.isAwaitAllowed()) {
          this.next();
          const expr2 = this.parseAwait(startPos, startLoc);
          if (!sawUnary)
            this.checkExponentialAfterUnary(expr2);
          return expr2;
        }
        const update = this.match(34);
        const node = this.startNode();
        if (tokenIsPrefix(this.state.type)) {
          node.operator = this.state.value;
          node.prefix = true;
          if (this.match(68)) {
            this.expectPlugin(\\"throwExpressions\\");
          }
          const isDelete = this.match(85);
          this.next();
          node.argument = this.parseMaybeUnary(null, true);
          this.checkExpressionErrors(refExpressionErrors, true);
          if (this.state.strict && isDelete) {
            const arg = node.argument;
            if (arg.type === \\"Identifier\\") {
              this.raise(ErrorMessages.StrictDelete, {
                node
              });
            } else if (this.hasPropertyAsPrivateName(arg)) {
              this.raise(ErrorMessages.DeletePrivateField, {
                node
              });
            }
          }
          if (!update) {
            if (!sawUnary)
              this.checkExponentialAfterUnary(node);
            return this.finishNode(node, \\"UnaryExpression\\");
          }
        }
        const expr = this.parseUpdate(node, update, refExpressionErrors);
        if (isAwait) {
          const {
            type
          } = this.state;
          const startsExpr2 = this.hasPlugin(\\"v8intrinsic\\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(50);
          if (startsExpr2 && !this.isAmbiguousAwait()) {
            this.raiseOverwrite(startLoc, ErrorMessages.AwaitNotInAsyncContext);
            return this.parseAwait(startPos, startLoc);
          }
        }
        return expr;
      }
      parseUpdate(node, update, refExpressionErrors) {
        if (update) {
          this.checkLVal(node.argument, \\"prefix operation\\");
          return this.finishNode(node, \\"UpdateExpression\\");
        }
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let expr = this.parseExprSubscripts(refExpressionErrors);
        if (this.checkExpressionErrors(refExpressionErrors, false))
          return expr;
        while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.operator = this.state.value;
          node2.prefix = false;
          node2.argument = expr;
          this.checkLVal(expr, \\"postfix operation\\");
          this.next();
          expr = this.finishNode(node2, \\"UpdateExpression\\");
        }
        return expr;
      }
      parseExprSubscripts(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprAtom(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseSubscripts(expr, startPos, startLoc);
      }
      parseSubscripts(base, startPos, startLoc, noCalls) {
        const state = {
          optionalChainMember: false,
          maybeAsyncArrow: this.atPossibleAsyncArrow(base),
          stop: false
        };
        do {
          base = this.parseSubscript(base, startPos, startLoc, noCalls, state);
          state.maybeAsyncArrow = false;
        } while (!state.stop);
        return base;
      }
      parseSubscript(base, startPos, startLoc, noCalls, state) {
        const {
          type
        } = this.state;
        if (!noCalls && type === 15) {
          return this.parseBind(base, startPos, startLoc, noCalls, state);
        } else if (tokenIsTemplate(type)) {
          return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
        }
        let optional = false;
        if (type === 18) {
          if (noCalls && this.lookaheadCharCode() === 40) {
            state.stop = true;
            return base;
          }
          state.optionalChainMember = optional = true;
          this.next();
        }
        if (!noCalls && this.match(10)) {
          return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);
        } else {
          const computed = this.eat(0);
          if (computed || optional || this.eat(16)) {
            return this.parseMember(base, startPos, startLoc, state, computed, optional);
          } else {
            state.stop = true;
            return base;
          }
        }
      }
      parseMember(base, startPos, startLoc, state, computed, optional) {
        const node = this.startNodeAt(startPos, startLoc);
        node.object = base;
        node.computed = computed;
        if (computed) {
          node.property = this.parseExpression();
          this.expect(3);
        } else if (this.match(130)) {
          if (base.type === \\"Super\\") {
            this.raise(ErrorMessages.SuperPrivateField, {
              at: startLoc
            });
          }
          this.classScope.usePrivateName(this.state.value, this.state.startLoc);
          node.property = this.parsePrivateName();
        } else {
          node.property = this.parseIdentifier(true);
        }
        if (state.optionalChainMember) {
          node.optional = optional;
          return this.finishNode(node, \\"OptionalMemberExpression\\");
        } else {
          return this.finishNode(node, \\"MemberExpression\\");
        }
      }
      parseBind(base, startPos, startLoc, noCalls, state) {
        const node = this.startNodeAt(startPos, startLoc);
        node.object = base;
        this.next();
        node.callee = this.parseNoCallExpr();
        state.stop = true;
        return this.parseSubscripts(this.finishNode(node, \\"BindExpression\\"), startPos, startLoc, noCalls);
      }
      parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        let refExpressionErrors = null;
        this.state.maybeInArrowParameters = true;
        this.next();
        let node = this.startNodeAt(startPos, startLoc);
        node.callee = base;
        if (state.maybeAsyncArrow) {
          this.expressionScope.enter(newAsyncArrowScope());
          refExpressionErrors = new ExpressionErrors();
        }
        if (state.optionalChainMember) {
          node.optional = optional;
        }
        if (optional) {
          node.arguments = this.parseCallExpressionArguments(11);
        } else {
          node.arguments = this.parseCallExpressionArguments(11, base.type === \\"Import\\", base.type !== \\"Super\\", node, refExpressionErrors);
        }
        this.finishCallExpression(node, state.optionalChainMember);
        if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
          state.stop = true;
          this.expressionScope.validateAsPattern();
          this.expressionScope.exit();
          node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
        } else {
          if (state.maybeAsyncArrow) {
            this.checkExpressionErrors(refExpressionErrors, true);
            this.expressionScope.exit();
          }
          this.toReferencedArguments(node);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node;
      }
      toReferencedArguments(node, isParenthesizedExpr) {
        this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
      }
      parseTaggedTemplateExpression(base, startPos, startLoc, state) {
        const node = this.startNodeAt(startPos, startLoc);
        node.tag = base;
        node.quasi = this.parseTemplate(true);
        if (state.optionalChainMember) {
          this.raise(ErrorMessages.OptionalChainingNoTemplate, {
            at: startLoc
          });
        }
        return this.finishNode(node, \\"TaggedTemplateExpression\\");
      }
      atPossibleAsyncArrow(base) {
        return base.type === \\"Identifier\\" && base.name === \\"async\\" && indexes.get(this.state.lastTokEndLoc) === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
      }
      finishCallExpression(node, optional) {
        if (node.callee.type === \\"Import\\") {
          if (node.arguments.length === 2) {
            {
              if (!this.hasPlugin(\\"moduleAttributes\\")) {
                this.expectPlugin(\\"importAssertions\\");
              }
            }
          }
          if (node.arguments.length === 0 || node.arguments.length > 2) {
            this.raise(ErrorMessages.ImportCallArity, {
              node
            }, this.hasPlugin(\\"importAssertions\\") || this.hasPlugin(\\"moduleAttributes\\") ? \\"one or two arguments\\" : \\"one argument\\");
          } else {
            for (const arg of node.arguments) {
              if (arg.type === \\"SpreadElement\\") {
                this.raise(ErrorMessages.ImportCallSpreadArgument, {
                  node: arg
                });
              }
            }
          }
        }
        return this.finishNode(node, optional ? \\"OptionalCallExpression\\" : \\"CallExpression\\");
      }
      parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
        const elts = [];
        let first = true;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              if (dynamicImport && !this.hasPlugin(\\"importAssertions\\") && !this.hasPlugin(\\"moduleAttributes\\")) {
                this.raise(ErrorMessages.ImportCallArgumentTrailingComma, {
                  at: this.state.lastTokStartLoc
                });
              }
              if (nodeForExtra) {
                this.addTrailingCommaExtraToNode(nodeForExtra);
              }
              this.next();
              break;
            }
          }
          elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
        }
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return elts;
      }
      shouldParseAsyncArrow() {
        return this.match(19) && !this.canInsertSemicolon();
      }
      parseAsyncArrowFromCallExpression(node, call) {
        var _call$extra;
        this.resetPreviousNodeTrailingComments(call);
        this.expect(19);
        this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
        if (call.innerComments) {
          setInnerComments(node, call.innerComments);
        }
        if (call.callee.trailingComments) {
          setInnerComments(node, call.callee.trailingComments);
        }
        return node;
      }
      parseNoCallExpr() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
      }
      parseExprAtom(refExpressionErrors) {
        let node;
        const {
          type
        } = this.state;
        switch (type) {
          case 75:
            return this.parseSuper();
          case 79:
            node = this.startNode();
            this.next();
            if (this.match(16)) {
              return this.parseImportMetaProperty(node);
            }
            if (!this.match(10)) {
              this.raise(ErrorMessages.UnsupportedImport, {
                at: this.state.lastTokStartLoc
              });
            }
            return this.finishNode(node, \\"Import\\");
          case 74:
            node = this.startNode();
            this.next();
            return this.finishNode(node, \\"ThisExpression\\");
          case 86: {
            return this.parseDo(this.startNode(), false);
          }
          case 52:
          case 31: {
            this.readRegexp();
            return this.parseRegExpLiteral(this.state.value);
          }
          case 126:
            return this.parseNumericLiteral(this.state.value);
          case 127:
            return this.parseBigIntLiteral(this.state.value);
          case 128:
            return this.parseDecimalLiteral(this.state.value);
          case 125:
            return this.parseStringLiteral(this.state.value);
          case 80:
            return this.parseNullLiteral();
          case 81:
            return this.parseBooleanLiteral(true);
          case 82:
            return this.parseBooleanLiteral(false);
          case 10: {
            const canBeArrow = this.state.potentialArrowAt === this.state.start;
            return this.parseParenAndDistinguishExpression(canBeArrow);
          }
          case 2:
          case 1: {
            return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
          }
          case 0: {
            return this.parseArrayLike(3, true, false, refExpressionErrors);
          }
          case 6:
          case 7: {
            return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
          }
          case 5: {
            return this.parseObjectLike(8, false, false, refExpressionErrors);
          }
          case 64:
            return this.parseFunctionOrFunctionSent();
          case 26:
            this.parseDecorators();
          case 76:
            node = this.startNode();
            this.takeDecorators(node);
            return this.parseClass(node, false);
          case 73:
            return this.parseNewOrNewTarget();
          case 25:
          case 24:
            return this.parseTemplate(false);
          case 15: {
            node = this.startNode();
            this.next();
            node.object = null;
            const callee = node.callee = this.parseNoCallExpr();
            if (callee.type === \\"MemberExpression\\") {
              return this.finishNode(node, \\"BindExpression\\");
            } else {
              throw this.raise(ErrorMessages.UnsupportedBind, {
                node: callee
              });
            }
          }
          case 130: {
            this.raise(ErrorMessages.PrivateInExpectedIn, {
              at: this.state.startLoc
            }, this.state.value);
            return this.parsePrivateName();
          }
          case 33: {
            return this.parseTopicReferenceThenEqualsSign(50, \\"%\\");
          }
          case 32: {
            return this.parseTopicReferenceThenEqualsSign(42, \\"^\\");
          }
          case 42:
          case 50:
          case 27: {
            const pipeProposal = this.getPluginOption(\\"pipelineOperator\\", \\"proposal\\");
            if (pipeProposal) {
              return this.parseTopicReference(pipeProposal);
            } else {
              throw this.unexpected();
            }
          }
          case 45: {
            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
              this.expectOnePlugin([\\"jsx\\", \\"flow\\", \\"typescript\\"]);
              break;
            } else {
              throw this.unexpected();
            }
          }
          default:
            if (tokenIsIdentifier(type)) {
              if (this.isContextual(119) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {
                return this.parseModuleExpression();
              }
              const canBeArrow = this.state.potentialArrowAt === this.state.start;
              const containsEsc = this.state.containsEsc;
              const id = this.parseIdentifier();
              if (!containsEsc && id.name === \\"async\\" && !this.canInsertSemicolon()) {
                const {
                  type: type2
                } = this.state;
                if (type2 === 64) {
                  this.resetPreviousNodeTrailingComments(id);
                  this.next();
                  return this.parseFunction(this.startNodeAtNode(id), void 0, true);
                } else if (tokenIsIdentifier(type2)) {
                  if (this.lookaheadCharCode() === 61) {
                    return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
                  } else {
                    return id;
                  }
                } else if (type2 === 86) {
                  this.resetPreviousNodeTrailingComments(id);
                  return this.parseDo(this.startNodeAtNode(id), true);
                }
              }
              if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
                this.next();
                return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
              }
              return id;
            } else {
              throw this.unexpected();
            }
        }
      }
      parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
        const pipeProposal = this.getPluginOption(\\"pipelineOperator\\", \\"proposal\\");
        if (pipeProposal) {
          this.state.type = topicTokenType;
          this.state.value = topicTokenValue;
          this.state.pos--;
          this.state.end--;
          this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
          return this.parseTopicReference(pipeProposal);
        } else {
          throw this.unexpected();
        }
      }
      parseTopicReference(pipeProposal) {
        const node = this.startNode();
        const startLoc = this.state.startLoc;
        const tokenType = this.state.type;
        this.next();
        return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
      }
      finishTopicReference(node, startLoc, pipeProposal, tokenType) {
        if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
          const nodeType = pipeProposal === \\"smart\\" ? \\"PipelinePrimaryTopicReference\\" : \\"TopicReference\\";
          if (!this.topicReferenceIsAllowedInCurrentContext()) {
            this.raise(pipeProposal === \\"smart\\" ? ErrorMessages.PrimaryTopicNotAllowed : ErrorMessages.PipeTopicUnbound, {
              at: startLoc
            });
          }
          this.registerTopicReference();
          return this.finishNode(node, nodeType);
        } else {
          throw this.raise(ErrorMessages.PipeTopicUnconfiguredToken, {
            at: startLoc
          }, tokenLabelName(tokenType));
        }
      }
      testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
        switch (pipeProposal) {
          case \\"hack\\": {
            return this.hasPlugin([\\"pipelineOperator\\", {
              topicToken: tokenLabelName(tokenType)
            }]);
          }
          case \\"smart\\":
            return tokenType === 27;
          default:
            throw this.raise(ErrorMessages.PipeTopicRequiresHackPipes, {
              at: startLoc
            });
        }
      }
      parseAsyncArrowUnaryFunction(node) {
        this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
        const params = [this.parseIdentifier()];
        this.prodParam.exit();
        if (this.hasPrecedingLineBreak()) {
          this.raise(ErrorMessages.LineTerminatorBeforeArrow, {
            at: this.state.curPosition()
          });
        }
        this.expect(19);
        this.parseArrowExpression(node, params, true);
        return node;
      }
      parseDo(node, isAsync) {
        this.expectPlugin(\\"doExpressions\\");
        if (isAsync) {
          this.expectPlugin(\\"asyncDoExpressions\\");
        }
        node.async = isAsync;
        this.next();
        const oldLabels = this.state.labels;
        this.state.labels = [];
        if (isAsync) {
          this.prodParam.enter(PARAM_AWAIT);
          node.body = this.parseBlock();
          this.prodParam.exit();
        } else {
          node.body = this.parseBlock();
        }
        this.state.labels = oldLabels;
        return this.finishNode(node, \\"DoExpression\\");
      }
      parseSuper() {
        const node = this.startNode();
        this.next();
        if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
          this.raise(ErrorMessages.SuperNotAllowed, {
            node
          });
        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
          this.raise(ErrorMessages.UnexpectedSuper, {
            node
          });
        }
        if (!this.match(10) && !this.match(0) && !this.match(16)) {
          this.raise(ErrorMessages.UnsupportedSuper, {
            node
          });
        }
        return this.finishNode(node, \\"Super\\");
      }
      parsePrivateName() {
        const node = this.startNode();
        const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));
        const name = this.state.value;
        this.next();
        node.id = this.createIdentifier(id, name);
        return this.finishNode(node, \\"PrivateName\\");
      }
      parseFunctionOrFunctionSent() {
        const node = this.startNode();
        this.next();
        if (this.prodParam.hasYield && this.match(16)) {
          const meta = this.createIdentifier(this.startNodeAtNode(node), \\"function\\");
          this.next();
          if (this.match(98)) {
            this.expectPlugin(\\"functionSent\\");
          } else if (!this.hasPlugin(\\"functionSent\\")) {
            this.unexpected();
          }
          return this.parseMetaProperty(node, meta, \\"sent\\");
        }
        return this.parseFunction(node);
      }
      parseMetaProperty(node, meta, propertyName) {
        node.meta = meta;
        const containsEsc = this.state.containsEsc;
        node.property = this.parseIdentifier(true);
        if (node.property.name !== propertyName || containsEsc) {
          this.raise(ErrorMessages.UnsupportedMetaProperty, {
            node: node.property
          }, meta.name, propertyName);
        }
        return this.finishNode(node, \\"MetaProperty\\");
      }
      parseImportMetaProperty(node) {
        const id = this.createIdentifier(this.startNodeAtNode(node), \\"import\\");
        this.next();
        if (this.isContextual(96)) {
          if (!this.inModule) {
            this.raise(SourceTypeModuleErrorMessages.ImportMetaOutsideModule, {
              node: id
            });
          }
          this.sawUnambiguousESM = true;
        }
        return this.parseMetaProperty(node, id, \\"meta\\");
      }
      parseLiteralAtNode(value, type, node) {
        this.addExtra(node, \\"rawValue\\", value);
        this.addExtra(node, \\"raw\\", this.input.slice(node.start, this.state.end));
        node.value = value;
        this.next();
        return this.finishNode(node, type);
      }
      parseLiteral(value, type) {
        const node = this.startNode();
        return this.parseLiteralAtNode(value, type, node);
      }
      parseStringLiteral(value) {
        return this.parseLiteral(value, \\"StringLiteral\\");
      }
      parseNumericLiteral(value) {
        return this.parseLiteral(value, \\"NumericLiteral\\");
      }
      parseBigIntLiteral(value) {
        return this.parseLiteral(value, \\"BigIntLiteral\\");
      }
      parseDecimalLiteral(value) {
        return this.parseLiteral(value, \\"DecimalLiteral\\");
      }
      parseRegExpLiteral(value) {
        const node = this.parseLiteral(value.value, \\"RegExpLiteral\\");
        node.pattern = value.pattern;
        node.flags = value.flags;
        return node;
      }
      parseBooleanLiteral(value) {
        const node = this.startNode();
        node.value = value;
        this.next();
        return this.finishNode(node, \\"BooleanLiteral\\");
      }
      parseNullLiteral() {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, \\"NullLiteral\\");
      }
      parseParenAndDistinguishExpression(canBeArrow) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let val;
        this.next();
        this.expressionScope.enter(newArrowHeadScope());
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.maybeInArrowParameters = true;
        this.state.inFSharpPipelineDirectBody = false;
        const innerStartPos = this.state.start;
        const innerStartLoc = this.state.startLoc;
        const exprList = [];
        const refExpressionErrors = new ExpressionErrors();
        let first = true;
        let spreadStartLoc;
        let optionalCommaStartLoc;
        while (!this.match(11)) {
          if (first) {
            first = false;
          } else {
            this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
            if (this.match(11)) {
              optionalCommaStartLoc = this.state.startLoc;
              break;
            }
          }
          if (this.match(21)) {
            const spreadNodeStartPos = this.state.start;
            const spreadNodeStartLoc = this.state.startLoc;
            spreadStartLoc = this.state.startLoc;
            exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));
            if (!this.checkCommaAfterRest(41)) {
              break;
            }
          } else {
            exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
          }
        }
        const innerEndLoc = this.state.lastTokEndLoc;
        this.expect(11);
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let arrowNode = this.startNodeAt(startPos, startLoc);
        if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
          this.expressionScope.validateAsPattern();
          this.expressionScope.exit();
          this.parseArrowExpression(arrowNode, exprList, false);
          return arrowNode;
        }
        this.expressionScope.exit();
        if (!exprList.length) {
          this.unexpected(this.state.lastTokStartLoc);
        }
        if (optionalCommaStartLoc)
          this.unexpected(optionalCommaStartLoc);
        if (spreadStartLoc)
          this.unexpected(spreadStartLoc);
        this.checkExpressionErrors(refExpressionErrors, true);
        this.toReferencedListDeep(exprList, true);
        if (exprList.length > 1) {
          val = this.startNodeAt(innerStartPos, innerStartLoc);
          val.expressions = exprList;
          this.finishNode(val, \\"SequenceExpression\\");
          this.resetEndLocation(val, innerEndLoc);
        } else {
          val = exprList[0];
        }
        if (!this.options.createParenthesizedExpressions) {
          this.addExtra(val, \\"parenthesized\\", true);
          this.addExtra(val, \\"parenStart\\", startPos);
          this.takeSurroundingComments(val, startPos, indexes.get(this.state.lastTokEndLoc));
          return val;
        }
        const parenExpression = this.startNodeAt(startPos, startLoc);
        parenExpression.expression = val;
        this.finishNode(parenExpression, \\"ParenthesizedExpression\\");
        return parenExpression;
      }
      shouldParseArrow(params) {
        return !this.canInsertSemicolon();
      }
      parseArrow(node) {
        if (this.eat(19)) {
          return node;
        }
      }
      parseParenItem(node, startPos, startLoc) {
        return node;
      }
      parseNewOrNewTarget() {
        const node = this.startNode();
        this.next();
        if (this.match(16)) {
          const meta = this.createIdentifier(this.startNodeAtNode(node), \\"new\\");
          this.next();
          const metaProp = this.parseMetaProperty(node, meta, \\"target\\");
          if (!this.scope.inNonArrowFunction && !this.scope.inClass) {
            this.raise(ErrorMessages.UnexpectedNewTarget, {
              node: metaProp
            });
          }
          return metaProp;
        }
        return this.parseNew(node);
      }
      parseNew(node) {
        node.callee = this.parseNoCallExpr();
        if (node.callee.type === \\"Import\\") {
          this.raise(ErrorMessages.ImportCallNotNewExpression, {
            node: node.callee
          });
        } else if (this.isOptionalChain(node.callee)) {
          this.raise(ErrorMessages.OptionalChainingNoNew, {
            at: this.state.lastTokEndLoc
          });
        } else if (this.eat(18)) {
          this.raise(ErrorMessages.OptionalChainingNoNew, {
            at: this.state.startLoc
          });
        }
        this.parseNewArguments(node);
        return this.finishNode(node, \\"NewExpression\\");
      }
      parseNewArguments(node) {
        if (this.eat(10)) {
          const args = this.parseExprList(11);
          this.toReferencedList(args);
          node.arguments = args;
        } else {
          node.arguments = [];
        }
      }
      parseTemplateElement(isTagged) {
        const {
          start,
          startLoc,
          end,
          value
        } = this.state;
        const elemStart = start + 1;
        const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));
        if (value === null) {
          if (!isTagged) {
            this.raise(ErrorMessages.InvalidEscapeSequenceTemplate, {
              at: createPositionWithColumnOffset(startLoc, 2)
            });
          }
        }
        const isTail = this.match(24);
        const endOffset = isTail ? -1 : -2;
        const elemEnd = end + endOffset;
        elem.value = {
          raw: this.input.slice(elemStart, elemEnd).replace(/\\\\r\\\\n?/g, \\"\\\\n\\"),
          cooked: value === null ? null : value.slice(1, endOffset)
        };
        elem.tail = isTail;
        this.next();
        this.finishNode(elem, \\"TemplateElement\\");
        this.resetEndLocation(elem, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
        return elem;
      }
      parseTemplate(isTagged) {
        const node = this.startNode();
        node.expressions = [];
        let curElt = this.parseTemplateElement(isTagged);
        node.quasis = [curElt];
        while (!curElt.tail) {
          node.expressions.push(this.parseTemplateSubstitution());
          this.readTemplateContinuation();
          node.quasis.push(curElt = this.parseTemplateElement(isTagged));
        }
        return this.finishNode(node, \\"TemplateLiteral\\");
      }
      parseTemplateSubstitution() {
        return this.parseExpression();
      }
      parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
        if (isRecord) {
          this.expectPlugin(\\"recordAndTuple\\");
        }
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const propHash = /* @__PURE__ */ Object.create(null);
        let first = true;
        const node = this.startNode();
        node.properties = [];
        this.next();
        while (!this.match(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              this.addTrailingCommaExtraToNode(node);
              break;
            }
          }
          let prop;
          if (isPattern) {
            prop = this.parseBindingProperty();
          } else {
            prop = this.parsePropertyDefinition(refExpressionErrors);
            this.checkProto(prop, isRecord, propHash, refExpressionErrors);
          }
          if (isRecord && !this.isObjectProperty(prop) && prop.type !== \\"SpreadElement\\") {
            this.raise(ErrorMessages.InvalidRecordProperty, {
              node: prop
            });
          }
          if (prop.shorthand) {
            this.addExtra(prop, \\"shorthand\\", true);
          }
          node.properties.push(prop);
        }
        this.next();
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let type = \\"ObjectExpression\\";
        if (isPattern) {
          type = \\"ObjectPattern\\";
        } else if (isRecord) {
          type = \\"RecordExpression\\";
        }
        return this.finishNode(node, type);
      }
      addTrailingCommaExtraToNode(node) {
        this.addExtra(node, \\"trailingComma\\", this.state.lastTokStart);
        this.addExtra(node, \\"trailingCommaLoc\\", this.state.lastTokStartLoc, false);
      }
      maybeAsyncOrAccessorProp(prop) {
        return !prop.computed && prop.key.type === \\"Identifier\\" && (this.isLiteralPropertyName() || this.match(0) || this.match(51));
      }
      parsePropertyDefinition(refExpressionErrors) {
        let decorators = [];
        if (this.match(26)) {
          if (this.hasPlugin(\\"decorators\\")) {
            this.raise(ErrorMessages.UnsupportedPropertyDecorator, {
              at: this.state.startLoc
            });
          }
          while (this.match(26)) {
            decorators.push(this.parseDecorator());
          }
        }
        const prop = this.startNode();
        let isAsync = false;
        let isAccessor = false;
        let startPos;
        let startLoc;
        if (this.match(21)) {
          if (decorators.length)
            this.unexpected();
          return this.parseSpread();
        }
        if (decorators.length) {
          prop.decorators = decorators;
          decorators = [];
        }
        prop.method = false;
        if (refExpressionErrors) {
          startPos = this.state.start;
          startLoc = this.state.startLoc;
        }
        let isGenerator = this.eat(51);
        this.parsePropertyNamePrefixOperator(prop);
        const containsEsc = this.state.containsEsc;
        const key = this.parsePropertyName(prop);
        if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
          const keyName = key.name;
          if (keyName === \\"async\\" && !this.hasPrecedingLineBreak()) {
            isAsync = true;
            this.resetPreviousNodeTrailingComments(key);
            isGenerator = this.eat(51);
            this.parsePropertyName(prop);
          }
          if (keyName === \\"get\\" || keyName === \\"set\\") {
            isAccessor = true;
            this.resetPreviousNodeTrailingComments(key);
            prop.kind = keyName;
            if (this.match(51)) {
              isGenerator = true;
              this.raise(ErrorMessages.AccessorIsGenerator, {
                at: this.state.curPosition()
              }, keyName);
              this.next();
            }
            this.parsePropertyName(prop);
          }
        }
        this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
        return prop;
      }
      getGetterSetterExpectedParamCount(method) {
        return method.kind === \\"get\\" ? 0 : 1;
      }
      getObjectOrClassMethodParams(method) {
        return method.params;
      }
      checkGetterSetterParams(method) {
        var _params;
        const paramCount = this.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        if (params.length !== paramCount) {
          this.raise(method.kind === \\"get\\" ? ErrorMessages.BadGetterArity : ErrorMessages.BadSetterArity, {
            node: method
          });
        }
        if (method.kind === \\"set\\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \\"RestElement\\") {
          this.raise(ErrorMessages.BadSetterRestParameter, {
            node: method
          });
        }
      }
      parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        if (isAccessor) {
          this.parseMethod(prop, isGenerator, false, false, false, \\"ObjectMethod\\");
          this.checkGetterSetterParams(prop);
          return prop;
        }
        if (isAsync || isGenerator || this.match(10)) {
          if (isPattern)
            this.unexpected();
          prop.kind = \\"method\\";
          prop.method = true;
          return this.parseMethod(prop, isGenerator, isAsync, false, false, \\"ObjectMethod\\");
        }
      }
      parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
        prop.shorthand = false;
        if (this.eat(14)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
          return this.finishNode(prop, \\"ObjectProperty\\");
        }
        if (!prop.computed && prop.key.type === \\"Identifier\\") {
          this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
          if (isPattern) {
            prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
          } else if (this.match(29)) {
            const shorthandAssignLoc = this.state.startLoc;
            if (refExpressionErrors != null) {
              if (refExpressionErrors.shorthandAssignLoc === null) {
                refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
              }
            } else {
              this.raise(ErrorMessages.InvalidCoverInitializedName, {
                at: shorthandAssignLoc
              });
            }
            prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
          } else {
            prop.value = cloneIdentifier(prop.key);
          }
          prop.shorthand = true;
          return this.finishNode(prop, \\"ObjectProperty\\");
        }
      }
      parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
        if (!node)
          this.unexpected();
        return node;
      }
      parsePropertyName(prop) {
        if (this.eat(0)) {
          prop.computed = true;
          prop.key = this.parseMaybeAssignAllowIn();
          this.expect(3);
        } else {
          const {
            type,
            value
          } = this.state;
          let key;
          if (tokenIsKeywordOrIdentifier(type)) {
            key = this.parseIdentifier(true);
          } else {
            switch (type) {
              case 126:
                key = this.parseNumericLiteral(value);
                break;
              case 125:
                key = this.parseStringLiteral(value);
                break;
              case 127:
                key = this.parseBigIntLiteral(value);
                break;
              case 128:
                key = this.parseDecimalLiteral(value);
                break;
              case 130: {
                this.raise(ErrorMessages.UnexpectedPrivateField, {
                  at: createPositionWithColumnOffset(this.state.startLoc, 1)
                });
                key = this.parsePrivateName();
                break;
              }
              default:
                throw this.unexpected();
            }
          }
          prop.key = key;
          if (type !== 130) {
            prop.computed = false;
          }
        }
        return prop.key;
      }
      initFunction(node, isAsync) {
        node.id = null;
        node.generator = false;
        node.async = !!isAsync;
      }
      parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        this.initFunction(node, isAsync);
        node.generator = !!isGenerator;
        const allowModifiers = isConstructor;
        this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
        this.prodParam.enter(functionFlags(isAsync, node.generator));
        this.parseFunctionParams(node, allowModifiers);
        this.parseFunctionBodyAndFinish(node, type, true);
        this.prodParam.exit();
        this.scope.exit();
        return node;
      }
      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        if (isTuple) {
          this.expectPlugin(\\"recordAndTuple\\");
        }
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const node = this.startNode();
        this.next();
        node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return this.finishNode(node, isTuple ? \\"TupleExpression\\" : \\"ArrayExpression\\");
      }
      parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
        let flags = functionFlags(isAsync, false);
        if (!this.match(5) && this.prodParam.hasIn) {
          flags |= PARAM_IN;
        }
        this.prodParam.enter(flags);
        this.initFunction(node, isAsync);
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        if (params) {
          this.state.maybeInArrowParameters = true;
          this.setArrowFunctionParameters(node, params, trailingCommaLoc);
        }
        this.state.maybeInArrowParameters = false;
        this.parseFunctionBody(node, true);
        this.prodParam.exit();
        this.scope.exit();
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return this.finishNode(node, \\"ArrowFunctionExpression\\");
      }
      setArrowFunctionParameters(node, params, trailingCommaLoc) {
        node.params = this.toAssignableList(params, trailingCommaLoc, false);
      }
      parseFunctionBodyAndFinish(node, type, isMethod = false) {
        this.parseFunctionBody(node, false, isMethod);
        this.finishNode(node, type);
      }
      parseFunctionBody(node, allowExpression, isMethod = false) {
        const isExpression = allowExpression && !this.match(5);
        this.expressionScope.enter(newExpressionScope());
        if (isExpression) {
          node.body = this.parseMaybeAssign();
          this.checkParams(node, false, allowExpression, false);
        } else {
          const oldStrict = this.state.strict;
          const oldLabels = this.state.labels;
          this.state.labels = [];
          this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);
          node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
            const nonSimple = !this.isSimpleParamList(node.params);
            if (hasStrictModeDirective && nonSimple) {
              const errorOrigin = (node.kind === \\"method\\" || node.kind === \\"constructor\\") && !!node.key ? {
                at: node.key.loc.end
              } : {
                node
              };
              this.raise(ErrorMessages.IllegalLanguageModeDirective, errorOrigin);
            }
            const strictModeChanged = !oldStrict && this.state.strict;
            this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
            if (this.state.strict && node.id) {
              this.checkLVal(node.id, \\"function name\\", BIND_OUTSIDE, void 0, void 0, strictModeChanged);
            }
          });
          this.prodParam.exit();
          this.state.labels = oldLabels;
        }
        this.expressionScope.exit();
      }
      isSimpleParamList(params) {
        for (let i = 0, len = params.length; i < len; i++) {
          if (params[i].type !== \\"Identifier\\")
            return false;
        }
        return true;
      }
      checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
        const checkClashes = /* @__PURE__ */ new Set();
        for (const param of node.params) {
          this.checkLVal(param, \\"function parameter list\\", BIND_VAR, allowDuplicates ? null : checkClashes, void 0, strictModeChanged);
        }
      }
      parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
        const elts = [];
        let first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              if (nodeForExtra) {
                this.addTrailingCommaExtraToNode(nodeForExtra);
              }
              this.next();
              break;
            }
          }
          elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
        }
        return elts;
      }
      parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
        let elt;
        if (this.match(12)) {
          if (!allowEmpty) {
            this.raise(ErrorMessages.UnexpectedToken, {
              at: this.state.curPosition()
            }, \\",\\");
          }
          elt = null;
        } else if (this.match(21)) {
          const spreadNodeStartPos = this.state.start;
          const spreadNodeStartLoc = this.state.startLoc;
          elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);
        } else if (this.match(17)) {
          this.expectPlugin(\\"partialApplication\\");
          if (!allowPlaceholder) {
            this.raise(ErrorMessages.UnexpectedArgumentPlaceholder, {
              at: this.state.startLoc
            });
          }
          const node = this.startNode();
          this.next();
          elt = this.finishNode(node, \\"ArgumentPlaceholder\\");
        } else {
          elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
        }
        return elt;
      }
      parseIdentifier(liberal) {
        const node = this.startNode();
        const name = this.parseIdentifierName(node.start, liberal);
        return this.createIdentifier(node, name);
      }
      createIdentifier(node, name) {
        node.name = name;
        node.loc.identifierName = name;
        return this.finishNode(node, \\"Identifier\\");
      }
      parseIdentifierName(pos, liberal) {
        let name;
        const {
          startLoc,
          type
        } = this.state;
        if (tokenIsKeywordOrIdentifier(type)) {
          name = this.state.value;
        } else {
          throw this.unexpected();
        }
        const tokenIsKeyword2 = tokenKeywordOrIdentifierIsKeyword(type);
        if (liberal) {
          if (tokenIsKeyword2) {
            this.replaceToken(124);
          }
        } else {
          this.checkReservedWord(name, startLoc, tokenIsKeyword2, false);
        }
        this.next();
        return name;
      }
      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (word.length > 10) {
          return;
        }
        if (!canBeReservedWord(word)) {
          return;
        }
        if (word === \\"yield\\") {
          if (this.prodParam.hasYield) {
            this.raise(ErrorMessages.YieldBindingIdentifier, {
              at: startLoc
            });
            return;
          }
        } else if (word === \\"await\\") {
          if (this.prodParam.hasAwait) {
            this.raise(ErrorMessages.AwaitBindingIdentifier, {
              at: startLoc
            });
            return;
          }
          if (this.scope.inStaticBlock) {
            this.raise(ErrorMessages.AwaitBindingIdentifierInStaticBlock, {
              at: startLoc
            });
            return;
          }
          this.expressionScope.recordAsyncArrowParametersError(ErrorMessages.AwaitBindingIdentifier, startLoc);
        } else if (word === \\"arguments\\") {
          if (this.scope.inClassAndNotInNonArrowFunction) {
            this.raise(ErrorMessages.ArgumentsInClass, {
              at: startLoc
            });
            return;
          }
        }
        if (checkKeywords && isKeyword(word)) {
          this.raise(ErrorMessages.UnexpectedKeyword, {
            at: startLoc
          }, word);
          return;
        }
        const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
        if (reservedTest(word, this.inModule)) {
          this.raise(ErrorMessages.UnexpectedReservedWord, {
            at: startLoc
          }, word);
        }
      }
      isAwaitAllowed() {
        if (this.prodParam.hasAwait)
          return true;
        if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
          return true;
        }
        return false;
      }
      parseAwait(startPos, startLoc) {
        const node = this.startNodeAt(startPos, startLoc);
        this.expressionScope.recordParameterInitializerError(node.loc.start, ErrorMessages.AwaitExpressionFormalParameter);
        if (this.eat(51)) {
          this.raise(ErrorMessages.ObsoleteAwaitStar, {
            node
          });
        }
        if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
          if (this.isAmbiguousAwait()) {
            this.ambiguousScriptDifferentAst = true;
          } else {
            this.sawUnambiguousESM = true;
          }
        }
        if (!this.state.soloAwait) {
          node.argument = this.parseMaybeUnary(null, true);
        }
        return this.finishNode(node, \\"AwaitExpression\\");
      }
      isAmbiguousAwait() {
        if (this.hasPrecedingLineBreak())
          return true;
        const {
          type
        } = this.state;
        return type === 49 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 129 || type === 52 || this.hasPlugin(\\"v8intrinsic\\") && type === 50;
      }
      parseYield() {
        const node = this.startNode();
        this.expressionScope.recordParameterInitializerError(node.loc.start, ErrorMessages.YieldInParameter);
        this.next();
        let delegating = false;
        let argument = null;
        if (!this.hasPrecedingLineBreak()) {
          delegating = this.eat(51);
          switch (this.state.type) {
            case 13:
            case 131:
            case 8:
            case 11:
            case 3:
            case 9:
            case 14:
            case 12:
              if (!delegating)
                break;
            default:
              argument = this.parseMaybeAssign();
          }
        }
        node.delegate = delegating;
        node.argument = argument;
        return this.finishNode(node, \\"YieldExpression\\");
      }
      checkPipelineAtInfixOperator(left, leftStartLoc) {
        if (this.hasPlugin([\\"pipelineOperator\\", {
          proposal: \\"smart\\"
        }])) {
          if (left.type === \\"SequenceExpression\\") {
            this.raise(ErrorMessages.PipelineHeadSequenceExpression, {
              at: leftStartLoc
            });
          }
        }
      }
      parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {
        const bodyNode = this.startNodeAt(startPos, startLoc);
        if (this.isSimpleReference(childExpr)) {
          bodyNode.callee = childExpr;
          return this.finishNode(bodyNode, \\"PipelineBareFunction\\");
        } else {
          this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
          bodyNode.expression = childExpr;
          return this.finishNode(bodyNode, \\"PipelineTopicExpression\\");
        }
      }
      isSimpleReference(expression) {
        switch (expression.type) {
          case \\"MemberExpression\\":
            return !expression.computed && this.isSimpleReference(expression.object);
          case \\"Identifier\\":
            return true;
          default:
            return false;
        }
      }
      checkSmartPipeTopicBodyEarlyErrors(startLoc) {
        if (this.match(19)) {
          throw this.raise(ErrorMessages.PipelineBodyNoArrow, {
            at: this.state.startLoc
          });
        }
        if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(ErrorMessages.PipelineTopicUnused, {
            at: startLoc
          });
        }
      }
      withTopicBindingContext(callback) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 1,
          maxTopicIndex: null
        };
        try {
          return callback();
        } finally {
          this.state.topicContext = outerContextTopicState;
        }
      }
      withSmartMixTopicForbiddingContext(callback) {
        if (this.hasPlugin([\\"pipelineOperator\\", {
          proposal: \\"smart\\"
        }])) {
          const outerContextTopicState = this.state.topicContext;
          this.state.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
          };
          try {
            return callback();
          } finally {
            this.state.topicContext = outerContextTopicState;
          }
        } else {
          return callback();
        }
      }
      withSoloAwaitPermittingContext(callback) {
        const outerContextSoloAwaitState = this.state.soloAwait;
        this.state.soloAwait = true;
        try {
          return callback();
        } finally {
          this.state.soloAwait = outerContextSoloAwaitState;
        }
      }
      allowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToSet = PARAM_IN & ~flags;
        if (prodParamToSet) {
          this.prodParam.enter(flags | PARAM_IN);
          try {
            return callback();
          } finally {
            this.prodParam.exit();
          }
        }
        return callback();
      }
      disallowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToClear = PARAM_IN & flags;
        if (prodParamToClear) {
          this.prodParam.enter(flags & ~PARAM_IN);
          try {
            return callback();
          } finally {
            this.prodParam.exit();
          }
        }
        return callback();
      }
      registerTopicReference() {
        this.state.topicContext.maxTopicIndex = 0;
      }
      topicReferenceIsAllowedInCurrentContext() {
        return this.state.topicContext.maxNumOfResolvableTopics >= 1;
      }
      topicReferenceWasUsedInCurrentContext() {
        return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
      }
      parseFSharpPipelineBody(prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        this.state.potentialArrowAt = this.state.start;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = true;
        const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return ret;
      }
      parseModuleExpression() {
        this.expectPlugin(\\"moduleBlocks\\");
        const node = this.startNode();
        this.next();
        this.eat(5);
        const revertScopes = this.initializeScopes(true);
        this.enterInitialScopes();
        const program = this.startNode();
        try {
          node.body = this.parseProgram(program, 8, \\"module\\");
        } finally {
          revertScopes();
        }
        this.eat(8);
        return this.finishNode(node, \\"ModuleExpression\\");
      }
      parsePropertyNamePrefixOperator(prop) {
      }
    };
    var loopLabel = {
      kind: \\"loop\\"
    };
    var switchLabel = {
      kind: \\"switch\\"
    };
    var FUNC_NO_FLAGS = 0;
    var FUNC_STATEMENT = 1;
    var FUNC_HANGING_STATEMENT = 2;
    var FUNC_NULLABLE_ID = 4;
    var loneSurrogate = /[\\\\uD800-\\\\uDFFF]/u;
    var keywordRelationalOperator = /in(?:stanceof)?/y;
    function babel7CompatTokens(tokens, input) {
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        const {
          type
        } = token;
        if (typeof type === \\"number\\") {
          {
            if (type === 130) {
              const {
                loc,
                start,
                value,
                end
              } = token;
              const hashEndPos = start + 1;
              const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
              tokens.splice(i, 1, new Token({
                type: getExportedToken(27),
                value: \\"#\\",
                start,
                end: hashEndPos,
                startLoc: loc.start,
                endLoc: hashEndLoc
              }), new Token({
                type: getExportedToken(124),
                value,
                start: hashEndPos,
                end,
                startLoc: hashEndLoc,
                endLoc: loc.end
              }));
              i++;
              continue;
            }
            if (tokenIsTemplate(type)) {
              const {
                loc,
                start,
                value,
                end
              } = token;
              const backquoteEnd = start + 1;
              const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
              let startToken;
              if (input.charCodeAt(start) === 96) {
                startToken = new Token({
                  type: getExportedToken(22),
                  value: \\"\`\\",
                  start,
                  end: backquoteEnd,
                  startLoc: loc.start,
                  endLoc: backquoteEndLoc
                });
              } else {
                startToken = new Token({
                  type: getExportedToken(8),
                  value: \\"}\\",
                  start,
                  end: backquoteEnd,
                  startLoc: loc.start,
                  endLoc: backquoteEndLoc
                });
              }
              let templateValue, templateElementEnd, templateElementEndLoc, endToken;
              if (type === 24) {
                templateElementEnd = end - 1;
                templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
                templateValue = value === null ? null : value.slice(1, -1);
                endToken = new Token({
                  type: getExportedToken(22),
                  value: \\"\`\\",
                  start: templateElementEnd,
                  end,
                  startLoc: templateElementEndLoc,
                  endLoc: loc.end
                });
              } else {
                templateElementEnd = end - 2;
                templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
                templateValue = value === null ? null : value.slice(1, -2);
                endToken = new Token({
                  type: getExportedToken(23),
                  value: \\"\${\\",
                  start: templateElementEnd,
                  end,
                  startLoc: templateElementEndLoc,
                  endLoc: loc.end
                });
              }
              tokens.splice(i, 1, startToken, new Token({
                type: getExportedToken(20),
                value: templateValue,
                start: backquoteEnd,
                end: templateElementEnd,
                startLoc: backquoteEndLoc,
                endLoc: templateElementEndLoc
              }), endToken);
              i += 2;
              continue;
            }
          }
          token.type = getExportedToken(type);
        }
      }
      return tokens;
    }
    var StatementParser = class extends ExpressionParser {
      parseTopLevel(file, program) {
        file.program = this.parseProgram(program);
        file.comments = this.state.comments;
        if (this.options.tokens) {
          file.tokens = babel7CompatTokens(this.tokens, this.input);
        }
        return this.finishNode(file, \\"File\\");
      }
      parseProgram(program, end = 131, sourceType = this.options.sourceType) {
        program.sourceType = sourceType;
        program.interpreter = this.parseInterpreterDirective();
        this.parseBlockBody(program, true, true, end);
        if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
          for (const [name, loc] of Array.from(this.scope.undefinedExports)) {
            this.raise(ErrorMessages.ModuleExportUndefined, {
              at: loc
            }, name);
          }
        }
        return this.finishNode(program, \\"Program\\");
      }
      stmtToDirective(stmt) {
        const directive = stmt;
        directive.type = \\"Directive\\";
        directive.value = directive.expression;
        delete directive.expression;
        const directiveLiteral = directive.value;
        const expressionValue = directiveLiteral.value;
        const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
        const val = directiveLiteral.value = raw.slice(1, -1);
        this.addExtra(directiveLiteral, \\"raw\\", raw);
        this.addExtra(directiveLiteral, \\"rawValue\\", val);
        this.addExtra(directiveLiteral, \\"expressionValue\\", expressionValue);
        directiveLiteral.type = \\"DirectiveLiteral\\";
        return directive;
      }
      parseInterpreterDirective() {
        if (!this.match(28)) {
          return null;
        }
        const node = this.startNode();
        node.value = this.state.value;
        this.next();
        return this.finishNode(node, \\"InterpreterDirective\\");
      }
      isLet(context) {
        if (!this.isContextual(95)) {
          return false;
        }
        return this.isLetKeyword(context);
      }
      isLetKeyword(context) {
        const next = this.nextTokenStart();
        const nextCh = this.codePointAtPos(next);
        if (nextCh === 92 || nextCh === 91) {
          return true;
        }
        if (context)
          return false;
        if (nextCh === 123)
          return true;
        if (isIdentifierStart(nextCh)) {
          keywordRelationalOperator.lastIndex = next;
          if (keywordRelationalOperator.test(this.input)) {
            const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
            if (!isIdentifierChar(endCh) && endCh !== 92) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      parseStatement(context, topLevel) {
        if (this.match(26)) {
          this.parseDecorators(true);
        }
        return this.parseStatementContent(context, topLevel);
      }
      parseStatementContent(context, topLevel) {
        let starttype = this.state.type;
        const node = this.startNode();
        let kind;
        if (this.isLet(context)) {
          starttype = 70;
          kind = \\"let\\";
        }
        switch (starttype) {
          case 56:
            return this.parseBreakContinueStatement(node, true);
          case 59:
            return this.parseBreakContinueStatement(node, false);
          case 60:
            return this.parseDebuggerStatement(node);
          case 86:
            return this.parseDoStatement(node);
          case 87:
            return this.parseForStatement(node);
          case 64:
            if (this.lookaheadCharCode() === 46)
              break;
            if (context) {
              if (this.state.strict) {
                this.raise(ErrorMessages.StrictFunction, {
                  at: this.state.startLoc
                });
              } else if (context !== \\"if\\" && context !== \\"label\\") {
                this.raise(ErrorMessages.SloppyFunction, {
                  at: this.state.startLoc
                });
              }
            }
            return this.parseFunctionStatement(node, false, !context);
          case 76:
            if (context)
              this.unexpected();
            return this.parseClass(node, true);
          case 65:
            return this.parseIfStatement(node);
          case 66:
            return this.parseReturnStatement(node);
          case 67:
            return this.parseSwitchStatement(node);
          case 68:
            return this.parseThrowStatement(node);
          case 69:
            return this.parseTryStatement(node);
          case 71:
          case 70:
            kind = kind || this.state.value;
            if (context && kind !== \\"var\\") {
              this.raise(ErrorMessages.UnexpectedLexicalDeclaration, {
                at: this.state.startLoc
              });
            }
            return this.parseVarStatement(node, kind);
          case 88:
            return this.parseWhileStatement(node);
          case 72:
            return this.parseWithStatement(node);
          case 5:
            return this.parseBlock();
          case 13:
            return this.parseEmptyStatement(node);
          case 79: {
            const nextTokenCharCode = this.lookaheadCharCode();
            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
              break;
            }
          }
          case 78: {
            if (!this.options.allowImportExportEverywhere && !topLevel) {
              this.raise(ErrorMessages.UnexpectedImportExport, {
                at: this.state.startLoc
              });
            }
            this.next();
            let result;
            if (starttype === 79) {
              result = this.parseImport(node);
              if (result.type === \\"ImportDeclaration\\" && (!result.importKind || result.importKind === \\"value\\")) {
                this.sawUnambiguousESM = true;
              }
            } else {
              result = this.parseExport(node);
              if (result.type === \\"ExportNamedDeclaration\\" && (!result.exportKind || result.exportKind === \\"value\\") || result.type === \\"ExportAllDeclaration\\" && (!result.exportKind || result.exportKind === \\"value\\") || result.type === \\"ExportDefaultDeclaration\\") {
                this.sawUnambiguousESM = true;
              }
            }
            this.assertModuleNodeAllowed(node);
            return result;
          }
          default: {
            if (this.isAsyncFunction()) {
              if (context) {
                this.raise(ErrorMessages.AsyncFunctionInSingleStatementContext, {
                  at: this.state.startLoc
                });
              }
              this.next();
              return this.parseFunctionStatement(node, true, !context);
            }
          }
        }
        const maybeName = this.state.value;
        const expr = this.parseExpression();
        if (tokenIsIdentifier(starttype) && expr.type === \\"Identifier\\" && this.eat(14)) {
          return this.parseLabeledStatement(node, maybeName, expr, context);
        } else {
          return this.parseExpressionStatement(node, expr);
        }
      }
      assertModuleNodeAllowed(node) {
        if (!this.options.allowImportExportEverywhere && !this.inModule) {
          this.raise(SourceTypeModuleErrorMessages.ImportOutsideModule, {
            node
          });
        }
      }
      takeDecorators(node) {
        const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (decorators.length) {
          node.decorators = decorators;
          this.resetStartLocationFromNode(node, decorators[0]);
          this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];
        }
      }
      canHaveLeadingDecorator() {
        return this.match(76);
      }
      parseDecorators(allowExport) {
        const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        while (this.match(26)) {
          const decorator = this.parseDecorator();
          currentContextDecorators.push(decorator);
        }
        if (this.match(78)) {
          if (!allowExport) {
            this.unexpected();
          }
          if (this.hasPlugin(\\"decorators\\") && !this.getPluginOption(\\"decorators\\", \\"decoratorsBeforeExport\\")) {
            this.raise(ErrorMessages.DecoratorExportClass, {
              at: this.state.startLoc
            });
          }
        } else if (!this.canHaveLeadingDecorator()) {
          throw this.raise(ErrorMessages.UnexpectedLeadingDecorator, {
            at: this.state.startLoc
          });
        }
      }
      parseDecorator() {
        this.expectOnePlugin([\\"decorators-legacy\\", \\"decorators\\"]);
        const node = this.startNode();
        this.next();
        if (this.hasPlugin(\\"decorators\\")) {
          this.state.decoratorStack.push([]);
          const startPos = this.state.start;
          const startLoc = this.state.startLoc;
          let expr;
          if (this.eat(10)) {
            expr = this.parseExpression();
            this.expect(11);
          } else {
            expr = this.parseIdentifier(false);
            while (this.eat(16)) {
              const node2 = this.startNodeAt(startPos, startLoc);
              node2.object = expr;
              node2.property = this.parseIdentifier(true);
              node2.computed = false;
              expr = this.finishNode(node2, \\"MemberExpression\\");
            }
          }
          node.expression = this.parseMaybeDecoratorArguments(expr);
          this.state.decoratorStack.pop();
        } else {
          node.expression = this.parseExprSubscripts();
        }
        return this.finishNode(node, \\"Decorator\\");
      }
      parseMaybeDecoratorArguments(expr) {
        if (this.eat(10)) {
          const node = this.startNodeAtNode(expr);
          node.callee = expr;
          node.arguments = this.parseCallExpressionArguments(11, false);
          this.toReferencedList(node.arguments);
          return this.finishNode(node, \\"CallExpression\\");
        }
        return expr;
      }
      parseBreakContinueStatement(node, isBreak) {
        this.next();
        if (this.isLineTerminator()) {
          node.label = null;
        } else {
          node.label = this.parseIdentifier();
          this.semicolon();
        }
        this.verifyBreakContinue(node, isBreak);
        return this.finishNode(node, isBreak ? \\"BreakStatement\\" : \\"ContinueStatement\\");
      }
      verifyBreakContinue(node, isBreak) {
        let i;
        for (i = 0; i < this.state.labels.length; ++i) {
          const lab = this.state.labels[i];
          if (node.label == null || lab.name === node.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === \\"loop\\"))
              break;
            if (node.label && isBreak)
              break;
          }
        }
        if (i === this.state.labels.length) {
          this.raise(ErrorMessages.IllegalBreakContinue, {
            node
          }, isBreak ? \\"break\\" : \\"continue\\");
        }
      }
      parseDebuggerStatement(node) {
        this.next();
        this.semicolon();
        return this.finishNode(node, \\"DebuggerStatement\\");
      }
      parseHeaderExpression() {
        this.expect(10);
        const val = this.parseExpression();
        this.expect(11);
        return val;
      }
      parseDoStatement(node) {
        this.next();
        this.state.labels.push(loopLabel);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\\"do\\"));
        this.state.labels.pop();
        this.expect(88);
        node.test = this.parseHeaderExpression();
        this.eat(13);
        return this.finishNode(node, \\"DoWhileStatement\\");
      }
      parseForStatement(node) {
        this.next();
        this.state.labels.push(loopLabel);
        let awaitAt = null;
        if (this.isAwaitAllowed() && this.eatContextual(92)) {
          awaitAt = this.state.lastTokStartLoc;
        }
        this.scope.enter(SCOPE_OTHER);
        this.expect(10);
        if (this.match(13)) {
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, null);
        }
        const startsWithLet = this.isContextual(95);
        const isLet = startsWithLet && this.isLetKeyword();
        if (this.match(70) || this.match(71) || isLet) {
          const init2 = this.startNode();
          const kind = isLet ? \\"let\\" : this.state.value;
          this.next();
          this.parseVar(init2, true, kind);
          this.finishNode(init2, \\"VariableDeclaration\\");
          if ((this.match(54) || this.isContextual(97)) && init2.declarations.length === 1) {
            return this.parseForIn(node, init2, awaitAt);
          }
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, init2);
        }
        const startsWithAsync = this.isContextual(91);
        const refExpressionErrors = new ExpressionErrors();
        const init = this.parseExpression(true, refExpressionErrors);
        const isForOf = this.isContextual(97);
        if (isForOf) {
          if (startsWithLet) {
            this.raise(ErrorMessages.ForOfLet, {
              node: init
            });
          }
          if (awaitAt === null && startsWithAsync && init.type === \\"Identifier\\") {
            this.raise(ErrorMessages.ForOfAsync, {
              node: init
            });
          }
        }
        if (isForOf || this.match(54)) {
          this.toAssignable(init, true);
          const description = isForOf ? \\"for-of statement\\" : \\"for-in statement\\";
          this.checkLVal(init, description);
          return this.parseForIn(node, init, awaitAt);
        } else {
          this.checkExpressionErrors(refExpressionErrors, true);
        }
        if (awaitAt !== null) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node, init);
      }
      parseFunctionStatement(node, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);
      }
      parseIfStatement(node) {
        this.next();
        node.test = this.parseHeaderExpression();
        node.consequent = this.parseStatement(\\"if\\");
        node.alternate = this.eat(62) ? this.parseStatement(\\"if\\") : null;
        return this.finishNode(node, \\"IfStatement\\");
      }
      parseReturnStatement(node) {
        if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
          this.raise(ErrorMessages.IllegalReturn, {
            at: this.state.startLoc
          });
        }
        this.next();
        if (this.isLineTerminator()) {
          node.argument = null;
        } else {
          node.argument = this.parseExpression();
          this.semicolon();
        }
        return this.finishNode(node, \\"ReturnStatement\\");
      }
      parseSwitchStatement(node) {
        this.next();
        node.discriminant = this.parseHeaderExpression();
        const cases = node.cases = [];
        this.expect(5);
        this.state.labels.push(switchLabel);
        this.scope.enter(SCOPE_OTHER);
        let cur;
        for (let sawDefault; !this.match(8); ) {
          if (this.match(57) || this.match(61)) {
            const isCase = this.match(57);
            if (cur)
              this.finishNode(cur, \\"SwitchCase\\");
            cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();
            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raise(ErrorMessages.MultipleDefaultsInSwitch, {
                  at: this.state.lastTokStartLoc
                });
              }
              sawDefault = true;
              cur.test = null;
            }
            this.expect(14);
          } else {
            if (cur) {
              cur.consequent.push(this.parseStatement(null));
            } else {
              this.unexpected();
            }
          }
        }
        this.scope.exit();
        if (cur)
          this.finishNode(cur, \\"SwitchCase\\");
        this.next();
        this.state.labels.pop();
        return this.finishNode(node, \\"SwitchStatement\\");
      }
      parseThrowStatement(node) {
        this.next();
        if (this.hasPrecedingLineBreak()) {
          this.raise(ErrorMessages.NewlineAfterThrow, {
            at: this.state.lastTokEndLoc
          });
        }
        node.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node, \\"ThrowStatement\\");
      }
      parseCatchClauseParam() {
        const param = this.parseBindingAtom();
        const simple = param.type === \\"Identifier\\";
        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);
        this.checkLVal(param, \\"catch clause\\", BIND_LEXICAL);
        return param;
      }
      parseTryStatement(node) {
        this.next();
        node.block = this.parseBlock();
        node.handler = null;
        if (this.match(58)) {
          const clause = this.startNode();
          this.next();
          if (this.match(10)) {
            this.expect(10);
            clause.param = this.parseCatchClauseParam();
            this.expect(11);
          } else {
            clause.param = null;
            this.scope.enter(SCOPE_OTHER);
          }
          clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
          this.scope.exit();
          node.handler = this.finishNode(clause, \\"CatchClause\\");
        }
        node.finalizer = this.eat(63) ? this.parseBlock() : null;
        if (!node.handler && !node.finalizer) {
          this.raise(ErrorMessages.NoCatchOrFinally, {
            node
          });
        }
        return this.finishNode(node, \\"TryStatement\\");
      }
      parseVarStatement(node, kind) {
        this.next();
        this.parseVar(node, false, kind);
        this.semicolon();
        return this.finishNode(node, \\"VariableDeclaration\\");
      }
      parseWhileStatement(node) {
        this.next();
        node.test = this.parseHeaderExpression();
        this.state.labels.push(loopLabel);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\\"while\\"));
        this.state.labels.pop();
        return this.finishNode(node, \\"WhileStatement\\");
      }
      parseWithStatement(node) {
        if (this.state.strict) {
          this.raise(ErrorMessages.StrictWith, {
            at: this.state.startLoc
          });
        }
        this.next();
        node.object = this.parseHeaderExpression();
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\\"with\\"));
        return this.finishNode(node, \\"WithStatement\\");
      }
      parseEmptyStatement(node) {
        this.next();
        return this.finishNode(node, \\"EmptyStatement\\");
      }
      parseLabeledStatement(node, maybeName, expr, context) {
        for (const label of this.state.labels) {
          if (label.name === maybeName) {
            this.raise(ErrorMessages.LabelRedeclaration, {
              node: expr
            }, maybeName);
          }
        }
        const kind = tokenIsLoop(this.state.type) ? \\"loop\\" : this.match(67) ? \\"switch\\" : null;
        for (let i = this.state.labels.length - 1; i >= 0; i--) {
          const label = this.state.labels[i];
          if (label.statementStart === node.start) {
            label.statementStart = this.state.start;
            label.kind = kind;
          } else {
            break;
          }
        }
        this.state.labels.push({
          name: maybeName,
          kind,
          statementStart: this.state.start
        });
        node.body = this.parseStatement(context ? context.indexOf(\\"label\\") === -1 ? context + \\"label\\" : context : \\"label\\");
        this.state.labels.pop();
        node.label = expr;
        return this.finishNode(node, \\"LabeledStatement\\");
      }
      parseExpressionStatement(node, expr) {
        node.expression = expr;
        this.semicolon();
        return this.finishNode(node, \\"ExpressionStatement\\");
      }
      parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
        const node = this.startNode();
        if (allowDirectives) {
          this.state.strictErrors.clear();
        }
        this.expect(5);
        if (createNewLexicalScope) {
          this.scope.enter(SCOPE_OTHER);
        }
        this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);
        if (createNewLexicalScope) {
          this.scope.exit();
        }
        return this.finishNode(node, \\"BlockStatement\\");
      }
      isValidDirective(stmt) {
        return stmt.type === \\"ExpressionStatement\\" && stmt.expression.type === \\"StringLiteral\\" && !stmt.expression.extra.parenthesized;
      }
      parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
        const body = node.body = [];
        const directives = node.directives = [];
        this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
      }
      parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
        const oldStrict = this.state.strict;
        let hasStrictModeDirective = false;
        let parsedNonDirective = false;
        while (!this.match(end)) {
          const stmt = this.parseStatement(null, topLevel);
          if (directives && !parsedNonDirective) {
            if (this.isValidDirective(stmt)) {
              const directive = this.stmtToDirective(stmt);
              directives.push(directive);
              if (!hasStrictModeDirective && directive.value.value === \\"use strict\\") {
                hasStrictModeDirective = true;
                this.setStrict(true);
              }
              continue;
            }
            parsedNonDirective = true;
            this.state.strictErrors.clear();
          }
          body.push(stmt);
        }
        if (afterBlockParse) {
          afterBlockParse.call(this, hasStrictModeDirective);
        }
        if (!oldStrict) {
          this.setStrict(false);
        }
        this.next();
      }
      parseFor(node, init) {
        node.init = init;
        this.semicolon(false);
        node.test = this.match(13) ? null : this.parseExpression();
        this.semicolon(false);
        node.update = this.match(11) ? null : this.parseExpression();
        this.expect(11);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\\"for\\"));
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node, \\"ForStatement\\");
      }
      parseForIn(node, init, awaitAt) {
        const isForIn = this.match(54);
        this.next();
        if (isForIn) {
          if (awaitAt !== null)
            this.unexpected(awaitAt);
        } else {
          node.await = awaitAt !== null;
        }
        if (init.type === \\"VariableDeclaration\\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \\"var\\" || init.declarations[0].id.type !== \\"Identifier\\")) {
          this.raise(ErrorMessages.ForInOfLoopInitializer, {
            node: init
          }, isForIn ? \\"for-in\\" : \\"for-of\\");
        }
        if (init.type === \\"AssignmentPattern\\") {
          this.raise(ErrorMessages.InvalidLhs, {
            node: init
          }, \\"for-loop\\");
        }
        node.left = init;
        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
        this.expect(11);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\\"for\\"));
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node, isForIn ? \\"ForInStatement\\" : \\"ForOfStatement\\");
      }
      parseVar(node, isFor, kind) {
        const declarations = node.declarations = [];
        const isTypescript = this.hasPlugin(\\"typescript\\");
        node.kind = kind;
        for (; ; ) {
          const decl = this.startNode();
          this.parseVarId(decl, kind);
          if (this.eat(29)) {
            decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
          } else {
            if (kind === \\"const\\" && !(this.match(54) || this.isContextual(97))) {
              if (!isTypescript) {
                this.raise(ErrorMessages.DeclarationMissingInitializer, {
                  at: this.state.lastTokEndLoc
                }, \\"Const declarations\\");
              }
            } else if (decl.id.type !== \\"Identifier\\" && !(isFor && (this.match(54) || this.isContextual(97)))) {
              this.raise(ErrorMessages.DeclarationMissingInitializer, {
                at: this.state.lastTokEndLoc
              }, \\"Complex binding patterns\\");
            }
            decl.init = null;
          }
          declarations.push(this.finishNode(decl, \\"VariableDeclarator\\"));
          if (!this.eat(12))
            break;
        }
        return node;
      }
      parseVarId(decl, kind) {
        decl.id = this.parseBindingAtom();
        this.checkLVal(decl.id, \\"variable declaration\\", kind === \\"var\\" ? BIND_VAR : BIND_LEXICAL, void 0, kind !== \\"var\\");
      }
      parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {
        const isStatement = statement & FUNC_STATEMENT;
        const isHangingStatement = statement & FUNC_HANGING_STATEMENT;
        const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);
        this.initFunction(node, isAsync);
        if (this.match(51) && isHangingStatement) {
          this.raise(ErrorMessages.GeneratorInSingleStatementContext, {
            at: this.state.startLoc
          });
        }
        node.generator = this.eat(51);
        if (isStatement) {
          node.id = this.parseFunctionId(requireId);
        }
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = false;
        this.scope.enter(SCOPE_FUNCTION);
        this.prodParam.enter(functionFlags(isAsync, node.generator));
        if (!isStatement) {
          node.id = this.parseFunctionId();
        }
        this.parseFunctionParams(node, false);
        this.withSmartMixTopicForbiddingContext(() => {
          this.parseFunctionBodyAndFinish(node, isStatement ? \\"FunctionDeclaration\\" : \\"FunctionExpression\\");
        });
        this.prodParam.exit();
        this.scope.exit();
        if (isStatement && !isHangingStatement) {
          this.registerFunctionStatementId(node);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node;
      }
      parseFunctionId(requireId) {
        return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
      }
      parseFunctionParams(node, allowModifiers) {
        this.expect(10);
        this.expressionScope.enter(newParameterDeclarationScope());
        node.params = this.parseBindingList(11, 41, false, allowModifiers);
        this.expressionScope.exit();
      }
      registerFunctionStatementId(node) {
        if (!node.id)
          return;
        this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);
      }
      parseClass(node, isStatement, optionalId) {
        this.next();
        this.takeDecorators(node);
        const oldStrict = this.state.strict;
        this.state.strict = true;
        this.parseClassId(node, isStatement, optionalId);
        this.parseClassSuper(node);
        node.body = this.parseClassBody(!!node.superClass, oldStrict);
        return this.finishNode(node, isStatement ? \\"ClassDeclaration\\" : \\"ClassExpression\\");
      }
      isClassProperty() {
        return this.match(29) || this.match(13) || this.match(8);
      }
      isClassMethod() {
        return this.match(10);
      }
      isNonstaticConstructor(method) {
        return !method.computed && !method.static && (method.key.name === \\"constructor\\" || method.key.value === \\"constructor\\");
      }
      parseClassBody(hadSuperClass, oldStrict) {
        this.classScope.enter();
        const state = {
          hadConstructor: false,
          hadSuperClass
        };
        let decorators = [];
        const classBody = this.startNode();
        classBody.body = [];
        this.expect(5);
        this.withSmartMixTopicForbiddingContext(() => {
          while (!this.match(8)) {
            if (this.eat(13)) {
              if (decorators.length > 0) {
                throw this.raise(ErrorMessages.DecoratorSemicolon, {
                  at: this.state.lastTokEndLoc
                });
              }
              continue;
            }
            if (this.match(26)) {
              decorators.push(this.parseDecorator());
              continue;
            }
            const member = this.startNode();
            if (decorators.length) {
              member.decorators = decorators;
              this.resetStartLocationFromNode(member, decorators[0]);
              decorators = [];
            }
            this.parseClassMember(classBody, member, state);
            if (member.kind === \\"constructor\\" && member.decorators && member.decorators.length > 0) {
              this.raise(ErrorMessages.DecoratorConstructor, {
                node: member
              });
            }
          }
        });
        this.state.strict = oldStrict;
        this.next();
        if (decorators.length) {
          throw this.raise(ErrorMessages.TrailingDecorator, {
            at: this.state.startLoc
          });
        }
        this.classScope.exit();
        return this.finishNode(classBody, \\"ClassBody\\");
      }
      parseClassMemberFromModifier(classBody, member) {
        const key = this.parseIdentifier(true);
        if (this.isClassMethod()) {
          const method = member;
          method.kind = \\"method\\";
          method.computed = false;
          method.key = key;
          method.static = false;
          this.pushClassMethod(classBody, method, false, false, false, false);
          return true;
        } else if (this.isClassProperty()) {
          const prop = member;
          prop.computed = false;
          prop.key = key;
          prop.static = false;
          classBody.body.push(this.parseClassProperty(prop));
          return true;
        }
        this.resetPreviousNodeTrailingComments(key);
        return false;
      }
      parseClassMember(classBody, member, state) {
        const isStatic = this.isContextual(100);
        if (isStatic) {
          if (this.parseClassMemberFromModifier(classBody, member)) {
            return;
          }
          if (this.eat(5)) {
            this.parseClassStaticBlock(classBody, member);
            return;
          }
        }
        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
      }
      parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const publicMethod = member;
        const privateMethod = member;
        const publicProp = member;
        const privateProp = member;
        const method = publicMethod;
        const publicMember = publicMethod;
        member.static = isStatic;
        this.parsePropertyNamePrefixOperator(member);
        if (this.eat(51)) {
          method.kind = \\"method\\";
          const isPrivateName = this.match(130);
          this.parseClassElementName(method);
          if (isPrivateName) {
            this.pushClassPrivateMethod(classBody, privateMethod, true, false);
            return;
          }
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(ErrorMessages.ConstructorIsGenerator, {
              node: publicMethod.key
            });
          }
          this.pushClassMethod(classBody, publicMethod, true, false, false, false);
          return;
        }
        const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
        const isPrivate = this.match(130);
        const key = this.parseClassElementName(member);
        const maybeQuestionTokenStartLoc = this.state.startLoc;
        this.parsePostMemberNameModifiers(publicMember);
        if (this.isClassMethod()) {
          method.kind = \\"method\\";
          if (isPrivate) {
            this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            return;
          }
          const isConstructor = this.isNonstaticConstructor(publicMethod);
          let allowsDirectSuper = false;
          if (isConstructor) {
            publicMethod.kind = \\"constructor\\";
            if (state.hadConstructor && !this.hasPlugin(\\"typescript\\")) {
              this.raise(ErrorMessages.DuplicateConstructor, {
                node: key
              });
            }
            if (isConstructor && this.hasPlugin(\\"typescript\\") && member.override) {
              this.raise(ErrorMessages.OverrideOnConstructor, {
                node: key
              });
            }
            state.hadConstructor = true;
            allowsDirectSuper = state.hadSuperClass;
          }
          this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
        } else if (this.isClassProperty()) {
          if (isPrivate) {
            this.pushClassPrivateProperty(classBody, privateProp);
          } else {
            this.pushClassProperty(classBody, publicProp);
          }
        } else if (isContextual && key.name === \\"async\\" && !this.isLineTerminator()) {
          this.resetPreviousNodeTrailingComments(key);
          const isGenerator = this.eat(51);
          if (publicMember.optional) {
            this.unexpected(maybeQuestionTokenStartLoc);
          }
          method.kind = \\"method\\";
          const isPrivate2 = this.match(130);
          this.parseClassElementName(method);
          this.parsePostMemberNameModifiers(publicMember);
          if (isPrivate2) {
            this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
          } else {
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(ErrorMessages.ConstructorIsAsync, {
                node: publicMethod.key
              });
            }
            this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
          }
        } else if (isContextual && (key.name === \\"get\\" || key.name === \\"set\\") && !(this.match(51) && this.isLineTerminator())) {
          this.resetPreviousNodeTrailingComments(key);
          method.kind = key.name;
          const isPrivate2 = this.match(130);
          this.parseClassElementName(publicMethod);
          if (isPrivate2) {
            this.pushClassPrivateMethod(classBody, privateMethod, false, false);
          } else {
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(ErrorMessages.ConstructorIsAccessor, {
                node: publicMethod.key
              });
            }
            this.pushClassMethod(classBody, publicMethod, false, false, false, false);
          }
          this.checkGetterSetterParams(publicMethod);
        } else if (this.isLineTerminator()) {
          if (isPrivate) {
            this.pushClassPrivateProperty(classBody, privateProp);
          } else {
            this.pushClassProperty(classBody, publicProp);
          }
        } else {
          this.unexpected();
        }
      }
      parseClassElementName(member) {
        const {
          type,
          value
        } = this.state;
        if ((type === 124 || type === 125) && member.static && value === \\"prototype\\") {
          this.raise(ErrorMessages.StaticPrototype, {
            at: this.state.startLoc
          });
        }
        if (type === 130) {
          if (value === \\"constructor\\") {
            this.raise(ErrorMessages.ConstructorClassPrivateField, {
              at: this.state.startLoc
            });
          }
          const key = this.parsePrivateName();
          member.key = key;
          return key;
        }
        return this.parsePropertyName(member);
      }
      parseClassStaticBlock(classBody, member) {
        var _member$decorators;
        this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(PARAM);
        const body = member.body = [];
        this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
        this.prodParam.exit();
        this.scope.exit();
        this.state.labels = oldLabels;
        classBody.body.push(this.finishNode(member, \\"StaticBlock\\"));
        if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
          this.raise(ErrorMessages.DecoratorStaticBlock, {
            node: member
          });
        }
      }
      pushClassProperty(classBody, prop) {
        if (!prop.computed && (prop.key.name === \\"constructor\\" || prop.key.value === \\"constructor\\")) {
          this.raise(ErrorMessages.ConstructorClassField, {
            node: prop.key
          });
        }
        classBody.body.push(this.parseClassProperty(prop));
      }
      pushClassPrivateProperty(classBody, prop) {
        const node = this.parseClassPrivateProperty(prop);
        classBody.body.push(node);
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \\"ClassMethod\\", true));
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const node = this.parseMethod(method, isGenerator, isAsync, false, false, \\"ClassPrivateMethod\\", true);
        classBody.body.push(node);
        const kind = node.kind === \\"get\\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \\"set\\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;
        this.declareClassPrivateMethodInScope(node, kind);
      }
      declareClassPrivateMethodInScope(node, kind) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
      }
      parsePostMemberNameModifiers(methodOrProp) {
      }
      parseClassPrivateProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, \\"ClassPrivateProperty\\");
      }
      parseClassProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, \\"ClassProperty\\");
      }
      parseInitializer(node) {
        this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
        this.expressionScope.enter(newExpressionScope());
        this.prodParam.enter(PARAM);
        node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
        this.expressionScope.exit();
        this.prodParam.exit();
        this.scope.exit();
      }
      parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {
        if (tokenIsIdentifier(this.state.type)) {
          node.id = this.parseIdentifier();
          if (isStatement) {
            this.checkLVal(node.id, \\"class name\\", bindingType);
          }
        } else {
          if (optionalId || !isStatement) {
            node.id = null;
          } else {
            throw this.raise(ErrorMessages.MissingClassName, {
              at: this.state.startLoc
            });
          }
        }
      }
      parseClassSuper(node) {
        node.superClass = this.eat(77) ? this.parseExprSubscripts() : null;
      }
      parseExport(node) {
        const hasDefault = this.maybeParseExportDefaultSpecifier(node);
        const parseAfterDefault = !hasDefault || this.eat(12);
        const hasStar = parseAfterDefault && this.eatExportStar(node);
        const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
        const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
        const isFromRequired = hasDefault || hasStar;
        if (hasStar && !hasNamespace) {
          if (hasDefault)
            this.unexpected();
          this.parseExportFrom(node, true);
          return this.finishNode(node, \\"ExportAllDeclaration\\");
        }
        const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
        if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {
          throw this.unexpected(null, 5);
        }
        let hasDeclaration;
        if (isFromRequired || hasSpecifiers) {
          hasDeclaration = false;
          this.parseExportFrom(node, isFromRequired);
        } else {
          hasDeclaration = this.maybeParseExportDeclaration(node);
        }
        if (isFromRequired || hasSpecifiers || hasDeclaration) {
          this.checkExport(node, true, false, !!node.source);
          return this.finishNode(node, \\"ExportNamedDeclaration\\");
        }
        if (this.eat(61)) {
          node.declaration = this.parseExportDefaultExpression();
          this.checkExport(node, true, true);
          return this.finishNode(node, \\"ExportDefaultDeclaration\\");
        }
        throw this.unexpected(null, 5);
      }
      eatExportStar(node) {
        return this.eat(51);
      }
      maybeParseExportDefaultSpecifier(node) {
        if (this.isExportDefaultSpecifier()) {
          this.expectPlugin(\\"exportDefaultFrom\\");
          const specifier = this.startNode();
          specifier.exported = this.parseIdentifier(true);
          node.specifiers = [this.finishNode(specifier, \\"ExportDefaultSpecifier\\")];
          return true;
        }
        return false;
      }
      maybeParseExportNamespaceSpecifier(node) {
        if (this.isContextual(89)) {
          if (!node.specifiers)
            node.specifiers = [];
          const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
          this.next();
          specifier.exported = this.parseModuleExportName();
          node.specifiers.push(this.finishNode(specifier, \\"ExportNamespaceSpecifier\\"));
          return true;
        }
        return false;
      }
      maybeParseExportNamedSpecifiers(node) {
        if (this.match(5)) {
          if (!node.specifiers)
            node.specifiers = [];
          const isTypeExport = node.exportKind === \\"type\\";
          node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
          node.source = null;
          node.declaration = null;
          if (this.hasPlugin(\\"importAssertions\\")) {
            node.assertions = [];
          }
          return true;
        }
        return false;
      }
      maybeParseExportDeclaration(node) {
        if (this.shouldParseExportDeclaration()) {
          node.specifiers = [];
          node.source = null;
          if (this.hasPlugin(\\"importAssertions\\")) {
            node.assertions = [];
          }
          node.declaration = this.parseExportDeclaration(node);
          return true;
        }
        return false;
      }
      isAsyncFunction() {
        if (!this.isContextual(91))
          return false;
        const next = this.nextTokenStart();
        return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \\"function\\");
      }
      parseExportDefaultExpression() {
        const expr = this.startNode();
        const isAsync = this.isAsyncFunction();
        if (this.match(64) || isAsync) {
          this.next();
          if (isAsync) {
            this.next();
          }
          return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);
        }
        if (this.match(76)) {
          return this.parseClass(expr, true, true);
        }
        if (this.match(26)) {
          if (this.hasPlugin(\\"decorators\\") && this.getPluginOption(\\"decorators\\", \\"decoratorsBeforeExport\\")) {
            this.raise(ErrorMessages.DecoratorBeforeExport, {
              at: this.state.startLoc
            });
          }
          this.parseDecorators(false);
          return this.parseClass(expr, true, true);
        }
        if (this.match(71) || this.match(70) || this.isLet()) {
          throw this.raise(ErrorMessages.UnsupportedDefaultExport, {
            at: this.state.startLoc
          });
        }
        const res = this.parseMaybeAssignAllowIn();
        this.semicolon();
        return res;
      }
      parseExportDeclaration(node) {
        return this.parseStatement(null);
      }
      isExportDefaultSpecifier() {
        const {
          type
        } = this.state;
        if (tokenIsIdentifier(type)) {
          if (type === 91 && !this.state.containsEsc || type === 95) {
            return false;
          }
          if ((type === 122 || type === 121) && !this.state.containsEsc) {
            const {
              type: nextType
            } = this.lookahead();
            if (tokenIsIdentifier(nextType) && nextType !== 93 || nextType === 5) {
              this.expectOnePlugin([\\"flow\\", \\"typescript\\"]);
              return false;
            }
          }
        } else if (!this.match(61)) {
          return false;
        }
        const next = this.nextTokenStart();
        const hasFrom = this.isUnparsedContextual(next, \\"from\\");
        if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
          return true;
        }
        if (this.match(61) && hasFrom) {
          const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
          return nextAfterFrom === 34 || nextAfterFrom === 39;
        }
        return false;
      }
      parseExportFrom(node, expect) {
        if (this.eatContextual(93)) {
          node.source = this.parseImportSource();
          this.checkExport(node);
          const assertions = this.maybeParseImportAssertions();
          if (assertions) {
            node.assertions = assertions;
          }
        } else if (expect) {
          this.unexpected();
        }
        this.semicolon();
      }
      shouldParseExportDeclaration() {
        const {
          type
        } = this.state;
        if (type === 26) {
          this.expectOnePlugin([\\"decorators\\", \\"decorators-legacy\\"]);
          if (this.hasPlugin(\\"decorators\\")) {
            if (this.getPluginOption(\\"decorators\\", \\"decoratorsBeforeExport\\")) {
              throw this.raise(ErrorMessages.DecoratorBeforeExport, {
                at: this.state.startLoc
              });
            }
            return true;
          }
        }
        return type === 70 || type === 71 || type === 64 || type === 76 || this.isLet() || this.isAsyncFunction();
      }
      checkExport(node, checkNames, isDefault, isFrom) {
        if (checkNames) {
          if (isDefault) {
            this.checkDuplicateExports(node, \\"default\\");
            if (this.hasPlugin(\\"exportDefaultFrom\\")) {
              var _declaration$extra;
              const declaration = node.declaration;
              if (declaration.type === \\"Identifier\\" && declaration.name === \\"from\\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
                this.raise(ErrorMessages.ExportDefaultFromAsIdentifier, {
                  node: declaration
                });
              }
            }
          } else if (node.specifiers && node.specifiers.length) {
            for (const specifier of node.specifiers) {
              const {
                exported
              } = specifier;
              const exportedName = exported.type === \\"Identifier\\" ? exported.name : exported.value;
              this.checkDuplicateExports(specifier, exportedName);
              if (!isFrom && specifier.local) {
                const {
                  local
                } = specifier;
                if (local.type !== \\"Identifier\\") {
                  this.raise(ErrorMessages.ExportBindingIsString, {
                    node: specifier
                  }, local.value, exportedName);
                } else {
                  this.checkReservedWord(local.name, local.loc.start, true, false);
                  this.scope.checkLocalExport(local);
                }
              }
            }
          } else if (node.declaration) {
            if (node.declaration.type === \\"FunctionDeclaration\\" || node.declaration.type === \\"ClassDeclaration\\") {
              const id = node.declaration.id;
              if (!id)
                throw new Error(\\"Assertion failure\\");
              this.checkDuplicateExports(node, id.name);
            } else if (node.declaration.type === \\"VariableDeclaration\\") {
              for (const declaration of node.declaration.declarations) {
                this.checkDeclaration(declaration.id);
              }
            }
          }
        }
        const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (currentContextDecorators.length) {
          throw this.raise(ErrorMessages.UnsupportedDecoratorExport, {
            node
          });
        }
      }
      checkDeclaration(node) {
        if (node.type === \\"Identifier\\") {
          this.checkDuplicateExports(node, node.name);
        } else if (node.type === \\"ObjectPattern\\") {
          for (const prop of node.properties) {
            this.checkDeclaration(prop);
          }
        } else if (node.type === \\"ArrayPattern\\") {
          for (const elem of node.elements) {
            if (elem) {
              this.checkDeclaration(elem);
            }
          }
        } else if (node.type === \\"ObjectProperty\\") {
          this.checkDeclaration(node.value);
        } else if (node.type === \\"RestElement\\") {
          this.checkDeclaration(node.argument);
        } else if (node.type === \\"AssignmentPattern\\") {
          this.checkDeclaration(node.left);
        }
      }
      checkDuplicateExports(node, name) {
        if (this.exportedIdentifiers.has(name)) {
          this.raise(name === \\"default\\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, {
            node
          }, name);
        }
        this.exportedIdentifiers.add(name);
      }
      parseExportSpecifiers(isInTypeExport) {
        const nodes = [];
        let first = true;
        this.expect(5);
        while (!this.eat(8)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.eat(8))
              break;
          }
          const isMaybeTypeOnly = this.isContextual(122);
          const isString = this.match(125);
          const node = this.startNode();
          node.local = this.parseModuleExportName();
          nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
        }
        return nodes;
      }
      parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
        if (this.eatContextual(89)) {
          node.exported = this.parseModuleExportName();
        } else if (isString) {
          node.exported = cloneStringLiteral(node.local);
        } else if (!node.exported) {
          node.exported = cloneIdentifier(node.local);
        }
        return this.finishNode(node, \\"ExportSpecifier\\");
      }
      parseModuleExportName() {
        if (this.match(125)) {
          const result = this.parseStringLiteral(this.state.value);
          const surrogate = result.value.match(loneSurrogate);
          if (surrogate) {
            this.raise(ErrorMessages.ModuleExportNameHasLoneSurrogate, {
              node: result
            }, surrogate[0].charCodeAt(0).toString(16));
          }
          return result;
        }
        return this.parseIdentifier(true);
      }
      parseImport(node) {
        node.specifiers = [];
        if (!this.match(125)) {
          const hasDefault = this.maybeParseDefaultImportSpecifier(node);
          const parseNext = !hasDefault || this.eat(12);
          const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
          if (parseNext && !hasStar)
            this.parseNamedImportSpecifiers(node);
          this.expectContextual(93);
        }
        node.source = this.parseImportSource();
        const assertions = this.maybeParseImportAssertions();
        if (assertions) {
          node.assertions = assertions;
        } else {
          const attributes = this.maybeParseModuleAttributes();
          if (attributes) {
            node.attributes = attributes;
          }
        }
        this.semicolon();
        return this.finishNode(node, \\"ImportDeclaration\\");
      }
      parseImportSource() {
        if (!this.match(125))
          this.unexpected();
        return this.parseExprAtom();
      }
      shouldParseDefaultImport(node) {
        return tokenIsIdentifier(this.state.type);
      }
      parseImportSpecifierLocal(node, specifier, type, contextDescription) {
        specifier.local = this.parseIdentifier();
        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
        node.specifiers.push(this.finishNode(specifier, type));
      }
      parseAssertEntries() {
        const attrs = [];
        const attrNames = /* @__PURE__ */ new Set();
        do {
          if (this.match(8)) {
            break;
          }
          const node = this.startNode();
          const keyName = this.state.value;
          if (attrNames.has(keyName)) {
            this.raise(ErrorMessages.ModuleAttributesWithDuplicateKeys, {
              at: this.state.startLoc
            }, keyName);
          }
          attrNames.add(keyName);
          if (this.match(125)) {
            node.key = this.parseStringLiteral(keyName);
          } else {
            node.key = this.parseIdentifier(true);
          }
          this.expect(14);
          if (!this.match(125)) {
            throw this.raise(ErrorMessages.ModuleAttributeInvalidValue, {
              at: this.state.startLoc
            });
          }
          node.value = this.parseStringLiteral(this.state.value);
          this.finishNode(node, \\"ImportAttribute\\");
          attrs.push(node);
        } while (this.eat(12));
        return attrs;
      }
      maybeParseModuleAttributes() {
        if (this.match(72) && !this.hasPrecedingLineBreak()) {
          this.expectPlugin(\\"moduleAttributes\\");
          this.next();
        } else {
          if (this.hasPlugin(\\"moduleAttributes\\"))
            return [];
          return null;
        }
        const attrs = [];
        const attributes = /* @__PURE__ */ new Set();
        do {
          const node = this.startNode();
          node.key = this.parseIdentifier(true);
          if (node.key.name !== \\"type\\") {
            this.raise(ErrorMessages.ModuleAttributeDifferentFromType, {
              node: node.key
            }, node.key.name);
          }
          if (attributes.has(node.key.name)) {
            this.raise(ErrorMessages.ModuleAttributesWithDuplicateKeys, {
              node: node.key
            }, node.key.name);
          }
          attributes.add(node.key.name);
          this.expect(14);
          if (!this.match(125)) {
            throw this.raise(ErrorMessages.ModuleAttributeInvalidValue, {
              at: this.state.startLoc
            });
          }
          node.value = this.parseStringLiteral(this.state.value);
          this.finishNode(node, \\"ImportAttribute\\");
          attrs.push(node);
        } while (this.eat(12));
        return attrs;
      }
      maybeParseImportAssertions() {
        if (this.isContextual(90) && !this.hasPrecedingLineBreak()) {
          this.expectPlugin(\\"importAssertions\\");
          this.next();
        } else {
          if (this.hasPlugin(\\"importAssertions\\"))
            return [];
          return null;
        }
        this.eat(5);
        const attrs = this.parseAssertEntries();
        this.eat(8);
        return attrs;
      }
      maybeParseDefaultImportSpecifier(node) {
        if (this.shouldParseDefaultImport(node)) {
          this.parseImportSpecifierLocal(node, this.startNode(), \\"ImportDefaultSpecifier\\", \\"default import specifier\\");
          return true;
        }
        return false;
      }
      maybeParseStarImportSpecifier(node) {
        if (this.match(51)) {
          const specifier = this.startNode();
          this.next();
          this.expectContextual(89);
          this.parseImportSpecifierLocal(node, specifier, \\"ImportNamespaceSpecifier\\", \\"import namespace specifier\\");
          return true;
        }
        return false;
      }
      parseNamedImportSpecifiers(node) {
        let first = true;
        this.expect(5);
        while (!this.eat(8)) {
          if (first) {
            first = false;
          } else {
            if (this.eat(14)) {
              throw this.raise(ErrorMessages.DestructureNamedImport, {
                at: this.state.startLoc
              });
            }
            this.expect(12);
            if (this.eat(8))
              break;
          }
          const specifier = this.startNode();
          const importedIsString = this.match(125);
          const isMaybeTypeOnly = this.isContextual(122);
          specifier.imported = this.parseModuleExportName();
          const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \\"type\\" || node.importKind === \\"typeof\\", isMaybeTypeOnly);
          node.specifiers.push(importSpecifier);
        }
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        if (this.eatContextual(89)) {
          specifier.local = this.parseIdentifier();
        } else {
          const {
            imported
          } = specifier;
          if (importedIsString) {
            throw this.raise(ErrorMessages.ImportBindingIsString, {
              node: specifier
            }, imported.value);
          }
          this.checkReservedWord(imported.name, specifier.loc.start, true, true);
          if (!specifier.local) {
            specifier.local = cloneIdentifier(imported);
          }
        }
        this.checkLVal(specifier.local, \\"import specifier\\", BIND_LEXICAL);
        return this.finishNode(specifier, \\"ImportSpecifier\\");
      }
      isThisParam(param) {
        return param.type === \\"Identifier\\" && param.name === \\"this\\";
      }
    };
    var Parser = class extends StatementParser {
      constructor(options, input) {
        options = getOptions(options);
        super(options, input);
        this.options = options;
        this.initializeScopes();
        this.plugins = pluginsMap(this.options.plugins);
        this.filename = options.sourceFilename;
      }
      getScopeHandler() {
        return ScopeHandler;
      }
      parse() {
        this.enterInitialScopes();
        const file = this.startNode();
        const program = this.startNode();
        this.nextToken();
        file.errors = null;
        this.parseTopLevel(file, program);
        file.errors = this.state.errors;
        return file;
      }
    };
    function pluginsMap(plugins) {
      const pluginMap = /* @__PURE__ */ new Map();
      for (const plugin of plugins) {
        const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
        if (!pluginMap.has(name))
          pluginMap.set(name, options || {});
      }
      return pluginMap;
    }
    function parse(input, options) {
      var _options;
      if (((_options = options) == null ? void 0 : _options.sourceType) === \\"unambiguous\\") {
        options = Object.assign({}, options);
        try {
          options.sourceType = \\"module\\";
          const parser = getParser(options, input);
          const ast = parser.parse();
          if (parser.sawUnambiguousESM) {
            return ast;
          }
          if (parser.ambiguousScriptDifferentAst) {
            try {
              options.sourceType = \\"script\\";
              return getParser(options, input).parse();
            } catch (_unused) {
            }
          } else {
            ast.program.sourceType = \\"script\\";
          }
          return ast;
        } catch (moduleError) {
          try {
            options.sourceType = \\"script\\";
            return getParser(options, input).parse();
          } catch (_unused2) {
          }
          throw moduleError;
        }
      } else {
        return getParser(options, input).parse();
      }
    }
    function parseExpression(input, options) {
      const parser = getParser(options, input);
      if (parser.options.strictMode) {
        parser.state.strict = true;
      }
      return parser.getExpression();
    }
    function generateExportedTokenTypes(internalTokenTypes) {
      const tokenTypes2 = {};
      for (const typeName of Object.keys(internalTokenTypes)) {
        tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
      }
      return tokenTypes2;
    }
    var tokTypes = generateExportedTokenTypes(tt);
    function getParser(options, input) {
      let cls = Parser;
      if (options != null && options.plugins) {
        validatePlugins(options.plugins);
        cls = getParserClass(options.plugins);
      }
      return new cls(options, input);
    }
    var parserClassCache = {};
    function getParserClass(pluginsFromOptions) {
      const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name));
      const key = pluginList.join(\\"/\\");
      let cls = parserClassCache[key];
      if (!cls) {
        cls = Parser;
        for (const plugin of pluginList) {
          cls = mixinPlugins[plugin](cls);
        }
        parserClassCache[key] = cls;
      }
      return cls;
    }
    exports.parse = parse;
    exports.parseExpression = parseExpression;
    exports.tokTypes = tokTypes;
  }
});

// node_modules/.pnpm/@babel+helper-hoist-variables@7.16.7/node_modules/@babel/helper-hoist-variables/lib/index.js
var require_lib8 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-hoist-variables@7.16.7/node_modules/@babel/helper-hoist-variables/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = hoistVariables;
    var _t = require_lib2();
    var {
      assignmentExpression,
      expressionStatement,
      identifier
    } = _t;
    var visitor = {
      Scope(path, state) {
        if (state.kind === \\"let\\")
          path.skip();
      },
      FunctionParent(path) {
        path.skip();
      },
      VariableDeclaration(path, state) {
        if (state.kind && path.node.kind !== state.kind)
          return;
        const nodes = [];
        const declarations = path.get(\\"declarations\\");
        let firstId;
        for (const declar of declarations) {
          firstId = declar.node.id;
          if (declar.node.init) {
            nodes.push(expressionStatement(assignmentExpression(\\"=\\", declar.node.id, declar.node.init)));
          }
          for (const name of Object.keys(declar.getBindingIdentifiers())) {
            state.emit(identifier(name), name, declar.node.init !== null);
          }
        }
        if (path.parentPath.isFor({
          left: path.node
        })) {
          path.replaceWith(firstId);
        } else {
          path.replaceWithMultiple(nodes);
        }
      }
    };
    function hoistVariables(path, emit, kind = \\"var\\") {
      path.traverse(visitor, {
        kind,
        emit
      });
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/replacement.js
var require_replacement = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/replacement.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports._replaceWith = _replaceWith;
    exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
    exports.replaceInline = replaceInline;
    exports.replaceWith = replaceWith;
    exports.replaceWithMultiple = replaceWithMultiple;
    exports.replaceWithSourceString = replaceWithSourceString;
    var _codeFrame = require_lib6();
    var _index = require_lib13();
    var _index2 = require_path();
    var _cache = require_cache();
    var _parser = require_lib7();
    var _t = require_lib2();
    var _helperHoistVariables = require_lib8();
    var {
      FUNCTION_TYPES,
      arrowFunctionExpression,
      assignmentExpression,
      awaitExpression,
      blockStatement,
      callExpression,
      cloneNode,
      expressionStatement,
      identifier,
      inheritLeadingComments,
      inheritTrailingComments,
      inheritsComments,
      isExpression,
      isProgram,
      isStatement,
      removeComments,
      returnStatement,
      toSequenceExpression,
      validate,
      yieldExpression
    } = _t;
    function replaceWithMultiple(nodes) {
      var _pathCache$get;
      this.resync();
      nodes = this._verifyNodeList(nodes);
      inheritLeadingComments(nodes[0], this.node);
      inheritTrailingComments(nodes[nodes.length - 1], this.node);
      (_pathCache$get = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get.delete(this.node);
      this.node = this.container[this.key] = null;
      const paths = this.insertAfter(nodes);
      if (this.node) {
        this.requeue();
      } else {
        this.remove();
      }
      return paths;
    }
    function replaceWithSourceString(replacement) {
      this.resync();
      try {
        replacement = \`(\${replacement})\`;
        replacement = (0, _parser.parse)(replacement);
      } catch (err) {
        const loc = err.loc;
        if (loc) {
          err.message += \\" - make sure this is an expression.\\\\n\\" + (0, _codeFrame.codeFrameColumns)(replacement, {
            start: {
              line: loc.line,
              column: loc.column + 1
            }
          });
          err.code = \\"BABEL_REPLACE_SOURCE_ERROR\\";
        }
        throw err;
      }
      replacement = replacement.program.body[0].expression;
      _index.default.removeProperties(replacement);
      return this.replaceWith(replacement);
    }
    function replaceWith(replacement) {
      this.resync();
      if (this.removed) {
        throw new Error(\\"You can't replace this node, we've already removed it\\");
      }
      if (replacement instanceof _index2.default) {
        replacement = replacement.node;
      }
      if (!replacement) {
        throw new Error(\\"You passed \`path.replaceWith()\` a falsy node, use \`path.remove()\` instead\\");
      }
      if (this.node === replacement) {
        return [this];
      }
      if (this.isProgram() && !isProgram(replacement)) {
        throw new Error(\\"You can only replace a Program root node with another Program node\\");
      }
      if (Array.isArray(replacement)) {
        throw new Error(\\"Don't use \`path.replaceWith()\` with an array of nodes, use \`path.replaceWithMultiple()\`\\");
      }
      if (typeof replacement === \\"string\\") {
        throw new Error(\\"Don't use \`path.replaceWith()\` with a source string, use \`path.replaceWithSourceString()\`\\");
      }
      let nodePath = \\"\\";
      if (this.isNodeType(\\"Statement\\") && isExpression(replacement)) {
        if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {
          replacement = expressionStatement(replacement);
          nodePath = \\"expression\\";
        }
      }
      if (this.isNodeType(\\"Expression\\") && isStatement(replacement)) {
        if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
          return this.replaceExpressionWithStatements([replacement]);
        }
      }
      const oldNode = this.node;
      if (oldNode) {
        inheritsComments(replacement, oldNode);
        removeComments(oldNode);
      }
      this._replaceWith(replacement);
      this.type = replacement.type;
      this.setScope();
      this.requeue();
      return [nodePath ? this.get(nodePath) : this];
    }
    function _replaceWith(node) {
      var _pathCache$get2;
      if (!this.container) {
        throw new ReferenceError(\\"Container is falsy\\");
      }
      if (this.inList) {
        validate(this.parent, this.key, [node]);
      } else {
        validate(this.parent, this.key, node);
      }
      this.debug(\`Replace with \${node == null ? void 0 : node.type}\`);
      (_pathCache$get2 = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get2.set(node, this).delete(this.node);
      this.node = this.container[this.key] = node;
    }
    function replaceExpressionWithStatements(nodes) {
      this.resync();
      const nodesAsSequenceExpression = toSequenceExpression(nodes, this.scope);
      if (nodesAsSequenceExpression) {
        return this.replaceWith(nodesAsSequenceExpression)[0].get(\\"expressions\\");
      }
      const functionParent = this.getFunctionParent();
      const isParentAsync = functionParent == null ? void 0 : functionParent.is(\\"async\\");
      const isParentGenerator = functionParent == null ? void 0 : functionParent.is(\\"generator\\");
      const container = arrowFunctionExpression([], blockStatement(nodes));
      this.replaceWith(callExpression(container, []));
      const callee = this.get(\\"callee\\");
      (0, _helperHoistVariables.default)(callee.get(\\"body\\"), (id) => {
        this.scope.push({
          id
        });
      }, \\"var\\");
      const completionRecords = this.get(\\"callee\\").getCompletionRecords();
      for (const path of completionRecords) {
        if (!path.isExpressionStatement())
          continue;
        const loop = path.findParent((path2) => path2.isLoop());
        if (loop) {
          let uid = loop.getData(\\"expressionReplacementReturnUid\\");
          if (!uid) {
            uid = callee.scope.generateDeclaredUidIdentifier(\\"ret\\");
            callee.get(\\"body\\").pushContainer(\\"body\\", returnStatement(cloneNode(uid)));
            loop.setData(\\"expressionReplacementReturnUid\\", uid);
          } else {
            uid = identifier(uid.name);
          }
          path.get(\\"expression\\").replaceWith(assignmentExpression(\\"=\\", cloneNode(uid), path.node.expression));
        } else {
          path.replaceWith(returnStatement(path.node.expression));
        }
      }
      callee.arrowFunctionToExpression();
      const newCallee = callee;
      const needToAwaitFunction = isParentAsync && _index.default.hasType(this.get(\\"callee.body\\").node, \\"AwaitExpression\\", FUNCTION_TYPES);
      const needToYieldFunction = isParentGenerator && _index.default.hasType(this.get(\\"callee.body\\").node, \\"YieldExpression\\", FUNCTION_TYPES);
      if (needToAwaitFunction) {
        newCallee.set(\\"async\\", true);
        if (!needToYieldFunction) {
          this.replaceWith(awaitExpression(this.node));
        }
      }
      if (needToYieldFunction) {
        newCallee.set(\\"generator\\", true);
        this.replaceWith(yieldExpression(this.node, true));
      }
      return newCallee.get(\\"body.body\\");
    }
    function replaceInline(nodes) {
      this.resync();
      if (Array.isArray(nodes)) {
        if (Array.isArray(this.container)) {
          nodes = this._verifyNodeList(nodes);
          const paths = this._containerInsertAfter(nodes);
          this.remove();
          return paths;
        } else {
          return this.replaceWithMultiple(nodes);
        }
      } else {
        return this.replaceWith(nodes);
      }
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/evaluation.js
var require_evaluation = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/evaluation.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.evaluate = evaluate;
    exports.evaluateTruthy = evaluateTruthy;
    var VALID_CALLEES = [\\"String\\", \\"Number\\", \\"Math\\"];
    var INVALID_METHODS = [\\"random\\"];
    function evaluateTruthy() {
      const res = this.evaluate();
      if (res.confident)
        return !!res.value;
    }
    function deopt(path, state) {
      if (!state.confident)
        return;
      state.deoptPath = path;
      state.confident = false;
    }
    function evaluateCached(path, state) {
      const {
        node
      } = path;
      const {
        seen
      } = state;
      if (seen.has(node)) {
        const existing = seen.get(node);
        if (existing.resolved) {
          return existing.value;
        } else {
          deopt(path, state);
          return;
        }
      } else {
        const item = {
          resolved: false
        };
        seen.set(node, item);
        const val = _evaluate(path, state);
        if (state.confident) {
          item.resolved = true;
          item.value = val;
        }
        return val;
      }
    }
    function _evaluate(path, state) {
      if (!state.confident)
        return;
      if (path.isSequenceExpression()) {
        const exprs = path.get(\\"expressions\\");
        return evaluateCached(exprs[exprs.length - 1], state);
      }
      if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
        return path.node.value;
      }
      if (path.isNullLiteral()) {
        return null;
      }
      if (path.isTemplateLiteral()) {
        return evaluateQuasis(path, path.node.quasis, state);
      }
      if (path.isTaggedTemplateExpression() && path.get(\\"tag\\").isMemberExpression()) {
        const object = path.get(\\"tag.object\\");
        const {
          node: {
            name
          }
        } = object;
        const property = path.get(\\"tag.property\\");
        if (object.isIdentifier() && name === \\"String\\" && !path.scope.getBinding(name) && property.isIdentifier() && property.node.name === \\"raw\\") {
          return evaluateQuasis(path, path.node.quasi.quasis, state, true);
        }
      }
      if (path.isConditionalExpression()) {
        const testResult = evaluateCached(path.get(\\"test\\"), state);
        if (!state.confident)
          return;
        if (testResult) {
          return evaluateCached(path.get(\\"consequent\\"), state);
        } else {
          return evaluateCached(path.get(\\"alternate\\"), state);
        }
      }
      if (path.isExpressionWrapper()) {
        return evaluateCached(path.get(\\"expression\\"), state);
      }
      if (path.isMemberExpression() && !path.parentPath.isCallExpression({
        callee: path.node
      })) {
        const property = path.get(\\"property\\");
        const object = path.get(\\"object\\");
        if (object.isLiteral() && property.isIdentifier()) {
          const value = object.node.value;
          const type = typeof value;
          if (type === \\"number\\" || type === \\"string\\") {
            return value[property.node.name];
          }
        }
      }
      if (path.isReferencedIdentifier()) {
        const binding = path.scope.getBinding(path.node.name);
        if (binding && binding.constantViolations.length > 0) {
          return deopt(binding.path, state);
        }
        if (binding && path.node.start < binding.path.node.end) {
          return deopt(binding.path, state);
        }
        if (binding != null && binding.hasValue) {
          return binding.value;
        } else {
          if (path.node.name === \\"undefined\\") {
            return binding ? deopt(binding.path, state) : void 0;
          } else if (path.node.name === \\"Infinity\\") {
            return binding ? deopt(binding.path, state) : Infinity;
          } else if (path.node.name === \\"NaN\\") {
            return binding ? deopt(binding.path, state) : NaN;
          }
          const resolved = path.resolve();
          if (resolved === path) {
            return deopt(path, state);
          } else {
            return evaluateCached(resolved, state);
          }
        }
      }
      if (path.isUnaryExpression({
        prefix: true
      })) {
        if (path.node.operator === \\"void\\") {
          return void 0;
        }
        const argument = path.get(\\"argument\\");
        if (path.node.operator === \\"typeof\\" && (argument.isFunction() || argument.isClass())) {
          return \\"function\\";
        }
        const arg = evaluateCached(argument, state);
        if (!state.confident)
          return;
        switch (path.node.operator) {
          case \\"!\\":
            return !arg;
          case \\"+\\":
            return +arg;
          case \\"-\\":
            return -arg;
          case \\"~\\":
            return ~arg;
          case \\"typeof\\":
            return typeof arg;
        }
      }
      if (path.isArrayExpression()) {
        const arr = [];
        const elems = path.get(\\"elements\\");
        for (const elem of elems) {
          const elemValue = elem.evaluate();
          if (elemValue.confident) {
            arr.push(elemValue.value);
          } else {
            return deopt(elemValue.deopt, state);
          }
        }
        return arr;
      }
      if (path.isObjectExpression()) {
        const obj = {};
        const props = path.get(\\"properties\\");
        for (const prop of props) {
          if (prop.isObjectMethod() || prop.isSpreadElement()) {
            return deopt(prop, state);
          }
          const keyPath = prop.get(\\"key\\");
          let key = keyPath;
          if (prop.node.computed) {
            key = key.evaluate();
            if (!key.confident) {
              return deopt(key.deopt, state);
            }
            key = key.value;
          } else if (key.isIdentifier()) {
            key = key.node.name;
          } else {
            key = key.node.value;
          }
          const valuePath = prop.get(\\"value\\");
          let value = valuePath.evaluate();
          if (!value.confident) {
            return deopt(value.deopt, state);
          }
          value = value.value;
          obj[key] = value;
        }
        return obj;
      }
      if (path.isLogicalExpression()) {
        const wasConfident = state.confident;
        const left = evaluateCached(path.get(\\"left\\"), state);
        const leftConfident = state.confident;
        state.confident = wasConfident;
        const right = evaluateCached(path.get(\\"right\\"), state);
        const rightConfident = state.confident;
        switch (path.node.operator) {
          case \\"||\\":
            state.confident = leftConfident && (!!left || rightConfident);
            if (!state.confident)
              return;
            return left || right;
          case \\"&&\\":
            state.confident = leftConfident && (!left || rightConfident);
            if (!state.confident)
              return;
            return left && right;
        }
      }
      if (path.isBinaryExpression()) {
        const left = evaluateCached(path.get(\\"left\\"), state);
        if (!state.confident)
          return;
        const right = evaluateCached(path.get(\\"right\\"), state);
        if (!state.confident)
          return;
        switch (path.node.operator) {
          case \\"-\\":
            return left - right;
          case \\"+\\":
            return left + right;
          case \\"/\\":
            return left / right;
          case \\"*\\":
            return left * right;
          case \\"%\\":
            return left % right;
          case \\"**\\":
            return Math.pow(left, right);
          case \\"<\\":
            return left < right;
          case \\">\\":
            return left > right;
          case \\"<=\\":
            return left <= right;
          case \\">=\\":
            return left >= right;
          case \\"==\\":
            return left == right;
          case \\"!=\\":
            return left != right;
          case \\"===\\":
            return left === right;
          case \\"!==\\":
            return left !== right;
          case \\"|\\":
            return left | right;
          case \\"&\\":
            return left & right;
          case \\"^\\":
            return left ^ right;
          case \\"<<\\":
            return left << right;
          case \\">>\\":
            return left >> right;
          case \\">>>\\":
            return left >>> right;
        }
      }
      if (path.isCallExpression()) {
        const callee = path.get(\\"callee\\");
        let context;
        let func;
        if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
          func = global[callee.node.name];
        }
        if (callee.isMemberExpression()) {
          const object = callee.get(\\"object\\");
          const property = callee.get(\\"property\\");
          if (object.isIdentifier() && property.isIdentifier() && VALID_CALLEES.indexOf(object.node.name) >= 0 && INVALID_METHODS.indexOf(property.node.name) < 0) {
            context = global[object.node.name];
            func = context[property.node.name];
          }
          if (object.isLiteral() && property.isIdentifier()) {
            const type = typeof object.node.value;
            if (type === \\"string\\" || type === \\"number\\") {
              context = object.node.value;
              func = context[property.node.name];
            }
          }
        }
        if (func) {
          const args = path.get(\\"arguments\\").map((arg) => evaluateCached(arg, state));
          if (!state.confident)
            return;
          return func.apply(context, args);
        }
      }
      deopt(path, state);
    }
    function evaluateQuasis(path, quasis, state, raw = false) {
      let str = \\"\\";
      let i = 0;
      const exprs = path.get(\\"expressions\\");
      for (const elem of quasis) {
        if (!state.confident)
          break;
        str += raw ? elem.value.raw : elem.value.cooked;
        const expr = exprs[i++];
        if (expr)
          str += String(evaluateCached(expr, state));
      }
      if (!state.confident)
        return;
      return str;
    }
    function evaluate() {
      const state = {
        confident: true,
        deoptPath: null,
        seen: /* @__PURE__ */ new Map()
      };
      let value = evaluateCached(this, state);
      if (!state.confident)
        value = void 0;
      return {
        confident: state.confident,
        deopt: state.deoptPath,
        value
      };
    }
  }
});

// node_modules/.pnpm/@babel+helper-environment-visitor@7.16.7/node_modules/@babel/helper-environment-visitor/lib/index.js
var require_lib9 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-environment-visitor@7.16.7/node_modules/@babel/helper-environment-visitor/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    exports.skipAllButComputedKey = skipAllButComputedKey;
    var _t = require_lib2();
    var {
      VISITOR_KEYS,
      staticBlock
    } = _t;
    function skipAllButComputedKey(path) {
      if (!path.node.computed) {
        path.skip();
        return;
      }
      const keys = VISITOR_KEYS[path.type];
      for (const key of keys) {
        if (key !== \\"key\\")
          path.skipKey(key);
      }
    }
    var skipKey = (staticBlock ? \\"StaticBlock|\\" : \\"\\") + \\"ClassPrivateProperty|TypeAnnotation|FunctionDeclaration|FunctionExpression\\";
    var _default = {
      [skipKey]: (path) => path.skip(),
      \\"Method|ClassProperty\\"(path) {
        skipAllButComputedKey(path);
      }
    };
    exports.default = _default;
  }
});

// node_modules/.pnpm/@babel+helper-get-function-arity@7.16.7/node_modules/@babel/helper-get-function-arity/lib/index.js
var require_lib10 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-get-function-arity@7.16.7/node_modules/@babel/helper-get-function-arity/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = _default;
    var _t = require_lib2();
    var {
      isAssignmentPattern,
      isRestElement
    } = _t;
    function _default(node) {
      const params = node.params;
      for (let i = 0; i < params.length; i++) {
        const param = params[i];
        if (isAssignmentPattern(param) || isRestElement(param)) {
          return i;
        }
      }
      return params.length;
    }
  }
});

// node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/formatters.js
var require_formatters = __commonJS({
  \\"node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/formatters.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;
    var _t = require_lib2();
    var {
      assertExpressionStatement
    } = _t;
    function makeStatementFormatter(fn) {
      return {
        code: (str) => \`/* @babel/template */;
\${str}\`,
        validate: () => {
        },
        unwrap: (ast) => {
          return fn(ast.program.body.slice(1));
        }
      };
    }
    var smart = makeStatementFormatter((body) => {
      if (body.length > 1) {
        return body;
      } else {
        return body[0];
      }
    });
    exports.smart = smart;
    var statements = makeStatementFormatter((body) => body);
    exports.statements = statements;
    var statement = makeStatementFormatter((body) => {
      if (body.length === 0) {
        throw new Error(\\"Found nothing to return.\\");
      }
      if (body.length > 1) {
        throw new Error(\\"Found multiple statements but wanted one\\");
      }
      return body[0];
    });
    exports.statement = statement;
    var expression = {
      code: (str) => \`(
\${str}
)\`,
      validate: (ast) => {
        if (ast.program.body.length > 1) {
          throw new Error(\\"Found multiple statements but wanted one\\");
        }
        if (expression.unwrap(ast).start === 0) {
          throw new Error(\\"Parse result included parens.\\");
        }
      },
      unwrap: ({
        program: program2
      }) => {
        const [stmt] = program2.body;
        assertExpressionStatement(stmt);
        return stmt.expression;
      }
    };
    exports.expression = expression;
    var program = {
      code: (str) => str,
      validate: () => {
      },
      unwrap: (ast) => ast.program
    };
    exports.program = program;
  }
});

// node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/options.js
var require_options = __commonJS({
  \\"node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/options.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.merge = merge;
    exports.normalizeReplacements = normalizeReplacements;
    exports.validate = validate;
    var _excluded = [\\"placeholderWhitelist\\", \\"placeholderPattern\\", \\"preserveComments\\", \\"syntacticPlaceholders\\"];
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function merge(a2, b) {
      const {
        placeholderWhitelist = a2.placeholderWhitelist,
        placeholderPattern = a2.placeholderPattern,
        preserveComments = a2.preserveComments,
        syntacticPlaceholders = a2.syntacticPlaceholders
      } = b;
      return {
        parser: Object.assign({}, a2.parser, b.parser),
        placeholderWhitelist,
        placeholderPattern,
        preserveComments,
        syntacticPlaceholders
      };
    }
    function validate(opts) {
      if (opts != null && typeof opts !== \\"object\\") {
        throw new Error(\\"Unknown template options.\\");
      }
      const _ref = opts || {}, {
        placeholderWhitelist,
        placeholderPattern,
        preserveComments,
        syntacticPlaceholders
      } = _ref, parser = _objectWithoutPropertiesLoose(_ref, _excluded);
      if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {
        throw new Error(\\"'.placeholderWhitelist' must be a Set, null, or undefined\\");
      }
      if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) {
        throw new Error(\\"'.placeholderPattern' must be a RegExp, false, null, or undefined\\");
      }
      if (preserveComments != null && typeof preserveComments !== \\"boolean\\") {
        throw new Error(\\"'.preserveComments' must be a boolean, null, or undefined\\");
      }
      if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== \\"boolean\\") {
        throw new Error(\\"'.syntacticPlaceholders' must be a boolean, null, or undefined\\");
      }
      if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) {
        throw new Error(\\"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'\\");
      }
      return {
        parser,
        placeholderWhitelist: placeholderWhitelist || void 0,
        placeholderPattern: placeholderPattern == null ? void 0 : placeholderPattern,
        preserveComments: preserveComments == null ? void 0 : preserveComments,
        syntacticPlaceholders: syntacticPlaceholders == null ? void 0 : syntacticPlaceholders
      };
    }
    function normalizeReplacements(replacements) {
      if (Array.isArray(replacements)) {
        return replacements.reduce((acc, replacement, i) => {
          acc[\\"$\\" + i] = replacement;
          return acc;
        }, {});
      } else if (typeof replacements === \\"object\\" || replacements == null) {
        return replacements || void 0;
      }
      throw new Error(\\"Template replacements must be an array, object, null, or undefined\\");
    }
  }
});

// node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/parse.js
var require_parse = __commonJS({
  \\"node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/parse.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = parseAndBuildMetadata;
    var _t = require_lib2();
    var _parser = require_lib7();
    var _codeFrame = require_lib6();
    var {
      isCallExpression,
      isExpressionStatement,
      isFunction,
      isIdentifier,
      isJSXIdentifier,
      isNewExpression,
      isPlaceholder,
      isStatement,
      isStringLiteral,
      removePropertiesDeep,
      traverse
    } = _t;
    var PATTERN = /^[_$A-Z0-9]+$/;
    function parseAndBuildMetadata(formatter, code, opts) {
      const {
        placeholderWhitelist,
        placeholderPattern,
        preserveComments,
        syntacticPlaceholders
      } = opts;
      const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);
      removePropertiesDeep(ast, {
        preserveComments
      });
      formatter.validate(ast);
      const syntactic = {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      };
      const legacy = {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      };
      const isLegacyRef = {
        value: void 0
      };
      traverse(ast, placeholderVisitorHandler, {
        syntactic,
        legacy,
        isLegacyRef,
        placeholderWhitelist,
        placeholderPattern,
        syntacticPlaceholders
      });
      return Object.assign({
        ast
      }, isLegacyRef.value ? legacy : syntactic);
    }
    function placeholderVisitorHandler(node, ancestors, state) {
      var _state$placeholderWhi;
      let name;
      if (isPlaceholder(node)) {
        if (state.syntacticPlaceholders === false) {
          throw new Error(\\"%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.\\");
        } else {
          name = node.name.name;
          state.isLegacyRef.value = false;
        }
      } else if (state.isLegacyRef.value === false || state.syntacticPlaceholders) {
        return;
      } else if (isIdentifier(node) || isJSXIdentifier(node)) {
        name = node.name;
        state.isLegacyRef.value = true;
      } else if (isStringLiteral(node)) {
        name = node.value;
        state.isLegacyRef.value = true;
      } else {
        return;
      }
      if (!state.isLegacyRef.value && (state.placeholderPattern != null || state.placeholderWhitelist != null)) {
        throw new Error(\\"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'\\");
      }
      if (state.isLegacyRef.value && (state.placeholderPattern === false || !(state.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) {
        return;
      }
      ancestors = ancestors.slice();
      const {
        node: parent,
        key
      } = ancestors[ancestors.length - 1];
      let type;
      if (isStringLiteral(node) || isPlaceholder(node, {
        expectedNode: \\"StringLiteral\\"
      })) {
        type = \\"string\\";
      } else if (isNewExpression(parent) && key === \\"arguments\\" || isCallExpression(parent) && key === \\"arguments\\" || isFunction(parent) && key === \\"params\\") {
        type = \\"param\\";
      } else if (isExpressionStatement(parent) && !isPlaceholder(node)) {
        type = \\"statement\\";
        ancestors = ancestors.slice(0, -1);
      } else if (isStatement(node) && isPlaceholder(node)) {
        type = \\"statement\\";
      } else {
        type = \\"other\\";
      }
      const {
        placeholders,
        placeholderNames
      } = state.isLegacyRef.value ? state.legacy : state.syntactic;
      placeholders.push({
        name,
        type,
        resolve: (ast) => resolveAncestors(ast, ancestors),
        isDuplicate: placeholderNames.has(name)
      });
      placeholderNames.add(name);
    }
    function resolveAncestors(ast, ancestors) {
      let parent = ast;
      for (let i = 0; i < ancestors.length - 1; i++) {
        const {
          key: key2,
          index: index2
        } = ancestors[i];
        if (index2 === void 0) {
          parent = parent[key2];
        } else {
          parent = parent[key2][index2];
        }
      }
      const {
        key,
        index
      } = ancestors[ancestors.length - 1];
      return {
        parent,
        key,
        index
      };
    }
    function parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {
      const plugins = (parserOpts.plugins || []).slice();
      if (syntacticPlaceholders !== false) {
        plugins.push(\\"placeholders\\");
      }
      parserOpts = Object.assign({
        allowReturnOutsideFunction: true,
        allowSuperOutsideMethod: true,
        sourceType: \\"module\\"
      }, parserOpts, {
        plugins
      });
      try {
        return (0, _parser.parse)(code, parserOpts);
      } catch (err) {
        const loc = err.loc;
        if (loc) {
          err.message += \\"\\\\n\\" + (0, _codeFrame.codeFrameColumns)(code, {
            start: loc
          });
          err.code = \\"BABEL_TEMPLATE_PARSE_ERROR\\";
        }
        throw err;
      }
    }
  }
});

// node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/populate.js
var require_populate = __commonJS({
  \\"node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/populate.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = populatePlaceholders;
    var _t = require_lib2();
    var {
      blockStatement,
      cloneNode,
      emptyStatement,
      expressionStatement,
      identifier,
      isStatement,
      isStringLiteral,
      stringLiteral,
      validate
    } = _t;
    function populatePlaceholders(metadata, replacements) {
      const ast = cloneNode(metadata.ast);
      if (replacements) {
        metadata.placeholders.forEach((placeholder) => {
          if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {
            const placeholderName = placeholder.name;
            throw new Error(\`Error: No substitution given for \\"\${placeholderName}\\". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['\${placeholderName}'])}
            - { placeholderPattern: /^\${placeholderName}$/ }\`);
          }
        });
        Object.keys(replacements).forEach((key) => {
          if (!metadata.placeholderNames.has(key)) {
            throw new Error(\`Unknown substitution \\"\${key}\\" given\`);
          }
        });
      }
      metadata.placeholders.slice().reverse().forEach((placeholder) => {
        try {
          applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);
        } catch (e) {
          e.message = \`@babel/template placeholder \\"\${placeholder.name}\\": \${e.message}\`;
          throw e;
        }
      });
      return ast;
    }
    function applyReplacement(placeholder, ast, replacement) {
      if (placeholder.isDuplicate) {
        if (Array.isArray(replacement)) {
          replacement = replacement.map((node) => cloneNode(node));
        } else if (typeof replacement === \\"object\\") {
          replacement = cloneNode(replacement);
        }
      }
      const {
        parent,
        key,
        index
      } = placeholder.resolve(ast);
      if (placeholder.type === \\"string\\") {
        if (typeof replacement === \\"string\\") {
          replacement = stringLiteral(replacement);
        }
        if (!replacement || !isStringLiteral(replacement)) {
          throw new Error(\\"Expected string substitution\\");
        }
      } else if (placeholder.type === \\"statement\\") {
        if (index === void 0) {
          if (!replacement) {
            replacement = emptyStatement();
          } else if (Array.isArray(replacement)) {
            replacement = blockStatement(replacement);
          } else if (typeof replacement === \\"string\\") {
            replacement = expressionStatement(identifier(replacement));
          } else if (!isStatement(replacement)) {
            replacement = expressionStatement(replacement);
          }
        } else {
          if (replacement && !Array.isArray(replacement)) {
            if (typeof replacement === \\"string\\") {
              replacement = identifier(replacement);
            }
            if (!isStatement(replacement)) {
              replacement = expressionStatement(replacement);
            }
          }
        }
      } else if (placeholder.type === \\"param\\") {
        if (typeof replacement === \\"string\\") {
          replacement = identifier(replacement);
        }
        if (index === void 0)
          throw new Error(\\"Assertion failure.\\");
      } else {
        if (typeof replacement === \\"string\\") {
          replacement = identifier(replacement);
        }
        if (Array.isArray(replacement)) {
          throw new Error(\\"Cannot replace single expression with an array.\\");
        }
      }
      if (index === void 0) {
        validate(parent, key, replacement);
        parent[key] = replacement;
      } else {
        const items = parent[key].slice();
        if (placeholder.type === \\"statement\\" || placeholder.type === \\"param\\") {
          if (replacement == null) {
            items.splice(index, 1);
          } else if (Array.isArray(replacement)) {
            items.splice(index, 1, ...replacement);
          } else {
            items[index] = replacement;
          }
        } else {
          items[index] = replacement;
        }
        validate(parent, key, items);
        parent[key] = items;
      }
    }
  }
});

// node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/string.js
var require_string = __commonJS({
  \\"node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/string.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = stringTemplate;
    var _options = require_options();
    var _parse = require_parse();
    var _populate = require_populate();
    function stringTemplate(formatter, code, opts) {
      code = formatter.code(code);
      let metadata;
      return (arg) => {
        const replacements = (0, _options.normalizeReplacements)(arg);
        if (!metadata)
          metadata = (0, _parse.default)(formatter, code, opts);
        return formatter.unwrap((0, _populate.default)(metadata, replacements));
      };
    }
  }
});

// node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/literal.js
var require_literal = __commonJS({
  \\"node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/literal.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = literalTemplate;
    var _options = require_options();
    var _parse = require_parse();
    var _populate = require_populate();
    function literalTemplate(formatter, tpl, opts) {
      const {
        metadata,
        names
      } = buildLiteralData(formatter, tpl, opts);
      return (arg) => {
        const defaultReplacements = {};
        arg.forEach((replacement, i) => {
          defaultReplacements[names[i]] = replacement;
        });
        return (arg2) => {
          const replacements = (0, _options.normalizeReplacements)(arg2);
          if (replacements) {
            Object.keys(replacements).forEach((key) => {
              if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {
                throw new Error(\\"Unexpected replacement overlap.\\");
              }
            });
          }
          return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
        };
      };
    }
    function buildLiteralData(formatter, tpl, opts) {
      let names;
      let nameSet;
      let metadata;
      let prefix = \\"\\";
      do {
        prefix += \\"$\\";
        const result = buildTemplateCode(tpl, prefix);
        names = result.names;
        nameSet = new Set(names);
        metadata = (0, _parse.default)(formatter, formatter.code(result.code), {
          parser: opts.parser,
          placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),
          placeholderPattern: opts.placeholderPattern,
          preserveComments: opts.preserveComments,
          syntacticPlaceholders: opts.syntacticPlaceholders
        });
      } while (metadata.placeholders.some((placeholder) => placeholder.isDuplicate && nameSet.has(placeholder.name)));
      return {
        metadata,
        names
      };
    }
    function buildTemplateCode(tpl, prefix) {
      const names = [];
      let code = tpl[0];
      for (let i = 1; i < tpl.length; i++) {
        const value = \`\${prefix}\${i - 1}\`;
        names.push(value);
        code += value + tpl[i];
      }
      return {
        names,
        code
      };
    }
  }
});

// node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/builder.js
var require_builder2 = __commonJS({
  \\"node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/builder.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = createTemplateBuilder;
    var _options = require_options();
    var _string = require_string();
    var _literal = require_literal();
    var NO_PLACEHOLDER = (0, _options.validate)({
      placeholderPattern: false
    });
    function createTemplateBuilder(formatter, defaultOpts) {
      const templateFnCache = /* @__PURE__ */ new WeakMap();
      const templateAstCache = /* @__PURE__ */ new WeakMap();
      const cachedOpts = defaultOpts || (0, _options.validate)(null);
      return Object.assign((tpl, ...args) => {
        if (typeof tpl === \\"string\\") {
          if (args.length > 1)
            throw new Error(\\"Unexpected extra params.\\");
          return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
        } else if (Array.isArray(tpl)) {
          let builder = templateFnCache.get(tpl);
          if (!builder) {
            builder = (0, _literal.default)(formatter, tpl, cachedOpts);
            templateFnCache.set(tpl, builder);
          }
          return extendedTrace(builder(args));
        } else if (typeof tpl === \\"object\\" && tpl) {
          if (args.length > 0)
            throw new Error(\\"Unexpected extra params.\\");
          return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
        }
        throw new Error(\`Unexpected template param \${typeof tpl}\`);
      }, {
        ast: (tpl, ...args) => {
          if (typeof tpl === \\"string\\") {
            if (args.length > 1)
              throw new Error(\\"Unexpected extra params.\\");
            return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
          } else if (Array.isArray(tpl)) {
            let builder = templateAstCache.get(tpl);
            if (!builder) {
              builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER));
              templateAstCache.set(tpl, builder);
            }
            return builder(args)();
          }
          throw new Error(\`Unexpected template param \${typeof tpl}\`);
        }
      });
    }
    function extendedTrace(fn) {
      let rootStack = \\"\\";
      try {
        throw new Error();
      } catch (error) {
        if (error.stack) {
          rootStack = error.stack.split(\\"\\\\n\\").slice(3).join(\\"\\\\n\\");
        }
      }
      return (arg) => {
        try {
          return fn(arg);
        } catch (err) {
          err.stack += \`
    =============
\${rootStack}\`;
          throw err;
        }
      };
    }
  }
});

// node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/index.js
var require_lib11 = __commonJS({
  \\"node_modules/.pnpm/@babel+template@7.16.7/node_modules/@babel/template/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.statements = exports.statement = exports.smart = exports.program = exports.expression = exports.default = void 0;
    var formatters = require_formatters();
    var _builder = require_builder2();
    var smart = (0, _builder.default)(formatters.smart);
    exports.smart = smart;
    var statement = (0, _builder.default)(formatters.statement);
    exports.statement = statement;
    var statements = (0, _builder.default)(formatters.statements);
    exports.statements = statements;
    var expression = (0, _builder.default)(formatters.expression);
    exports.expression = expression;
    var program = (0, _builder.default)(formatters.program);
    exports.program = program;
    var _default = Object.assign(smart.bind(void 0), {
      smart,
      statement,
      statements,
      expression,
      program,
      ast: smart.ast
    });
    exports.default = _default;
  }
});

// node_modules/.pnpm/@babel+helper-function-name@7.16.7/node_modules/@babel/helper-function-name/lib/index.js
var require_lib12 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-function-name@7.16.7/node_modules/@babel/helper-function-name/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = _default;
    var _helperGetFunctionArity = require_lib10();
    var _template = require_lib11();
    var _t = require_lib2();
    var {
      NOT_LOCAL_BINDING,
      cloneNode,
      identifier,
      isAssignmentExpression,
      isFunction,
      isIdentifier,
      isLiteral,
      isNullLiteral,
      isObjectMethod,
      isObjectProperty,
      isRegExpLiteral,
      isTemplateLiteral,
      isVariableDeclarator,
      toBindingIdentifierName
    } = _t;
    var buildPropertyMethodAssignmentWrapper = (0, _template.default)(\`
  (function (FUNCTION_KEY) {
    function FUNCTION_ID() {
      return FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    }

    return FUNCTION_ID;
  })(FUNCTION)
\`);
    var buildGeneratorPropertyMethodAssignmentWrapper = (0, _template.default)(\`
  (function (FUNCTION_KEY) {
    function* FUNCTION_ID() {
      return yield* FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    };

    return FUNCTION_ID;
  })(FUNCTION)
\`);
    var visitor = {
      \\"ReferencedIdentifier|BindingIdentifier\\"(path, state) {
        if (path.node.name !== state.name)
          return;
        const localDeclar = path.scope.getBindingIdentifier(state.name);
        if (localDeclar !== state.outerDeclar)
          return;
        state.selfReference = true;
        path.stop();
      }
    };
    function getNameFromLiteralId(id) {
      if (isNullLiteral(id)) {
        return \\"null\\";
      }
      if (isRegExpLiteral(id)) {
        return \`_\${id.pattern}_\${id.flags}\`;
      }
      if (isTemplateLiteral(id)) {
        return id.quasis.map((quasi) => quasi.value.raw).join(\\"\\");
      }
      if (id.value !== void 0) {
        return id.value + \\"\\";
      }
      return \\"\\";
    }
    function wrap(state, method, id, scope) {
      if (state.selfReference) {
        if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
          scope.rename(id.name);
        } else {
          if (!isFunction(method))
            return;
          let build = buildPropertyMethodAssignmentWrapper;
          if (method.generator) {
            build = buildGeneratorPropertyMethodAssignmentWrapper;
          }
          const template = build({
            FUNCTION: method,
            FUNCTION_ID: id,
            FUNCTION_KEY: scope.generateUidIdentifier(id.name)
          }).expression;
          const params = template.callee.body.body[0].params;
          for (let i = 0, len = (0, _helperGetFunctionArity.default)(method); i < len; i++) {
            params.push(scope.generateUidIdentifier(\\"x\\"));
          }
          return template;
        }
      }
      method.id = id;
      scope.getProgramParent().references[id.name] = true;
    }
    function visit(node, name, scope) {
      const state = {
        selfAssignment: false,
        selfReference: false,
        outerDeclar: scope.getBindingIdentifier(name),
        references: [],
        name
      };
      const binding = scope.getOwnBinding(name);
      if (binding) {
        if (binding.kind === \\"param\\") {
          state.selfReference = true;
        } else {
        }
      } else if (state.outerDeclar || scope.hasGlobal(name)) {
        scope.traverse(node, visitor, state);
      }
      return state;
    }
    function _default({
      node,
      parent,
      scope,
      id
    }, localBinding = false, supportUnicodeId = false) {
      if (node.id)
        return;
      if ((isObjectProperty(parent) || isObjectMethod(parent, {
        kind: \\"method\\"
      })) && (!parent.computed || isLiteral(parent.key))) {
        id = parent.key;
      } else if (isVariableDeclarator(parent)) {
        id = parent.id;
        if (isIdentifier(id) && !localBinding) {
          const binding = scope.parent.getBinding(id.name);
          if (binding && binding.constant && scope.getBinding(id.name) === binding) {
            node.id = cloneNode(id);
            node.id[NOT_LOCAL_BINDING] = true;
            return;
          }
        }
      } else if (isAssignmentExpression(parent, {
        operator: \\"=\\"
      })) {
        id = parent.left;
      } else if (!id) {
        return;
      }
      let name;
      if (id && isLiteral(id)) {
        name = getNameFromLiteralId(id);
      } else if (id && isIdentifier(id)) {
        name = id.name;
      }
      if (name === void 0) {
        return;
      }
      if (!supportUnicodeId && isFunction(node) && /[\\\\uD800-\\\\uDFFF]/.test(name)) {
        return;
      }
      name = toBindingIdentifierName(name);
      id = identifier(name);
      id[NOT_LOCAL_BINDING] = true;
      const state = visit(node, name, scope);
      return wrap(state, node, id, scope) || node;
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/conversion.js
var require_conversion = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/conversion.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.arrowFunctionToExpression = arrowFunctionToExpression;
    exports.arrowFunctionToShadowed = arrowFunctionToShadowed;
    exports.ensureBlock = ensureBlock;
    exports.toComputedKey = toComputedKey;
    exports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
    var _t = require_lib2();
    var _helperEnvironmentVisitor = require_lib9();
    var _helperFunctionName = require_lib12();
    var _visitors = require_visitors();
    var {
      arrowFunctionExpression,
      assignmentExpression,
      binaryExpression,
      blockStatement,
      callExpression,
      conditionalExpression,
      expressionStatement,
      identifier,
      isIdentifier,
      jsxIdentifier,
      logicalExpression,
      LOGICAL_OPERATORS,
      memberExpression,
      metaProperty,
      numericLiteral,
      objectExpression,
      restElement,
      returnStatement,
      sequenceExpression,
      spreadElement,
      stringLiteral,
      super: _super,
      thisExpression,
      toExpression,
      unaryExpression
    } = _t;
    function toComputedKey() {
      let key;
      if (this.isMemberExpression()) {
        key = this.node.property;
      } else if (this.isProperty() || this.isMethod()) {
        key = this.node.key;
      } else {
        throw new ReferenceError(\\"todo\\");
      }
      if (!this.node.computed) {
        if (isIdentifier(key))
          key = stringLiteral(key.name);
      }
      return key;
    }
    function ensureBlock() {
      const body = this.get(\\"body\\");
      const bodyNode = body.node;
      if (Array.isArray(body)) {
        throw new Error(\\"Can't convert array path to a block statement\\");
      }
      if (!bodyNode) {
        throw new Error(\\"Can't convert node without a body\\");
      }
      if (body.isBlockStatement()) {
        return bodyNode;
      }
      const statements = [];
      let stringPath = \\"body\\";
      let key;
      let listKey;
      if (body.isStatement()) {
        listKey = \\"body\\";
        key = 0;
        statements.push(body.node);
      } else {
        stringPath += \\".body.0\\";
        if (this.isFunction()) {
          key = \\"argument\\";
          statements.push(returnStatement(body.node));
        } else {
          key = \\"expression\\";
          statements.push(expressionStatement(body.node));
        }
      }
      this.node.body = blockStatement(statements);
      const parentPath = this.get(stringPath);
      body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);
      return this.node;
    }
    function arrowFunctionToShadowed() {
      if (!this.isArrowFunctionExpression())
        return;
      this.arrowFunctionToExpression();
    }
    function unwrapFunctionEnvironment() {
      if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {
        throw this.buildCodeFrameError(\\"Can only unwrap the environment of a function.\\");
      }
      hoistFunctionEnvironment(this);
    }
    function arrowFunctionToExpression({
      allowInsertArrow = true,
      specCompliant = false,
      noNewArrows = !specCompliant
    } = {}) {
      if (!this.isArrowFunctionExpression()) {
        throw this.buildCodeFrameError(\\"Cannot convert non-arrow function to a function expression.\\");
      }
      const {
        thisBinding,
        fnPath: fn
      } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);
      fn.ensureBlock();
      fn.node.type = \\"FunctionExpression\\";
      if (!noNewArrows) {
        const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier(\\"arrowCheckId\\");
        if (checkBinding) {
          fn.parentPath.scope.push({
            id: checkBinding,
            init: objectExpression([])
          });
        }
        fn.get(\\"body\\").unshiftContainer(\\"body\\", expressionStatement(callExpression(this.hub.addHelper(\\"newArrowCheck\\"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));
        fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn.node, identifier(\\"bind\\")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));
      }
    }
    var getSuperCallsVisitor = (0, _visitors.merge)([{
      CallExpression(child, {
        allSuperCalls
      }) {
        if (!child.get(\\"callee\\").isSuper())
          return;
        allSuperCalls.push(child);
      }
    }, _helperEnvironmentVisitor.default]);
    function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {
      let arrowParent;
      let thisEnvFn = fnPath.findParent((p) => {
        if (p.isArrowFunctionExpression()) {
          var _arrowParent;
          (_arrowParent = arrowParent) != null ? _arrowParent : arrowParent = p;
          return false;
        }
        return p.isFunction() || p.isProgram() || p.isClassProperty({
          static: false
        }) || p.isClassPrivateProperty({
          static: false
        });
      });
      const inConstructor = thisEnvFn.isClassMethod({
        kind: \\"constructor\\"
      });
      if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {
        if (arrowParent) {
          thisEnvFn = arrowParent;
        } else if (allowInsertArrow) {
          fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), []));
          thisEnvFn = fnPath.get(\\"callee\\");
          fnPath = thisEnvFn.get(\\"body\\");
        } else {
          throw fnPath.buildCodeFrameError(\\"Unable to transform arrow inside class property\\");
        }
      }
      const {
        thisPaths,
        argumentsPaths,
        newTargetPaths,
        superProps,
        superCalls
      } = getScopeInformation(fnPath);
      if (inConstructor && superCalls.length > 0) {
        if (!allowInsertArrow) {
          throw superCalls[0].buildCodeFrameError(\\"Unable to handle nested super() usage in arrow\\");
        }
        const allSuperCalls = [];
        thisEnvFn.traverse(getSuperCallsVisitor, {
          allSuperCalls
        });
        const superBinding = getSuperBinding(thisEnvFn);
        allSuperCalls.forEach((superCall) => {
          const callee = identifier(superBinding);
          callee.loc = superCall.node.callee.loc;
          superCall.get(\\"callee\\").replaceWith(callee);
        });
      }
      if (argumentsPaths.length > 0) {
        const argumentsBinding = getBinding(thisEnvFn, \\"arguments\\", () => {
          const args = () => identifier(\\"arguments\\");
          if (thisEnvFn.scope.path.isProgram()) {
            return conditionalExpression(binaryExpression(\\"===\\", unaryExpression(\\"typeof\\", args()), stringLiteral(\\"undefined\\")), thisEnvFn.scope.buildUndefinedNode(), args());
          } else {
            return args();
          }
        });
        argumentsPaths.forEach((argumentsChild) => {
          const argsRef = identifier(argumentsBinding);
          argsRef.loc = argumentsChild.node.loc;
          argumentsChild.replaceWith(argsRef);
        });
      }
      if (newTargetPaths.length > 0) {
        const newTargetBinding = getBinding(thisEnvFn, \\"newtarget\\", () => metaProperty(identifier(\\"new\\"), identifier(\\"target\\")));
        newTargetPaths.forEach((targetChild) => {
          const targetRef = identifier(newTargetBinding);
          targetRef.loc = targetChild.node.loc;
          targetChild.replaceWith(targetRef);
        });
      }
      if (superProps.length > 0) {
        if (!allowInsertArrow) {
          throw superProps[0].buildCodeFrameError(\\"Unable to handle nested super.prop usage\\");
        }
        const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);
        flatSuperProps.forEach((superProp) => {
          const key = superProp.node.computed ? \\"\\" : superProp.get(\\"property\\").node.name;
          const isAssignment = superProp.parentPath.isAssignmentExpression({
            left: superProp.node
          });
          const isCall = superProp.parentPath.isCallExpression({
            callee: superProp.node
          });
          const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);
          const args = [];
          if (superProp.node.computed) {
            args.push(superProp.get(\\"property\\").node);
          }
          if (isAssignment) {
            const value = superProp.parentPath.node.right;
            args.push(value);
          }
          const call = callExpression(identifier(superBinding), args);
          if (isCall) {
            superProp.parentPath.unshiftContainer(\\"arguments\\", thisExpression());
            superProp.replaceWith(memberExpression(call, identifier(\\"call\\")));
            thisPaths.push(superProp.parentPath.get(\\"arguments.0\\"));
          } else if (isAssignment) {
            superProp.parentPath.replaceWith(call);
          } else {
            superProp.replaceWith(call);
          }
        });
      }
      let thisBinding;
      if (thisPaths.length > 0 || !noNewArrows) {
        thisBinding = getThisBinding(thisEnvFn, inConstructor);
        if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {
          thisPaths.forEach((thisChild) => {
            const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
            thisRef.loc = thisChild.node.loc;
            thisChild.replaceWith(thisRef);
          });
          if (!noNewArrows)
            thisBinding = null;
        }
      }
      return {
        thisBinding,
        fnPath
      };
    }
    function isLogicalOp(op) {
      return LOGICAL_OPERATORS.includes(op);
    }
    function standardizeSuperProperty(superProp) {
      if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \\"=\\") {
        const assignmentPath = superProp.parentPath;
        const op = assignmentPath.node.operator.slice(0, -1);
        const value = assignmentPath.node.right;
        const isLogicalAssignment = isLogicalOp(op);
        if (superProp.node.computed) {
          const tmp = superProp.scope.generateDeclaredUidIdentifier(\\"tmp\\");
          const object = superProp.node.object;
          const property = superProp.node.property;
          assignmentPath.get(\\"left\\").replaceWith(memberExpression(object, assignmentExpression(\\"=\\", tmp, property), true));
          assignmentPath.get(\\"right\\").replaceWith(rightExpression(isLogicalAssignment ? \\"=\\" : op, memberExpression(object, identifier(tmp.name), true), value));
        } else {
          const object = superProp.node.object;
          const property = superProp.node.property;
          assignmentPath.get(\\"left\\").replaceWith(memberExpression(object, property));
          assignmentPath.get(\\"right\\").replaceWith(rightExpression(isLogicalAssignment ? \\"=\\" : op, memberExpression(object, identifier(property.name)), value));
        }
        if (isLogicalAssignment) {
          assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right));
        } else {
          assignmentPath.node.operator = \\"=\\";
        }
        return [assignmentPath.get(\\"left\\"), assignmentPath.get(\\"right\\").get(\\"left\\")];
      } else if (superProp.parentPath.isUpdateExpression()) {
        const updateExpr = superProp.parentPath;
        const tmp = superProp.scope.generateDeclaredUidIdentifier(\\"tmp\\");
        const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\\"prop\\") : null;
        const parts = [assignmentExpression(\\"=\\", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression(\\"=\\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression(\\"=\\", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(superProp.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
        if (!superProp.parentPath.node.prefix) {
          parts.push(identifier(tmp.name));
        }
        updateExpr.replaceWith(sequenceExpression(parts));
        const left = updateExpr.get(\\"expressions.0.right\\");
        const right = updateExpr.get(\\"expressions.1.left\\");
        return [left, right];
      }
      return [superProp];
      function rightExpression(op, left, right) {
        if (op === \\"=\\") {
          return assignmentExpression(\\"=\\", left, right);
        } else {
          return binaryExpression(op, left, right);
        }
      }
    }
    function hasSuperClass(thisEnvFn) {
      return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
    }
    var assignSuperThisVisitor = (0, _visitors.merge)([{
      CallExpression(child, {
        supers,
        thisBinding
      }) {
        if (!child.get(\\"callee\\").isSuper())
          return;
        if (supers.has(child.node))
          return;
        supers.add(child.node);
        child.replaceWithMultiple([child.node, assignmentExpression(\\"=\\", identifier(thisBinding), identifier(\\"this\\"))]);
      }
    }, _helperEnvironmentVisitor.default]);
    function getThisBinding(thisEnvFn, inConstructor) {
      return getBinding(thisEnvFn, \\"this\\", (thisBinding) => {
        if (!inConstructor || !hasSuperClass(thisEnvFn))
          return thisExpression();
        thisEnvFn.traverse(assignSuperThisVisitor, {
          supers: /* @__PURE__ */ new WeakSet(),
          thisBinding
        });
      });
    }
    function getSuperBinding(thisEnvFn) {
      return getBinding(thisEnvFn, \\"supercall\\", () => {
        const argsBinding = thisEnvFn.scope.generateUidIdentifier(\\"args\\");
        return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
      });
    }
    function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
      const op = isAssignment ? \\"set\\" : \\"get\\";
      return getBinding(thisEnvFn, \`superprop_\${op}:\${propName || \\"\\"}\`, () => {
        const argsList = [];
        let fnBody;
        if (propName) {
          fnBody = memberExpression(_super(), identifier(propName));
        } else {
          const method = thisEnvFn.scope.generateUidIdentifier(\\"prop\\");
          argsList.unshift(method);
          fnBody = memberExpression(_super(), identifier(method.name), true);
        }
        if (isAssignment) {
          const valueIdent = thisEnvFn.scope.generateUidIdentifier(\\"value\\");
          argsList.push(valueIdent);
          fnBody = assignmentExpression(\\"=\\", fnBody, identifier(valueIdent.name));
        }
        return arrowFunctionExpression(argsList, fnBody);
      });
    }
    function getBinding(thisEnvFn, key, init) {
      const cacheKey = \\"binding:\\" + key;
      let data = thisEnvFn.getData(cacheKey);
      if (!data) {
        const id = thisEnvFn.scope.generateUidIdentifier(key);
        data = id.name;
        thisEnvFn.setData(cacheKey, data);
        thisEnvFn.scope.push({
          id,
          init: init(data)
        });
      }
      return data;
    }
    var getScopeInformationVisitor = (0, _visitors.merge)([{
      ThisExpression(child, {
        thisPaths
      }) {
        thisPaths.push(child);
      },
      JSXIdentifier(child, {
        thisPaths
      }) {
        if (child.node.name !== \\"this\\")
          return;
        if (!child.parentPath.isJSXMemberExpression({
          object: child.node
        }) && !child.parentPath.isJSXOpeningElement({
          name: child.node
        })) {
          return;
        }
        thisPaths.push(child);
      },
      CallExpression(child, {
        superCalls
      }) {
        if (child.get(\\"callee\\").isSuper())
          superCalls.push(child);
      },
      MemberExpression(child, {
        superProps
      }) {
        if (child.get(\\"object\\").isSuper())
          superProps.push(child);
      },
      Identifier(child, {
        argumentsPaths
      }) {
        if (!child.isReferencedIdentifier({
          name: \\"arguments\\"
        }))
          return;
        let curr = child.scope;
        do {
          if (curr.hasOwnBinding(\\"arguments\\")) {
            curr.rename(\\"arguments\\");
            return;
          }
          if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {
            break;
          }
        } while (curr = curr.parent);
        argumentsPaths.push(child);
      },
      MetaProperty(child, {
        newTargetPaths
      }) {
        if (!child.get(\\"meta\\").isIdentifier({
          name: \\"new\\"
        }))
          return;
        if (!child.get(\\"property\\").isIdentifier({
          name: \\"target\\"
        }))
          return;
        newTargetPaths.push(child);
      }
    }, _helperEnvironmentVisitor.default]);
    function getScopeInformation(fnPath) {
      const thisPaths = [];
      const argumentsPaths = [];
      const newTargetPaths = [];
      const superProps = [];
      const superCalls = [];
      fnPath.traverse(getScopeInformationVisitor, {
        thisPaths,
        argumentsPaths,
        newTargetPaths,
        superProps,
        superCalls
      });
      return {
        thisPaths,
        argumentsPaths,
        newTargetPaths,
        superProps,
        superCalls
      };
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/introspection.js
var require_introspection = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/introspection.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
    exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
    exports._resolve = _resolve;
    exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
    exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
    exports.equals = equals;
    exports.getSource = getSource;
    exports.has = has;
    exports.is = void 0;
    exports.isCompletionRecord = isCompletionRecord;
    exports.isConstantExpression = isConstantExpression;
    exports.isInStrictMode = isInStrictMode;
    exports.isNodeType = isNodeType;
    exports.isStatementOrBlock = isStatementOrBlock;
    exports.isStatic = isStatic;
    exports.isnt = isnt;
    exports.matchesPattern = matchesPattern;
    exports.referencesImport = referencesImport;
    exports.resolve = resolve;
    exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
    var _t = require_lib2();
    var {
      STATEMENT_OR_BLOCK_KEYS,
      VISITOR_KEYS,
      isBlockStatement,
      isExpression,
      isIdentifier,
      isLiteral,
      isStringLiteral,
      isType,
      matchesPattern: _matchesPattern
    } = _t;
    function matchesPattern(pattern, allowPartial) {
      return _matchesPattern(this.node, pattern, allowPartial);
    }
    function has(key) {
      const val = this.node && this.node[key];
      if (val && Array.isArray(val)) {
        return !!val.length;
      } else {
        return !!val;
      }
    }
    function isStatic() {
      return this.scope.isStatic(this.node);
    }
    var is = has;
    exports.is = is;
    function isnt(key) {
      return !this.has(key);
    }
    function equals(key, value) {
      return this.node[key] === value;
    }
    function isNodeType(type) {
      return isType(this.type, type);
    }
    function canHaveVariableDeclarationOrExpression() {
      return (this.key === \\"init\\" || this.key === \\"left\\") && this.parentPath.isFor();
    }
    function canSwapBetweenExpressionAndStatement(replacement) {
      if (this.key !== \\"body\\" || !this.parentPath.isArrowFunctionExpression()) {
        return false;
      }
      if (this.isExpression()) {
        return isBlockStatement(replacement);
      } else if (this.isBlockStatement()) {
        return isExpression(replacement);
      }
      return false;
    }
    function isCompletionRecord(allowInsideFunction) {
      let path = this;
      let first = true;
      do {
        const container = path.container;
        if (path.isFunction() && !first) {
          return !!allowInsideFunction;
        }
        first = false;
        if (Array.isArray(container) && path.key !== container.length - 1) {
          return false;
        }
      } while ((path = path.parentPath) && !path.isProgram());
      return true;
    }
    function isStatementOrBlock() {
      if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {
        return false;
      } else {
        return STATEMENT_OR_BLOCK_KEYS.includes(this.key);
      }
    }
    function referencesImport(moduleSource, importName) {
      if (!this.isReferencedIdentifier()) {
        if ((this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {
          value: importName
        }) : this.node.property.name === importName)) {
          const object = this.get(\\"object\\");
          return object.isReferencedIdentifier() && object.referencesImport(moduleSource, \\"*\\");
        }
        return false;
      }
      const binding = this.scope.getBinding(this.node.name);
      if (!binding || binding.kind !== \\"module\\")
        return false;
      const path = binding.path;
      const parent = path.parentPath;
      if (!parent.isImportDeclaration())
        return false;
      if (parent.node.source.value === moduleSource) {
        if (!importName)
          return true;
      } else {
        return false;
      }
      if (path.isImportDefaultSpecifier() && importName === \\"default\\") {
        return true;
      }
      if (path.isImportNamespaceSpecifier() && importName === \\"*\\") {
        return true;
      }
      if (path.isImportSpecifier() && isIdentifier(path.node.imported, {
        name: importName
      })) {
        return true;
      }
      return false;
    }
    function getSource() {
      const node = this.node;
      if (node.end) {
        const code = this.hub.getCode();
        if (code)
          return code.slice(node.start, node.end);
      }
      return \\"\\";
    }
    function willIMaybeExecuteBefore(target) {
      return this._guessExecutionStatusRelativeTo(target) !== \\"after\\";
    }
    function getOuterFunction(path) {
      return (path.scope.getFunctionParent() || path.scope.getProgramParent()).path;
    }
    function isExecutionUncertain(type, key) {
      switch (type) {
        case \\"LogicalExpression\\":
          return key === \\"right\\";
        case \\"ConditionalExpression\\":
        case \\"IfStatement\\":
          return key === \\"consequent\\" || key === \\"alternate\\";
        case \\"WhileStatement\\":
        case \\"DoWhileStatement\\":
        case \\"ForInStatement\\":
        case \\"ForOfStatement\\":
          return key === \\"body\\";
        case \\"ForStatement\\":
          return key === \\"body\\" || key === \\"update\\";
        case \\"SwitchStatement\\":
          return key === \\"cases\\";
        case \\"TryStatement\\":
          return key === \\"handler\\";
        case \\"AssignmentPattern\\":
          return key === \\"right\\";
        case \\"OptionalMemberExpression\\":
          return key === \\"property\\";
        case \\"OptionalCallExpression\\":
          return key === \\"arguments\\";
        default:
          return false;
      }
    }
    function isExecutionUncertainInList(paths, maxIndex) {
      for (let i = 0; i < maxIndex; i++) {
        const path = paths[i];
        if (isExecutionUncertain(path.parent.type, path.parentKey)) {
          return true;
        }
      }
      return false;
    }
    function _guessExecutionStatusRelativeTo(target) {
      const funcParent = {
        this: getOuterFunction(this),
        target: getOuterFunction(target)
      };
      if (funcParent.target.node !== funcParent.this.node) {
        return this._guessExecutionStatusRelativeToDifferentFunctions(funcParent.target);
      }
      const paths = {
        target: target.getAncestry(),
        this: this.getAncestry()
      };
      if (paths.target.indexOf(this) >= 0)
        return \\"after\\";
      if (paths.this.indexOf(target) >= 0)
        return \\"before\\";
      let commonPath;
      const commonIndex = {
        target: 0,
        this: 0
      };
      while (!commonPath && commonIndex.this < paths.this.length) {
        const path = paths.this[commonIndex.this];
        commonIndex.target = paths.target.indexOf(path);
        if (commonIndex.target >= 0) {
          commonPath = path;
        } else {
          commonIndex.this++;
        }
      }
      if (!commonPath) {
        throw new Error(\\"Internal Babel error - The two compared nodes don't appear to belong to the same program.\\");
      }
      if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {
        return \\"unknown\\";
      }
      const divergence = {
        this: paths.this[commonIndex.this - 1],
        target: paths.target[commonIndex.target - 1]
      };
      if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {
        return divergence.target.key > divergence.this.key ? \\"before\\" : \\"after\\";
      }
      const keys = VISITOR_KEYS[commonPath.type];
      const keyPosition = {
        this: keys.indexOf(divergence.this.parentKey),
        target: keys.indexOf(divergence.target.parentKey)
      };
      return keyPosition.target > keyPosition.this ? \\"before\\" : \\"after\\";
    }
    var executionOrderCheckedNodes = /* @__PURE__ */ new WeakSet();
    function _guessExecutionStatusRelativeToDifferentFunctions(target) {
      if (!target.isFunctionDeclaration() || target.parentPath.isExportDeclaration()) {
        return \\"unknown\\";
      }
      const binding = target.scope.getBinding(target.node.id.name);
      if (!binding.references)
        return \\"before\\";
      const referencePaths = binding.referencePaths;
      let allStatus;
      for (const path of referencePaths) {
        const childOfFunction = !!path.find((path2) => path2.node === target.node);
        if (childOfFunction)
          continue;
        if (path.key !== \\"callee\\" || !path.parentPath.isCallExpression()) {
          return \\"unknown\\";
        }
        if (executionOrderCheckedNodes.has(path.node))
          continue;
        executionOrderCheckedNodes.add(path.node);
        const status = this._guessExecutionStatusRelativeTo(path);
        executionOrderCheckedNodes.delete(path.node);
        if (allStatus && allStatus !== status) {
          return \\"unknown\\";
        } else {
          allStatus = status;
        }
      }
      return allStatus;
    }
    function resolve(dangerous, resolved) {
      return this._resolve(dangerous, resolved) || this;
    }
    function _resolve(dangerous, resolved) {
      if (resolved && resolved.indexOf(this) >= 0)
        return;
      resolved = resolved || [];
      resolved.push(this);
      if (this.isVariableDeclarator()) {
        if (this.get(\\"id\\").isIdentifier()) {
          return this.get(\\"init\\").resolve(dangerous, resolved);
        } else {
        }
      } else if (this.isReferencedIdentifier()) {
        const binding = this.scope.getBinding(this.node.name);
        if (!binding)
          return;
        if (!binding.constant)
          return;
        if (binding.kind === \\"module\\")
          return;
        if (binding.path !== this) {
          const ret = binding.path.resolve(dangerous, resolved);
          if (this.find((parent) => parent.node === ret.node))
            return;
          return ret;
        }
      } else if (this.isTypeCastExpression()) {
        return this.get(\\"expression\\").resolve(dangerous, resolved);
      } else if (dangerous && this.isMemberExpression()) {
        const targetKey = this.toComputedKey();
        if (!isLiteral(targetKey))
          return;
        const targetName = targetKey.value;
        const target = this.get(\\"object\\").resolve(dangerous, resolved);
        if (target.isObjectExpression()) {
          const props = target.get(\\"properties\\");
          for (const prop of props) {
            if (!prop.isProperty())
              continue;
            const key = prop.get(\\"key\\");
            let match = prop.isnt(\\"computed\\") && key.isIdentifier({
              name: targetName
            });
            match = match || key.isLiteral({
              value: targetName
            });
            if (match)
              return prop.get(\\"value\\").resolve(dangerous, resolved);
          }
        } else if (target.isArrayExpression() && !isNaN(+targetName)) {
          const elems = target.get(\\"elements\\");
          const elem = elems[targetName];
          if (elem)
            return elem.resolve(dangerous, resolved);
        }
      }
    }
    function isConstantExpression() {
      if (this.isIdentifier()) {
        const binding = this.scope.getBinding(this.node.name);
        if (!binding)
          return false;
        return binding.constant;
      }
      if (this.isLiteral()) {
        if (this.isRegExpLiteral()) {
          return false;
        }
        if (this.isTemplateLiteral()) {
          return this.get(\\"expressions\\").every((expression) => expression.isConstantExpression());
        }
        return true;
      }
      if (this.isUnaryExpression()) {
        if (this.node.operator !== \\"void\\") {
          return false;
        }
        return this.get(\\"argument\\").isConstantExpression();
      }
      if (this.isBinaryExpression()) {
        return this.get(\\"left\\").isConstantExpression() && this.get(\\"right\\").isConstantExpression();
      }
      return false;
    }
    function isInStrictMode() {
      const start = this.isProgram() ? this : this.parentPath;
      const strictParent = start.find((path) => {
        if (path.isProgram({
          sourceType: \\"module\\"
        }))
          return true;
        if (path.isClass())
          return true;
        if (!path.isProgram() && !path.isFunction())
          return false;
        if (path.isArrowFunctionExpression() && !path.get(\\"body\\").isBlockStatement()) {
          return false;
        }
        const body = path.isFunction() ? path.node.body : path.node;
        for (const directive of body.directives) {
          if (directive.value.value === \\"use strict\\") {
            return true;
          }
        }
      });
      return !!strictParent;
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/context.js
var require_context = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/context.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports._call = _call;
    exports._getQueueContexts = _getQueueContexts;
    exports._resyncKey = _resyncKey;
    exports._resyncList = _resyncList;
    exports._resyncParent = _resyncParent;
    exports._resyncRemoved = _resyncRemoved;
    exports.call = call;
    exports.isBlacklisted = exports.isDenylisted = isDenylisted;
    exports.popContext = popContext;
    exports.pushContext = pushContext;
    exports.requeue = requeue;
    exports.resync = resync;
    exports.setContext = setContext;
    exports.setKey = setKey;
    exports.setScope = setScope;
    exports.setup = setup;
    exports.skip = skip;
    exports.skipKey = skipKey;
    exports.stop = stop;
    exports.visit = visit;
    var _traverseNode = require_traverse_node();
    var _index = require_path();
    function call(key) {
      const opts = this.opts;
      this.debug(key);
      if (this.node) {
        if (this._call(opts[key]))
          return true;
      }
      if (this.node) {
        return this._call(opts[this.node.type] && opts[this.node.type][key]);
      }
      return false;
    }
    function _call(fns) {
      if (!fns)
        return false;
      for (const fn of fns) {
        if (!fn)
          continue;
        const node = this.node;
        if (!node)
          return true;
        const ret = fn.call(this.state, this, this.state);
        if (ret && typeof ret === \\"object\\" && typeof ret.then === \\"function\\") {
          throw new Error(\`You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.\`);
        }
        if (ret) {
          throw new Error(\`Unexpected return value from visitor method \${fn}\`);
        }
        if (this.node !== node)
          return true;
        if (this._traverseFlags > 0)
          return true;
      }
      return false;
    }
    function isDenylisted() {
      var _this$opts$denylist;
      const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;
      return denylist && denylist.indexOf(this.node.type) > -1;
    }
    function restoreContext(path, context) {
      if (path.context !== context) {
        path.context = context;
        path.state = context.state;
        path.opts = context.opts;
      }
    }
    function visit() {
      if (!this.node) {
        return false;
      }
      if (this.isDenylisted()) {
        return false;
      }
      if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
        return false;
      }
      const currentContext = this.context;
      if (this.shouldSkip || this.call(\\"enter\\")) {
        this.debug(\\"Skip...\\");
        return this.shouldStop;
      }
      restoreContext(this, currentContext);
      this.debug(\\"Recursing into...\\");
      this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
      restoreContext(this, currentContext);
      this.call(\\"exit\\");
      return this.shouldStop;
    }
    function skip() {
      this.shouldSkip = true;
    }
    function skipKey(key) {
      if (this.skipKeys == null) {
        this.skipKeys = {};
      }
      this.skipKeys[key] = true;
    }
    function stop() {
      this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
    }
    function setScope() {
      if (this.opts && this.opts.noScope)
        return;
      let path = this.parentPath;
      if (this.key === \\"key\\" && path.isMethod())
        path = path.parentPath;
      let target;
      while (path && !target) {
        if (path.opts && path.opts.noScope)
          return;
        target = path.scope;
        path = path.parentPath;
      }
      this.scope = this.getScope(target);
      if (this.scope)
        this.scope.init();
    }
    function setContext(context) {
      if (this.skipKeys != null) {
        this.skipKeys = {};
      }
      this._traverseFlags = 0;
      if (context) {
        this.context = context;
        this.state = context.state;
        this.opts = context.opts;
      }
      this.setScope();
      return this;
    }
    function resync() {
      if (this.removed)
        return;
      this._resyncParent();
      this._resyncList();
      this._resyncKey();
    }
    function _resyncParent() {
      if (this.parentPath) {
        this.parent = this.parentPath.node;
      }
    }
    function _resyncKey() {
      if (!this.container)
        return;
      if (this.node === this.container[this.key])
        return;
      if (Array.isArray(this.container)) {
        for (let i = 0; i < this.container.length; i++) {
          if (this.container[i] === this.node) {
            return this.setKey(i);
          }
        }
      } else {
        for (const key of Object.keys(this.container)) {
          if (this.container[key] === this.node) {
            return this.setKey(key);
          }
        }
      }
      this.key = null;
    }
    function _resyncList() {
      if (!this.parent || !this.inList)
        return;
      const newContainer = this.parent[this.listKey];
      if (this.container === newContainer)
        return;
      this.container = newContainer || null;
    }
    function _resyncRemoved() {
      if (this.key == null || !this.container || this.container[this.key] !== this.node) {
        this._markRemoved();
      }
    }
    function popContext() {
      this.contexts.pop();
      if (this.contexts.length > 0) {
        this.setContext(this.contexts[this.contexts.length - 1]);
      } else {
        this.setContext(void 0);
      }
    }
    function pushContext(context) {
      this.contexts.push(context);
      this.setContext(context);
    }
    function setup(parentPath, container, listKey, key) {
      this.listKey = listKey;
      this.container = container;
      this.parentPath = parentPath || this.parentPath;
      this.setKey(key);
    }
    function setKey(key) {
      var _this$node;
      this.key = key;
      this.node = this.container[this.key];
      this.type = (_this$node = this.node) == null ? void 0 : _this$node.type;
    }
    function requeue(pathToQueue = this) {
      if (pathToQueue.removed)
        return;
      ;
      const contexts = this.contexts;
      for (const context of contexts) {
        context.maybeQueue(pathToQueue);
      }
    }
    function _getQueueContexts() {
      let path = this;
      let contexts = this.contexts;
      while (!contexts.length) {
        path = path.parentPath;
        if (!path)
          break;
        contexts = path.contexts;
      }
      return contexts;
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js
var require_removal_hooks = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.hooks = void 0;
    var hooks = [function(self, parent) {
      const removeParent = self.key === \\"test\\" && (parent.isWhile() || parent.isSwitchCase()) || self.key === \\"declaration\\" && parent.isExportDeclaration() || self.key === \\"body\\" && parent.isLabeledStatement() || self.listKey === \\"declarations\\" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self.key === \\"expression\\" && parent.isExpressionStatement();
      if (removeParent) {
        parent.remove();
        return true;
      }
    }, function(self, parent) {
      if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
        parent.replaceWith(parent.node.expressions[0]);
        return true;
      }
    }, function(self, parent) {
      if (parent.isBinary()) {
        if (self.key === \\"left\\") {
          parent.replaceWith(parent.node.right);
        } else {
          parent.replaceWith(parent.node.left);
        }
        return true;
      }
    }, function(self, parent) {
      if (parent.isIfStatement() && (self.key === \\"consequent\\" || self.key === \\"alternate\\") || self.key === \\"body\\" && (parent.isLoop() || parent.isArrowFunctionExpression())) {
        self.replaceWith({
          type: \\"BlockStatement\\",
          body: []
        });
        return true;
      }
    }];
    exports.hooks = hooks;
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/removal.js
var require_removal = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/removal.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports._assertUnremoved = _assertUnremoved;
    exports._callRemovalHooks = _callRemovalHooks;
    exports._markRemoved = _markRemoved;
    exports._remove = _remove;
    exports._removeFromScope = _removeFromScope;
    exports.remove = remove;
    var _removalHooks = require_removal_hooks();
    var _cache = require_cache();
    var _index = require_path();
    function remove() {
      var _this$opts;
      this._assertUnremoved();
      this.resync();
      if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {
        this._removeFromScope();
      }
      if (this._callRemovalHooks()) {
        this._markRemoved();
        return;
      }
      this.shareCommentsWithSiblings();
      this._remove();
      this._markRemoved();
    }
    function _removeFromScope() {
      const bindings = this.getBindingIdentifiers();
      Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
    }
    function _callRemovalHooks() {
      for (const fn of _removalHooks.hooks) {
        if (fn(this, this.parentPath))
          return true;
      }
    }
    function _remove() {
      if (Array.isArray(this.container)) {
        this.container.splice(this.key, 1);
        this.updateSiblingKeys(this.key, -1);
      } else {
        this._replaceWith(null);
      }
    }
    function _markRemoved() {
      this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;
      if (this.parent)
        _cache.path.get(this.parent).delete(this.node);
      this.node = null;
    }
    function _assertUnremoved() {
      if (this.removed) {
        throw this.buildCodeFrameError(\\"NodePath has been removed so is read-only.\\");
      }
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/lib/hoister.js
var require_hoister = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/lib/hoister.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _t = require_lib2();
    var _t2 = _t;
    var {
      react
    } = _t;
    var {
      cloneNode,
      jsxExpressionContainer,
      variableDeclaration,
      variableDeclarator
    } = _t2;
    var referenceVisitor = {
      ReferencedIdentifier(path, state) {
        if (path.isJSXIdentifier() && react.isCompatTag(path.node.name) && !path.parentPath.isJSXMemberExpression()) {
          return;
        }
        if (path.node.name === \\"this\\") {
          let scope = path.scope;
          do {
            if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {
              break;
            }
          } while (scope = scope.parent);
          if (scope)
            state.breakOnScopePaths.push(scope.path);
        }
        const binding = path.scope.getBinding(path.node.name);
        if (!binding)
          return;
        for (const violation of binding.constantViolations) {
          if (violation.scope !== binding.path.scope) {
            state.mutableBinding = true;
            path.stop();
            return;
          }
        }
        if (binding !== state.scope.getBinding(path.node.name))
          return;
        state.bindings[path.node.name] = binding;
      }
    };
    var PathHoister = class {
      constructor(path, scope) {
        this.breakOnScopePaths = void 0;
        this.bindings = void 0;
        this.mutableBinding = void 0;
        this.scopes = void 0;
        this.scope = void 0;
        this.path = void 0;
        this.attachAfter = void 0;
        this.breakOnScopePaths = [];
        this.bindings = {};
        this.mutableBinding = false;
        this.scopes = [];
        this.scope = scope;
        this.path = path;
        this.attachAfter = false;
      }
      isCompatibleScope(scope) {
        for (const key of Object.keys(this.bindings)) {
          const binding = this.bindings[key];
          if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
            return false;
          }
        }
        return true;
      }
      getCompatibleScopes() {
        let scope = this.path.scope;
        do {
          if (this.isCompatibleScope(scope)) {
            this.scopes.push(scope);
          } else {
            break;
          }
          if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
            break;
          }
        } while (scope = scope.parent);
      }
      getAttachmentPath() {
        let path = this._getAttachmentPath();
        if (!path)
          return;
        let targetScope = path.scope;
        if (targetScope.path === path) {
          targetScope = path.scope.parent;
        }
        if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
          for (const name of Object.keys(this.bindings)) {
            if (!targetScope.hasOwnBinding(name))
              continue;
            const binding = this.bindings[name];
            if (binding.kind === \\"param\\" || binding.path.parentKey === \\"params\\") {
              continue;
            }
            const bindingParentPath = this.getAttachmentParentForPath(binding.path);
            if (bindingParentPath.key >= path.key) {
              this.attachAfter = true;
              path = binding.path;
              for (const violationPath of binding.constantViolations) {
                if (this.getAttachmentParentForPath(violationPath).key > path.key) {
                  path = violationPath;
                }
              }
            }
          }
        }
        return path;
      }
      _getAttachmentPath() {
        const scopes = this.scopes;
        const scope = scopes.pop();
        if (!scope)
          return;
        if (scope.path.isFunction()) {
          if (this.hasOwnParamBindings(scope)) {
            if (this.scope === scope)
              return;
            const bodies = scope.path.get(\\"body\\").get(\\"body\\");
            for (let i = 0; i < bodies.length; i++) {
              if (bodies[i].node._blockHoist)
                continue;
              return bodies[i];
            }
          } else {
            return this.getNextScopeAttachmentParent();
          }
        } else if (scope.path.isProgram()) {
          return this.getNextScopeAttachmentParent();
        }
      }
      getNextScopeAttachmentParent() {
        const scope = this.scopes.pop();
        if (scope)
          return this.getAttachmentParentForPath(scope.path);
      }
      getAttachmentParentForPath(path) {
        do {
          if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
            return path;
          }
        } while (path = path.parentPath);
      }
      hasOwnParamBindings(scope) {
        for (const name of Object.keys(this.bindings)) {
          if (!scope.hasOwnBinding(name))
            continue;
          const binding = this.bindings[name];
          if (binding.kind === \\"param\\" && binding.constant)
            return true;
        }
        return false;
      }
      run() {
        this.path.traverse(referenceVisitor, this);
        if (this.mutableBinding)
          return;
        this.getCompatibleScopes();
        const attachTo = this.getAttachmentPath();
        if (!attachTo)
          return;
        if (attachTo.getFunctionParent() === this.path.getFunctionParent())
          return;
        let uid = attachTo.scope.generateUidIdentifier(\\"ref\\");
        const declarator = variableDeclarator(uid, this.path.node);
        const insertFn = this.attachAfter ? \\"insertAfter\\" : \\"insertBefore\\";
        const [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration(\\"var\\", [declarator])]);
        const parent = this.path.parentPath;
        if (parent.isJSXElement() && this.path.container === parent.node.children) {
          uid = jsxExpressionContainer(uid);
        }
        this.path.replaceWith(cloneNode(uid));
        return attachTo.isVariableDeclarator() ? attached.get(\\"init\\") : attached.get(\\"declarations.0.init\\");
      }
    };
    exports.default = PathHoister;
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/modification.js
var require_modification = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/modification.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports._containerInsert = _containerInsert;
    exports._containerInsertAfter = _containerInsertAfter;
    exports._containerInsertBefore = _containerInsertBefore;
    exports._verifyNodeList = _verifyNodeList;
    exports.hoist = hoist;
    exports.insertAfter = insertAfter;
    exports.insertBefore = insertBefore;
    exports.pushContainer = pushContainer;
    exports.unshiftContainer = unshiftContainer;
    exports.updateSiblingKeys = updateSiblingKeys;
    var _cache = require_cache();
    var _hoister = require_hoister();
    var _index = require_path();
    var _t = require_lib2();
    var {
      arrowFunctionExpression,
      assertExpression,
      assignmentExpression,
      blockStatement,
      callExpression,
      cloneNode,
      expressionStatement,
      isExpression
    } = _t;
    function insertBefore(nodes_) {
      this._assertUnremoved();
      const nodes = this._verifyNodeList(nodes_);
      const {
        parentPath
      } = this;
      if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
        return parentPath.insertBefore(nodes);
      } else if (this.isNodeType(\\"Expression\\") && !this.isJSXElement() || parentPath.isForStatement() && this.key === \\"init\\") {
        if (this.node)
          nodes.push(this.node);
        return this.replaceExpressionWithStatements(nodes);
      } else if (Array.isArray(this.container)) {
        return this._containerInsertBefore(nodes);
      } else if (this.isStatementOrBlock()) {
        const node = this.node;
        const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
        this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));
        return this.unshiftContainer(\\"body\\", nodes);
      } else {
        throw new Error(\\"We don't know what to do with this node type. We were previously a Statement but we can't fit in here?\\");
      }
    }
    function _containerInsert(from, nodes) {
      this.updateSiblingKeys(from, nodes.length);
      const paths = [];
      this.container.splice(from, 0, ...nodes);
      for (let i = 0; i < nodes.length; i++) {
        const to = from + i;
        const path = this.getSibling(to);
        paths.push(path);
        if (this.context && this.context.queue) {
          path.pushContext(this.context);
        }
      }
      const contexts = this._getQueueContexts();
      for (const path of paths) {
        path.setScope();
        path.debug(\\"Inserted.\\");
        for (const context of contexts) {
          context.maybeQueue(path, true);
        }
      }
      return paths;
    }
    function _containerInsertBefore(nodes) {
      return this._containerInsert(this.key, nodes);
    }
    function _containerInsertAfter(nodes) {
      return this._containerInsert(this.key + 1, nodes);
    }
    function insertAfter(nodes_) {
      this._assertUnremoved();
      const nodes = this._verifyNodeList(nodes_);
      const {
        parentPath
      } = this;
      if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
        return parentPath.insertAfter(nodes.map((node) => {
          return isExpression(node) ? expressionStatement(node) : node;
        }));
      } else if (this.isNodeType(\\"Expression\\") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === \\"init\\") {
        if (this.node) {
          const node = this.node;
          let {
            scope
          } = this;
          if (scope.path.isPattern()) {
            assertExpression(node);
            this.replaceWith(callExpression(arrowFunctionExpression([], node), []));
            this.get(\\"callee.body\\").insertAfter(nodes);
            return [this];
          }
          if (parentPath.isMethod({
            computed: true,
            key: node
          })) {
            scope = scope.parent;
          }
          const temp = scope.generateDeclaredUidIdentifier();
          nodes.unshift(expressionStatement(assignmentExpression(\\"=\\", cloneNode(temp), node)));
          nodes.push(expressionStatement(cloneNode(temp)));
        }
        return this.replaceExpressionWithStatements(nodes);
      } else if (Array.isArray(this.container)) {
        return this._containerInsertAfter(nodes);
      } else if (this.isStatementOrBlock()) {
        const node = this.node;
        const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
        this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));
        return this.pushContainer(\\"body\\", nodes);
      } else {
        throw new Error(\\"We don't know what to do with this node type. We were previously a Statement but we can't fit in here?\\");
      }
    }
    function updateSiblingKeys(fromIndex, incrementBy) {
      if (!this.parent)
        return;
      const paths = _cache.path.get(this.parent);
      for (const [, path] of paths) {
        if (path.key >= fromIndex) {
          path.key += incrementBy;
        }
      }
    }
    function _verifyNodeList(nodes) {
      if (!nodes) {
        return [];
      }
      if (!Array.isArray(nodes)) {
        nodes = [nodes];
      }
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        let msg;
        if (!node) {
          msg = \\"has falsy node\\";
        } else if (typeof node !== \\"object\\") {
          msg = \\"contains a non-object node\\";
        } else if (!node.type) {
          msg = \\"without a type\\";
        } else if (node instanceof _index.default) {
          msg = \\"has a NodePath when it expected a raw object\\";
        }
        if (msg) {
          const type = Array.isArray(node) ? \\"array\\" : typeof node;
          throw new Error(\`Node list \${msg} with the index of \${i} and type of \${type}\`);
        }
      }
      return nodes;
    }
    function unshiftContainer(listKey, nodes) {
      this._assertUnremoved();
      nodes = this._verifyNodeList(nodes);
      const path = _index.default.get({
        parentPath: this,
        parent: this.node,
        container: this.node[listKey],
        listKey,
        key: 0
      }).setContext(this.context);
      return path._containerInsertBefore(nodes);
    }
    function pushContainer(listKey, nodes) {
      this._assertUnremoved();
      const verifiedNodes = this._verifyNodeList(nodes);
      const container = this.node[listKey];
      const path = _index.default.get({
        parentPath: this,
        parent: this.node,
        container,
        listKey,
        key: container.length
      }).setContext(this.context);
      return path.replaceWithMultiple(verifiedNodes);
    }
    function hoist(scope = this.scope) {
      const hoister = new _hoister.default(this, scope);
      return hoister.run();
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/family.js
var require_family = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/family.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports._getKey = _getKey;
    exports._getPattern = _getPattern;
    exports.get = get;
    exports.getAllNextSiblings = getAllNextSiblings;
    exports.getAllPrevSiblings = getAllPrevSiblings;
    exports.getBindingIdentifierPaths = getBindingIdentifierPaths;
    exports.getBindingIdentifiers = getBindingIdentifiers;
    exports.getCompletionRecords = getCompletionRecords;
    exports.getNextSibling = getNextSibling;
    exports.getOpposite = getOpposite;
    exports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;
    exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
    exports.getPrevSibling = getPrevSibling;
    exports.getSibling = getSibling;
    var _index = require_path();
    var _t = require_lib2();
    var {
      getBindingIdentifiers: _getBindingIdentifiers,
      getOuterBindingIdentifiers: _getOuterBindingIdentifiers,
      isDeclaration,
      numericLiteral,
      unaryExpression
    } = _t;
    var NORMAL_COMPLETION = 0;
    var BREAK_COMPLETION = 1;
    function NormalCompletion(path) {
      return {
        type: NORMAL_COMPLETION,
        path
      };
    }
    function BreakCompletion(path) {
      return {
        type: BREAK_COMPLETION,
        path
      };
    }
    function getOpposite() {
      if (this.key === \\"left\\") {
        return this.getSibling(\\"right\\");
      } else if (this.key === \\"right\\") {
        return this.getSibling(\\"left\\");
      }
      return null;
    }
    function addCompletionRecords(path, records, context) {
      if (path) {
        records.push(..._getCompletionRecords(path, context));
      }
      return records;
    }
    function completionRecordForSwitch(cases, records, context) {
      let lastNormalCompletions = [];
      for (let i = 0; i < cases.length; i++) {
        const casePath = cases[i];
        const caseCompletions = _getCompletionRecords(casePath, context);
        const normalCompletions = [];
        const breakCompletions = [];
        for (const c of caseCompletions) {
          if (c.type === NORMAL_COMPLETION) {
            normalCompletions.push(c);
          }
          if (c.type === BREAK_COMPLETION) {
            breakCompletions.push(c);
          }
        }
        if (normalCompletions.length) {
          lastNormalCompletions = normalCompletions;
        }
        records.push(...breakCompletions);
      }
      records.push(...lastNormalCompletions);
      return records;
    }
    function normalCompletionToBreak(completions) {
      completions.forEach((c) => {
        c.type = BREAK_COMPLETION;
      });
    }
    function replaceBreakStatementInBreakCompletion(completions, reachable) {
      completions.forEach((c) => {
        if (c.path.isBreakStatement({
          label: null
        })) {
          if (reachable) {
            c.path.replaceWith(unaryExpression(\\"void\\", numericLiteral(0)));
          } else {
            c.path.remove();
          }
        }
      });
    }
    function getStatementListCompletion(paths, context) {
      const completions = [];
      if (context.canHaveBreak) {
        let lastNormalCompletions = [];
        for (let i = 0; i < paths.length; i++) {
          const path = paths[i];
          const newContext = Object.assign({}, context, {
            inCaseClause: false
          });
          if (path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) {
            newContext.shouldPopulateBreak = true;
          } else {
            newContext.shouldPopulateBreak = false;
          }
          const statementCompletions = _getCompletionRecords(path, newContext);
          if (statementCompletions.length > 0 && statementCompletions.every((c) => c.type === BREAK_COMPLETION)) {
            if (lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({
              label: null
            }))) {
              normalCompletionToBreak(lastNormalCompletions);
              completions.push(...lastNormalCompletions);
              if (lastNormalCompletions.some((c) => c.path.isDeclaration())) {
                completions.push(...statementCompletions);
                replaceBreakStatementInBreakCompletion(statementCompletions, true);
              }
              replaceBreakStatementInBreakCompletion(statementCompletions, false);
            } else {
              completions.push(...statementCompletions);
              if (!context.shouldPopulateBreak) {
                replaceBreakStatementInBreakCompletion(statementCompletions, true);
              }
            }
            break;
          }
          if (i === paths.length - 1) {
            completions.push(...statementCompletions);
          } else {
            lastNormalCompletions = [];
            for (let i2 = 0; i2 < statementCompletions.length; i2++) {
              const c = statementCompletions[i2];
              if (c.type === BREAK_COMPLETION) {
                completions.push(c);
              }
              if (c.type === NORMAL_COMPLETION) {
                lastNormalCompletions.push(c);
              }
            }
          }
        }
      } else if (paths.length) {
        for (let i = paths.length - 1; i >= 0; i--) {
          const pathCompletions = _getCompletionRecords(paths[i], context);
          if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {
            completions.push(...pathCompletions);
            break;
          }
        }
      }
      return completions;
    }
    function _getCompletionRecords(path, context) {
      let records = [];
      if (path.isIfStatement()) {
        records = addCompletionRecords(path.get(\\"consequent\\"), records, context);
        records = addCompletionRecords(path.get(\\"alternate\\"), records, context);
      } else if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement()) {
        return addCompletionRecords(path.get(\\"body\\"), records, context);
      } else if (path.isProgram() || path.isBlockStatement()) {
        return getStatementListCompletion(path.get(\\"body\\"), context);
      } else if (path.isFunction()) {
        return _getCompletionRecords(path.get(\\"body\\"), context);
      } else if (path.isTryStatement()) {
        records = addCompletionRecords(path.get(\\"block\\"), records, context);
        records = addCompletionRecords(path.get(\\"handler\\"), records, context);
      } else if (path.isCatchClause()) {
        return addCompletionRecords(path.get(\\"body\\"), records, context);
      } else if (path.isSwitchStatement()) {
        return completionRecordForSwitch(path.get(\\"cases\\"), records, context);
      } else if (path.isSwitchCase()) {
        return getStatementListCompletion(path.get(\\"consequent\\"), {
          canHaveBreak: true,
          shouldPopulateBreak: false,
          inCaseClause: true
        });
      } else if (path.isBreakStatement()) {
        records.push(BreakCompletion(path));
      } else {
        records.push(NormalCompletion(path));
      }
      return records;
    }
    function getCompletionRecords() {
      const records = _getCompletionRecords(this, {
        canHaveBreak: false,
        shouldPopulateBreak: false,
        inCaseClause: false
      });
      return records.map((r) => r.path);
    }
    function getSibling(key) {
      return _index.default.get({
        parentPath: this.parentPath,
        parent: this.parent,
        container: this.container,
        listKey: this.listKey,
        key
      }).setContext(this.context);
    }
    function getPrevSibling() {
      return this.getSibling(this.key - 1);
    }
    function getNextSibling() {
      return this.getSibling(this.key + 1);
    }
    function getAllNextSiblings() {
      let _key = this.key;
      let sibling = this.getSibling(++_key);
      const siblings = [];
      while (sibling.node) {
        siblings.push(sibling);
        sibling = this.getSibling(++_key);
      }
      return siblings;
    }
    function getAllPrevSiblings() {
      let _key = this.key;
      let sibling = this.getSibling(--_key);
      const siblings = [];
      while (sibling.node) {
        siblings.push(sibling);
        sibling = this.getSibling(--_key);
      }
      return siblings;
    }
    function get(key, context = true) {
      if (context === true)
        context = this.context;
      const parts = key.split(\\".\\");
      if (parts.length === 1) {
        return this._getKey(key, context);
      } else {
        return this._getPattern(parts, context);
      }
    }
    function _getKey(key, context) {
      const node = this.node;
      const container = node[key];
      if (Array.isArray(container)) {
        return container.map((_, i) => {
          return _index.default.get({
            listKey: key,
            parentPath: this,
            parent: node,
            container,
            key: i
          }).setContext(context);
        });
      } else {
        return _index.default.get({
          parentPath: this,
          parent: node,
          container: node,
          key
        }).setContext(context);
      }
    }
    function _getPattern(parts, context) {
      let path = this;
      for (const part of parts) {
        if (part === \\".\\") {
          path = path.parentPath;
        } else {
          if (Array.isArray(path)) {
            path = path[part];
          } else {
            path = path.get(part, context);
          }
        }
      }
      return path;
    }
    function getBindingIdentifiers(duplicates) {
      return _getBindingIdentifiers(this.node, duplicates);
    }
    function getOuterBindingIdentifiers(duplicates) {
      return _getOuterBindingIdentifiers(this.node, duplicates);
    }
    function getBindingIdentifierPaths(duplicates = false, outerOnly = false) {
      const path = this;
      const search = [path];
      const ids = /* @__PURE__ */ Object.create(null);
      while (search.length) {
        const id = search.shift();
        if (!id)
          continue;
        if (!id.node)
          continue;
        const keys = _getBindingIdentifiers.keys[id.node.type];
        if (id.isIdentifier()) {
          if (duplicates) {
            const _ids = ids[id.node.name] = ids[id.node.name] || [];
            _ids.push(id);
          } else {
            ids[id.node.name] = id;
          }
          continue;
        }
        if (id.isExportDeclaration()) {
          const declaration = id.get(\\"declaration\\");
          if (isDeclaration(declaration)) {
            search.push(declaration);
          }
          continue;
        }
        if (outerOnly) {
          if (id.isFunctionDeclaration()) {
            search.push(id.get(\\"id\\"));
            continue;
          }
          if (id.isFunctionExpression()) {
            continue;
          }
        }
        if (keys) {
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const child = id.get(key);
            if (Array.isArray(child)) {
              search.push(...child);
            } else if (child.node) {
              search.push(child);
            }
          }
        }
      }
      return ids;
    }
    function getOuterBindingIdentifierPaths(duplicates) {
      return this.getBindingIdentifierPaths(duplicates, true);
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/comments.js
var require_comments = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/comments.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.addComment = addComment;
    exports.addComments = addComments;
    exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
    var _t = require_lib2();
    var {
      addComment: _addComment,
      addComments: _addComments
    } = _t;
    function shareCommentsWithSiblings() {
      if (typeof this.key === \\"string\\")
        return;
      const node = this.node;
      if (!node)
        return;
      const trailing = node.trailingComments;
      const leading = node.leadingComments;
      if (!trailing && !leading)
        return;
      const prev = this.getSibling(this.key - 1);
      const next = this.getSibling(this.key + 1);
      const hasPrev = Boolean(prev.node);
      const hasNext = Boolean(next.node);
      if (hasPrev && !hasNext) {
        prev.addComments(\\"trailing\\", trailing);
      } else if (hasNext && !hasPrev) {
        next.addComments(\\"leading\\", leading);
      }
    }
    function addComment(type, content, line) {
      _addComment(this.node, type, content, line);
    }
    function addComments(type, comments) {
      _addComments(this.node, type, comments);
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/index.js
var require_path = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/path/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = exports.SHOULD_STOP = exports.SHOULD_SKIP = exports.REMOVED = void 0;
    var virtualTypes = require_virtual_types();
    var _debug = require_src();
    var _index = require_lib13();
    var _scope = require_scope();
    var _t = require_lib2();
    var t = _t;
    var _cache = require_cache();
    var _generator = require_lib4();
    var NodePath_ancestry = require_ancestry();
    var NodePath_inference = require_inference();
    var NodePath_replacement = require_replacement();
    var NodePath_evaluation = require_evaluation();
    var NodePath_conversion = require_conversion();
    var NodePath_introspection = require_introspection();
    var NodePath_context = require_context();
    var NodePath_removal = require_removal();
    var NodePath_modification = require_modification();
    var NodePath_family = require_family();
    var NodePath_comments = require_comments();
    var {
      validate
    } = _t;
    var debug = _debug(\\"babel\\");
    var REMOVED = 1 << 0;
    exports.REMOVED = REMOVED;
    var SHOULD_STOP = 1 << 1;
    exports.SHOULD_STOP = SHOULD_STOP;
    var SHOULD_SKIP = 1 << 2;
    exports.SHOULD_SKIP = SHOULD_SKIP;
    var NodePath = class {
      constructor(hub, parent) {
        this.contexts = [];
        this.state = null;
        this.opts = null;
        this._traverseFlags = 0;
        this.skipKeys = null;
        this.parentPath = null;
        this.container = null;
        this.listKey = null;
        this.key = null;
        this.node = null;
        this.type = null;
        this.parent = parent;
        this.hub = hub;
        this.data = null;
        this.context = null;
        this.scope = null;
      }
      static get({
        hub,
        parentPath,
        parent,
        container,
        listKey,
        key
      }) {
        if (!hub && parentPath) {
          hub = parentPath.hub;
        }
        if (!parent) {
          throw new Error(\\"To get a node path the parent needs to exist\\");
        }
        const targetNode = container[key];
        let paths = _cache.path.get(parent);
        if (!paths) {
          paths = /* @__PURE__ */ new Map();
          _cache.path.set(parent, paths);
        }
        let path = paths.get(targetNode);
        if (!path) {
          path = new NodePath(hub, parent);
          if (targetNode)
            paths.set(targetNode, path);
        }
        path.setup(parentPath, container, listKey, key);
        return path;
      }
      getScope(scope) {
        return this.isScope() ? new _scope.default(this) : scope;
      }
      setData(key, val) {
        if (this.data == null) {
          this.data = /* @__PURE__ */ Object.create(null);
        }
        return this.data[key] = val;
      }
      getData(key, def) {
        if (this.data == null) {
          this.data = /* @__PURE__ */ Object.create(null);
        }
        let val = this.data[key];
        if (val === void 0 && def !== void 0)
          val = this.data[key] = def;
        return val;
      }
      buildCodeFrameError(msg, Error2 = SyntaxError) {
        return this.hub.buildError(this.node, msg, Error2);
      }
      traverse(visitor, state) {
        (0, _index.default)(this.node, visitor, this.scope, state, this);
      }
      set(key, node) {
        validate(this.node, key, node);
        this.node[key] = node;
      }
      getPathLocation() {
        const parts = [];
        let path = this;
        do {
          let key = path.key;
          if (path.inList)
            key = \`\${path.listKey}[\${key}]\`;
          parts.unshift(key);
        } while (path = path.parentPath);
        return parts.join(\\".\\");
      }
      debug(message) {
        if (!debug.enabled)
          return;
        debug(\`\${this.getPathLocation()} \${this.type}: \${message}\`);
      }
      toString() {
        return (0, _generator.default)(this.node).code;
      }
      get inList() {
        return !!this.listKey;
      }
      set inList(inList) {
        if (!inList) {
          this.listKey = null;
        }
      }
      get parentKey() {
        return this.listKey || this.key;
      }
      get shouldSkip() {
        return !!(this._traverseFlags & SHOULD_SKIP);
      }
      set shouldSkip(v) {
        if (v) {
          this._traverseFlags |= SHOULD_SKIP;
        } else {
          this._traverseFlags &= ~SHOULD_SKIP;
        }
      }
      get shouldStop() {
        return !!(this._traverseFlags & SHOULD_STOP);
      }
      set shouldStop(v) {
        if (v) {
          this._traverseFlags |= SHOULD_STOP;
        } else {
          this._traverseFlags &= ~SHOULD_STOP;
        }
      }
      get removed() {
        return !!(this._traverseFlags & REMOVED);
      }
      set removed(v) {
        if (v) {
          this._traverseFlags |= REMOVED;
        } else {
          this._traverseFlags &= ~REMOVED;
        }
      }
    };
    Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments);
    for (const type of t.TYPES) {
      const typeKey = \`is\${type}\`;
      const fn = t[typeKey];
      NodePath.prototype[typeKey] = function(opts) {
        return fn(this.node, opts);
      };
      NodePath.prototype[\`assert\${type}\`] = function(opts) {
        if (!fn(this.node, opts)) {
          throw new TypeError(\`Expected node path of type \${type}\`);
        }
      };
    }
    for (const type of Object.keys(virtualTypes)) {
      if (type[0] === \\"_\\")
        continue;
      if (t.TYPES.indexOf(type) < 0)
        t.TYPES.push(type);
      const virtualType = virtualTypes[type];
      NodePath.prototype[\`is\${type}\`] = function(opts) {
        return virtualType.checkPath(this, opts);
      };
    }
    var _default = NodePath;
    exports.default = _default;
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/context.js
var require_context2 = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/context.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _path = require_path();
    var _t = require_lib2();
    var {
      VISITOR_KEYS
    } = _t;
    var TraversalContext = class {
      constructor(scope, opts, state, parentPath) {
        this.queue = null;
        this.priorityQueue = null;
        this.parentPath = parentPath;
        this.scope = scope;
        this.state = state;
        this.opts = opts;
      }
      shouldVisit(node) {
        const opts = this.opts;
        if (opts.enter || opts.exit)
          return true;
        if (opts[node.type])
          return true;
        const keys = VISITOR_KEYS[node.type];
        if (!(keys != null && keys.length))
          return false;
        for (const key of keys) {
          if (node[key])
            return true;
        }
        return false;
      }
      create(node, obj, key, listKey) {
        return _path.default.get({
          parentPath: this.parentPath,
          parent: node,
          container: obj,
          key,
          listKey
        });
      }
      maybeQueue(path, notPriority) {
        if (this.queue) {
          if (notPriority) {
            this.queue.push(path);
          } else {
            this.priorityQueue.push(path);
          }
        }
      }
      visitMultiple(container, parent, listKey) {
        if (container.length === 0)
          return false;
        const queue = [];
        for (let key = 0; key < container.length; key++) {
          const node = container[key];
          if (node && this.shouldVisit(node)) {
            queue.push(this.create(parent, container, key, listKey));
          }
        }
        return this.visitQueue(queue);
      }
      visitSingle(node, key) {
        if (this.shouldVisit(node[key])) {
          return this.visitQueue([this.create(node, node, key)]);
        } else {
          return false;
        }
      }
      visitQueue(queue) {
        this.queue = queue;
        this.priorityQueue = [];
        const visited = /* @__PURE__ */ new WeakSet();
        let stop = false;
        for (const path of queue) {
          path.resync();
          if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {
            path.pushContext(this);
          }
          if (path.key === null)
            continue;
          const {
            node
          } = path;
          if (visited.has(node))
            continue;
          if (node)
            visited.add(node);
          if (path.visit()) {
            stop = true;
            break;
          }
          if (this.priorityQueue.length) {
            stop = this.visitQueue(this.priorityQueue);
            this.priorityQueue = [];
            this.queue = queue;
            if (stop)
              break;
          }
        }
        for (const path of queue) {
          path.popContext();
        }
        this.queue = null;
        return stop;
      }
      visit(node, key) {
        const nodes = node[key];
        if (!nodes)
          return false;
        if (Array.isArray(nodes)) {
          return this.visitMultiple(nodes, node, key);
        } else {
          return this.visitSingle(node, key);
        }
      }
    };
    exports.default = TraversalContext;
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/traverse-node.js
var require_traverse_node = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/traverse-node.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.traverseNode = traverseNode;
    var _context = require_context2();
    var _t = require_lib2();
    var {
      VISITOR_KEYS
    } = _t;
    function traverseNode(node, opts, scope, state, path, skipKeys) {
      const keys = VISITOR_KEYS[node.type];
      if (!keys)
        return false;
      const context = new _context.default(scope, opts, state, path);
      for (const key of keys) {
        if (skipKeys && skipKeys[key])
          continue;
        if (context.visit(node, key)) {
          return true;
        }
      }
      return false;
    }
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/hub.js
var require_hub = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/hub.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var Hub = class {
      getCode() {
      }
      getScope() {
      }
      addHelper() {
        throw new Error(\\"Helpers are not supported by the default hub.\\");
      }
      buildError(node, msg, Error2 = TypeError) {
        return new Error2(msg);
      }
    };
    exports.default = Hub;
  }
});

// node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/index.js
var require_lib13 = __commonJS({
  \\"node_modules/.pnpm/@babel+traverse@7.16.10/node_modules/@babel/traverse/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports, \\"Hub\\", {
      enumerable: true,
      get: function() {
        return _hub.default;
      }
    });
    Object.defineProperty(exports, \\"NodePath\\", {
      enumerable: true,
      get: function() {
        return _path.default;
      }
    });
    Object.defineProperty(exports, \\"Scope\\", {
      enumerable: true,
      get: function() {
        return _scope.default;
      }
    });
    exports.visitors = exports.default = void 0;
    var visitors = require_visitors();
    exports.visitors = visitors;
    var _t = require_lib2();
    var cache = require_cache();
    var _traverseNode = require_traverse_node();
    var _path = require_path();
    var _scope = require_scope();
    var _hub = require_hub();
    var {
      VISITOR_KEYS,
      removeProperties,
      traverseFast
    } = _t;
    function traverse(parent, opts = {}, scope, state, parentPath) {
      if (!parent)
        return;
      if (!opts.noScope && !scope) {
        if (parent.type !== \\"Program\\" && parent.type !== \\"File\\") {
          throw new Error(\`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a \${parent.type} node without passing scope and parentPath.\`);
        }
      }
      if (!VISITOR_KEYS[parent.type]) {
        return;
      }
      visitors.explode(opts);
      (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath);
    }
    var _default = traverse;
    exports.default = _default;
    traverse.visitors = visitors;
    traverse.verify = visitors.verify;
    traverse.explode = visitors.explode;
    traverse.cheap = function(node, enter) {
      return traverseFast(node, enter);
    };
    traverse.node = function(node, opts, scope, state, path, skipKeys) {
      (0, _traverseNode.traverseNode)(node, opts, scope, state, path, skipKeys);
    };
    traverse.clearNode = function(node, opts) {
      removeProperties(node, opts);
      cache.path.delete(node);
    };
    traverse.removeProperties = function(tree, opts) {
      traverseFast(tree, traverse.clearNode, opts);
      return tree;
    };
    function hasDenylistedType(path, state) {
      if (path.node.type === state.type) {
        state.has = true;
        path.stop();
      }
    }
    traverse.hasType = function(tree, type, denylistTypes) {
      if (denylistTypes != null && denylistTypes.includes(tree.type))
        return false;
      if (tree.type === type)
        return true;
      const state = {
        has: false,
        type
      };
      traverse(tree, {
        noScope: true,
        denylist: denylistTypes,
        enter: hasDenylistedType
      }, null, state);
      return state.has;
    };
    traverse.cache = cache;
  }
});

// node_modules/.pnpm/@babel+helpers@7.16.7/node_modules/@babel/helpers/lib/helpers-generated.js
var require_helpers_generated = __commonJS({
  \\"node_modules/.pnpm/@babel+helpers@7.16.7/node_modules/@babel/helpers/lib/helpers-generated.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _template = require_lib11();
    function helper(minVersion, source) {
      return Object.freeze({
        minVersion,
        ast: () => _template.default.program.ast(source)
      });
    }
    var _default = Object.freeze({
      asyncIterator: helper(\\"7.15.9\\", 'export default function _asyncIterator(iterable){var method,async,sync,retry=2;for(\\"undefined\\"!=typeof Symbol&&(async=Symbol.asyncIterator,sync=Symbol.iterator);retry--;){if(async&&null!=(method=iterable[async]))return method.call(iterable);if(sync&&null!=(method=iterable[sync]))return new AsyncFromSyncIterator(method.call(iterable));async=\\"@@asyncIterator\\",sync=\\"@@iterator\\"}throw new TypeError(\\"Object is not async iterable\\")}function AsyncFromSyncIterator(s){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+\\" is not an object.\\"));var done=r.done;return Promise.resolve(r.value).then((function(value){return{value:value,done:done}}))}return AsyncFromSyncIterator=function(s){this.s=s,this.n=s.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(value){var ret=this.s.return;return void 0===ret?Promise.resolve({value:value,done:!0}):AsyncFromSyncIteratorContinuation(ret.apply(this.s,arguments))},throw:function(value){var thr=this.s.return;return void 0===thr?Promise.reject(value):AsyncFromSyncIteratorContinuation(thr.apply(this.s,arguments))}},new AsyncFromSyncIterator(s)}'),
      jsx: helper(\\"7.0.0-beta.0\\", 'var REACT_ELEMENT_TYPE;export default function _createRawReactElement(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE=\\"function\\"==typeof Symbol&&Symbol.for&&Symbol.for(\\"react.element\\")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:\\"\\"+key,ref:null,props:props,_owner:null}}'),
      objectSpread2: helper(\\"7.5.0\\", 'import defineProperty from\\"defineProperty\\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}export default function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}'),
      typeof: helper(\\"7.0.0-beta.0\\", 'export default function _typeof(obj){\\"@babel/helpers - typeof\\";return _typeof=\\"function\\"==typeof Symbol&&\\"symbol\\"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\\"function\\"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\\"symbol\\":typeof obj},_typeof(obj)}'),
      wrapRegExp: helper(\\"7.2.6\\", 'import setPrototypeOf from\\"setPrototypeOf\\";import inherits from\\"inherits\\";export default function _wrapRegExp(){_wrapRegExp=function(re,groups){return new BabelRegExp(re,void 0,groups)};var _super=RegExp.prototype,_groups=new WeakMap;function BabelRegExp(re,flags,groups){var _this=new RegExp(re,flags);return _groups.set(_this,groups||_groups.get(re)),setPrototypeOf(_this,BabelRegExp.prototype)}function buildGroups(result,re){var g=_groups.get(re);return Object.keys(g).reduce((function(groups,name){return groups[name]=result[g[name]],groups}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(str){var result=_super.exec.call(this,str);return result&&(result.groups=buildGroups(result,this)),result},BabelRegExp.prototype[Symbol.replace]=function(str,substitution){if(\\"string\\"==typeof substitution){var groups=_groups.get(this);return _super[Symbol.replace].call(this,str,substitution.replace(/\\\\\\\\$<([^>]+)>/g,(function(_,name){return\\"$\\"+groups[name]})))}if(\\"function\\"==typeof substitution){var _this=this;return _super[Symbol.replace].call(this,str,(function(){var args=arguments;return\\"object\\"!=typeof args[args.length-1]&&(args=[].slice.call(args)).push(buildGroups(args,_this)),substitution.apply(this,args)}))}return _super[Symbol.replace].call(this,str,substitution)},_wrapRegExp.apply(this,arguments)}')
    });
    exports.default = _default;
  }
});

// node_modules/.pnpm/@babel+helpers@7.16.7/node_modules/@babel/helpers/lib/helpers.js
var require_helpers = __commonJS({
  \\"node_modules/.pnpm/@babel+helpers@7.16.7/node_modules/@babel/helpers/lib/helpers.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _template = require_lib11();
    var _helpersGenerated = require_helpers_generated();
    var helpers = Object.assign({
      __proto__: null
    }, _helpersGenerated.default);
    var _default = helpers;
    exports.default = _default;
    var helper = (minVersion) => (tpl) => ({
      minVersion,
      ast: () => _template.default.program.ast(tpl)
    });
    helpers.AwaitValue = helper(\\"7.0.0-beta.0\\")\`
  export default function _AwaitValue(value) {
    this.wrapped = value;
  }
\`;
    helpers.AsyncGenerator = helper(\\"7.0.0-beta.0\\")\`
  import AwaitValue from \\"AwaitValue\\";

  export default function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null,
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg)
        var value = result.value;
        var wrappedAwait = value instanceof AwaitValue;

        Promise.resolve(wrappedAwait ? value.wrapped : value).then(
          function (arg) {
            if (wrappedAwait) {
              resume(key === \\"return\\" ? \\"return\\" : \\"next\\", arg);
              return
            }

            settle(result.done ? \\"return\\" : \\"normal\\", arg);
          },
          function (err) { resume(\\"throw\\", err); });
      } catch (err) {
        settle(\\"throw\\", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case \\"return\\":
          front.resolve({ value: value, done: true });
          break;
        case \\"throw\\":
          front.reject(value);
          break;
        default:
          front.resolve({ value: value, done: false });
          break;
      }

      front = front.next;
      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    // Hide \\"return\\" method if generator return is not supported
    if (typeof gen.return !== \\"function\\") {
      this.return = undefined;
    }
  }

  AsyncGenerator.prototype[typeof Symbol === \\"function\\" && Symbol.asyncIterator || \\"@@asyncIterator\\"] = function () { return this; };

  AsyncGenerator.prototype.next = function (arg) { return this._invoke(\\"next\\", arg); };
  AsyncGenerator.prototype.throw = function (arg) { return this._invoke(\\"throw\\", arg); };
  AsyncGenerator.prototype.return = function (arg) { return this._invoke(\\"return\\", arg); };
\`;
    helpers.wrapAsyncGenerator = helper(\\"7.0.0-beta.0\\")\`
  import AsyncGenerator from \\"AsyncGenerator\\";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
\`;
    helpers.awaitAsyncGenerator = helper(\\"7.0.0-beta.0\\")\`
  import AwaitValue from \\"AwaitValue\\";

  export default function _awaitAsyncGenerator(value) {
    return new AwaitValue(value);
  }
\`;
    helpers.asyncGeneratorDelegate = helper(\\"7.0.0-beta.0\\")\`
  export default function _asyncGeneratorDelegate(inner, awaitWrap) {
    var iter = {}, waiting = false;

    function pump(key, value) {
      waiting = true;
      value = new Promise(function (resolve) { resolve(inner[key](value)); });
      return { done: false, value: awaitWrap(value) };
    };

    iter[typeof Symbol !== \\"undefined\\" && Symbol.iterator || \\"@@iterator\\"] = function () { return this; };

    iter.next = function (value) {
      if (waiting) {
        waiting = false;
        return value;
      }
      return pump(\\"next\\", value);
    };

    if (typeof inner.throw === \\"function\\") {
      iter.throw = function (value) {
        if (waiting) {
          waiting = false;
          throw value;
        }
        return pump(\\"throw\\", value);
      };
    }

    if (typeof inner.return === \\"function\\") {
      iter.return = function (value) {
        if (waiting) {
          waiting = false;
          return value;
        }
        return pump(\\"return\\", value);
      };
    }

    return iter;
  }
\`;
    helpers.asyncToGenerator = helper(\\"7.0.0-beta.0\\")\`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\"next\\", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\"throw\\", err);
        }

        _next(undefined);
      });
    };
  }
\`;
    helpers.classCallCheck = helper(\\"7.0.0-beta.0\\")\`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError(\\"Cannot call a class as a function\\");
    }
  }
\`;
    helpers.createClass = helper(\\"7.0.0-beta.0\\")\`
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if (\\"value\\" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, \\"prototype\\", { writable: false });
    return Constructor;
  }
\`;
    helpers.defineEnumerableProperties = helper(\\"7.0.0-beta.0\\")\`
  export default function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if (\\"value\\" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    // Symbols are not enumerated over by for-in loops. If native
    // Symbols are available, fetch all of the descs object's own
    // symbol properties and define them on our target object too.
    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);
      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if (\\"value\\" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }
    return obj;
  }
\`;
    helpers.defaults = helper(\\"7.0.0-beta.0\\")\`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
\`;
    helpers.defineProperty = helper(\\"7.0.0-beta.0\\")\`
  export default function _defineProperty(obj, key, value) {
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
\`;
    helpers.extends = helper(\\"7.0.0-beta.0\\")\`
  export default function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
\`;
    helpers.objectSpread = helper(\\"7.0.0-beta.0\\")\`
  import defineProperty from \\"defineProperty\\";

  export default function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = (arguments[i] != null) ? Object(arguments[i]) : {};
      var ownKeys = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys.forEach(function(key) {
        defineProperty(target, key, source[key]);
      });
    }
    return target;
  }
\`;
    helpers.inherits = helper(\\"7.0.0-beta.0\\")\`
  import setPrototypeOf from \\"setPrototypeOf\\";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== \\"function\\" && superClass !== null) {
      throw new TypeError(\\"Super expression must either be null or a function\\");
    }
    // We can't use defineProperty to set the prototype in a single step because it
    // doesn't work in Chrome <= 36. https://github.com/babel/babel/issues/14056
    // V8 bug: https://bugs.chromium.org/p/v8/issues/detail?id=3334
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, \\"prototype\\", { writable: false });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
\`;
    helpers.inheritsLoose = helper(\\"7.0.0-beta.0\\")\`
  import setPrototypeOf from \\"setPrototypeOf\\";

  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  }
\`;
    helpers.getPrototypeOf = helper(\\"7.0.0-beta.0\\")\`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
\`;
    helpers.setPrototypeOf = helper(\\"7.0.0-beta.0\\")\`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
\`;
    helpers.isNativeReflectConstruct = helper(\\"7.9.0\\")\`
  export default function _isNativeReflectConstruct() {
    if (typeof Reflect === \\"undefined\\" || !Reflect.construct) return false;

    // core-js@3
    if (Reflect.construct.sham) return false;

    // Proxy can't be polyfilled. Every browser implemented
    // proxies before or at the same time as Reflect.construct,
    // so if they support Proxy they also support Reflect.construct.
    if (typeof Proxy === \\"function\\") return true;

    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
      // If the internal slots aren't set, this throws an error similar to
      //   TypeError: this is not a Boolean object.

      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
      return true;
    } catch (e) {
      return false;
    }
  }
\`;
    helpers.construct = helper(\\"7.0.0-beta.0\\")\`
  import setPrototypeOf from \\"setPrototypeOf\\";
  import isNativeReflectConstruct from \\"isNativeReflectConstruct\\";

  export default function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      // NOTE: If Parent !== Class, the correct __proto__ is set *after*
      //       calling the constructor.
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    // Avoid issues with Class being present but undefined when it wasn't
    // present in the original call.
    return _construct.apply(null, arguments);
  }
\`;
    helpers.isNativeFunction = helper(\\"7.0.0-beta.0\\")\`
  export default function _isNativeFunction(fn) {
    // Note: This function returns \\"true\\" for core-js functions.
    return Function.toString.call(fn).indexOf(\\"[native code]\\") !== -1;
  }
\`;
    helpers.wrapNativeSuper = helper(\\"7.0.0-beta.0\\")\`
  import getPrototypeOf from \\"getPrototypeOf\\";
  import setPrototypeOf from \\"setPrototypeOf\\";
  import isNativeFunction from \\"isNativeFunction\\";
  import construct from \\"construct\\";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === \\"function\\" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== \\"function\\") {
        throw new TypeError(\\"Super expression must either be null or a function\\");
      }
      if (typeof _cache !== \\"undefined\\") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
\`;
    helpers.instanceof = helper(\\"7.0.0-beta.0\\")\`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== \\"undefined\\" && right[Symbol.hasInstance]) {
      return !!right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
\`;
    helpers.interopRequireDefault = helper(\\"7.0.0-beta.0\\")\`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
\`;
    helpers.interopRequireWildcard = helper(\\"7.14.0\\")\`
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== \\"function\\") return null;

    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function (nodeInterop) {
      return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }

  export default function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || (typeof obj !== \\"object\\" && typeof obj !== \\"function\\")) {
      return { default: obj }
    }

    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== \\"default\\" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor
          ? Object.getOwnPropertyDescriptor(obj, key)
          : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
\`;
    helpers.newArrowCheck = helper(\\"7.0.0-beta.0\\")\`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError(\\"Cannot instantiate an arrow function\\");
    }
  }
\`;
    helpers.objectDestructuringEmpty = helper(\\"7.0.0-beta.0\\")\`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError(\\"Cannot destructure undefined\\");
  }
\`;
    helpers.objectWithoutPropertiesLoose = helper(\\"7.0.0-beta.0\\")\`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
\`;
    helpers.objectWithoutProperties = helper(\\"7.0.0-beta.0\\")\`
  import objectWithoutPropertiesLoose from \\"objectWithoutPropertiesLoose\\";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
\`;
    helpers.assertThisInitialized = helper(\\"7.0.0-beta.0\\")\`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError(\\"this hasn't been initialised - super() hasn't been called\\");
    }
    return self;
  }
\`;
    helpers.possibleConstructorReturn = helper(\\"7.0.0-beta.0\\")\`
  import assertThisInitialized from \\"assertThisInitialized\\";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === \\"object\\" || typeof call === \\"function\\")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError(\\"Derived constructors may only return object or undefined\\");
    }

    return assertThisInitialized(self);
  }
\`;
    helpers.createSuper = helper(\\"7.9.0\\")\`
  import getPrototypeOf from \\"getPrototypeOf\\";
  import isNativeReflectConstruct from \\"isNativeReflectConstruct\\";
  import possibleConstructorReturn from \\"possibleConstructorReturn\\";

  export default function _createSuper(Derived) {
    var hasNativeReflectConstruct = isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    }
  }
 \`;
    helpers.superPropBase = helper(\\"7.0.0-beta.0\\")\`
  import getPrototypeOf from \\"getPrototypeOf\\";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
\`;
    helpers.get = helper(\\"7.0.0-beta.0\\")\`
  import superPropBase from \\"superPropBase\\";

  export default function _get() {
    if (typeof Reflect !== \\"undefined\\" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          // STEP 3. If receiver is not present, then set receiver to target.
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }
    return _get.apply(this, arguments);
  }
\`;
    helpers.set = helper(\\"7.0.0-beta.0\\")\`
  import superPropBase from \\"superPropBase\\";
  import defineProperty from \\"defineProperty\\";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== \\"undefined\\" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // \\"define on receiver\\" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new Error('failed to set property');
    }

    return value;
  }
\`;
    helpers.taggedTemplateLiteral = helper(\\"7.0.0-beta.0\\")\`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
\`;
    helpers.taggedTemplateLiteralLoose = helper(\\"7.0.0-beta.0\\")\`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
\`;
    helpers.readOnlyError = helper(\\"7.0.0-beta.0\\")\`
  export default function _readOnlyError(name) {
    throw new TypeError(\\"\\\\\\\\\\"\\" + name + \\"\\\\\\\\\\" is read-only\\");
  }
\`;
    helpers.writeOnlyError = helper(\\"7.12.13\\")\`
  export default function _writeOnlyError(name) {
    throw new TypeError(\\"\\\\\\\\\\"\\" + name + \\"\\\\\\\\\\" is write-only\\");
  }
\`;
    helpers.classNameTDZError = helper(\\"7.0.0-beta.0\\")\`
  export default function _classNameTDZError(name) {
    throw new Error(\\"Class \\\\\\\\\\"\\" + name + \\"\\\\\\\\\\" cannot be referenced in computed property keys.\\");
  }
\`;
    helpers.temporalUndefined = helper(\\"7.0.0-beta.0\\")\`
  // This function isn't mean to be called, but to be used as a reference.
  // We can't use a normal object because it isn't hoisted.
  export default function _temporalUndefined() {}
\`;
    helpers.tdz = helper(\\"7.5.5\\")\`
  export default function _tdzError(name) {
    throw new ReferenceError(name + \\" is not defined - temporal dead zone\\");
  }
\`;
    helpers.temporalRef = helper(\\"7.0.0-beta.0\\")\`
  import undef from \\"temporalUndefined\\";
  import err from \\"tdz\\";

  export default function _temporalRef(val, name) {
    return val === undef ? err(name) : val;
  }
\`;
    helpers.slicedToArray = helper(\\"7.0.0-beta.0\\")\`
  import arrayWithHoles from \\"arrayWithHoles\\";
  import iterableToArrayLimit from \\"iterableToArrayLimit\\";
  import unsupportedIterableToArray from \\"unsupportedIterableToArray\\";
  import nonIterableRest from \\"nonIterableRest\\";

  export default function _slicedToArray(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimit(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
\`;
    helpers.slicedToArrayLoose = helper(\\"7.0.0-beta.0\\")\`
  import arrayWithHoles from \\"arrayWithHoles\\";
  import iterableToArrayLimitLoose from \\"iterableToArrayLimitLoose\\";
  import unsupportedIterableToArray from \\"unsupportedIterableToArray\\";
  import nonIterableRest from \\"nonIterableRest\\";

  export default function _slicedToArrayLoose(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimitLoose(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
\`;
    helpers.toArray = helper(\\"7.0.0-beta.0\\")\`
  import arrayWithHoles from \\"arrayWithHoles\\";
  import iterableToArray from \\"iterableToArray\\";
  import unsupportedIterableToArray from \\"unsupportedIterableToArray\\";
  import nonIterableRest from \\"nonIterableRest\\";

  export default function _toArray(arr) {
    return (
      arrayWithHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableRest()
    );
  }
\`;
    helpers.toConsumableArray = helper(\\"7.0.0-beta.0\\")\`
  import arrayWithoutHoles from \\"arrayWithoutHoles\\";
  import iterableToArray from \\"iterableToArray\\";
  import unsupportedIterableToArray from \\"unsupportedIterableToArray\\";
  import nonIterableSpread from \\"nonIterableSpread\\";

  export default function _toConsumableArray(arr) {
    return (
      arrayWithoutHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableSpread()
    );
  }
\`;
    helpers.arrayWithoutHoles = helper(\\"7.0.0-beta.0\\")\`
  import arrayLikeToArray from \\"arrayLikeToArray\\";

  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }
\`;
    helpers.arrayWithHoles = helper(\\"7.0.0-beta.0\\")\`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
\`;
    helpers.maybeArrayLike = helper(\\"7.9.0\\")\`
  import arrayLikeToArray from \\"arrayLikeToArray\\";

  export default function _maybeArrayLike(next, arr, i) {
    if (arr && !Array.isArray(arr) && typeof arr.length === \\"number\\") {
      var len = arr.length;
      return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
    }
    return next(arr, i);
  }
\`;
    helpers.iterableToArray = helper(\\"7.0.0-beta.0\\")\`
  export default function _iterableToArray(iter) {
    if (typeof Symbol !== \\"undefined\\" && iter[Symbol.iterator] != null || iter[\\"@@iterator\\"] != null) return Array.from(iter);
  }
\`;
    helpers.iterableToArrayLimit = helper(\\"7.0.0-beta.0\\")\`
  export default function _iterableToArrayLimit(arr, i) {
    // this is an expanded form of \\\\\`for...of\\\\\` that properly supports abrupt completions of
    // iterators etc. variable names have been minimised to reduce the size of this massive
    // helper. sometimes spec compliance is annoying :(
    //
    // _n = _iteratorNormalCompletion
    // _d = _didIteratorError
    // _e = _iteratorError
    // _i = _iterator
    // _s = _step

    var _i = arr == null ? null : (typeof Symbol !== \\"undefined\\" && arr[Symbol.iterator] || arr[\\"@@iterator\\"]);
    if (_i == null) return;

    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i[\\"return\\"] != null) _i[\\"return\\"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
\`;
    helpers.iterableToArrayLimitLoose = helper(\\"7.0.0-beta.0\\")\`
  export default function _iterableToArrayLimitLoose(arr, i) {
    var _i = arr && (typeof Symbol !== \\"undefined\\" && arr[Symbol.iterator] || arr[\\"@@iterator\\"]);
    if (_i == null) return;

    var _arr = [];
    for (_i = _i.call(arr), _step; !(_step = _i.next()).done;) {
      _arr.push(_step.value);
      if (i && _arr.length === i) break;
    }
    return _arr;
  }
\`;
    helpers.unsupportedIterableToArray = helper(\\"7.9.0\\")\`
  import arrayLikeToArray from \\"arrayLikeToArray\\";

  export default function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === \\"string\\") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === \\"Object\\" && o.constructor) n = o.constructor.name;
    if (n === \\"Map\\" || n === \\"Set\\") return Array.from(o);
    if (n === \\"Arguments\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  }
\`;
    helpers.arrayLikeToArray = helper(\\"7.9.0\\")\`
  export default function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
\`;
    helpers.nonIterableSpread = helper(\\"7.0.0-beta.0\\")\`
  export default function _nonIterableSpread() {
    throw new TypeError(
      \\"Invalid attempt to spread non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\"
    );
  }
\`;
    helpers.nonIterableRest = helper(\\"7.0.0-beta.0\\")\`
  export default function _nonIterableRest() {
    throw new TypeError(
      \\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\"
    );
  }
\`;
    helpers.createForOfIteratorHelper = helper(\\"7.9.0\\")\`
  import unsupportedIterableToArray from \\"unsupportedIterableToArray\\";

  // s: start (create the iterator)
  // n: next
  // e: error (called whenever something throws)
  // f: finish (always called at the end)

  export default function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== \\"undefined\\" && o[Symbol.iterator] || o[\\"@@iterator\\"];

    if (!it) {
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === \\"number\\")
      ) {
        if (it) o = it;
        var i = 0;
        var F = function(){};
        return {
          s: F,
          n: function() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          },
          e: function(e) { throw e; },
          f: F,
        };
      }

      throw new TypeError(\\"Invalid attempt to iterate non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\");
    }

    var normalCompletion = true, didErr = false, err;

    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
\`;
    helpers.createForOfIteratorHelperLoose = helper(\\"7.9.0\\")\`
  import unsupportedIterableToArray from \\"unsupportedIterableToArray\\";

  export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== \\"undefined\\" && o[Symbol.iterator] || o[\\"@@iterator\\"];

    if (it) return (it = it.call(o)).next.bind(it);

    // Fallback for engines without symbol support
    if (
      Array.isArray(o) ||
      (it = unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === \\"number\\")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      }
    }

    throw new TypeError(\\"Invalid attempt to iterate non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\");
  }
\`;
    helpers.skipFirstGeneratorNext = helper(\\"7.0.0-beta.0\\")\`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
\`;
    helpers.toPrimitive = helper(\\"7.1.5\\")\`
  export default function _toPrimitive(
    input,
    hint /*: \\"default\\" | \\"string\\" | \\"number\\" | void */
  ) {
    if (typeof input !== \\"object\\" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || \\"default\\");
      if (typeof res !== \\"object\\") return res;
      throw new TypeError(\\"@@toPrimitive must return a primitive value.\\");
    }
    return (hint === \\"string\\" ? String : Number)(input);
  }
\`;
    helpers.toPropertyKey = helper(\\"7.1.5\\")\`
  import toPrimitive from \\"toPrimitive\\";

  export default function _toPropertyKey(arg) {
    var key = toPrimitive(arg, \\"string\\");
    return typeof key === \\"symbol\\" ? key : String(key);
  }
\`;
    helpers.initializerWarningHelper = helper(\\"7.0.0-beta.0\\")\`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'proposal-class-properties is enabled and runs after the decorators transform.'
        );
    }
\`;
    helpers.initializerDefineProperty = helper(\\"7.0.0-beta.0\\")\`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
\`;
    helpers.applyDecoratedDescriptor = helper(\\"7.0.0-beta.0\\")\`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object.keys(descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            Object.defineProperty(target, property, desc);
            desc = null;
        }

        return desc;
    }
\`;
    helpers.classPrivateFieldLooseKey = helper(\\"7.0.0-beta.0\\")\`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return \\"__private_\\" + (id++) + \\"_\\" + name;
  }
\`;
    helpers.classPrivateFieldLooseBase = helper(\\"7.0.0-beta.0\\")\`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError(\\"attempted to use private field on non-instance\\");
    }
    return receiver;
  }
\`;
    helpers.classPrivateFieldGet = helper(\\"7.0.0-beta.0\\")\`
  import classApplyDescriptorGet from \\"classApplyDescriptorGet\\";
  import classExtractFieldDescriptor from \\"classExtractFieldDescriptor\\";
  export default function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, \\"get\\");
    return classApplyDescriptorGet(receiver, descriptor);
  }
\`;
    helpers.classPrivateFieldSet = helper(\\"7.0.0-beta.0\\")\`
  import classApplyDescriptorSet from \\"classApplyDescriptorSet\\";
  import classExtractFieldDescriptor from \\"classExtractFieldDescriptor\\";
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, \\"set\\");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
\`;
    helpers.classPrivateFieldDestructureSet = helper(\\"7.4.4\\")\`
  import classApplyDescriptorDestructureSet from \\"classApplyDescriptorDestructureSet\\";
  import classExtractFieldDescriptor from \\"classExtractFieldDescriptor\\";
  export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, \\"set\\");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
\`;
    helpers.classExtractFieldDescriptor = helper(\\"7.13.10\\")\`
  export default function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError(\\"attempted to \\" + action + \\" private field on non-instance\\");
    }
    return privateMap.get(receiver);
  }
\`;
    helpers.classStaticPrivateFieldSpecGet = helper(\\"7.0.2\\")\`
  import classApplyDescriptorGet from \\"classApplyDescriptorGet\\";
  import classCheckPrivateStaticAccess from \\"classCheckPrivateStaticAccess\\";
  import classCheckPrivateStaticFieldDescriptor from \\"classCheckPrivateStaticFieldDescriptor\\";
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, \\"get\\");
    return classApplyDescriptorGet(receiver, descriptor);
  }
\`;
    helpers.classStaticPrivateFieldSpecSet = helper(\\"7.0.2\\")\`
  import classApplyDescriptorSet from \\"classApplyDescriptorSet\\";
  import classCheckPrivateStaticAccess from \\"classCheckPrivateStaticAccess\\";
  import classCheckPrivateStaticFieldDescriptor from \\"classCheckPrivateStaticFieldDescriptor\\";
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, \\"set\\");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
\`;
    helpers.classStaticPrivateMethodGet = helper(\\"7.3.2\\")\`
  import classCheckPrivateStaticAccess from \\"classCheckPrivateStaticAccess\\";
  export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    return method;
  }
\`;
    helpers.classStaticPrivateMethodSet = helper(\\"7.3.2\\")\`
  export default function _classStaticPrivateMethodSet() {
    throw new TypeError(\\"attempted to set read only static private field\\");
  }
\`;
    helpers.classApplyDescriptorGet = helper(\\"7.13.10\\")\`
  export default function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
\`;
    helpers.classApplyDescriptorSet = helper(\\"7.13.10\\")\`
  export default function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError(\\"attempted to set read only private field\\");
      }
      descriptor.value = value;
    }
  }
\`;
    helpers.classApplyDescriptorDestructureSet = helper(\\"7.13.10\\")\`
  export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
    if (descriptor.set) {
      if (!(\\"__destrObj\\" in descriptor)) {
        descriptor.__destrObj = {
          set value(v) {
            descriptor.set.call(receiver, v)
          },
        };
      }
      return descriptor.__destrObj;
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError(\\"attempted to set read only private field\\");
      }

      return descriptor;
    }
  }
\`;
    helpers.classStaticPrivateFieldDestructureSet = helper(\\"7.13.10\\")\`
  import classApplyDescriptorDestructureSet from \\"classApplyDescriptorDestructureSet\\";
  import classCheckPrivateStaticAccess from \\"classCheckPrivateStaticAccess\\";
  import classCheckPrivateStaticFieldDescriptor from \\"classCheckPrivateStaticFieldDescriptor\\";
  export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, \\"set\\");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
\`;
    helpers.classCheckPrivateStaticAccess = helper(\\"7.13.10\\")\`
  export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {
    if (receiver !== classConstructor) {
      throw new TypeError(\\"Private static access of wrong provenance\\");
    }
  }
\`;
    helpers.classCheckPrivateStaticFieldDescriptor = helper(\\"7.13.10\\")\`
  export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
    if (descriptor === undefined) {
      throw new TypeError(\\"attempted to \\" + action + \\" private static field before its declaration\\");
    }
  }
\`;
    helpers.decorate = helper(\\"7.1.5\\")\`
  import toArray from \\"toArray\\";
  import toPropertyKey from \\"toPropertyKey\\";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = \\"static\\" | \\"prototype\\" | \\"own\\";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: \\"method\\",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: \\"field\\",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: \\"Descriptor\\"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: \\"Descriptor\\"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: \\"Descriptor\\",
    kind: \\"class\\",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: \\"method\\",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: \\"field\\",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
    mixins /*: ?Array<Function> */,
  ) /*: Class<*> */ {
    var api = _getDecoratorsApi();
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        api = mixins[i](api);
      }
    }

    var r = factory(function initialize(O) {
      api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    api.initializeClassElements(r.F, decorated.elements);

    return api.runClassFinishers(r.F, decorated.finishers);
  }

  function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
      return api;
    };

    var api = {
      elementsDefinitionOrder: [[\\"method\\"], [\\"field\\"]],

      // InitializeInstanceElements
      initializeInstanceElements: function(
        /*::<C>*/ O /*: C */,
        elements /*: ElementDescriptor[] */,
      ) {
        [\\"method\\", \\"field\\"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (element.kind === kind && element.placement === \\"own\\") {
              this.defineClassElement(O, element);
            }
          }, this);
        }, this);
      },

      // InitializeClassElements
      initializeClassElements: function(
        /*::<C>*/ F /*: Class<C> */,
        elements /*: ElementDescriptor[] */,
      ) {
        var proto = F.prototype;

        [\\"method\\", \\"field\\"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            var placement = element.placement;
            if (
              element.kind === kind &&
              (placement === \\"static\\" || placement === \\"prototype\\")
            ) {
              var receiver = placement === \\"static\\" ? F : proto;
              this.defineClassElement(receiver, element);
            }
          }, this);
        }, this);
      },

      // DefineClassElement
      defineClassElement: function(
        /*::<C>*/ receiver /*: C | Class<C> */,
        element /*: ElementDescriptor */,
      ) {
        var descriptor /*: PropertyDescriptor */ = element.descriptor;
        if (element.kind === \\"field\\") {
          var initializer = element.initializer;
          descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver),
          };
        }
        Object.defineProperty(receiver, element.key, descriptor);
      },

      // DecorateClass
      decorateClass: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var newElements /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];
        var placements /*: Placements */ = {
          static: [],
          prototype: [],
          own: [],
        };

        elements.forEach(function(element /*: ElementDescriptor */) {
          this.addElementPlacement(element, placements);
        }, this);

        elements.forEach(function(element /*: ElementDescriptor */) {
          if (!_hasDecorators(element)) return newElements.push(element);

          var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
            element,
            placements,
          );
          newElements.push(elementFinishersExtras.element);
          newElements.push.apply(newElements, elementFinishersExtras.extras);
          finishers.push.apply(finishers, elementFinishersExtras.finishers);
        }, this);

        if (!decorators) {
          return { elements: newElements, finishers: finishers };
        }

        var result /*: ElementsFinishers */ = this.decorateConstructor(
          newElements,
          decorators,
        );
        finishers.push.apply(finishers, result.finishers);
        result.finishers = finishers;

        return result;
      },

      // AddElementPlacement
      addElementPlacement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
        silent /*: boolean */,
      ) {
        var keys = placements[element.placement];
        if (!silent && keys.indexOf(element.key) !== -1) {
          throw new TypeError(\\"Duplicated element (\\" + element.key + \\")\\");
        }
        keys.push(element.key);
      },

      // DecorateElement
      decorateElement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
      ) /*: ElementFinishersExtras */ {
        var extras /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];

        for (
          var decorators = element.decorators, i = decorators.length - 1;
          i >= 0;
          i--
        ) {
          // (inlined) RemoveElementPlacement
          var keys = placements[element.placement];
          keys.splice(keys.indexOf(element.key), 1);

          var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
            element,
          );
          var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
            (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
              elementObject,
          );

          element = elementFinisherExtras.element;
          this.addElementPlacement(element, placements);

          if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
          }

          var newExtras /*: ElementDescriptor[] | void */ =
            elementFinisherExtras.extras;
          if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
              this.addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
          }
        }

        return { element: element, finishers: finishers, extras: extras };
      },

      // DecorateConstructor
      decorateConstructor: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var finishers /*: ClassFinisher[] */ = [];

        for (var i = decorators.length - 1; i >= 0; i--) {
          var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
          var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
            (0, decorators[i])(obj) /*: ClassObject */ || obj,
          );

          if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
          }

          if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;

            for (var j = 0; j < elements.length - 1; j++) {
              for (var k = j + 1; k < elements.length; k++) {
                if (
                  elements[j].key === elements[k].key &&
                  elements[j].placement === elements[k].placement
                ) {
                  throw new TypeError(
                    \\"Duplicated element (\\" + elements[j].key + \\")\\",
                  );
                }
              }
            }
          }
        }

        return { elements: elements, finishers: finishers };
      },

      // FromElementDescriptor
      fromElementDescriptor: function(
        element /*: ElementDescriptor */,
      ) /*: ElementObject */ {
        var obj /*: ElementObject */ = {
          kind: element.kind,
          key: element.key,
          placement: element.placement,
          descriptor: element.descriptor,
        };

        var desc = {
          value: \\"Descriptor\\",
          configurable: true,
        };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        if (element.kind === \\"field\\") obj.initializer = element.initializer;

        return obj;
      },

      // ToElementDescriptors
      toElementDescriptors: function(
        elementObjects /*: ElementObject[] */,
      ) /*: ElementDescriptor[] */ {
        if (elementObjects === undefined) return;
        return toArray(elementObjects).map(function(elementObject) {
          var element = this.toElementDescriptor(elementObject);
          this.disallowProperty(elementObject, \\"finisher\\", \\"An element descriptor\\");
          this.disallowProperty(elementObject, \\"extras\\", \\"An element descriptor\\");
          return element;
        }, this);
      },

      // ToElementDescriptor
      toElementDescriptor: function(
        elementObject /*: ElementObject */,
      ) /*: ElementDescriptor */ {
        var kind = String(elementObject.kind);
        if (kind !== \\"method\\" && kind !== \\"field\\") {
          throw new TypeError(
            'An element descriptor\\\\\\\\'s .kind property must be either \\"method\\" or' +
              ' \\"field\\", but a decorator created an element descriptor with' +
              ' .kind \\"' +
              kind +
              '\\"',
          );
        }

        var key = toPropertyKey(elementObject.key);

        var placement = String(elementObject.placement);
        if (
          placement !== \\"static\\" &&
          placement !== \\"prototype\\" &&
          placement !== \\"own\\"
        ) {
          throw new TypeError(
            'An element descriptor\\\\\\\\'s .placement property must be one of \\"static\\",' +
              ' \\"prototype\\" or \\"own\\", but a decorator created an element descriptor' +
              ' with .placement \\"' +
              placement +
              '\\"',
          );
        }

        var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

        this.disallowProperty(elementObject, \\"elements\\", \\"An element descriptor\\");

        var element /*: ElementDescriptor */ = {
          kind: kind,
          key: key,
          placement: placement,
          descriptor: Object.assign({}, descriptor),
        };

        if (kind !== \\"field\\") {
          this.disallowProperty(elementObject, \\"initializer\\", \\"A method descriptor\\");
        } else {
          this.disallowProperty(
            descriptor,
            \\"get\\",
            \\"The property descriptor of a field descriptor\\",
          );
          this.disallowProperty(
            descriptor,
            \\"set\\",
            \\"The property descriptor of a field descriptor\\",
          );
          this.disallowProperty(
            descriptor,
            \\"value\\",
            \\"The property descriptor of a field descriptor\\",
          );

          element.initializer = elementObject.initializer;
        }

        return element;
      },

      toElementFinisherExtras: function(
        elementObject /*: ElementObject */,
      ) /*: ElementFinisherExtras */ {
        var element /*: ElementDescriptor */ = this.toElementDescriptor(
          elementObject,
        );
        var finisher /*: ClassFinisher */ = _optionalCallableProperty(
          elementObject,
          \\"finisher\\",
        );
        var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
          elementObject.extras,
        );

        return { element: element, finisher: finisher, extras: extras };
      },

      // FromClassDescriptor
      fromClassDescriptor: function(
        elements /*: ElementDescriptor[] */,
      ) /*: ClassObject */ {
        var obj = {
          kind: \\"class\\",
          elements: elements.map(this.fromElementDescriptor, this),
        };

        var desc = { value: \\"Descriptor\\", configurable: true };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        return obj;
      },

      // ToClassDescriptor
      toClassDescriptor: function(
        obj /*: ClassObject */,
      ) /*: ElementsFinisher */ {
        var kind = String(obj.kind);
        if (kind !== \\"class\\") {
          throw new TypeError(
            'A class descriptor\\\\\\\\'s .kind property must be \\"class\\", but a decorator' +
              ' created a class descriptor with .kind \\"' +
              kind +
              '\\"',
          );
        }

        this.disallowProperty(obj, \\"key\\", \\"A class descriptor\\");
        this.disallowProperty(obj, \\"placement\\", \\"A class descriptor\\");
        this.disallowProperty(obj, \\"descriptor\\", \\"A class descriptor\\");
        this.disallowProperty(obj, \\"initializer\\", \\"A class descriptor\\");
        this.disallowProperty(obj, \\"extras\\", \\"A class descriptor\\");

        var finisher = _optionalCallableProperty(obj, \\"finisher\\");
        var elements = this.toElementDescriptors(obj.elements);

        return { elements: elements, finisher: finisher };
      },

      // RunClassFinishers
      runClassFinishers: function(
        constructor /*: Class<*> */,
        finishers /*: ClassFinisher[] */,
      ) /*: Class<*> */ {
        for (var i = 0; i < finishers.length; i++) {
          var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
          if (newConstructor !== undefined) {
            // NOTE: This should check if IsConstructor(newConstructor) is false.
            if (typeof newConstructor !== \\"function\\") {
              throw new TypeError(\\"Finishers must return a constructor.\\");
            }
            constructor = newConstructor;
          }
        }
        return constructor;
      },

      disallowProperty: function(obj, name, objectType) {
        if (obj[name] !== undefined) {
          throw new TypeError(objectType + \\" can't have a .\\" + name + \\" property.\\");
        }
      }
    };

    return api;
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === \\"method\\") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
    } else if (def.kind === \\"get\\") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === \\"set\\") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === \\"field\\") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === \\"field\\" ? \\"field\\" : \\"method\\",
      key: key,
      placement: def.static
        ? \\"static\\"
        : def.kind === \\"field\\"
        ? \\"own\\"
        : \\"prototype\\",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === \\"field\\") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(
      other /*: ElementDescriptor */,
    ) /*: boolean */ {
      return (
        other.kind === \\"method\\" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === \\"method\\" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              \\"Duplicated methods (\\" + element.key + \\") can't be decorated.\\",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                \\"Decorators can't be placed on different accessors with for \\" +
                  \\"the same property (\\" +
                  element.key +
                  \\").\\",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== \\"function\\") {
      throw new TypeError(\\"Expected '\\" + name + \\"' to be a function\\");
    }
    return value;
  }

\`;
    helpers.classPrivateMethodGet = helper(\\"7.1.6\\")\`
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError(\\"attempted to get private field on non-instance\\");
    }
    return fn;
  }
\`;
    helpers.checkPrivateRedeclaration = helper(\\"7.14.1\\")\`
  export default function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError(\\"Cannot initialize the same private elements twice on an object\\");
    }
  }
\`;
    helpers.classPrivateFieldInitSpec = helper(\\"7.14.1\\")\`
  import checkPrivateRedeclaration from \\"checkPrivateRedeclaration\\";

  export default function _classPrivateFieldInitSpec(obj, privateMap, value) {
    checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
\`;
    helpers.classPrivateMethodInitSpec = helper(\\"7.14.1\\")\`
  import checkPrivateRedeclaration from \\"checkPrivateRedeclaration\\";

  export default function _classPrivateMethodInitSpec(obj, privateSet) {
    checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }
\`;
    {
      helpers.classPrivateMethodSet = helper(\\"7.1.6\\")\`
    export default function _classPrivateMethodSet() {
      throw new TypeError(\\"attempted to reassign private method\\");
    }
  \`;
    }
  }
});

// node_modules/.pnpm/@babel+helpers@7.16.7/node_modules/@babel/helpers/lib/index.js
var require_lib14 = __commonJS({
  \\"node_modules/.pnpm/@babel+helpers@7.16.7/node_modules/@babel/helpers/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    exports.ensure = ensure;
    exports.get = get;
    exports.getDependencies = getDependencies;
    exports.list = void 0;
    exports.minVersion = minVersion;
    var _traverse = require_lib13();
    var _t = require_lib2();
    var _helpers = require_helpers();
    var {
      assignmentExpression,
      cloneNode,
      expressionStatement,
      file: t_file,
      identifier,
      variableDeclaration,
      variableDeclarator
    } = _t;
    function makePath(path) {
      const parts = [];
      for (; path.parentPath; path = path.parentPath) {
        parts.push(path.key);
        if (path.inList)
          parts.push(path.listKey);
      }
      return parts.reverse().join(\\".\\");
    }
    var fileClass = void 0;
    function getHelperMetadata(file) {
      const globals = /* @__PURE__ */ new Set();
      const localBindingNames = /* @__PURE__ */ new Set();
      const dependencies = /* @__PURE__ */ new Map();
      let exportName;
      let exportPath;
      const exportBindingAssignments = [];
      const importPaths = [];
      const importBindingsReferences = [];
      const dependencyVisitor = {
        ImportDeclaration(child) {
          const name = child.node.source.value;
          if (!_helpers.default[name]) {
            throw child.buildCodeFrameError(\`Unknown helper \${name}\`);
          }
          if (child.get(\\"specifiers\\").length !== 1 || !child.get(\\"specifiers.0\\").isImportDefaultSpecifier()) {
            throw child.buildCodeFrameError(\\"Helpers can only import a default value\\");
          }
          const bindingIdentifier = child.node.specifiers[0].local;
          dependencies.set(bindingIdentifier, name);
          importPaths.push(makePath(child));
        },
        ExportDefaultDeclaration(child) {
          const decl = child.get(\\"declaration\\");
          if (decl.isFunctionDeclaration()) {
            if (!decl.node.id) {
              throw decl.buildCodeFrameError(\\"Helpers should give names to their exported func declaration\\");
            }
            exportName = decl.node.id.name;
          }
          exportPath = makePath(child);
        },
        ExportAllDeclaration(child) {
          throw child.buildCodeFrameError(\\"Helpers can only export default\\");
        },
        ExportNamedDeclaration(child) {
          throw child.buildCodeFrameError(\\"Helpers can only export default\\");
        },
        Statement(child) {
          if (child.isModuleDeclaration())
            return;
          child.skip();
        }
      };
      const referenceVisitor = {
        Program(path) {
          const bindings = path.scope.getAllBindings();
          Object.keys(bindings).forEach((name) => {
            if (name === exportName)
              return;
            if (dependencies.has(bindings[name].identifier))
              return;
            localBindingNames.add(name);
          });
        },
        ReferencedIdentifier(child) {
          const name = child.node.name;
          const binding = child.scope.getBinding(name);
          if (!binding) {
            globals.add(name);
          } else if (dependencies.has(binding.identifier)) {
            importBindingsReferences.push(makePath(child));
          }
        },
        AssignmentExpression(child) {
          const left = child.get(\\"left\\");
          if (!(exportName in left.getBindingIdentifiers()))
            return;
          if (!left.isIdentifier()) {
            throw left.buildCodeFrameError(\\"Only simple assignments to exports are allowed in helpers\\");
          }
          const binding = child.scope.getBinding(exportName);
          if (binding != null && binding.scope.path.isProgram()) {
            exportBindingAssignments.push(makePath(child));
          }
        }
      };
      (0, _traverse.default)(file.ast, dependencyVisitor, file.scope);
      (0, _traverse.default)(file.ast, referenceVisitor, file.scope);
      if (!exportPath)
        throw new Error(\\"Helpers must default-export something.\\");
      exportBindingAssignments.reverse();
      return {
        globals: Array.from(globals),
        localBindingNames: Array.from(localBindingNames),
        dependencies,
        exportBindingAssignments,
        exportPath,
        exportName,
        importBindingsReferences,
        importPaths
      };
    }
    function permuteHelperAST(file, metadata, id, localBindings, getDependency) {
      if (localBindings && !id) {
        throw new Error(\\"Unexpected local bindings for module-based helpers.\\");
      }
      if (!id)
        return;
      const {
        localBindingNames,
        dependencies,
        exportBindingAssignments,
        exportPath,
        exportName,
        importBindingsReferences,
        importPaths
      } = metadata;
      const dependenciesRefs = {};
      dependencies.forEach((name, id2) => {
        dependenciesRefs[id2.name] = typeof getDependency === \\"function\\" && getDependency(name) || id2;
      });
      const toRename = {};
      const bindings = new Set(localBindings || []);
      localBindingNames.forEach((name) => {
        let newName = name;
        while (bindings.has(newName))
          newName = \\"_\\" + newName;
        if (newName !== name)
          toRename[name] = newName;
      });
      if (id.type === \\"Identifier\\" && exportName !== id.name) {
        toRename[exportName] = id.name;
      }
      const visitor = {
        Program(path) {
          const exp = path.get(exportPath);
          const imps = importPaths.map((p) => path.get(p));
          const impsBindingRefs = importBindingsReferences.map((p) => path.get(p));
          const decl = exp.get(\\"declaration\\");
          if (id.type === \\"Identifier\\") {
            if (decl.isFunctionDeclaration()) {
              exp.replaceWith(decl);
            } else {
              exp.replaceWith(variableDeclaration(\\"var\\", [variableDeclarator(id, decl.node)]));
            }
          } else if (id.type === \\"MemberExpression\\") {
            if (decl.isFunctionDeclaration()) {
              exportBindingAssignments.forEach((assignPath) => {
                const assign = path.get(assignPath);
                assign.replaceWith(assignmentExpression(\\"=\\", id, assign.node));
              });
              exp.replaceWith(decl);
              path.pushContainer(\\"body\\", expressionStatement(assignmentExpression(\\"=\\", id, identifier(exportName))));
            } else {
              exp.replaceWith(expressionStatement(assignmentExpression(\\"=\\", id, decl.node)));
            }
          } else {
            throw new Error(\\"Unexpected helper format.\\");
          }
          Object.keys(toRename).forEach((name) => {
            path.scope.rename(name, toRename[name]);
          });
          for (const path2 of imps)
            path2.remove();
          for (const path2 of impsBindingRefs) {
            const node = cloneNode(dependenciesRefs[path2.node.name]);
            path2.replaceWith(node);
          }
          path.stop();
        }
      };
      (0, _traverse.default)(file.ast, visitor, file.scope);
    }
    var helperData = /* @__PURE__ */ Object.create(null);
    function loadHelper(name) {
      if (!helperData[name]) {
        const helper = _helpers.default[name];
        if (!helper) {
          throw Object.assign(new ReferenceError(\`Unknown helper \${name}\`), {
            code: \\"BABEL_HELPER_UNKNOWN\\",
            helper: name
          });
        }
        const fn = () => {
          const file = {
            ast: t_file(helper.ast())
          };
          if (fileClass) {
            return new fileClass({
              filename: \`babel-helper://\${name}\`
            }, file);
          }
          return file;
        };
        const metadata = getHelperMetadata(fn());
        helperData[name] = {
          build(getDependency, id, localBindings) {
            const file = fn();
            permuteHelperAST(file, metadata, id, localBindings, getDependency);
            return {
              nodes: file.ast.program.body,
              globals: metadata.globals
            };
          },
          minVersion() {
            return helper.minVersion;
          },
          dependencies: metadata.dependencies
        };
      }
      return helperData[name];
    }
    function get(name, getDependency, id, localBindings) {
      return loadHelper(name).build(getDependency, id, localBindings);
    }
    function minVersion(name) {
      return loadHelper(name).minVersion();
    }
    function getDependencies(name) {
      return Array.from(loadHelper(name).dependencies.values());
    }
    function ensure(name, newFileClass) {
      if (!fileClass) {
        fileClass = newFileClass;
      }
      loadHelper(name);
    }
    var list = Object.keys(_helpers.default).map((name) => name.replace(/^_/, \\"\\"));
    exports.list = list;
    var _default = get;
    exports.default = _default;
  }
});

// node_modules/.pnpm/@babel+helper-module-imports@7.16.7/node_modules/@babel/helper-module-imports/lib/import-builder.js
var require_import_builder = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-imports@7.16.7/node_modules/@babel/helper-module-imports/lib/import-builder.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _assert = require(\\"assert\\");
    var _t = require_lib2();
    var {
      callExpression,
      cloneNode,
      expressionStatement,
      identifier,
      importDeclaration,
      importDefaultSpecifier,
      importNamespaceSpecifier,
      importSpecifier,
      memberExpression,
      stringLiteral,
      variableDeclaration,
      variableDeclarator
    } = _t;
    var ImportBuilder = class {
      constructor(importedSource, scope, hub) {
        this._statements = [];
        this._resultName = null;
        this._scope = null;
        this._hub = null;
        this._importedSource = void 0;
        this._scope = scope;
        this._hub = hub;
        this._importedSource = importedSource;
      }
      done() {
        return {
          statements: this._statements,
          resultName: this._resultName
        };
      }
      import() {
        this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));
        return this;
      }
      require() {
        this._statements.push(expressionStatement(callExpression(identifier(\\"require\\"), [stringLiteral(this._importedSource)])));
        return this;
      }
      namespace(name = \\"namespace\\") {
        const local = this._scope.generateUidIdentifier(name);
        const statement = this._statements[this._statements.length - 1];
        _assert(statement.type === \\"ImportDeclaration\\");
        _assert(statement.specifiers.length === 0);
        statement.specifiers = [importNamespaceSpecifier(local)];
        this._resultName = cloneNode(local);
        return this;
      }
      default(name) {
        name = this._scope.generateUidIdentifier(name);
        const statement = this._statements[this._statements.length - 1];
        _assert(statement.type === \\"ImportDeclaration\\");
        _assert(statement.specifiers.length === 0);
        statement.specifiers = [importDefaultSpecifier(name)];
        this._resultName = cloneNode(name);
        return this;
      }
      named(name, importName) {
        if (importName === \\"default\\")
          return this.default(name);
        name = this._scope.generateUidIdentifier(name);
        const statement = this._statements[this._statements.length - 1];
        _assert(statement.type === \\"ImportDeclaration\\");
        _assert(statement.specifiers.length === 0);
        statement.specifiers = [importSpecifier(name, identifier(importName))];
        this._resultName = cloneNode(name);
        return this;
      }
      var(name) {
        name = this._scope.generateUidIdentifier(name);
        let statement = this._statements[this._statements.length - 1];
        if (statement.type !== \\"ExpressionStatement\\") {
          _assert(this._resultName);
          statement = expressionStatement(this._resultName);
          this._statements.push(statement);
        }
        this._statements[this._statements.length - 1] = variableDeclaration(\\"var\\", [variableDeclarator(name, statement.expression)]);
        this._resultName = cloneNode(name);
        return this;
      }
      defaultInterop() {
        return this._interop(this._hub.addHelper(\\"interopRequireDefault\\"));
      }
      wildcardInterop() {
        return this._interop(this._hub.addHelper(\\"interopRequireWildcard\\"));
      }
      _interop(callee) {
        const statement = this._statements[this._statements.length - 1];
        if (statement.type === \\"ExpressionStatement\\") {
          statement.expression = callExpression(callee, [statement.expression]);
        } else if (statement.type === \\"VariableDeclaration\\") {
          _assert(statement.declarations.length === 1);
          statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);
        } else {
          _assert.fail(\\"Unexpected type.\\");
        }
        return this;
      }
      prop(name) {
        const statement = this._statements[this._statements.length - 1];
        if (statement.type === \\"ExpressionStatement\\") {
          statement.expression = memberExpression(statement.expression, identifier(name));
        } else if (statement.type === \\"VariableDeclaration\\") {
          _assert(statement.declarations.length === 1);
          statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));
        } else {
          _assert.fail(\\"Unexpected type:\\" + statement.type);
        }
        return this;
      }
      read(name) {
        this._resultName = memberExpression(this._resultName, identifier(name));
      }
    };
    exports.default = ImportBuilder;
  }
});

// node_modules/.pnpm/@babel+helper-module-imports@7.16.7/node_modules/@babel/helper-module-imports/lib/is-module.js
var require_is_module = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-imports@7.16.7/node_modules/@babel/helper-module-imports/lib/is-module.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = isModule;
    function isModule(path) {
      const {
        sourceType
      } = path.node;
      if (sourceType !== \\"module\\" && sourceType !== \\"script\\") {
        throw path.buildCodeFrameError(\`Unknown sourceType \\"\${sourceType}\\", cannot transform.\`);
      }
      return path.node.sourceType === \\"module\\";
    }
  }
});

// node_modules/.pnpm/@babel+helper-module-imports@7.16.7/node_modules/@babel/helper-module-imports/lib/import-injector.js
var require_import_injector = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-imports@7.16.7/node_modules/@babel/helper-module-imports/lib/import-injector.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _assert = require(\\"assert\\");
    var _t = require_lib2();
    var _importBuilder = require_import_builder();
    var _isModule = require_is_module();
    var {
      numericLiteral,
      sequenceExpression
    } = _t;
    var ImportInjector = class {
      constructor(path, importedSource, opts) {
        this._defaultOpts = {
          importedSource: null,
          importedType: \\"commonjs\\",
          importedInterop: \\"babel\\",
          importingInterop: \\"babel\\",
          ensureLiveReference: false,
          ensureNoContext: false,
          importPosition: \\"before\\"
        };
        const programPath = path.find((p) => p.isProgram());
        this._programPath = programPath;
        this._programScope = programPath.scope;
        this._hub = programPath.hub;
        this._defaultOpts = this._applyDefaults(importedSource, opts, true);
      }
      addDefault(importedSourceIn, opts) {
        return this.addNamed(\\"default\\", importedSourceIn, opts);
      }
      addNamed(importName, importedSourceIn, opts) {
        _assert(typeof importName === \\"string\\");
        return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
      }
      addNamespace(importedSourceIn, opts) {
        return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
      }
      addSideEffect(importedSourceIn, opts) {
        return this._generateImport(this._applyDefaults(importedSourceIn, opts), false);
      }
      _applyDefaults(importedSource, opts, isInit = false) {
        const optsList = [];
        if (typeof importedSource === \\"string\\") {
          optsList.push({
            importedSource
          });
          optsList.push(opts);
        } else {
          _assert(!opts, \\"Unexpected secondary arguments.\\");
          optsList.push(importedSource);
        }
        const newOpts = Object.assign({}, this._defaultOpts);
        for (const opts2 of optsList) {
          if (!opts2)
            continue;
          Object.keys(newOpts).forEach((key) => {
            if (opts2[key] !== void 0)
              newOpts[key] = opts2[key];
          });
          if (!isInit) {
            if (opts2.nameHint !== void 0)
              newOpts.nameHint = opts2.nameHint;
            if (opts2.blockHoist !== void 0)
              newOpts.blockHoist = opts2.blockHoist;
          }
        }
        return newOpts;
      }
      _generateImport(opts, importName) {
        const isDefault = importName === \\"default\\";
        const isNamed = !!importName && !isDefault;
        const isNamespace = importName === null;
        const {
          importedSource,
          importedType,
          importedInterop,
          importingInterop,
          ensureLiveReference,
          ensureNoContext,
          nameHint,
          importPosition,
          blockHoist
        } = opts;
        let name = nameHint || importName;
        const isMod = (0, _isModule.default)(this._programPath);
        const isModuleForNode = isMod && importingInterop === \\"node\\";
        const isModuleForBabel = isMod && importingInterop === \\"babel\\";
        if (importPosition === \\"after\\" && !isMod) {
          throw new Error(\`\\"importPosition\\": \\"after\\" is only supported in modules\`);
        }
        const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
        if (importedType === \\"es6\\") {
          if (!isModuleForNode && !isModuleForBabel) {
            throw new Error(\\"Cannot import an ES6 module from CommonJS\\");
          }
          builder.import();
          if (isNamespace) {
            builder.namespace(nameHint || importedSource);
          } else if (isDefault || isNamed) {
            builder.named(name, importName);
          }
        } else if (importedType !== \\"commonjs\\") {
          throw new Error(\`Unexpected interopType \\"\${importedType}\\"\`);
        } else if (importedInterop === \\"babel\\") {
          if (isModuleForNode) {
            name = name !== \\"default\\" ? name : importedSource;
            const es6Default = \`\${importedSource}$es6Default\`;
            builder.import();
            if (isNamespace) {
              builder.default(es6Default).var(name || importedSource).wildcardInterop();
            } else if (isDefault) {
              if (ensureLiveReference) {
                builder.default(es6Default).var(name || importedSource).defaultInterop().read(\\"default\\");
              } else {
                builder.default(es6Default).var(name).defaultInterop().prop(importName);
              }
            } else if (isNamed) {
              builder.default(es6Default).read(importName);
            }
          } else if (isModuleForBabel) {
            builder.import();
            if (isNamespace) {
              builder.namespace(name || importedSource);
            } else if (isDefault || isNamed) {
              builder.named(name, importName);
            }
          } else {
            builder.require();
            if (isNamespace) {
              builder.var(name || importedSource).wildcardInterop();
            } else if ((isDefault || isNamed) && ensureLiveReference) {
              if (isDefault) {
                name = name !== \\"default\\" ? name : importedSource;
                builder.var(name).read(importName);
                builder.defaultInterop();
              } else {
                builder.var(importedSource).read(importName);
              }
            } else if (isDefault) {
              builder.var(name).defaultInterop().prop(importName);
            } else if (isNamed) {
              builder.var(name).prop(importName);
            }
          }
        } else if (importedInterop === \\"compiled\\") {
          if (isModuleForNode) {
            builder.import();
            if (isNamespace) {
              builder.default(name || importedSource);
            } else if (isDefault || isNamed) {
              builder.default(importedSource).read(name);
            }
          } else if (isModuleForBabel) {
            builder.import();
            if (isNamespace) {
              builder.namespace(name || importedSource);
            } else if (isDefault || isNamed) {
              builder.named(name, importName);
            }
          } else {
            builder.require();
            if (isNamespace) {
              builder.var(name || importedSource);
            } else if (isDefault || isNamed) {
              if (ensureLiveReference) {
                builder.var(importedSource).read(name);
              } else {
                builder.prop(importName).var(name);
              }
            }
          }
        } else if (importedInterop === \\"uncompiled\\") {
          if (isDefault && ensureLiveReference) {
            throw new Error(\\"No live reference for commonjs default\\");
          }
          if (isModuleForNode) {
            builder.import();
            if (isNamespace) {
              builder.default(name || importedSource);
            } else if (isDefault) {
              builder.default(name);
            } else if (isNamed) {
              builder.default(importedSource).read(name);
            }
          } else if (isModuleForBabel) {
            builder.import();
            if (isNamespace) {
              builder.default(name || importedSource);
            } else if (isDefault) {
              builder.default(name);
            } else if (isNamed) {
              builder.named(name, importName);
            }
          } else {
            builder.require();
            if (isNamespace) {
              builder.var(name || importedSource);
            } else if (isDefault) {
              builder.var(name);
            } else if (isNamed) {
              if (ensureLiveReference) {
                builder.var(importedSource).read(name);
              } else {
                builder.var(name).prop(importName);
              }
            }
          }
        } else {
          throw new Error(\`Unknown importedInterop \\"\${importedInterop}\\".\`);
        }
        const {
          statements,
          resultName
        } = builder.done();
        this._insertStatements(statements, importPosition, blockHoist);
        if ((isDefault || isNamed) && ensureNoContext && resultName.type !== \\"Identifier\\") {
          return sequenceExpression([numericLiteral(0), resultName]);
        }
        return resultName;
      }
      _insertStatements(statements, importPosition = \\"before\\", blockHoist = 3) {
        const body = this._programPath.get(\\"body\\");
        if (importPosition === \\"after\\") {
          for (let i = body.length - 1; i >= 0; i--) {
            if (body[i].isImportDeclaration()) {
              body[i].insertAfter(statements);
              return;
            }
          }
        } else {
          statements.forEach((node) => {
            node._blockHoist = blockHoist;
          });
          const targetPath = body.find((p) => {
            const val = p.node._blockHoist;
            return Number.isFinite(val) && val < 4;
          });
          if (targetPath) {
            targetPath.insertBefore(statements);
            return;
          }
        }
        this._programPath.unshiftContainer(\\"body\\", statements);
      }
    };
    exports.default = ImportInjector;
  }
});

// node_modules/.pnpm/@babel+helper-module-imports@7.16.7/node_modules/@babel/helper-module-imports/lib/index.js
var require_lib15 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-imports@7.16.7/node_modules/@babel/helper-module-imports/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports, \\"ImportInjector\\", {
      enumerable: true,
      get: function() {
        return _importInjector.default;
      }
    });
    exports.addDefault = addDefault;
    exports.addNamed = addNamed;
    exports.addNamespace = addNamespace;
    exports.addSideEffect = addSideEffect;
    Object.defineProperty(exports, \\"isModule\\", {
      enumerable: true,
      get: function() {
        return _isModule.default;
      }
    });
    var _importInjector = require_import_injector();
    var _isModule = require_is_module();
    function addDefault(path, importedSource, opts) {
      return new _importInjector.default(path).addDefault(importedSource, opts);
    }
    function addNamed(path, name, importedSource, opts) {
      return new _importInjector.default(path).addNamed(name, importedSource, opts);
    }
    function addNamespace(path, importedSource, opts) {
      return new _importInjector.default(path).addNamespace(importedSource, opts);
    }
    function addSideEffect(path, importedSource, opts) {
      return new _importInjector.default(path).addSideEffect(importedSource, opts);
    }
  }
});

// node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js
var require_rewrite_this = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = rewriteThis;
    var _helperEnvironmentVisitor = require_lib9();
    var _traverse = require_lib13();
    var _t = require_lib2();
    var {
      numericLiteral,
      unaryExpression
    } = _t;
    function rewriteThis(programPath) {
      (0, _traverse.default)(programPath.node, Object.assign({}, rewriteThisVisitor, {
        noScope: true
      }));
    }
    var rewriteThisVisitor = _traverse.default.visitors.merge([_helperEnvironmentVisitor.default, {
      ThisExpression(path) {
        path.replaceWith(unaryExpression(\\"void\\", numericLiteral(0), true));
      }
    }]);
  }
});

// node_modules/.pnpm/@babel+helper-simple-access@7.16.7/node_modules/@babel/helper-simple-access/lib/index.js
var require_lib16 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-simple-access@7.16.7/node_modules/@babel/helper-simple-access/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = simplifyAccess;
    var _t = require_lib2();
    var {
      LOGICAL_OPERATORS,
      assignmentExpression,
      binaryExpression,
      cloneNode,
      identifier,
      logicalExpression,
      numericLiteral,
      sequenceExpression,
      unaryExpression
    } = _t;
    function simplifyAccess(path, bindingNames) {
      path.traverse(simpleAssignmentVisitor, {
        scope: path.scope,
        bindingNames,
        seen: /* @__PURE__ */ new WeakSet()
      });
    }
    var simpleAssignmentVisitor = {
      UpdateExpression: {
        exit(path) {
          const {
            scope,
            bindingNames
          } = this;
          const arg = path.get(\\"argument\\");
          if (!arg.isIdentifier())
            return;
          const localName = arg.node.name;
          if (!bindingNames.has(localName))
            return;
          if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
            return;
          }
          if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord()) {
            const operator = path.node.operator == \\"++\\" ? \\"+=\\" : \\"-=\\";
            path.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
          } else if (path.node.prefix) {
            path.replaceWith(assignmentExpression(\\"=\\", identifier(localName), binaryExpression(path.node.operator[0], unaryExpression(\\"+\\", arg.node), numericLiteral(1))));
          } else {
            const old = path.scope.generateUidIdentifierBasedOnNode(arg.node, \\"old\\");
            const varName = old.name;
            path.scope.push({
              id: old
            });
            const binary = binaryExpression(path.node.operator[0], identifier(varName), numericLiteral(1));
            path.replaceWith(sequenceExpression([assignmentExpression(\\"=\\", identifier(varName), unaryExpression(\\"+\\", arg.node)), assignmentExpression(\\"=\\", cloneNode(arg.node), binary), identifier(varName)]));
          }
        }
      },
      AssignmentExpression: {
        exit(path) {
          const {
            scope,
            seen,
            bindingNames
          } = this;
          if (path.node.operator === \\"=\\")
            return;
          if (seen.has(path.node))
            return;
          seen.add(path.node);
          const left = path.get(\\"left\\");
          if (!left.isIdentifier())
            return;
          const localName = left.node.name;
          if (!bindingNames.has(localName))
            return;
          if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
            return;
          }
          const operator = path.node.operator.slice(0, -1);
          if (LOGICAL_OPERATORS.includes(operator)) {
            path.replaceWith(logicalExpression(operator, path.node.left, assignmentExpression(\\"=\\", cloneNode(path.node.left), path.node.right)));
          } else {
            path.node.right = binaryExpression(operator, cloneNode(path.node.left), path.node.right);
            path.node.operator = \\"=\\";
          }
        }
      }
    };
  }
});

// node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js
var require_rewrite_live_references = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = rewriteLiveReferences;
    var _assert = require(\\"assert\\");
    var _t = require_lib2();
    var _template = require_lib11();
    var _helperSimpleAccess = require_lib16();
    var {
      assignmentExpression,
      callExpression,
      cloneNode,
      expressionStatement,
      getOuterBindingIdentifiers,
      identifier,
      isMemberExpression,
      isVariableDeclaration,
      jsxIdentifier,
      jsxMemberExpression,
      memberExpression,
      numericLiteral,
      sequenceExpression,
      stringLiteral,
      variableDeclaration,
      variableDeclarator
    } = _t;
    function isInType(path) {
      do {
        switch (path.parent.type) {
          case \\"TSTypeAnnotation\\":
          case \\"TSTypeAliasDeclaration\\":
          case \\"TSTypeReference\\":
          case \\"TypeAnnotation\\":
          case \\"TypeAlias\\":
            return true;
          case \\"ExportSpecifier\\":
            return path.parentPath.parent.exportKind === \\"type\\";
          default:
            if (path.parentPath.isStatement() || path.parentPath.isExpression()) {
              return false;
            }
        }
      } while (path = path.parentPath);
    }
    function rewriteLiveReferences(programPath, metadata) {
      const imported = /* @__PURE__ */ new Map();
      const exported = /* @__PURE__ */ new Map();
      const requeueInParent = (path) => {
        programPath.requeue(path);
      };
      for (const [source, data] of metadata.source) {
        for (const [localName, importName] of data.imports) {
          imported.set(localName, [source, importName, null]);
        }
        for (const localName of data.importsNamespace) {
          imported.set(localName, [source, null, localName]);
        }
      }
      for (const [local, data] of metadata.local) {
        let exportMeta = exported.get(local);
        if (!exportMeta) {
          exportMeta = [];
          exported.set(local, exportMeta);
        }
        exportMeta.push(...data.names);
      }
      const rewriteBindingInitVisitorState = {
        metadata,
        requeueInParent,
        scope: programPath.scope,
        exported
      };
      programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
      (0, _helperSimpleAccess.default)(programPath, /* @__PURE__ */ new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));
      const rewriteReferencesVisitorState = {
        seen: /* @__PURE__ */ new WeakSet(),
        metadata,
        requeueInParent,
        scope: programPath.scope,
        imported,
        exported,
        buildImportReference: ([source, importName, localName], identNode) => {
          const meta = metadata.source.get(source);
          if (localName) {
            if (meta.lazy)
              identNode = callExpression(identNode, []);
            return identNode;
          }
          let namespace = identifier(meta.name);
          if (meta.lazy)
            namespace = callExpression(namespace, []);
          if (importName === \\"default\\" && meta.interop === \\"node-default\\") {
            return namespace;
          }
          const computed = metadata.stringSpecifiers.has(importName);
          return memberExpression(namespace, computed ? stringLiteral(importName) : identifier(importName), computed);
        }
      };
      programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
    }
    var rewriteBindingInitVisitor = {
      Scope(path) {
        path.skip();
      },
      ClassDeclaration(path) {
        const {
          requeueInParent,
          exported,
          metadata
        } = this;
        const {
          id
        } = path.node;
        if (!id)
          throw new Error(\\"Expected class to have a name\\");
        const localName = id.name;
        const exportNames = exported.get(localName) || [];
        if (exportNames.length > 0) {
          const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName)));
          statement._blockHoist = path.node._blockHoist;
          requeueInParent(path.insertAfter(statement)[0]);
        }
      },
      VariableDeclaration(path) {
        const {
          requeueInParent,
          exported,
          metadata
        } = this;
        Object.keys(path.getOuterBindingIdentifiers()).forEach((localName) => {
          const exportNames = exported.get(localName) || [];
          if (exportNames.length > 0) {
            const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName)));
            statement._blockHoist = path.node._blockHoist;
            requeueInParent(path.insertAfter(statement)[0]);
          }
        });
      }
    };
    var buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {
      return (exportNames || []).reduce((expr, exportName) => {
        const {
          stringSpecifiers
        } = metadata;
        const computed = stringSpecifiers.has(exportName);
        return assignmentExpression(\\"=\\", memberExpression(identifier(metadata.exportName), computed ? stringLiteral(exportName) : identifier(exportName), computed), expr);
      }, localExpr);
    };
    var buildImportThrow = (localName) => {
      return _template.default.expression.ast\`
    (function() {
      throw new Error('\\"' + '\${localName}' + '\\" is read-only.');
    })()
  \`;
    };
    var rewriteReferencesVisitor = {
      ReferencedIdentifier(path) {
        const {
          seen,
          buildImportReference,
          scope,
          imported,
          requeueInParent
        } = this;
        if (seen.has(path.node))
          return;
        seen.add(path.node);
        const localName = path.node.name;
        const importData = imported.get(localName);
        if (importData) {
          if (isInType(path)) {
            throw path.buildCodeFrameError(\`Cannot transform the imported binding \\"\${localName}\\" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.\`);
          }
          const localBinding = path.scope.getBinding(localName);
          const rootBinding = scope.getBinding(localName);
          if (rootBinding !== localBinding)
            return;
          const ref = buildImportReference(importData, path.node);
          ref.loc = path.node.loc;
          if ((path.parentPath.isCallExpression({
            callee: path.node
          }) || path.parentPath.isOptionalCallExpression({
            callee: path.node
          }) || path.parentPath.isTaggedTemplateExpression({
            tag: path.node
          })) && isMemberExpression(ref)) {
            path.replaceWith(sequenceExpression([numericLiteral(0), ref]));
          } else if (path.isJSXIdentifier() && isMemberExpression(ref)) {
            const {
              object,
              property
            } = ref;
            path.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));
          } else {
            path.replaceWith(ref);
          }
          requeueInParent(path);
          path.skip();
        }
      },
      AssignmentExpression: {
        exit(path) {
          const {
            scope,
            seen,
            imported,
            exported,
            requeueInParent,
            buildImportReference
          } = this;
          if (seen.has(path.node))
            return;
          seen.add(path.node);
          const left = path.get(\\"left\\");
          if (left.isMemberExpression())
            return;
          if (left.isIdentifier()) {
            const localName = left.node.name;
            if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
              return;
            }
            const exportedNames = exported.get(localName);
            const importData = imported.get(localName);
            if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {
              _assert(path.node.operator === \\"=\\", \\"Path was not simplified\\");
              const assignment = path.node;
              if (importData) {
                assignment.left = buildImportReference(importData, assignment.left);
                assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)]);
              }
              path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));
              requeueInParent(path);
            }
          } else {
            const ids = left.getOuterBindingIdentifiers();
            const programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path.scope.getBinding(localName));
            const id = programScopeIds.find((localName) => imported.has(localName));
            if (id) {
              path.node.right = sequenceExpression([path.node.right, buildImportThrow(id)]);
            }
            const items = [];
            programScopeIds.forEach((localName) => {
              const exportedNames = exported.get(localName) || [];
              if (exportedNames.length > 0) {
                items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName)));
              }
            });
            if (items.length > 0) {
              let node = sequenceExpression(items);
              if (path.parentPath.isExpressionStatement()) {
                node = expressionStatement(node);
                node._blockHoist = path.parentPath.node._blockHoist;
              }
              const statement = path.insertAfter(node)[0];
              requeueInParent(statement);
            }
          }
        }
      },
      \\"ForOfStatement|ForInStatement\\"(path) {
        const {
          scope,
          node
        } = path;
        const {
          left
        } = node;
        const {
          exported,
          imported,
          scope: programScope
        } = this;
        if (!isVariableDeclaration(left)) {
          let didTransformExport = false, importConstViolationName;
          const loopBodyScope = path.get(\\"body\\").scope;
          for (const name of Object.keys(getOuterBindingIdentifiers(left))) {
            if (programScope.getBinding(name) === scope.getBinding(name)) {
              if (exported.has(name)) {
                didTransformExport = true;
                if (loopBodyScope.hasOwnBinding(name)) {
                  loopBodyScope.rename(name);
                }
              }
              if (imported.has(name) && !importConstViolationName) {
                importConstViolationName = name;
              }
            }
          }
          if (!didTransformExport && !importConstViolationName) {
            return;
          }
          path.ensureBlock();
          const bodyPath = path.get(\\"body\\");
          const newLoopId = scope.generateUidIdentifierBasedOnNode(left);
          path.get(\\"left\\").replaceWith(variableDeclaration(\\"let\\", [variableDeclarator(cloneNode(newLoopId))]));
          scope.registerDeclaration(path.get(\\"left\\"));
          if (didTransformExport) {
            bodyPath.unshiftContainer(\\"body\\", expressionStatement(assignmentExpression(\\"=\\", left, newLoopId)));
          }
          if (importConstViolationName) {
            bodyPath.unshiftContainer(\\"body\\", expressionStatement(buildImportThrow(importConstViolationName)));
          }
        }
      }
    };
  }
});

// node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js
var require_normalize_and_load_metadata = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = normalizeModuleAndLoadMetadata;
    exports.hasExports = hasExports;
    exports.isSideEffectImport = isSideEffectImport;
    exports.validateImportInteropOption = validateImportInteropOption;
    var _path = require(\\"path\\");
    var _helperValidatorIdentifier = require_lib();
    var _helperSplitExportDeclaration = require_lib3();
    function hasExports(metadata) {
      return metadata.hasExports;
    }
    function isSideEffectImport(source) {
      return source.imports.size === 0 && source.importsNamespace.size === 0 && source.reexports.size === 0 && source.reexportNamespace.size === 0 && !source.reexportAll;
    }
    function validateImportInteropOption(importInterop) {
      if (typeof importInterop !== \\"function\\" && importInterop !== \\"none\\" && importInterop !== \\"babel\\" && importInterop !== \\"node\\") {
        throw new Error(\`.importInterop must be one of \\"none\\", \\"babel\\", \\"node\\", or a function returning one of those values (received \${importInterop}).\`);
      }
      return importInterop;
    }
    function resolveImportInterop(importInterop, source) {
      if (typeof importInterop === \\"function\\") {
        return validateImportInteropOption(importInterop(source));
      }
      return importInterop;
    }
    function normalizeModuleAndLoadMetadata(programPath, exportName, {
      importInterop,
      initializeReexports = false,
      lazy = false,
      esNamespaceOnly = false
    }) {
      if (!exportName) {
        exportName = programPath.scope.generateUidIdentifier(\\"exports\\").name;
      }
      const stringSpecifiers = /* @__PURE__ */ new Set();
      nameAnonymousExports(programPath);
      const {
        local,
        source,
        hasExports: hasExports2
      } = getModuleMetadata(programPath, {
        initializeReexports,
        lazy
      }, stringSpecifiers);
      removeModuleDeclarations(programPath);
      for (const [, metadata] of source) {
        if (metadata.importsNamespace.size > 0) {
          metadata.name = metadata.importsNamespace.values().next().value;
        }
        const resolvedInterop = resolveImportInterop(importInterop, metadata.source);
        if (resolvedInterop === \\"none\\") {
          metadata.interop = \\"none\\";
        } else if (resolvedInterop === \\"node\\" && metadata.interop === \\"namespace\\") {
          metadata.interop = \\"node-namespace\\";
        } else if (resolvedInterop === \\"node\\" && metadata.interop === \\"default\\") {
          metadata.interop = \\"node-default\\";
        } else if (esNamespaceOnly && metadata.interop === \\"namespace\\") {
          metadata.interop = \\"default\\";
        }
      }
      return {
        exportName,
        exportNameListName: null,
        hasExports: hasExports2,
        local,
        source,
        stringSpecifiers
      };
    }
    function getExportSpecifierName(path, stringSpecifiers) {
      if (path.isIdentifier()) {
        return path.node.name;
      } else if (path.isStringLiteral()) {
        const stringValue = path.node.value;
        if (!(0, _helperValidatorIdentifier.isIdentifierName)(stringValue)) {
          stringSpecifiers.add(stringValue);
        }
        return stringValue;
      } else {
        throw new Error(\`Expected export specifier to be either Identifier or StringLiteral, got \${path.node.type}\`);
      }
    }
    function assertExportSpecifier(path) {
      if (path.isExportSpecifier()) {
        return;
      } else if (path.isExportNamespaceSpecifier()) {
        throw path.buildCodeFrameError(\\"Export namespace should be first transformed by \`@babel/plugin-proposal-export-namespace-from\`.\\");
      } else {
        throw path.buildCodeFrameError(\\"Unexpected export specifier type\\");
      }
    }
    function getModuleMetadata(programPath, {
      lazy,
      initializeReexports
    }, stringSpecifiers) {
      const localData = getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers);
      const sourceData = /* @__PURE__ */ new Map();
      const getData = (sourceNode) => {
        const source = sourceNode.value;
        let data = sourceData.get(source);
        if (!data) {
          data = {
            name: programPath.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name,
            interop: \\"none\\",
            loc: null,
            imports: /* @__PURE__ */ new Map(),
            importsNamespace: /* @__PURE__ */ new Set(),
            reexports: /* @__PURE__ */ new Map(),
            reexportNamespace: /* @__PURE__ */ new Set(),
            reexportAll: null,
            lazy: false,
            source
          };
          sourceData.set(source, data);
        }
        return data;
      };
      let hasExports2 = false;
      programPath.get(\\"body\\").forEach((child) => {
        if (child.isImportDeclaration()) {
          const data = getData(child.node.source);
          if (!data.loc)
            data.loc = child.node.loc;
          child.get(\\"specifiers\\").forEach((spec) => {
            if (spec.isImportDefaultSpecifier()) {
              const localName = spec.get(\\"local\\").node.name;
              data.imports.set(localName, \\"default\\");
              const reexport = localData.get(localName);
              if (reexport) {
                localData.delete(localName);
                reexport.names.forEach((name) => {
                  data.reexports.set(name, \\"default\\");
                });
              }
            } else if (spec.isImportNamespaceSpecifier()) {
              const localName = spec.get(\\"local\\").node.name;
              data.importsNamespace.add(localName);
              const reexport = localData.get(localName);
              if (reexport) {
                localData.delete(localName);
                reexport.names.forEach((name) => {
                  data.reexportNamespace.add(name);
                });
              }
            } else if (spec.isImportSpecifier()) {
              const importName = getExportSpecifierName(spec.get(\\"imported\\"), stringSpecifiers);
              const localName = spec.get(\\"local\\").node.name;
              data.imports.set(localName, importName);
              const reexport = localData.get(localName);
              if (reexport) {
                localData.delete(localName);
                reexport.names.forEach((name) => {
                  data.reexports.set(name, importName);
                });
              }
            }
          });
        } else if (child.isExportAllDeclaration()) {
          hasExports2 = true;
          const data = getData(child.node.source);
          if (!data.loc)
            data.loc = child.node.loc;
          data.reexportAll = {
            loc: child.node.loc
          };
        } else if (child.isExportNamedDeclaration() && child.node.source) {
          hasExports2 = true;
          const data = getData(child.node.source);
          if (!data.loc)
            data.loc = child.node.loc;
          child.get(\\"specifiers\\").forEach((spec) => {
            assertExportSpecifier(spec);
            const importName = getExportSpecifierName(spec.get(\\"local\\"), stringSpecifiers);
            const exportName = getExportSpecifierName(spec.get(\\"exported\\"), stringSpecifiers);
            data.reexports.set(exportName, importName);
            if (exportName === \\"__esModule\\") {
              throw spec.get(\\"exported\\").buildCodeFrameError('Illegal export \\"__esModule\\".');
            }
          });
        } else if (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) {
          hasExports2 = true;
        }
      });
      for (const metadata of sourceData.values()) {
        let needsDefault = false;
        let needsNamed = false;
        if (metadata.importsNamespace.size > 0) {
          needsDefault = true;
          needsNamed = true;
        }
        if (metadata.reexportAll) {
          needsNamed = true;
        }
        for (const importName of metadata.imports.values()) {
          if (importName === \\"default\\")
            needsDefault = true;
          else
            needsNamed = true;
        }
        for (const importName of metadata.reexports.values()) {
          if (importName === \\"default\\")
            needsDefault = true;
          else
            needsNamed = true;
        }
        if (needsDefault && needsNamed) {
          metadata.interop = \\"namespace\\";
        } else if (needsDefault) {
          metadata.interop = \\"default\\";
        }
      }
      for (const [source, metadata] of sourceData) {
        if (lazy !== false && !(isSideEffectImport(metadata) || metadata.reexportAll)) {
          if (lazy === true) {
            metadata.lazy = !/\\\\./.test(source);
          } else if (Array.isArray(lazy)) {
            metadata.lazy = lazy.indexOf(source) !== -1;
          } else if (typeof lazy === \\"function\\") {
            metadata.lazy = lazy(source);
          } else {
            throw new Error(\`.lazy must be a boolean, string array, or function\`);
          }
        }
      }
      return {
        hasExports: hasExports2,
        local: localData,
        source: sourceData
      };
    }
    function getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers) {
      const bindingKindLookup = /* @__PURE__ */ new Map();
      programPath.get(\\"body\\").forEach((child) => {
        let kind;
        if (child.isImportDeclaration()) {
          kind = \\"import\\";
        } else {
          if (child.isExportDefaultDeclaration())
            child = child.get(\\"declaration\\");
          if (child.isExportNamedDeclaration()) {
            if (child.node.declaration) {
              child = child.get(\\"declaration\\");
            } else if (initializeReexports && child.node.source && child.get(\\"source\\").isStringLiteral()) {
              child.get(\\"specifiers\\").forEach((spec) => {
                assertExportSpecifier(spec);
                bindingKindLookup.set(spec.get(\\"local\\").node.name, \\"block\\");
              });
              return;
            }
          }
          if (child.isFunctionDeclaration()) {
            kind = \\"hoisted\\";
          } else if (child.isClassDeclaration()) {
            kind = \\"block\\";
          } else if (child.isVariableDeclaration({
            kind: \\"var\\"
          })) {
            kind = \\"var\\";
          } else if (child.isVariableDeclaration()) {
            kind = \\"block\\";
          } else {
            return;
          }
        }
        Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
          bindingKindLookup.set(name, kind);
        });
      });
      const localMetadata = /* @__PURE__ */ new Map();
      const getLocalMetadata = (idPath) => {
        const localName = idPath.node.name;
        let metadata = localMetadata.get(localName);
        if (!metadata) {
          const kind = bindingKindLookup.get(localName);
          if (kind === void 0) {
            throw idPath.buildCodeFrameError(\`Exporting local \\"\${localName}\\", which is not declared.\`);
          }
          metadata = {
            names: [],
            kind
          };
          localMetadata.set(localName, metadata);
        }
        return metadata;
      };
      programPath.get(\\"body\\").forEach((child) => {
        if (child.isExportNamedDeclaration() && (initializeReexports || !child.node.source)) {
          if (child.node.declaration) {
            const declaration = child.get(\\"declaration\\");
            const ids = declaration.getOuterBindingIdentifierPaths();
            Object.keys(ids).forEach((name) => {
              if (name === \\"__esModule\\") {
                throw declaration.buildCodeFrameError('Illegal export \\"__esModule\\".');
              }
              getLocalMetadata(ids[name]).names.push(name);
            });
          } else {
            child.get(\\"specifiers\\").forEach((spec) => {
              const local = spec.get(\\"local\\");
              const exported = spec.get(\\"exported\\");
              const localMetadata2 = getLocalMetadata(local);
              const exportName = getExportSpecifierName(exported, stringSpecifiers);
              if (exportName === \\"__esModule\\") {
                throw exported.buildCodeFrameError('Illegal export \\"__esModule\\".');
              }
              localMetadata2.names.push(exportName);
            });
          }
        } else if (child.isExportDefaultDeclaration()) {
          const declaration = child.get(\\"declaration\\");
          if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
            getLocalMetadata(declaration.get(\\"id\\")).names.push(\\"default\\");
          } else {
            throw declaration.buildCodeFrameError(\\"Unexpected default expression export.\\");
          }
        }
      });
      return localMetadata;
    }
    function nameAnonymousExports(programPath) {
      programPath.get(\\"body\\").forEach((child) => {
        if (!child.isExportDefaultDeclaration())
          return;
        (0, _helperSplitExportDeclaration.default)(child);
      });
    }
    function removeModuleDeclarations(programPath) {
      programPath.get(\\"body\\").forEach((child) => {
        if (child.isImportDeclaration()) {
          child.remove();
        } else if (child.isExportNamedDeclaration()) {
          if (child.node.declaration) {
            child.node.declaration._blockHoist = child.node._blockHoist;
            child.replaceWith(child.node.declaration);
          } else {
            child.remove();
          }
        } else if (child.isExportDefaultDeclaration()) {
          const declaration = child.get(\\"declaration\\");
          if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
            declaration._blockHoist = child.node._blockHoist;
            child.replaceWith(declaration);
          } else {
            throw declaration.buildCodeFrameError(\\"Unexpected default expression export.\\");
          }
        } else if (child.isExportAllDeclaration()) {
          child.remove();
        }
      });
    }
  }
});

// node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/get-module-name.js
var require_get_module_name = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/get-module-name.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = getModuleName;
    {
      const originalGetModuleName = getModuleName;
      exports.default = getModuleName = function getModuleName2(rootOpts, pluginOpts) {
        var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
        return originalGetModuleName(rootOpts, {
          moduleId: (_pluginOpts$moduleId = pluginOpts.moduleId) != null ? _pluginOpts$moduleId : rootOpts.moduleId,
          moduleIds: (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null ? _pluginOpts$moduleIds : rootOpts.moduleIds,
          getModuleId: (_pluginOpts$getModule = pluginOpts.getModuleId) != null ? _pluginOpts$getModule : rootOpts.getModuleId,
          moduleRoot: (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null ? _pluginOpts$moduleRoo : rootOpts.moduleRoot
        });
      };
    }
    function getModuleName(rootOpts, pluginOpts) {
      const {
        filename,
        filenameRelative = filename,
        sourceRoot = pluginOpts.moduleRoot
      } = rootOpts;
      const {
        moduleId,
        moduleIds = !!moduleId,
        getModuleId,
        moduleRoot = sourceRoot
      } = pluginOpts;
      if (!moduleIds)
        return null;
      if (moduleId != null && !getModuleId) {
        return moduleId;
      }
      let moduleName = moduleRoot != null ? moduleRoot + \\"/\\" : \\"\\";
      if (filenameRelative) {
        const sourceRootReplacer = sourceRoot != null ? new RegExp(\\"^\\" + sourceRoot + \\"/?\\") : \\"\\";
        moduleName += filenameRelative.replace(sourceRootReplacer, \\"\\").replace(/\\\\.(\\\\w*?)$/, \\"\\");
      }
      moduleName = moduleName.replace(/\\\\\\\\/g, \\"/\\");
      if (getModuleId) {
        return getModuleId(moduleName) || moduleName;
      } else {
        return moduleName;
      }
    }
  }
});

// node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/index.js
var require_lib17 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-module-transforms@7.16.7/node_modules/@babel/helper-module-transforms/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.buildNamespaceInitStatements = buildNamespaceInitStatements;
    exports.ensureStatementsHoisted = ensureStatementsHoisted;
    Object.defineProperty(exports, \\"getModuleName\\", {
      enumerable: true,
      get: function() {
        return _getModuleName.default;
      }
    });
    Object.defineProperty(exports, \\"hasExports\\", {
      enumerable: true,
      get: function() {
        return _normalizeAndLoadMetadata.hasExports;
      }
    });
    Object.defineProperty(exports, \\"isModule\\", {
      enumerable: true,
      get: function() {
        return _helperModuleImports.isModule;
      }
    });
    Object.defineProperty(exports, \\"isSideEffectImport\\", {
      enumerable: true,
      get: function() {
        return _normalizeAndLoadMetadata.isSideEffectImport;
      }
    });
    exports.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;
    Object.defineProperty(exports, \\"rewriteThis\\", {
      enumerable: true,
      get: function() {
        return _rewriteThis.default;
      }
    });
    exports.wrapInterop = wrapInterop;
    var _assert = require(\\"assert\\");
    var _t = require_lib2();
    var _template = require_lib11();
    var _helperModuleImports = require_lib15();
    var _rewriteThis = require_rewrite_this();
    var _rewriteLiveReferences = require_rewrite_live_references();
    var _normalizeAndLoadMetadata = require_normalize_and_load_metadata();
    var _getModuleName = require_get_module_name();
    var {
      booleanLiteral,
      callExpression,
      cloneNode,
      directive,
      directiveLiteral,
      expressionStatement,
      identifier,
      isIdentifier,
      memberExpression,
      stringLiteral,
      valueToNode,
      variableDeclaration,
      variableDeclarator
    } = _t;
    function rewriteModuleStatementsAndPrepareHeader(path, {
      loose,
      exportName,
      strict,
      allowTopLevelThis,
      strictMode,
      noInterop,
      importInterop = noInterop ? \\"none\\" : \\"babel\\",
      lazy,
      esNamespaceOnly,
      constantReexports = loose,
      enumerableModuleMeta = loose,
      noIncompleteNsImportDetection
    }) {
      (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop);
      _assert((0, _helperModuleImports.isModule)(path), \\"Cannot process module statements in a script\\");
      path.node.sourceType = \\"script\\";
      const meta = (0, _normalizeAndLoadMetadata.default)(path, exportName, {
        importInterop,
        initializeReexports: constantReexports,
        lazy,
        esNamespaceOnly
      });
      if (!allowTopLevelThis) {
        (0, _rewriteThis.default)(path);
      }
      (0, _rewriteLiveReferences.default)(path, meta);
      if (strictMode !== false) {
        const hasStrict = path.node.directives.some((directive2) => {
          return directive2.value.value === \\"use strict\\";
        });
        if (!hasStrict) {
          path.unshiftContainer(\\"directives\\", directive(directiveLiteral(\\"use strict\\")));
        }
      }
      const headers = [];
      if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {
        headers.push(buildESModuleHeader(meta, enumerableModuleMeta));
      }
      const nameList = buildExportNameListDeclaration(path, meta);
      if (nameList) {
        meta.exportNameListName = nameList.name;
        headers.push(nameList.statement);
      }
      headers.push(...buildExportInitializationStatements(path, meta, constantReexports, noIncompleteNsImportDetection));
      return {
        meta,
        headers
      };
    }
    function ensureStatementsHoisted(statements) {
      statements.forEach((header) => {
        header._blockHoist = 3;
      });
    }
    function wrapInterop(programPath, expr, type) {
      if (type === \\"none\\") {
        return null;
      }
      if (type === \\"node-namespace\\") {
        return callExpression(programPath.hub.addHelper(\\"interopRequireWildcard\\"), [expr, booleanLiteral(true)]);
      } else if (type === \\"node-default\\") {
        return null;
      }
      let helper;
      if (type === \\"default\\") {
        helper = \\"interopRequireDefault\\";
      } else if (type === \\"namespace\\") {
        helper = \\"interopRequireWildcard\\";
      } else {
        throw new Error(\`Unknown interop: \${type}\`);
      }
      return callExpression(programPath.hub.addHelper(helper), [expr]);
    }
    function buildNamespaceInitStatements(metadata, sourceMetadata, constantReexports = false) {
      const statements = [];
      let srcNamespace = identifier(sourceMetadata.name);
      if (sourceMetadata.lazy)
        srcNamespace = callExpression(srcNamespace, []);
      for (const localName of sourceMetadata.importsNamespace) {
        if (localName === sourceMetadata.name)
          continue;
        statements.push(_template.default.statement\`var NAME = SOURCE;\`({
          NAME: localName,
          SOURCE: cloneNode(srcNamespace)
        }));
      }
      if (constantReexports) {
        statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true));
      }
      for (const exportName of sourceMetadata.reexportNamespace) {
        statements.push((sourceMetadata.lazy ? _template.default.statement\`
            Object.defineProperty(EXPORTS, \\"NAME\\", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          \` : _template.default.statement\`EXPORTS.NAME = NAMESPACE;\`)({
          EXPORTS: metadata.exportName,
          NAME: exportName,
          NAMESPACE: cloneNode(srcNamespace)
        }));
      }
      if (sourceMetadata.reexportAll) {
        const statement = buildNamespaceReexport(metadata, cloneNode(srcNamespace), constantReexports);
        statement.loc = sourceMetadata.reexportAll.loc;
        statements.push(statement);
      }
      return statements;
    }
    var ReexportTemplate = {
      constant: _template.default.statement\`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;\`,
      constantComputed: _template.default.statement\`EXPORTS[\\"EXPORT_NAME\\"] = NAMESPACE_IMPORT;\`,
      spec: _template.default.statement\`
    Object.defineProperty(EXPORTS, \\"EXPORT_NAME\\", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    \`
    };
    var buildReexportsFromMeta = (meta, metadata, constantReexports) => {
      const namespace = metadata.lazy ? callExpression(identifier(metadata.name), []) : identifier(metadata.name);
      const {
        stringSpecifiers
      } = meta;
      return Array.from(metadata.reexports, ([exportName, importName]) => {
        let NAMESPACE_IMPORT = cloneNode(namespace);
        if (importName === \\"default\\" && metadata.interop === \\"node-default\\") {
        } else if (stringSpecifiers.has(importName)) {
          NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, stringLiteral(importName), true);
        } else {
          NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, identifier(importName));
        }
        const astNodes = {
          EXPORTS: meta.exportName,
          EXPORT_NAME: exportName,
          NAMESPACE_IMPORT
        };
        if (constantReexports || isIdentifier(NAMESPACE_IMPORT)) {
          if (stringSpecifiers.has(exportName)) {
            return ReexportTemplate.constantComputed(astNodes);
          } else {
            return ReexportTemplate.constant(astNodes);
          }
        } else {
          return ReexportTemplate.spec(astNodes);
        }
      });
    };
    function buildESModuleHeader(metadata, enumerableModuleMeta = false) {
      return (enumerableModuleMeta ? _template.default.statement\`
        EXPORTS.__esModule = true;
      \` : _template.default.statement\`
        Object.defineProperty(EXPORTS, \\"__esModule\\", {
          value: true,
        });
      \`)({
        EXPORTS: metadata.exportName
      });
    }
    function buildNamespaceReexport(metadata, namespace, constantReexports) {
      return (constantReexports ? _template.default.statement\`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === \\"default\\" || key === \\"__esModule\\") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      \` : _template.default.statement\`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === \\"default\\" || key === \\"__esModule\\") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    \`)({
        NAMESPACE: namespace,
        EXPORTS: metadata.exportName,
        VERIFY_NAME_LIST: metadata.exportNameListName ? (0, _template.default)\`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          \`({
          EXPORTS_LIST: metadata.exportNameListName
        }) : null
      });
    }
    function buildExportNameListDeclaration(programPath, metadata) {
      const exportedVars = /* @__PURE__ */ Object.create(null);
      for (const data of metadata.local.values()) {
        for (const name2 of data.names) {
          exportedVars[name2] = true;
        }
      }
      let hasReexport = false;
      for (const data of metadata.source.values()) {
        for (const exportName of data.reexports.keys()) {
          exportedVars[exportName] = true;
        }
        for (const exportName of data.reexportNamespace) {
          exportedVars[exportName] = true;
        }
        hasReexport = hasReexport || !!data.reexportAll;
      }
      if (!hasReexport || Object.keys(exportedVars).length === 0)
        return null;
      const name = programPath.scope.generateUidIdentifier(\\"exportNames\\");
      delete exportedVars.default;
      return {
        name: name.name,
        statement: variableDeclaration(\\"var\\", [variableDeclarator(name, valueToNode(exportedVars))])
      };
    }
    function buildExportInitializationStatements(programPath, metadata, constantReexports = false, noIncompleteNsImportDetection = false) {
      const initStatements = [];
      for (const [localName, data] of metadata.local) {
        if (data.kind === \\"import\\") {
        } else if (data.kind === \\"hoisted\\") {
          initStatements.push([data.names[0], buildInitStatement(metadata, data.names, identifier(localName))]);
        } else if (!noIncompleteNsImportDetection) {
          for (const exportName of data.names) {
            initStatements.push([exportName, null]);
          }
        }
      }
      for (const data of metadata.source.values()) {
        if (!constantReexports) {
          const reexportsStatements = buildReexportsFromMeta(metadata, data, false);
          const reexports = [...data.reexports.keys()];
          for (let i = 0; i < reexportsStatements.length; i++) {
            initStatements.push([reexports[i], reexportsStatements[i]]);
          }
        }
        if (!noIncompleteNsImportDetection) {
          for (const exportName of data.reexportNamespace) {
            initStatements.push([exportName, null]);
          }
        }
      }
      initStatements.sort((a2, b) => a2[0] > b[0] ? 1 : -1);
      const results = [];
      if (noIncompleteNsImportDetection) {
        for (const [, initStatement] of initStatements) {
          results.push(initStatement);
        }
      } else {
        const chunkSize = 100;
        for (let i = 0, uninitializedExportNames = []; i < initStatements.length; i += chunkSize) {
          for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
            const [exportName, initStatement] = initStatements[i + j];
            if (initStatement !== null) {
              if (uninitializedExportNames.length > 0) {
                results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
                uninitializedExportNames = [];
              }
              results.push(initStatement);
            } else {
              uninitializedExportNames.push(exportName);
            }
          }
          if (uninitializedExportNames.length > 0) {
            results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
          }
        }
      }
      return results;
    }
    var InitTemplate = {
      computed: _template.default.expression\`EXPORTS[\\"NAME\\"] = VALUE\`,
      default: _template.default.expression\`EXPORTS.NAME = VALUE\`
    };
    function buildInitStatement(metadata, exportNames, initExpr) {
      const {
        stringSpecifiers,
        exportName: EXPORTS
      } = metadata;
      return expressionStatement(exportNames.reduce((acc, exportName) => {
        const params = {
          EXPORTS,
          NAME: exportName,
          VALUE: acc
        };
        if (stringSpecifiers.has(exportName)) {
          return InitTemplate.computed(params);
        } else {
          return InitTemplate.default(params);
        }
      }, initExpr));
    }
  }
});

// node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js
var require_semver = __commonJS({
  \\"node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js\\"(exports, module2) {
    exports = module2.exports = SemVer;
    var debug;
    if (typeof process === \\"object\\" && process.env && process.env.NODE_DEBUG && /\\\\bsemver\\\\b/i.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift(\\"SEMVER\\");
        console.log.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports.SEMVER_SPEC_VERSION = \\"2.0.0\\";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var re = exports.re = [];
    var src = exports.src = [];
    var t = exports.tokens = {};
    var R = 0;
    function tok(n) {
      t[n] = R++;
    }
    tok(\\"NUMERICIDENTIFIER\\");
    src[t.NUMERICIDENTIFIER] = \\"0|[1-9]\\\\\\\\d*\\";
    tok(\\"NUMERICIDENTIFIERLOOSE\\");
    src[t.NUMERICIDENTIFIERLOOSE] = \\"[0-9]+\\";
    tok(\\"NONNUMERICIDENTIFIER\\");
    src[t.NONNUMERICIDENTIFIER] = \\"\\\\\\\\d*[a-zA-Z-][a-zA-Z0-9-]*\\";
    tok(\\"MAINVERSION\\");
    src[t.MAINVERSION] = \\"(\\" + src[t.NUMERICIDENTIFIER] + \\")\\\\\\\\.(\\" + src[t.NUMERICIDENTIFIER] + \\")\\\\\\\\.(\\" + src[t.NUMERICIDENTIFIER] + \\")\\";
    tok(\\"MAINVERSIONLOOSE\\");
    src[t.MAINVERSIONLOOSE] = \\"(\\" + src[t.NUMERICIDENTIFIERLOOSE] + \\")\\\\\\\\.(\\" + src[t.NUMERICIDENTIFIERLOOSE] + \\")\\\\\\\\.(\\" + src[t.NUMERICIDENTIFIERLOOSE] + \\")\\";
    tok(\\"PRERELEASEIDENTIFIER\\");
    src[t.PRERELEASEIDENTIFIER] = \\"(?:\\" + src[t.NUMERICIDENTIFIER] + \\"|\\" + src[t.NONNUMERICIDENTIFIER] + \\")\\";
    tok(\\"PRERELEASEIDENTIFIERLOOSE\\");
    src[t.PRERELEASEIDENTIFIERLOOSE] = \\"(?:\\" + src[t.NUMERICIDENTIFIERLOOSE] + \\"|\\" + src[t.NONNUMERICIDENTIFIER] + \\")\\";
    tok(\\"PRERELEASE\\");
    src[t.PRERELEASE] = \\"(?:-(\\" + src[t.PRERELEASEIDENTIFIER] + \\"(?:\\\\\\\\.\\" + src[t.PRERELEASEIDENTIFIER] + \\")*))\\";
    tok(\\"PRERELEASELOOSE\\");
    src[t.PRERELEASELOOSE] = \\"(?:-?(\\" + src[t.PRERELEASEIDENTIFIERLOOSE] + \\"(?:\\\\\\\\.\\" + src[t.PRERELEASEIDENTIFIERLOOSE] + \\")*))\\";
    tok(\\"BUILDIDENTIFIER\\");
    src[t.BUILDIDENTIFIER] = \\"[0-9A-Za-z-]+\\";
    tok(\\"BUILD\\");
    src[t.BUILD] = \\"(?:\\\\\\\\+(\\" + src[t.BUILDIDENTIFIER] + \\"(?:\\\\\\\\.\\" + src[t.BUILDIDENTIFIER] + \\")*))\\";
    tok(\\"FULL\\");
    tok(\\"FULLPLAIN\\");
    src[t.FULLPLAIN] = \\"v?\\" + src[t.MAINVERSION] + src[t.PRERELEASE] + \\"?\\" + src[t.BUILD] + \\"?\\";
    src[t.FULL] = \\"^\\" + src[t.FULLPLAIN] + \\"$\\";
    tok(\\"LOOSEPLAIN\\");
    src[t.LOOSEPLAIN] = \\"[v=\\\\\\\\s]*\\" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + \\"?\\" + src[t.BUILD] + \\"?\\";
    tok(\\"LOOSE\\");
    src[t.LOOSE] = \\"^\\" + src[t.LOOSEPLAIN] + \\"$\\";
    tok(\\"GTLT\\");
    src[t.GTLT] = \\"((?:<|>)?=?)\\";
    tok(\\"XRANGEIDENTIFIERLOOSE\\");
    src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + \\"|x|X|\\\\\\\\*\\";
    tok(\\"XRANGEIDENTIFIER\\");
    src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + \\"|x|X|\\\\\\\\*\\";
    tok(\\"XRANGEPLAIN\\");
    src[t.XRANGEPLAIN] = \\"[v=\\\\\\\\s]*(\\" + src[t.XRANGEIDENTIFIER] + \\")(?:\\\\\\\\.(\\" + src[t.XRANGEIDENTIFIER] + \\")(?:\\\\\\\\.(\\" + src[t.XRANGEIDENTIFIER] + \\")(?:\\" + src[t.PRERELEASE] + \\")?\\" + src[t.BUILD] + \\"?)?)?\\";
    tok(\\"XRANGEPLAINLOOSE\\");
    src[t.XRANGEPLAINLOOSE] = \\"[v=\\\\\\\\s]*(\\" + src[t.XRANGEIDENTIFIERLOOSE] + \\")(?:\\\\\\\\.(\\" + src[t.XRANGEIDENTIFIERLOOSE] + \\")(?:\\\\\\\\.(\\" + src[t.XRANGEIDENTIFIERLOOSE] + \\")(?:\\" + src[t.PRERELEASELOOSE] + \\")?\\" + src[t.BUILD] + \\"?)?)?\\";
    tok(\\"XRANGE\\");
    src[t.XRANGE] = \\"^\\" + src[t.GTLT] + \\"\\\\\\\\s*\\" + src[t.XRANGEPLAIN] + \\"$\\";
    tok(\\"XRANGELOOSE\\");
    src[t.XRANGELOOSE] = \\"^\\" + src[t.GTLT] + \\"\\\\\\\\s*\\" + src[t.XRANGEPLAINLOOSE] + \\"$\\";
    tok(\\"COERCE\\");
    src[t.COERCE] = \\"(^|[^\\\\\\\\d])(\\\\\\\\d{1,\\" + MAX_SAFE_COMPONENT_LENGTH + \\"})(?:\\\\\\\\.(\\\\\\\\d{1,\\" + MAX_SAFE_COMPONENT_LENGTH + \\"}))?(?:\\\\\\\\.(\\\\\\\\d{1,\\" + MAX_SAFE_COMPONENT_LENGTH + \\"}))?(?:$|[^\\\\\\\\d])\\";
    tok(\\"COERCERTL\\");
    re[t.COERCERTL] = new RegExp(src[t.COERCE], \\"g\\");
    tok(\\"LONETILDE\\");
    src[t.LONETILDE] = \\"(?:~>?)\\";
    tok(\\"TILDETRIM\\");
    src[t.TILDETRIM] = \\"(\\\\\\\\s*)\\" + src[t.LONETILDE] + \\"\\\\\\\\s+\\";
    re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], \\"g\\");
    var tildeTrimReplace = \\"$1~\\";
    tok(\\"TILDE\\");
    src[t.TILDE] = \\"^\\" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + \\"$\\";
    tok(\\"TILDELOOSE\\");
    src[t.TILDELOOSE] = \\"^\\" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + \\"$\\";
    tok(\\"LONECARET\\");
    src[t.LONECARET] = \\"(?:\\\\\\\\^)\\";
    tok(\\"CARETTRIM\\");
    src[t.CARETTRIM] = \\"(\\\\\\\\s*)\\" + src[t.LONECARET] + \\"\\\\\\\\s+\\";
    re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], \\"g\\");
    var caretTrimReplace = \\"$1^\\";
    tok(\\"CARET\\");
    src[t.CARET] = \\"^\\" + src[t.LONECARET] + src[t.XRANGEPLAIN] + \\"$\\";
    tok(\\"CARETLOOSE\\");
    src[t.CARETLOOSE] = \\"^\\" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + \\"$\\";
    tok(\\"COMPARATORLOOSE\\");
    src[t.COMPARATORLOOSE] = \\"^\\" + src[t.GTLT] + \\"\\\\\\\\s*(\\" + src[t.LOOSEPLAIN] + \\")$|^$\\";
    tok(\\"COMPARATOR\\");
    src[t.COMPARATOR] = \\"^\\" + src[t.GTLT] + \\"\\\\\\\\s*(\\" + src[t.FULLPLAIN] + \\")$|^$\\";
    tok(\\"COMPARATORTRIM\\");
    src[t.COMPARATORTRIM] = \\"(\\\\\\\\s*)\\" + src[t.GTLT] + \\"\\\\\\\\s*(\\" + src[t.LOOSEPLAIN] + \\"|\\" + src[t.XRANGEPLAIN] + \\")\\";
    re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], \\"g\\");
    var comparatorTrimReplace = \\"$1$2$3\\";
    tok(\\"HYPHENRANGE\\");
    src[t.HYPHENRANGE] = \\"^\\\\\\\\s*(\\" + src[t.XRANGEPLAIN] + \\")\\\\\\\\s+-\\\\\\\\s+(\\" + src[t.XRANGEPLAIN] + \\")\\\\\\\\s*$\\";
    tok(\\"HYPHENRANGELOOSE\\");
    src[t.HYPHENRANGELOOSE] = \\"^\\\\\\\\s*(\\" + src[t.XRANGEPLAINLOOSE] + \\")\\\\\\\\s+-\\\\\\\\s+(\\" + src[t.XRANGEPLAINLOOSE] + \\")\\\\\\\\s*$\\";
    tok(\\"STAR\\");
    src[t.STAR] = \\"(<|>)?=?\\\\\\\\s*\\\\\\\\*\\";
    for (i = 0; i < R; i++) {
      debug(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }
    var i;
    exports.parse = parse;
    function parse(version, options) {
      if (!options || typeof options !== \\"object\\") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== \\"string\\") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      var r = options.loose ? re[t.LOOSE] : re[t.FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }
    exports.valid = valid;
    function valid(version, options) {
      var v = parse(version, options);
      return v ? v.version : null;
    }
    exports.clean = clean;
    function clean(version, options) {
      var s = parse(version.trim().replace(/^[=v]+/, \\"\\"), options);
      return s ? s.version : null;
    }
    exports.SemVer = SemVer;
    function SemVer(version, options) {
      if (!options || typeof options !== \\"object\\") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== \\"string\\") {
        throw new TypeError(\\"Invalid Version: \\" + version);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError(\\"version is longer than \\" + MAX_LENGTH + \\" characters\\");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }
      debug(\\"SemVer\\", version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m) {
        throw new TypeError(\\"Invalid Version: \\" + version);
      }
      this.raw = version;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError(\\"Invalid major version\\");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError(\\"Invalid minor version\\");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError(\\"Invalid patch version\\");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(\\".\\").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(\\".\\") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + \\".\\" + this.minor + \\".\\" + this.patch;
      if (this.prerelease.length) {
        this.version += \\"-\\" + this.prerelease.join(\\".\\");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug(\\"SemVer.compare\\", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a2 = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug(\\"prerelease compare\\", i2, a2, b);
        if (a2 === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a2 === void 0) {
          return -1;
        } else if (a2 === b) {
          continue;
        } else {
          return compareIdentifiers(a2, b);
        }
      } while (++i2);
    };
    SemVer.prototype.compareBuild = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      var i2 = 0;
      do {
        var a2 = this.build[i2];
        var b = other.build[i2];
        debug(\\"prerelease compare\\", i2, a2, b);
        if (a2 === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a2 === void 0) {
          return -1;
        } else if (a2 === b) {
          continue;
        } else {
          return compareIdentifiers(a2, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case \\"premajor\\":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc(\\"pre\\", identifier);
          break;
        case \\"preminor\\":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc(\\"pre\\", identifier);
          break;
        case \\"prepatch\\":
          this.prerelease.length = 0;
          this.inc(\\"patch\\", identifier);
          this.inc(\\"pre\\", identifier);
          break;
        case \\"prerelease\\":
          if (this.prerelease.length === 0) {
            this.inc(\\"patch\\", identifier);
          }
          this.inc(\\"pre\\", identifier);
          break;
        case \\"major\\":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case \\"minor\\":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case \\"patch\\":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case \\"pre\\":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === \\"number\\") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error(\\"invalid increment argument: \\" + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports.inc = inc;
    function inc(version, release, loose, identifier) {
      if (typeof loose === \\"string\\") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse(version1);
        var v2 = parse(version2);
        var prefix = \\"\\";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = \\"pre\\";
          var defaultResult = \\"prerelease\\";
        }
        for (var key in v1) {
          if (key === \\"major\\" || key === \\"minor\\" || key === \\"patch\\") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a2, b) {
      var anum = numeric.test(a2);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a2 = +a2;
        b = +b;
      }
      return a2 === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b ? -1 : 1;
    }
    exports.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a2, b) {
      return compareIdentifiers(b, a2);
    }
    exports.major = major;
    function major(a2, loose) {
      return new SemVer(a2, loose).major;
    }
    exports.minor = minor;
    function minor(a2, loose) {
      return new SemVer(a2, loose).minor;
    }
    exports.patch = patch;
    function patch(a2, loose) {
      return new SemVer(a2, loose).patch;
    }
    exports.compare = compare;
    function compare(a2, b, loose) {
      return new SemVer(a2, loose).compare(new SemVer(b, loose));
    }
    exports.compareLoose = compareLoose;
    function compareLoose(a2, b) {
      return compare(a2, b, true);
    }
    exports.compareBuild = compareBuild;
    function compareBuild(a2, b, loose) {
      var versionA = new SemVer(a2, loose);
      var versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    }
    exports.rcompare = rcompare;
    function rcompare(a2, b, loose) {
      return compare(b, a2, loose);
    }
    exports.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a2, b) {
        return exports.compareBuild(a2, b, loose);
      });
    }
    exports.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a2, b) {
        return exports.compareBuild(b, a2, loose);
      });
    }
    exports.gt = gt;
    function gt(a2, b, loose) {
      return compare(a2, b, loose) > 0;
    }
    exports.lt = lt;
    function lt(a2, b, loose) {
      return compare(a2, b, loose) < 0;
    }
    exports.eq = eq;
    function eq(a2, b, loose) {
      return compare(a2, b, loose) === 0;
    }
    exports.neq = neq;
    function neq(a2, b, loose) {
      return compare(a2, b, loose) !== 0;
    }
    exports.gte = gte;
    function gte(a2, b, loose) {
      return compare(a2, b, loose) >= 0;
    }
    exports.lte = lte;
    function lte(a2, b, loose) {
      return compare(a2, b, loose) <= 0;
    }
    exports.cmp = cmp;
    function cmp(a2, op, b, loose) {
      switch (op) {
        case \\"===\\":
          if (typeof a2 === \\"object\\")
            a2 = a2.version;
          if (typeof b === \\"object\\")
            b = b.version;
          return a2 === b;
        case \\"!==\\":
          if (typeof a2 === \\"object\\")
            a2 = a2.version;
          if (typeof b === \\"object\\")
            b = b.version;
          return a2 !== b;
        case \\"\\":
        case \\"=\\":
        case \\"==\\":
          return eq(a2, b, loose);
        case \\"!=\\":
          return neq(a2, b, loose);
        case \\">\\":
          return gt(a2, b, loose);
        case \\">=\\":
          return gte(a2, b, loose);
        case \\"<\\":
          return lt(a2, b, loose);
        case \\"<=\\":
          return lte(a2, b, loose);
        default:
          throw new TypeError(\\"Invalid operator: \\" + op);
      }
    }
    exports.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== \\"object\\") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      debug(\\"comparator\\", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = \\"\\";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug(\\"comp\\", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var m = comp.match(r);
      if (!m) {
        throw new TypeError(\\"Invalid comparator: \\" + comp);
      }
      this.operator = m[1] !== void 0 ? m[1] : \\"\\";
      if (this.operator === \\"=\\") {
        this.operator = \\"\\";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version) {
      debug(\\"Comparator.test\\", version, this.options.loose);
      if (this.semver === ANY || version === ANY) {
        return true;
      }
      if (typeof version === \\"string\\") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp(version, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError(\\"a Comparator is required\\");
      }
      if (!options || typeof options !== \\"object\\") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === \\"\\") {
        if (this.value === \\"\\") {
          return true;
        }
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === \\"\\") {
        if (comp.value === \\"\\") {
          return true;
        }
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === \\">=\\" || this.operator === \\">\\") && (comp.operator === \\">=\\" || comp.operator === \\">\\");
      var sameDirectionDecreasing = (this.operator === \\"<=\\" || this.operator === \\"<\\") && (comp.operator === \\"<=\\" || comp.operator === \\"<\\");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === \\">=\\" || this.operator === \\"<=\\") && (comp.operator === \\">=\\" || comp.operator === \\"<=\\");
      var oppositeDirectionsLessThan = cmp(this.semver, \\"<\\", comp.semver, options) && ((this.operator === \\">=\\" || this.operator === \\">\\") && (comp.operator === \\"<=\\" || comp.operator === \\"<\\"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, \\">\\", comp.semver, options) && ((this.operator === \\"<=\\" || this.operator === \\"<\\") && (comp.operator === \\">=\\" || comp.operator === \\">\\"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== \\"object\\") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range;
      this.set = range.split(/\\\\s*\\\\|\\\\|\\\\s*/).map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError(\\"Invalid SemVer Range: \\" + range);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(\\" \\").trim();
      }).join(\\"||\\").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      range = range.trim();
      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug(\\"hyphen replace\\", range);
      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
      debug(\\"comparator trim\\", range, re[t.COMPARATORTRIM]);
      range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
      range = range.replace(re[t.CARETTRIM], caretTrimReplace);
      range = range.split(/\\\\s+/).join(\\" \\");
      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var set = range.split(\\" \\").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(\\" \\").split(/\\\\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError(\\"a Range is required\\");
      }
      return this.set.some(function(thisComparators) {
        return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
          return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    function isSatisfiable(comparators, options) {
      var result = true;
      var remainingComparators = comparators.slice();
      var testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every(function(otherComparator) {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    }
    exports.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(\\" \\").trim().split(\\" \\");
      });
    }
    function parseComparator(comp, options) {
      debug(\\"comp\\", comp, options);
      comp = replaceCarets(comp, options);
      debug(\\"caret\\", comp);
      comp = replaceTildes(comp, options);
      debug(\\"tildes\\", comp);
      comp = replaceXRanges(comp, options);
      debug(\\"xrange\\", comp);
      comp = replaceStars(comp, options);
      debug(\\"stars\\", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === \\"x\\" || id === \\"*\\";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\\\\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(\\" \\");
    }
    function replaceTilde(comp, options) {
      var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug(\\"tilde\\", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = \\"\\";
        } else if (isX(m)) {
          ret = \\">=\\" + M + \\".0.0 <\\" + (+M + 1) + \\".0.0\\";
        } else if (isX(p)) {
          ret = \\">=\\" + M + \\".\\" + m + \\".0 <\\" + M + \\".\\" + (+m + 1) + \\".0\\";
        } else if (pr) {
          debug(\\"replaceTilde pr\\", pr);
          ret = \\">=\\" + M + \\".\\" + m + \\".\\" + p + \\"-\\" + pr + \\" <\\" + M + \\".\\" + (+m + 1) + \\".0\\";
        } else {
          ret = \\">=\\" + M + \\".\\" + m + \\".\\" + p + \\" <\\" + M + \\".\\" + (+m + 1) + \\".0\\";
        }
        debug(\\"tilde return\\", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\\\\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(\\" \\");
    }
    function replaceCaret(comp, options) {
      debug(\\"caret\\", comp, options);
      var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug(\\"caret\\", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = \\"\\";
        } else if (isX(m)) {
          ret = \\">=\\" + M + \\".0.0 <\\" + (+M + 1) + \\".0.0\\";
        } else if (isX(p)) {
          if (M === \\"0\\") {
            ret = \\">=\\" + M + \\".\\" + m + \\".0 <\\" + M + \\".\\" + (+m + 1) + \\".0\\";
          } else {
            ret = \\">=\\" + M + \\".\\" + m + \\".0 <\\" + (+M + 1) + \\".0.0\\";
          }
        } else if (pr) {
          debug(\\"replaceCaret pr\\", pr);
          if (M === \\"0\\") {
            if (m === \\"0\\") {
              ret = \\">=\\" + M + \\".\\" + m + \\".\\" + p + \\"-\\" + pr + \\" <\\" + M + \\".\\" + m + \\".\\" + (+p + 1);
            } else {
              ret = \\">=\\" + M + \\".\\" + m + \\".\\" + p + \\"-\\" + pr + \\" <\\" + M + \\".\\" + (+m + 1) + \\".0\\";
            }
          } else {
            ret = \\">=\\" + M + \\".\\" + m + \\".\\" + p + \\"-\\" + pr + \\" <\\" + (+M + 1) + \\".0.0\\";
          }
        } else {
          debug(\\"no pr\\");
          if (M === \\"0\\") {
            if (m === \\"0\\") {
              ret = \\">=\\" + M + \\".\\" + m + \\".\\" + p + \\" <\\" + M + \\".\\" + m + \\".\\" + (+p + 1);
            } else {
              ret = \\">=\\" + M + \\".\\" + m + \\".\\" + p + \\" <\\" + M + \\".\\" + (+m + 1) + \\".0\\";
            }
          } else {
            ret = \\">=\\" + M + \\".\\" + m + \\".\\" + p + \\" <\\" + (+M + 1) + \\".0.0\\";
          }
        }
        debug(\\"caret return\\", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug(\\"replaceXRanges\\", comp, options);
      return comp.split(/\\\\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(\\" \\");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
        debug(\\"xRange\\", comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === \\"=\\" && anyX) {
          gtlt = \\"\\";
        }
        pr = options.includePrerelease ? \\"-0\\" : \\"\\";
        if (xM) {
          if (gtlt === \\">\\" || gtlt === \\"<\\") {
            ret = \\"<0.0.0-0\\";
          } else {
            ret = \\"*\\";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === \\">\\") {
            gtlt = \\">=\\";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === \\"<=\\") {
            gtlt = \\"<\\";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M + \\".\\" + m + \\".\\" + p + pr;
        } else if (xm) {
          ret = \\">=\\" + M + \\".0.0\\" + pr + \\" <\\" + (+M + 1) + \\".0.0\\" + pr;
        } else if (xp) {
          ret = \\">=\\" + M + \\".\\" + m + \\".0\\" + pr + \\" <\\" + M + \\".\\" + (+m + 1) + \\".0\\" + pr;
        }
        debug(\\"xRange return\\", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug(\\"replaceStars\\", comp, options);
      return comp.trim().replace(re[t.STAR], \\"\\");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = \\"\\";
      } else if (isX(fm)) {
        from = \\">=\\" + fM + \\".0.0\\";
      } else if (isX(fp)) {
        from = \\">=\\" + fM + \\".\\" + fm + \\".0\\";
      } else {
        from = \\">=\\" + from;
      }
      if (isX(tM)) {
        to = \\"\\";
      } else if (isX(tm)) {
        to = \\"<\\" + (+tM + 1) + \\".0.0\\";
      } else if (isX(tp)) {
        to = \\"<\\" + tM + \\".\\" + (+tm + 1) + \\".0\\";
      } else if (tpr) {
        to = \\"<=\\" + tM + \\".\\" + tm + \\".\\" + tp + \\"-\\" + tpr;
      } else {
        to = \\"<=\\" + to;
      }
      return (from + \\" \\" + to).trim();
    }
    Range.prototype.test = function(version) {
      if (!version) {
        return false;
      }
      if (typeof version === \\"string\\") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports.satisfies = satisfies;
    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    }
    exports.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer(\\"0.0.0\\");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer(\\"0.0.0-0\\");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case \\">\\":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case \\"\\":
            case \\">=\\":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case \\"<\\":
            case \\"<=\\":
              break;
            default:
              throw new Error(\\"Unexpected operation: \\" + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || \\"*\\";
      } catch (er) {
        return null;
      }
    }
    exports.ltr = ltr;
    function ltr(version, range, options) {
      return outside(version, range, \\"<\\", options);
    }
    exports.gtr = gtr;
    function gtr(version, range, options) {
      return outside(version, range, \\">\\", options);
    }
    exports.outside = outside;
    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case \\">\\":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = \\">\\";
          ecomp = \\">=\\";
          break;
        case \\"<\\":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = \\"<\\";
          ecomp = \\"<=\\";
          break;
        default:
          throw new TypeError('Must provide a hilo val of \\"<\\" or \\">\\"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(\\">=0.0.0\\");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports.prerelease = prerelease;
    function prerelease(version, options) {
      var parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports.coerce = coerce;
    function coerce(version, options) {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === \\"number\\") {
        version = String(version);
      }
      if (typeof version !== \\"string\\") {
        return null;
      }
      options = options || {};
      var match = null;
      if (!options.rtl) {
        match = version.match(re[t.COERCE]);
      } else {
        var next;
        while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse(match[2] + \\".\\" + (match[3] || \\"0\\") + \\".\\" + (match[4] || \\"0\\"), options);
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/file/file.js
var require_file = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/file/file.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    function helpers() {
      const data = require_lib14();
      helpers = function() {
        return data;
      };
      return data;
    }
    function _traverse() {
      const data = require_lib13();
      _traverse = function() {
        return data;
      };
      return data;
    }
    function _codeFrame() {
      const data = require_lib6();
      _codeFrame = function() {
        return data;
      };
      return data;
    }
    function _t() {
      const data = require_lib2();
      _t = function() {
        return data;
      };
      return data;
    }
    function _helperModuleTransforms() {
      const data = require_lib17();
      _helperModuleTransforms = function() {
        return data;
      };
      return data;
    }
    function _semver() {
      const data = require_semver();
      _semver = function() {
        return data;
      };
      return data;
    }
    var {
      cloneNode,
      interpreterDirective
    } = _t();
    var errorVisitor = {
      enter(path, state) {
        const loc = path.node.loc;
        if (loc) {
          state.loc = loc;
          path.stop();
        }
      }
    };
    var File = class {
      constructor(options, {
        code,
        ast,
        inputMap
      }) {
        this._map = /* @__PURE__ */ new Map();
        this.opts = void 0;
        this.declarations = {};
        this.path = null;
        this.ast = {};
        this.scope = void 0;
        this.metadata = {};
        this.code = \\"\\";
        this.inputMap = null;
        this.hub = {
          file: this,
          getCode: () => this.code,
          getScope: () => this.scope,
          addHelper: this.addHelper.bind(this),
          buildError: this.buildCodeFrameError.bind(this)
        };
        this.opts = options;
        this.code = code;
        this.ast = ast;
        this.inputMap = inputMap;
        this.path = _traverse().NodePath.get({
          hub: this.hub,
          parentPath: null,
          parent: this.ast,
          container: this.ast,
          key: \\"program\\"
        }).setContext();
        this.scope = this.path.scope;
      }
      get shebang() {
        const {
          interpreter
        } = this.path.node;
        return interpreter ? interpreter.value : \\"\\";
      }
      set shebang(value) {
        if (value) {
          this.path.get(\\"interpreter\\").replaceWith(interpreterDirective(value));
        } else {
          this.path.get(\\"interpreter\\").remove();
        }
      }
      set(key, val) {
        if (key === \\"helpersNamespace\\") {
          throw new Error(\\"Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.\\");
        }
        this._map.set(key, val);
      }
      get(key) {
        return this._map.get(key);
      }
      has(key) {
        return this._map.has(key);
      }
      getModuleName() {
        return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);
      }
      addImport() {
        throw new Error(\\"This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.\\");
      }
      availableHelper(name, versionRange) {
        let minVersion;
        try {
          minVersion = helpers().minVersion(name);
        } catch (err) {
          if (err.code !== \\"BABEL_HELPER_UNKNOWN\\")
            throw err;
          return false;
        }
        if (typeof versionRange !== \\"string\\")
          return true;
        if (_semver().valid(versionRange))
          versionRange = \`^\${versionRange}\`;
        return !_semver().intersects(\`<\${minVersion}\`, versionRange) && !_semver().intersects(\`>=8.0.0\`, versionRange);
      }
      addHelper(name) {
        const declar = this.declarations[name];
        if (declar)
          return cloneNode(declar);
        const generator = this.get(\\"helperGenerator\\");
        if (generator) {
          const res = generator(name);
          if (res)
            return res;
        }
        helpers().ensure(name, File);
        const uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
        const dependencies = {};
        for (const dep of helpers().getDependencies(name)) {
          dependencies[dep] = this.addHelper(dep);
        }
        const {
          nodes,
          globals
        } = helpers().get(name, (dep) => dependencies[dep], uid, Object.keys(this.scope.getAllBindings()));
        globals.forEach((name2) => {
          if (this.path.scope.hasBinding(name2, true)) {
            this.path.scope.rename(name2);
          }
        });
        nodes.forEach((node) => {
          node._compact = true;
        });
        this.path.unshiftContainer(\\"body\\", nodes);
        this.path.get(\\"body\\").forEach((path) => {
          if (nodes.indexOf(path.node) === -1)
            return;
          if (path.isVariableDeclaration())
            this.scope.registerDeclaration(path);
        });
        return uid;
      }
      addTemplateObject() {
        throw new Error(\\"This function has been moved into the template literal transform itself.\\");
      }
      buildCodeFrameError(node, msg, _Error = SyntaxError) {
        let loc = node && (node.loc || node._loc);
        if (!loc && node) {
          const state = {
            loc: null
          };
          (0, _traverse().default)(node, errorVisitor, this.scope, state);
          loc = state.loc;
          let txt = \\"This is an error on an internal node. Probably an internal error.\\";
          if (loc)
            txt += \\" Location has been estimated.\\";
          msg += \` (\${txt})\`;
        }
        if (loc) {
          const {
            highlightCode = true
          } = this.opts;
          msg += \\"\\\\n\\" + (0, _codeFrame().codeFrameColumns)(this.code, {
            start: {
              line: loc.start.line,
              column: loc.start.column + 1
            },
            end: loc.end && loc.start.line === loc.end.line ? {
              line: loc.end.line,
              column: loc.end.column + 1
            } : void 0
          }, {
            highlightCode
          });
        }
        return new _Error(msg);
      }
    };
    exports.default = File;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/tools/build-external-helpers.js
var require_build_external_helpers = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/tools/build-external-helpers.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = _default;
    function helpers() {
      const data = require_lib14();
      helpers = function() {
        return data;
      };
      return data;
    }
    function _generator() {
      const data = require_lib4();
      _generator = function() {
        return data;
      };
      return data;
    }
    function _template() {
      const data = require_lib11();
      _template = function() {
        return data;
      };
      return data;
    }
    function _t() {
      const data = require_lib2();
      _t = function() {
        return data;
      };
      return data;
    }
    var _file = require_file();
    var {
      arrayExpression,
      assignmentExpression,
      binaryExpression,
      blockStatement,
      callExpression,
      cloneNode,
      conditionalExpression,
      exportNamedDeclaration,
      exportSpecifier,
      expressionStatement,
      functionExpression,
      identifier,
      memberExpression,
      objectExpression,
      program,
      stringLiteral,
      unaryExpression,
      variableDeclaration,
      variableDeclarator
    } = _t();
    var buildUmdWrapper = (replacements) => _template().default.statement\`
    (function (root, factory) {
      if (typeof define === \\"function\\" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === \\"object\\") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  \`(replacements);
    function buildGlobal(allowlist) {
      const namespace = identifier(\\"babelHelpers\\");
      const body = [];
      const container = functionExpression(null, [identifier(\\"global\\")], blockStatement(body));
      const tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression(\\"===\\", unaryExpression(\\"typeof\\", identifier(\\"global\\")), stringLiteral(\\"undefined\\")), identifier(\\"self\\"), identifier(\\"global\\"))]))]);
      body.push(variableDeclaration(\\"var\\", [variableDeclarator(namespace, assignmentExpression(\\"=\\", memberExpression(identifier(\\"global\\"), namespace), objectExpression([])))]));
      buildHelpers(body, namespace, allowlist);
      return tree;
    }
    function buildModule(allowlist) {
      const body = [];
      const refs = buildHelpers(body, null, allowlist);
      body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => {
        return exportSpecifier(cloneNode(refs[name]), identifier(name));
      })));
      return program(body, [], \\"module\\");
    }
    function buildUmd(allowlist) {
      const namespace = identifier(\\"babelHelpers\\");
      const body = [];
      body.push(variableDeclaration(\\"var\\", [variableDeclarator(namespace, identifier(\\"global\\"))]));
      buildHelpers(body, namespace, allowlist);
      return program([buildUmdWrapper({
        FACTORY_PARAMETERS: identifier(\\"global\\"),
        BROWSER_ARGUMENTS: assignmentExpression(\\"=\\", memberExpression(identifier(\\"root\\"), namespace), objectExpression([])),
        COMMON_ARGUMENTS: identifier(\\"exports\\"),
        AMD_ARGUMENTS: arrayExpression([stringLiteral(\\"exports\\")]),
        FACTORY_BODY: body,
        UMD_ROOT: identifier(\\"this\\")
      })]);
    }
    function buildVar(allowlist) {
      const namespace = identifier(\\"babelHelpers\\");
      const body = [];
      body.push(variableDeclaration(\\"var\\", [variableDeclarator(namespace, objectExpression([]))]));
      const tree = program(body);
      buildHelpers(body, namespace, allowlist);
      body.push(expressionStatement(namespace));
      return tree;
    }
    function buildHelpers(body, namespace, allowlist) {
      const getHelperReference = (name) => {
        return namespace ? memberExpression(namespace, identifier(name)) : identifier(\`_\${name}\`);
      };
      const refs = {};
      helpers().list.forEach(function(name) {
        if (allowlist && allowlist.indexOf(name) < 0)
          return;
        const ref = refs[name] = getHelperReference(name);
        helpers().ensure(name, _file.default);
        const {
          nodes
        } = helpers().get(name, getHelperReference, ref);
        body.push(...nodes);
      });
      return refs;
    }
    function _default(allowlist, outputType = \\"global\\") {
      let tree;
      const build = {
        global: buildGlobal,
        module: buildModule,
        umd: buildUmd,
        var: buildVar
      }[outputType];
      if (build) {
        tree = build(allowlist);
      } else {
        throw new Error(\`Unsupported output type \${outputType}\`);
      }
      return (0, _generator().default)(tree).code;
    }
  }
});

// node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js
var require_gensync = __commonJS({
  \\"node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js\\"(exports, module2) {
    \\"use strict\\";
    var GENSYNC_START = Symbol.for(\\"gensync:v1:start\\");
    var GENSYNC_SUSPEND = Symbol.for(\\"gensync:v1:suspend\\");
    var GENSYNC_EXPECTED_START = \\"GENSYNC_EXPECTED_START\\";
    var GENSYNC_EXPECTED_SUSPEND = \\"GENSYNC_EXPECTED_SUSPEND\\";
    var GENSYNC_OPTIONS_ERROR = \\"GENSYNC_OPTIONS_ERROR\\";
    var GENSYNC_RACE_NONEMPTY = \\"GENSYNC_RACE_NONEMPTY\\";
    var GENSYNC_ERRBACK_NO_CALLBACK = \\"GENSYNC_ERRBACK_NO_CALLBACK\\";
    module2.exports = Object.assign(function gensync(optsOrFn) {
      let genFn = optsOrFn;
      if (typeof optsOrFn !== \\"function\\") {
        genFn = newGenerator(optsOrFn);
      } else {
        genFn = wrapGenerator(optsOrFn);
      }
      return Object.assign(genFn, makeFunctionAPI(genFn));
    }, {
      all: buildOperation({
        name: \\"all\\",
        arity: 1,
        sync: function(args) {
          const items = Array.from(args[0]);
          return items.map((item) => evaluateSync(item));
        },
        async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            Promise.resolve().then(() => resolve([]));
            return;
          }
          let count = 0;
          const results = items.map(() => void 0);
          items.forEach((item, i) => {
            evaluateAsync(item, (val) => {
              results[i] = val;
              count += 1;
              if (count === results.length)
                resolve(results);
            }, reject);
          });
        }
      }),
      race: buildOperation({
        name: \\"race\\",
        arity: 1,
        sync: function(args) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            throw makeError(\\"Must race at least 1 item\\", GENSYNC_RACE_NONEMPTY);
          }
          return evaluateSync(items[0]);
        },
        async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            throw makeError(\\"Must race at least 1 item\\", GENSYNC_RACE_NONEMPTY);
          }
          for (const item of items) {
            evaluateAsync(item, resolve, reject);
          }
        }
      })
    });
    function makeFunctionAPI(genFn) {
      const fns = {
        sync: function(...args) {
          return evaluateSync(genFn.apply(this, args));
        },
        async: function(...args) {
          return new Promise((resolve, reject) => {
            evaluateAsync(genFn.apply(this, args), resolve, reject);
          });
        },
        errback: function(...args) {
          const cb = args.pop();
          if (typeof cb !== \\"function\\") {
            throw makeError(\\"Asynchronous function called without callback\\", GENSYNC_ERRBACK_NO_CALLBACK);
          }
          let gen;
          try {
            gen = genFn.apply(this, args);
          } catch (err) {
            cb(err);
            return;
          }
          evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
        }
      };
      return fns;
    }
    function assertTypeof(type, name, value, allowUndefined) {
      if (typeof value === type || allowUndefined && typeof value === \\"undefined\\") {
        return;
      }
      let msg;
      if (allowUndefined) {
        msg = \`Expected opts.\${name} to be either a \${type}, or undefined.\`;
      } else {
        msg = \`Expected opts.\${name} to be a \${type}.\`;
      }
      throw makeError(msg, GENSYNC_OPTIONS_ERROR);
    }
    function makeError(msg, code) {
      return Object.assign(new Error(msg), { code });
    }
    function newGenerator({ name, arity, sync, async, errback }) {
      assertTypeof(\\"string\\", \\"name\\", name, true);
      assertTypeof(\\"number\\", \\"arity\\", arity, true);
      assertTypeof(\\"function\\", \\"sync\\", sync);
      assertTypeof(\\"function\\", \\"async\\", async, true);
      assertTypeof(\\"function\\", \\"errback\\", errback, true);
      if (async && errback) {
        throw makeError(\\"Expected one of either opts.async or opts.errback, but got _both_.\\", GENSYNC_OPTIONS_ERROR);
      }
      if (typeof name !== \\"string\\") {
        let fnName;
        if (errback && errback.name && errback.name !== \\"errback\\") {
          fnName = errback.name;
        }
        if (async && async.name && async.name !== \\"async\\") {
          fnName = async.name.replace(/Async$/, \\"\\");
        }
        if (sync && sync.name && sync.name !== \\"sync\\") {
          fnName = sync.name.replace(/Sync$/, \\"\\");
        }
        if (typeof fnName === \\"string\\") {
          name = fnName;
        }
      }
      if (typeof arity !== \\"number\\") {
        arity = sync.length;
      }
      return buildOperation({
        name,
        arity,
        sync: function(args) {
          return sync.apply(this, args);
        },
        async: function(args, resolve, reject) {
          if (async) {
            async.apply(this, args).then(resolve, reject);
          } else if (errback) {
            errback.call(this, ...args, (err, value) => {
              if (err == null)
                resolve(value);
              else
                reject(err);
            });
          } else {
            resolve(sync.apply(this, args));
          }
        }
      });
    }
    function wrapGenerator(genFn) {
      return setFunctionMetadata(genFn.name, genFn.length, function(...args) {
        return genFn.apply(this, args);
      });
    }
    function buildOperation({ name, arity, sync, async }) {
      return setFunctionMetadata(name, arity, function* (...args) {
        const resume = yield GENSYNC_START;
        if (!resume) {
          const res = sync.call(this, args);
          return res;
        }
        let result;
        try {
          async.call(this, args, (value) => {
            if (result)
              return;
            result = { value };
            resume();
          }, (err) => {
            if (result)
              return;
            result = { err };
            resume();
          });
        } catch (err) {
          result = { err };
          resume();
        }
        yield GENSYNC_SUSPEND;
        if (result.hasOwnProperty(\\"err\\")) {
          throw result.err;
        }
        return result.value;
      });
    }
    function evaluateSync(gen) {
      let value;
      while (!({ value } = gen.next()).done) {
        assertStart(value, gen);
      }
      return value;
    }
    function evaluateAsync(gen, resolve, reject) {
      (function step() {
        try {
          let value;
          while (!({ value } = gen.next()).done) {
            assertStart(value, gen);
            let sync = true;
            let didSyncResume = false;
            const out = gen.next(() => {
              if (sync) {
                didSyncResume = true;
              } else {
                step();
              }
            });
            sync = false;
            assertSuspend(out, gen);
            if (!didSyncResume) {
              return;
            }
          }
          return resolve(value);
        } catch (err) {
          return reject(err);
        }
      })();
    }
    function assertStart(value, gen) {
      if (value === GENSYNC_START)
        return;
      throwError(gen, makeError(\`Got unexpected yielded value in gensync generator: \${JSON.stringify(value)}. Did you perhaps mean to use 'yield*' instead of 'yield'?\`, GENSYNC_EXPECTED_START));
    }
    function assertSuspend({ value, done }, gen) {
      if (!done && value === GENSYNC_SUSPEND)
        return;
      throwError(gen, makeError(done ? \\"Unexpected generator completion. If you get this, it is probably a gensync bug.\\" : \`Expected GENSYNC_SUSPEND, got \${JSON.stringify(value)}. If you get this, it is probably a gensync bug.\`, GENSYNC_EXPECTED_SUSPEND));
    }
    function throwError(gen, err) {
      if (gen.throw)
        gen.throw(err);
      throw err;
    }
    function setFunctionMetadata(name, arity, fn) {
      if (typeof name === \\"string\\") {
        const nameDesc = Object.getOwnPropertyDescriptor(fn, \\"name\\");
        if (!nameDesc || nameDesc.configurable) {
          Object.defineProperty(fn, \\"name\\", Object.assign(nameDesc || {}, {
            configurable: true,
            value: name
          }));
        }
      }
      if (typeof arity === \\"number\\") {
        const lengthDesc = Object.getOwnPropertyDescriptor(fn, \\"length\\");
        if (!lengthDesc || lengthDesc.configurable) {
          Object.defineProperty(fn, \\"length\\", Object.assign(lengthDesc || {}, {
            configurable: true,
            value: arity
          }));
        }
      }
      return fn;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/gensync-utils/async.js
var require_async = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/gensync-utils/async.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.forwardAsync = forwardAsync;
    exports.isAsync = void 0;
    exports.isThenable = isThenable;
    exports.maybeAsync = maybeAsync;
    exports.waitFor = exports.onFirstPause = void 0;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var id = (x) => x;
    var runGenerator = _gensync()(function* (item) {
      return yield* item;
    });
    var isAsync = _gensync()({
      sync: () => false,
      errback: (cb) => cb(null, true)
    });
    exports.isAsync = isAsync;
    function maybeAsync(fn, message) {
      return _gensync()({
        sync(...args) {
          const result = fn.apply(this, args);
          if (isThenable(result))
            throw new Error(message);
          return result;
        },
        async(...args) {
          return Promise.resolve(fn.apply(this, args));
        }
      });
    }
    var withKind = _gensync()({
      sync: (cb) => cb(\\"sync\\"),
      async: (cb) => cb(\\"async\\")
    });
    function forwardAsync(action, cb) {
      const g = _gensync()(action);
      return withKind((kind) => {
        const adapted = g[kind];
        return cb(adapted);
      });
    }
    var onFirstPause = _gensync()({
      name: \\"onFirstPause\\",
      arity: 2,
      sync: function(item) {
        return runGenerator.sync(item);
      },
      errback: function(item, firstPause, cb) {
        let completed = false;
        runGenerator.errback(item, (err, value) => {
          completed = true;
          cb(err, value);
        });
        if (!completed) {
          firstPause();
        }
      }
    });
    exports.onFirstPause = onFirstPause;
    var waitFor = _gensync()({
      sync: id,
      async: id
    });
    exports.waitFor = waitFor;
    function isThenable(val) {
      return !!val && (typeof val === \\"object\\" || typeof val === \\"function\\") && !!val.then && typeof val.then === \\"function\\";
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/util.js
var require_util2 = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/util.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.isIterableIterator = isIterableIterator;
    exports.mergeOptions = mergeOptions;
    function mergeOptions(target, source) {
      for (const k of Object.keys(source)) {
        if ((k === \\"parserOpts\\" || k === \\"generatorOpts\\" || k === \\"assumptions\\") && source[k]) {
          const parserOpts = source[k];
          const targetObj = target[k] || (target[k] = {});
          mergeDefaultFields(targetObj, parserOpts);
        } else {
          const val = source[k];
          if (val !== void 0)
            target[k] = val;
        }
      }
    }
    function mergeDefaultFields(target, source) {
      for (const k of Object.keys(source)) {
        const val = source[k];
        if (val !== void 0)
          target[k] = val;
      }
    }
    function isIterableIterator(value) {
      return !!value && typeof value.next === \\"function\\" && typeof value[Symbol.iterator] === \\"function\\";
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/caching.js
var require_caching = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/caching.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.assertSimpleType = assertSimpleType;
    exports.makeStrongCache = makeStrongCache;
    exports.makeStrongCacheSync = makeStrongCacheSync;
    exports.makeWeakCache = makeWeakCache;
    exports.makeWeakCacheSync = makeWeakCacheSync;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _async = require_async();
    var _util = require_util2();
    var synchronize = (gen) => {
      return _gensync()(gen).sync;
    };
    function* genTrue() {
      return true;
    }
    function makeWeakCache(handler) {
      return makeCachedFunction(WeakMap, handler);
    }
    function makeWeakCacheSync(handler) {
      return synchronize(makeWeakCache(handler));
    }
    function makeStrongCache(handler) {
      return makeCachedFunction(Map, handler);
    }
    function makeStrongCacheSync(handler) {
      return synchronize(makeStrongCache(handler));
    }
    function makeCachedFunction(CallCache, handler) {
      const callCacheSync = new CallCache();
      const callCacheAsync = new CallCache();
      const futureCache = new CallCache();
      return function* cachedFunction(arg, data) {
        const asyncContext = yield* (0, _async.isAsync)();
        const callCache = asyncContext ? callCacheAsync : callCacheSync;
        const cached = yield* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data);
        if (cached.valid)
          return cached.value;
        const cache = new CacheConfigurator(data);
        const handlerResult = handler(arg, cache);
        let finishLock;
        let value;
        if ((0, _util.isIterableIterator)(handlerResult)) {
          const gen = handlerResult;
          value = yield* (0, _async.onFirstPause)(gen, () => {
            finishLock = setupAsyncLocks(cache, futureCache, arg);
          });
        } else {
          value = handlerResult;
        }
        updateFunctionCache(callCache, cache, arg, value);
        if (finishLock) {
          futureCache.delete(arg);
          finishLock.release(value);
        }
        return value;
      };
    }
    function* getCachedValue(cache, arg, data) {
      const cachedValue = cache.get(arg);
      if (cachedValue) {
        for (const {
          value,
          valid
        } of cachedValue) {
          if (yield* valid(data))
            return {
              valid: true,
              value
            };
        }
      }
      return {
        valid: false,
        value: null
      };
    }
    function* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data) {
      const cached = yield* getCachedValue(callCache, arg, data);
      if (cached.valid) {
        return cached;
      }
      if (asyncContext) {
        const cached2 = yield* getCachedValue(futureCache, arg, data);
        if (cached2.valid) {
          const value = yield* (0, _async.waitFor)(cached2.value.promise);
          return {
            valid: true,
            value
          };
        }
      }
      return {
        valid: false,
        value: null
      };
    }
    function setupAsyncLocks(config, futureCache, arg) {
      const finishLock = new Lock();
      updateFunctionCache(futureCache, config, arg, finishLock);
      return finishLock;
    }
    function updateFunctionCache(cache, config, arg, value) {
      if (!config.configured())
        config.forever();
      let cachedValue = cache.get(arg);
      config.deactivate();
      switch (config.mode()) {
        case \\"forever\\":
          cachedValue = [{
            value,
            valid: genTrue
          }];
          cache.set(arg, cachedValue);
          break;
        case \\"invalidate\\":
          cachedValue = [{
            value,
            valid: config.validator()
          }];
          cache.set(arg, cachedValue);
          break;
        case \\"valid\\":
          if (cachedValue) {
            cachedValue.push({
              value,
              valid: config.validator()
            });
          } else {
            cachedValue = [{
              value,
              valid: config.validator()
            }];
            cache.set(arg, cachedValue);
          }
      }
    }
    var CacheConfigurator = class {
      constructor(data) {
        this._active = true;
        this._never = false;
        this._forever = false;
        this._invalidate = false;
        this._configured = false;
        this._pairs = [];
        this._data = void 0;
        this._data = data;
      }
      simple() {
        return makeSimpleConfigurator(this);
      }
      mode() {
        if (this._never)
          return \\"never\\";
        if (this._forever)
          return \\"forever\\";
        if (this._invalidate)
          return \\"invalidate\\";
        return \\"valid\\";
      }
      forever() {
        if (!this._active) {
          throw new Error(\\"Cannot change caching after evaluation has completed.\\");
        }
        if (this._never) {
          throw new Error(\\"Caching has already been configured with .never()\\");
        }
        this._forever = true;
        this._configured = true;
      }
      never() {
        if (!this._active) {
          throw new Error(\\"Cannot change caching after evaluation has completed.\\");
        }
        if (this._forever) {
          throw new Error(\\"Caching has already been configured with .forever()\\");
        }
        this._never = true;
        this._configured = true;
      }
      using(handler) {
        if (!this._active) {
          throw new Error(\\"Cannot change caching after evaluation has completed.\\");
        }
        if (this._never || this._forever) {
          throw new Error(\\"Caching has already been configured with .never or .forever()\\");
        }
        this._configured = true;
        const key = handler(this._data);
        const fn = (0, _async.maybeAsync)(handler, \`You appear to be using an async cache handler, but Babel has been called synchronously\`);
        if ((0, _async.isThenable)(key)) {
          return key.then((key2) => {
            this._pairs.push([key2, fn]);
            return key2;
          });
        }
        this._pairs.push([key, fn]);
        return key;
      }
      invalidate(handler) {
        this._invalidate = true;
        return this.using(handler);
      }
      validator() {
        const pairs = this._pairs;
        return function* (data) {
          for (const [key, fn] of pairs) {
            if (key !== (yield* fn(data)))
              return false;
          }
          return true;
        };
      }
      deactivate() {
        this._active = false;
      }
      configured() {
        return this._configured;
      }
    };
    function makeSimpleConfigurator(cache) {
      function cacheFn(val) {
        if (typeof val === \\"boolean\\") {
          if (val)
            cache.forever();
          else
            cache.never();
          return;
        }
        return cache.using(() => assertSimpleType(val()));
      }
      cacheFn.forever = () => cache.forever();
      cacheFn.never = () => cache.never();
      cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb()));
      cacheFn.invalidate = (cb) => cache.invalidate(() => assertSimpleType(cb()));
      return cacheFn;
    }
    function assertSimpleType(value) {
      if ((0, _async.isThenable)(value)) {
        throw new Error(\`You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.\`);
      }
      if (value != null && typeof value !== \\"string\\" && typeof value !== \\"boolean\\" && typeof value !== \\"number\\") {
        throw new Error(\\"Cache keys must be either string, boolean, number, null, or undefined.\\");
      }
      return value;
    }
    var Lock = class {
      constructor() {
        this.released = false;
        this.promise = void 0;
        this._resolve = void 0;
        this.promise = new Promise((resolve) => {
          this._resolve = resolve;
        });
      }
      release(value) {
        this.released = true;
        this._resolve(value);
      }
    };
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/gensync-utils/fs.js
var require_fs = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/gensync-utils/fs.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.stat = exports.readFile = void 0;
    function _fs() {
      const data = require(\\"fs\\");
      _fs = function() {
        return data;
      };
      return data;
    }
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var readFile = _gensync()({
      sync: _fs().readFileSync,
      errback: _fs().readFile
    });
    exports.readFile = readFile;
    var stat = _gensync()({
      sync: _fs().statSync,
      errback: _fs().stat
    });
    exports.stat = stat;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/utils.js
var require_utils2 = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/utils.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.makeStaticFileCache = makeStaticFileCache;
    var _caching = require_caching();
    var fs = require_fs();
    function _fs2() {
      const data = require(\\"fs\\");
      _fs2 = function() {
        return data;
      };
      return data;
    }
    function makeStaticFileCache(fn) {
      return (0, _caching.makeStrongCache)(function* (filepath, cache) {
        const cached = cache.invalidate(() => fileMtime(filepath));
        if (cached === null) {
          return null;
        }
        return fn(filepath, yield* fs.readFile(filepath, \\"utf8\\"));
      });
    }
    function fileMtime(filepath) {
      if (!_fs2().existsSync(filepath))
        return null;
      try {
        return +_fs2().statSync(filepath).mtime;
      } catch (e) {
        if (e.code !== \\"ENOENT\\" && e.code !== \\"ENOTDIR\\")
          throw e;
      }
      return null;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/package.js
var require_package = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/package.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.findPackageData = findPackageData;
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    var _utils = require_utils2();
    var PACKAGE_FILENAME = \\"package.json\\";
    function* findPackageData(filepath) {
      let pkg = null;
      const directories = [];
      let isPackage = true;
      let dirname = _path().dirname(filepath);
      while (!pkg && _path().basename(dirname) !== \\"node_modules\\") {
        directories.push(dirname);
        pkg = yield* readConfigPackage(_path().join(dirname, PACKAGE_FILENAME));
        const nextLoc = _path().dirname(dirname);
        if (dirname === nextLoc) {
          isPackage = false;
          break;
        }
        dirname = nextLoc;
      }
      return {
        filepath,
        directories,
        pkg,
        isPackage
      };
    }
    var readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
      let options;
      try {
        options = JSON.parse(content);
      } catch (err) {
        err.message = \`\${filepath}: Error while parsing JSON - \${err.message}\`;
        throw err;
      }
      if (!options)
        throw new Error(\`\${filepath}: No config detected\`);
      if (typeof options !== \\"object\\") {
        throw new Error(\`\${filepath}: Config returned typeof \${typeof options}\`);
      }
      if (Array.isArray(options)) {
        throw new Error(\`\${filepath}: Expected config object but found array\`);
      }
      return {
        filepath,
        dirname: _path().dirname(filepath),
        options
      };
    });
  }
});

// node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/unicode.js
var require_unicode = __commonJS({
  \\"node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/unicode.js\\"(exports, module2) {
    module2.exports.Space_Separator = /[\\\\u1680\\\\u2000-\\\\u200A\\\\u202F\\\\u205F\\\\u3000]/;
    module2.exports.ID_Start = /[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u0860-\\\\u086A\\\\u08A0-\\\\u08B4\\\\u08B6-\\\\u08BD\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u09FC\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0AF9\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58-\\\\u0C5A\\\\u0C60\\\\u0C61\\\\u0C80\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D54-\\\\u0D56\\\\u0D5F-\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F5\\\\u13F8-\\\\u13FD\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u1884\\\\u1887-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1C80-\\\\u1C88\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312E\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FEA\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA7AE\\\\uA7B0-\\\\uA7B7\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA8FD\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB65\\\\uAB70-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]|\\\\uD800[\\\\uDC00-\\\\uDC0B\\\\uDC0D-\\\\uDC26\\\\uDC28-\\\\uDC3A\\\\uDC3C\\\\uDC3D\\\\uDC3F-\\\\uDC4D\\\\uDC50-\\\\uDC5D\\\\uDC80-\\\\uDCFA\\\\uDD40-\\\\uDD74\\\\uDE80-\\\\uDE9C\\\\uDEA0-\\\\uDED0\\\\uDF00-\\\\uDF1F\\\\uDF2D-\\\\uDF4A\\\\uDF50-\\\\uDF75\\\\uDF80-\\\\uDF9D\\\\uDFA0-\\\\uDFC3\\\\uDFC8-\\\\uDFCF\\\\uDFD1-\\\\uDFD5]|\\\\uD801[\\\\uDC00-\\\\uDC9D\\\\uDCB0-\\\\uDCD3\\\\uDCD8-\\\\uDCFB\\\\uDD00-\\\\uDD27\\\\uDD30-\\\\uDD63\\\\uDE00-\\\\uDF36\\\\uDF40-\\\\uDF55\\\\uDF60-\\\\uDF67]|\\\\uD802[\\\\uDC00-\\\\uDC05\\\\uDC08\\\\uDC0A-\\\\uDC35\\\\uDC37\\\\uDC38\\\\uDC3C\\\\uDC3F-\\\\uDC55\\\\uDC60-\\\\uDC76\\\\uDC80-\\\\uDC9E\\\\uDCE0-\\\\uDCF2\\\\uDCF4\\\\uDCF5\\\\uDD00-\\\\uDD15\\\\uDD20-\\\\uDD39\\\\uDD80-\\\\uDDB7\\\\uDDBE\\\\uDDBF\\\\uDE00\\\\uDE10-\\\\uDE13\\\\uDE15-\\\\uDE17\\\\uDE19-\\\\uDE33\\\\uDE60-\\\\uDE7C\\\\uDE80-\\\\uDE9C\\\\uDEC0-\\\\uDEC7\\\\uDEC9-\\\\uDEE4\\\\uDF00-\\\\uDF35\\\\uDF40-\\\\uDF55\\\\uDF60-\\\\uDF72\\\\uDF80-\\\\uDF91]|\\\\uD803[\\\\uDC00-\\\\uDC48\\\\uDC80-\\\\uDCB2\\\\uDCC0-\\\\uDCF2]|\\\\uD804[\\\\uDC03-\\\\uDC37\\\\uDC83-\\\\uDCAF\\\\uDCD0-\\\\uDCE8\\\\uDD03-\\\\uDD26\\\\uDD50-\\\\uDD72\\\\uDD76\\\\uDD83-\\\\uDDB2\\\\uDDC1-\\\\uDDC4\\\\uDDDA\\\\uDDDC\\\\uDE00-\\\\uDE11\\\\uDE13-\\\\uDE2B\\\\uDE80-\\\\uDE86\\\\uDE88\\\\uDE8A-\\\\uDE8D\\\\uDE8F-\\\\uDE9D\\\\uDE9F-\\\\uDEA8\\\\uDEB0-\\\\uDEDE\\\\uDF05-\\\\uDF0C\\\\uDF0F\\\\uDF10\\\\uDF13-\\\\uDF28\\\\uDF2A-\\\\uDF30\\\\uDF32\\\\uDF33\\\\uDF35-\\\\uDF39\\\\uDF3D\\\\uDF50\\\\uDF5D-\\\\uDF61]|\\\\uD805[\\\\uDC00-\\\\uDC34\\\\uDC47-\\\\uDC4A\\\\uDC80-\\\\uDCAF\\\\uDCC4\\\\uDCC5\\\\uDCC7\\\\uDD80-\\\\uDDAE\\\\uDDD8-\\\\uDDDB\\\\uDE00-\\\\uDE2F\\\\uDE44\\\\uDE80-\\\\uDEAA\\\\uDF00-\\\\uDF19]|\\\\uD806[\\\\uDCA0-\\\\uDCDF\\\\uDCFF\\\\uDE00\\\\uDE0B-\\\\uDE32\\\\uDE3A\\\\uDE50\\\\uDE5C-\\\\uDE83\\\\uDE86-\\\\uDE89\\\\uDEC0-\\\\uDEF8]|\\\\uD807[\\\\uDC00-\\\\uDC08\\\\uDC0A-\\\\uDC2E\\\\uDC40\\\\uDC72-\\\\uDC8F\\\\uDD00-\\\\uDD06\\\\uDD08\\\\uDD09\\\\uDD0B-\\\\uDD30\\\\uDD46]|\\\\uD808[\\\\uDC00-\\\\uDF99]|\\\\uD809[\\\\uDC00-\\\\uDC6E\\\\uDC80-\\\\uDD43]|[\\\\uD80C\\\\uD81C-\\\\uD820\\\\uD840-\\\\uD868\\\\uD86A-\\\\uD86C\\\\uD86F-\\\\uD872\\\\uD874-\\\\uD879][\\\\uDC00-\\\\uDFFF]|\\\\uD80D[\\\\uDC00-\\\\uDC2E]|\\\\uD811[\\\\uDC00-\\\\uDE46]|\\\\uD81A[\\\\uDC00-\\\\uDE38\\\\uDE40-\\\\uDE5E\\\\uDED0-\\\\uDEED\\\\uDF00-\\\\uDF2F\\\\uDF40-\\\\uDF43\\\\uDF63-\\\\uDF77\\\\uDF7D-\\\\uDF8F]|\\\\uD81B[\\\\uDF00-\\\\uDF44\\\\uDF50\\\\uDF93-\\\\uDF9F\\\\uDFE0\\\\uDFE1]|\\\\uD821[\\\\uDC00-\\\\uDFEC]|\\\\uD822[\\\\uDC00-\\\\uDEF2]|\\\\uD82C[\\\\uDC00-\\\\uDD1E\\\\uDD70-\\\\uDEFB]|\\\\uD82F[\\\\uDC00-\\\\uDC6A\\\\uDC70-\\\\uDC7C\\\\uDC80-\\\\uDC88\\\\uDC90-\\\\uDC99]|\\\\uD835[\\\\uDC00-\\\\uDC54\\\\uDC56-\\\\uDC9C\\\\uDC9E\\\\uDC9F\\\\uDCA2\\\\uDCA5\\\\uDCA6\\\\uDCA9-\\\\uDCAC\\\\uDCAE-\\\\uDCB9\\\\uDCBB\\\\uDCBD-\\\\uDCC3\\\\uDCC5-\\\\uDD05\\\\uDD07-\\\\uDD0A\\\\uDD0D-\\\\uDD14\\\\uDD16-\\\\uDD1C\\\\uDD1E-\\\\uDD39\\\\uDD3B-\\\\uDD3E\\\\uDD40-\\\\uDD44\\\\uDD46\\\\uDD4A-\\\\uDD50\\\\uDD52-\\\\uDEA5\\\\uDEA8-\\\\uDEC0\\\\uDEC2-\\\\uDEDA\\\\uDEDC-\\\\uDEFA\\\\uDEFC-\\\\uDF14\\\\uDF16-\\\\uDF34\\\\uDF36-\\\\uDF4E\\\\uDF50-\\\\uDF6E\\\\uDF70-\\\\uDF88\\\\uDF8A-\\\\uDFA8\\\\uDFAA-\\\\uDFC2\\\\uDFC4-\\\\uDFCB]|\\\\uD83A[\\\\uDC00-\\\\uDCC4\\\\uDD00-\\\\uDD43]|\\\\uD83B[\\\\uDE00-\\\\uDE03\\\\uDE05-\\\\uDE1F\\\\uDE21\\\\uDE22\\\\uDE24\\\\uDE27\\\\uDE29-\\\\uDE32\\\\uDE34-\\\\uDE37\\\\uDE39\\\\uDE3B\\\\uDE42\\\\uDE47\\\\uDE49\\\\uDE4B\\\\uDE4D-\\\\uDE4F\\\\uDE51\\\\uDE52\\\\uDE54\\\\uDE57\\\\uDE59\\\\uDE5B\\\\uDE5D\\\\uDE5F\\\\uDE61\\\\uDE62\\\\uDE64\\\\uDE67-\\\\uDE6A\\\\uDE6C-\\\\uDE72\\\\uDE74-\\\\uDE77\\\\uDE79-\\\\uDE7C\\\\uDE7E\\\\uDE80-\\\\uDE89\\\\uDE8B-\\\\uDE9B\\\\uDEA1-\\\\uDEA3\\\\uDEA5-\\\\uDEA9\\\\uDEAB-\\\\uDEBB]|\\\\uD869[\\\\uDC00-\\\\uDED6\\\\uDF00-\\\\uDFFF]|\\\\uD86D[\\\\uDC00-\\\\uDF34\\\\uDF40-\\\\uDFFF]|\\\\uD86E[\\\\uDC00-\\\\uDC1D\\\\uDC20-\\\\uDFFF]|\\\\uD873[\\\\uDC00-\\\\uDEA1\\\\uDEB0-\\\\uDFFF]|\\\\uD87A[\\\\uDC00-\\\\uDFE0]|\\\\uD87E[\\\\uDC00-\\\\uDE1D]/;
    module2.exports.ID_Continue = /[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u0860-\\\\u086A\\\\u08A0-\\\\u08B4\\\\u08B6-\\\\u08BD\\\\u08D4-\\\\u08E1\\\\u08E3-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u09FC\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0AF9-\\\\u0AFF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58-\\\\u0C5A\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C80-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D00-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D54-\\\\u0D57\\\\u0D5F-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F5\\\\u13F8-\\\\u13FD\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1C80-\\\\u1C88\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF9\\\\u1D00-\\\\u1DF9\\\\u1DFB-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312E\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FEA\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA7AE\\\\uA7B0-\\\\uA7B7\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C5\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA8FD\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB65\\\\uAB70-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2F\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]|\\\\uD800[\\\\uDC00-\\\\uDC0B\\\\uDC0D-\\\\uDC26\\\\uDC28-\\\\uDC3A\\\\uDC3C\\\\uDC3D\\\\uDC3F-\\\\uDC4D\\\\uDC50-\\\\uDC5D\\\\uDC80-\\\\uDCFA\\\\uDD40-\\\\uDD74\\\\uDDFD\\\\uDE80-\\\\uDE9C\\\\uDEA0-\\\\uDED0\\\\uDEE0\\\\uDF00-\\\\uDF1F\\\\uDF2D-\\\\uDF4A\\\\uDF50-\\\\uDF7A\\\\uDF80-\\\\uDF9D\\\\uDFA0-\\\\uDFC3\\\\uDFC8-\\\\uDFCF\\\\uDFD1-\\\\uDFD5]|\\\\uD801[\\\\uDC00-\\\\uDC9D\\\\uDCA0-\\\\uDCA9\\\\uDCB0-\\\\uDCD3\\\\uDCD8-\\\\uDCFB\\\\uDD00-\\\\uDD27\\\\uDD30-\\\\uDD63\\\\uDE00-\\\\uDF36\\\\uDF40-\\\\uDF55\\\\uDF60-\\\\uDF67]|\\\\uD802[\\\\uDC00-\\\\uDC05\\\\uDC08\\\\uDC0A-\\\\uDC35\\\\uDC37\\\\uDC38\\\\uDC3C\\\\uDC3F-\\\\uDC55\\\\uDC60-\\\\uDC76\\\\uDC80-\\\\uDC9E\\\\uDCE0-\\\\uDCF2\\\\uDCF4\\\\uDCF5\\\\uDD00-\\\\uDD15\\\\uDD20-\\\\uDD39\\\\uDD80-\\\\uDDB7\\\\uDDBE\\\\uDDBF\\\\uDE00-\\\\uDE03\\\\uDE05\\\\uDE06\\\\uDE0C-\\\\uDE13\\\\uDE15-\\\\uDE17\\\\uDE19-\\\\uDE33\\\\uDE38-\\\\uDE3A\\\\uDE3F\\\\uDE60-\\\\uDE7C\\\\uDE80-\\\\uDE9C\\\\uDEC0-\\\\uDEC7\\\\uDEC9-\\\\uDEE6\\\\uDF00-\\\\uDF35\\\\uDF40-\\\\uDF55\\\\uDF60-\\\\uDF72\\\\uDF80-\\\\uDF91]|\\\\uD803[\\\\uDC00-\\\\uDC48\\\\uDC80-\\\\uDCB2\\\\uDCC0-\\\\uDCF2]|\\\\uD804[\\\\uDC00-\\\\uDC46\\\\uDC66-\\\\uDC6F\\\\uDC7F-\\\\uDCBA\\\\uDCD0-\\\\uDCE8\\\\uDCF0-\\\\uDCF9\\\\uDD00-\\\\uDD34\\\\uDD36-\\\\uDD3F\\\\uDD50-\\\\uDD73\\\\uDD76\\\\uDD80-\\\\uDDC4\\\\uDDCA-\\\\uDDCC\\\\uDDD0-\\\\uDDDA\\\\uDDDC\\\\uDE00-\\\\uDE11\\\\uDE13-\\\\uDE37\\\\uDE3E\\\\uDE80-\\\\uDE86\\\\uDE88\\\\uDE8A-\\\\uDE8D\\\\uDE8F-\\\\uDE9D\\\\uDE9F-\\\\uDEA8\\\\uDEB0-\\\\uDEEA\\\\uDEF0-\\\\uDEF9\\\\uDF00-\\\\uDF03\\\\uDF05-\\\\uDF0C\\\\uDF0F\\\\uDF10\\\\uDF13-\\\\uDF28\\\\uDF2A-\\\\uDF30\\\\uDF32\\\\uDF33\\\\uDF35-\\\\uDF39\\\\uDF3C-\\\\uDF44\\\\uDF47\\\\uDF48\\\\uDF4B-\\\\uDF4D\\\\uDF50\\\\uDF57\\\\uDF5D-\\\\uDF63\\\\uDF66-\\\\uDF6C\\\\uDF70-\\\\uDF74]|\\\\uD805[\\\\uDC00-\\\\uDC4A\\\\uDC50-\\\\uDC59\\\\uDC80-\\\\uDCC5\\\\uDCC7\\\\uDCD0-\\\\uDCD9\\\\uDD80-\\\\uDDB5\\\\uDDB8-\\\\uDDC0\\\\uDDD8-\\\\uDDDD\\\\uDE00-\\\\uDE40\\\\uDE44\\\\uDE50-\\\\uDE59\\\\uDE80-\\\\uDEB7\\\\uDEC0-\\\\uDEC9\\\\uDF00-\\\\uDF19\\\\uDF1D-\\\\uDF2B\\\\uDF30-\\\\uDF39]|\\\\uD806[\\\\uDCA0-\\\\uDCE9\\\\uDCFF\\\\uDE00-\\\\uDE3E\\\\uDE47\\\\uDE50-\\\\uDE83\\\\uDE86-\\\\uDE99\\\\uDEC0-\\\\uDEF8]|\\\\uD807[\\\\uDC00-\\\\uDC08\\\\uDC0A-\\\\uDC36\\\\uDC38-\\\\uDC40\\\\uDC50-\\\\uDC59\\\\uDC72-\\\\uDC8F\\\\uDC92-\\\\uDCA7\\\\uDCA9-\\\\uDCB6\\\\uDD00-\\\\uDD06\\\\uDD08\\\\uDD09\\\\uDD0B-\\\\uDD36\\\\uDD3A\\\\uDD3C\\\\uDD3D\\\\uDD3F-\\\\uDD47\\\\uDD50-\\\\uDD59]|\\\\uD808[\\\\uDC00-\\\\uDF99]|\\\\uD809[\\\\uDC00-\\\\uDC6E\\\\uDC80-\\\\uDD43]|[\\\\uD80C\\\\uD81C-\\\\uD820\\\\uD840-\\\\uD868\\\\uD86A-\\\\uD86C\\\\uD86F-\\\\uD872\\\\uD874-\\\\uD879][\\\\uDC00-\\\\uDFFF]|\\\\uD80D[\\\\uDC00-\\\\uDC2E]|\\\\uD811[\\\\uDC00-\\\\uDE46]|\\\\uD81A[\\\\uDC00-\\\\uDE38\\\\uDE40-\\\\uDE5E\\\\uDE60-\\\\uDE69\\\\uDED0-\\\\uDEED\\\\uDEF0-\\\\uDEF4\\\\uDF00-\\\\uDF36\\\\uDF40-\\\\uDF43\\\\uDF50-\\\\uDF59\\\\uDF63-\\\\uDF77\\\\uDF7D-\\\\uDF8F]|\\\\uD81B[\\\\uDF00-\\\\uDF44\\\\uDF50-\\\\uDF7E\\\\uDF8F-\\\\uDF9F\\\\uDFE0\\\\uDFE1]|\\\\uD821[\\\\uDC00-\\\\uDFEC]|\\\\uD822[\\\\uDC00-\\\\uDEF2]|\\\\uD82C[\\\\uDC00-\\\\uDD1E\\\\uDD70-\\\\uDEFB]|\\\\uD82F[\\\\uDC00-\\\\uDC6A\\\\uDC70-\\\\uDC7C\\\\uDC80-\\\\uDC88\\\\uDC90-\\\\uDC99\\\\uDC9D\\\\uDC9E]|\\\\uD834[\\\\uDD65-\\\\uDD69\\\\uDD6D-\\\\uDD72\\\\uDD7B-\\\\uDD82\\\\uDD85-\\\\uDD8B\\\\uDDAA-\\\\uDDAD\\\\uDE42-\\\\uDE44]|\\\\uD835[\\\\uDC00-\\\\uDC54\\\\uDC56-\\\\uDC9C\\\\uDC9E\\\\uDC9F\\\\uDCA2\\\\uDCA5\\\\uDCA6\\\\uDCA9-\\\\uDCAC\\\\uDCAE-\\\\uDCB9\\\\uDCBB\\\\uDCBD-\\\\uDCC3\\\\uDCC5-\\\\uDD05\\\\uDD07-\\\\uDD0A\\\\uDD0D-\\\\uDD14\\\\uDD16-\\\\uDD1C\\\\uDD1E-\\\\uDD39\\\\uDD3B-\\\\uDD3E\\\\uDD40-\\\\uDD44\\\\uDD46\\\\uDD4A-\\\\uDD50\\\\uDD52-\\\\uDEA5\\\\uDEA8-\\\\uDEC0\\\\uDEC2-\\\\uDEDA\\\\uDEDC-\\\\uDEFA\\\\uDEFC-\\\\uDF14\\\\uDF16-\\\\uDF34\\\\uDF36-\\\\uDF4E\\\\uDF50-\\\\uDF6E\\\\uDF70-\\\\uDF88\\\\uDF8A-\\\\uDFA8\\\\uDFAA-\\\\uDFC2\\\\uDFC4-\\\\uDFCB\\\\uDFCE-\\\\uDFFF]|\\\\uD836[\\\\uDE00-\\\\uDE36\\\\uDE3B-\\\\uDE6C\\\\uDE75\\\\uDE84\\\\uDE9B-\\\\uDE9F\\\\uDEA1-\\\\uDEAF]|\\\\uD838[\\\\uDC00-\\\\uDC06\\\\uDC08-\\\\uDC18\\\\uDC1B-\\\\uDC21\\\\uDC23\\\\uDC24\\\\uDC26-\\\\uDC2A]|\\\\uD83A[\\\\uDC00-\\\\uDCC4\\\\uDCD0-\\\\uDCD6\\\\uDD00-\\\\uDD4A\\\\uDD50-\\\\uDD59]|\\\\uD83B[\\\\uDE00-\\\\uDE03\\\\uDE05-\\\\uDE1F\\\\uDE21\\\\uDE22\\\\uDE24\\\\uDE27\\\\uDE29-\\\\uDE32\\\\uDE34-\\\\uDE37\\\\uDE39\\\\uDE3B\\\\uDE42\\\\uDE47\\\\uDE49\\\\uDE4B\\\\uDE4D-\\\\uDE4F\\\\uDE51\\\\uDE52\\\\uDE54\\\\uDE57\\\\uDE59\\\\uDE5B\\\\uDE5D\\\\uDE5F\\\\uDE61\\\\uDE62\\\\uDE64\\\\uDE67-\\\\uDE6A\\\\uDE6C-\\\\uDE72\\\\uDE74-\\\\uDE77\\\\uDE79-\\\\uDE7C\\\\uDE7E\\\\uDE80-\\\\uDE89\\\\uDE8B-\\\\uDE9B\\\\uDEA1-\\\\uDEA3\\\\uDEA5-\\\\uDEA9\\\\uDEAB-\\\\uDEBB]|\\\\uD869[\\\\uDC00-\\\\uDED6\\\\uDF00-\\\\uDFFF]|\\\\uD86D[\\\\uDC00-\\\\uDF34\\\\uDF40-\\\\uDFFF]|\\\\uD86E[\\\\uDC00-\\\\uDC1D\\\\uDC20-\\\\uDFFF]|\\\\uD873[\\\\uDC00-\\\\uDEA1\\\\uDEB0-\\\\uDFFF]|\\\\uD87A[\\\\uDC00-\\\\uDFE0]|\\\\uD87E[\\\\uDC00-\\\\uDE1D]|\\\\uDB40[\\\\uDD00-\\\\uDDEF]/;
  }
});

// node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/util.js
var require_util3 = __commonJS({
  \\"node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/util.js\\"(exports, module2) {
    var unicode = require_unicode();
    module2.exports = {
      isSpaceSeparator(c) {
        return typeof c === \\"string\\" && unicode.Space_Separator.test(c);
      },
      isIdStartChar(c) {
        return typeof c === \\"string\\" && (c >= \\"a\\" && c <= \\"z\\" || c >= \\"A\\" && c <= \\"Z\\" || c === \\"$\\" || c === \\"_\\" || unicode.ID_Start.test(c));
      },
      isIdContinueChar(c) {
        return typeof c === \\"string\\" && (c >= \\"a\\" && c <= \\"z\\" || c >= \\"A\\" && c <= \\"Z\\" || c >= \\"0\\" && c <= \\"9\\" || c === \\"$\\" || c === \\"_\\" || c === \\"\\\\u200C\\" || c === \\"\\\\u200D\\" || unicode.ID_Continue.test(c));
      },
      isDigit(c) {
        return typeof c === \\"string\\" && /[0-9]/.test(c);
      },
      isHexDigit(c) {
        return typeof c === \\"string\\" && /[0-9A-Fa-f]/.test(c);
      }
    };
  }
});

// node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/parse.js
var require_parse2 = __commonJS({
  \\"node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/parse.js\\"(exports, module2) {
    var util = require_util3();
    var source;
    var parseState;
    var stack;
    var pos;
    var line;
    var column;
    var token;
    var key;
    var root;
    module2.exports = function parse(text, reviver) {
      source = String(text);
      parseState = \\"start\\";
      stack = [];
      pos = 0;
      line = 1;
      column = 0;
      token = void 0;
      key = void 0;
      root = void 0;
      do {
        token = lex();
        parseStates[parseState]();
      } while (token.type !== \\"eof\\");
      if (typeof reviver === \\"function\\") {
        return internalize({ \\"\\": root }, \\"\\", reviver);
      }
      return root;
    };
    function internalize(holder, name, reviver) {
      const value = holder[name];
      if (value != null && typeof value === \\"object\\") {
        for (const key2 in value) {
          const replacement = internalize(value, key2, reviver);
          if (replacement === void 0) {
            delete value[key2];
          } else {
            value[key2] = replacement;
          }
        }
      }
      return reviver.call(holder, name, value);
    }
    var lexState;
    var buffer;
    var doubleQuote;
    var sign;
    var c;
    function lex() {
      lexState = \\"default\\";
      buffer = \\"\\";
      doubleQuote = false;
      sign = 1;
      for (; ; ) {
        c = peek();
        const token2 = lexStates[lexState]();
        if (token2) {
          return token2;
        }
      }
    }
    function peek() {
      if (source[pos]) {
        return String.fromCodePoint(source.codePointAt(pos));
      }
    }
    function read() {
      const c2 = peek();
      if (c2 === \\"\\\\n\\") {
        line++;
        column = 0;
      } else if (c2) {
        column += c2.length;
      } else {
        column++;
      }
      if (c2) {
        pos += c2.length;
      }
      return c2;
    }
    var lexStates = {
      default() {
        switch (c) {
          case \\"	\\":
          case \\"\\\\v\\":
          case \\"\\\\f\\":
          case \\" \\":
          case \\"\\\\xA0\\":
          case \\"\\\\uFEFF\\":
          case \\"\\\\n\\":
          case \\"\\\\r\\":
          case \\"\\\\u2028\\":
          case \\"\\\\u2029\\":
            read();
            return;
          case \\"/\\":
            read();
            lexState = \\"comment\\";
            return;
          case void 0:
            read();
            return newToken(\\"eof\\");
        }
        if (util.isSpaceSeparator(c)) {
          read();
          return;
        }
        return lexStates[parseState]();
      },
      comment() {
        switch (c) {
          case \\"*\\":
            read();
            lexState = \\"multiLineComment\\";
            return;
          case \\"/\\":
            read();
            lexState = \\"singleLineComment\\";
            return;
        }
        throw invalidChar(read());
      },
      multiLineComment() {
        switch (c) {
          case \\"*\\":
            read();
            lexState = \\"multiLineCommentAsterisk\\";
            return;
          case void 0:
            throw invalidChar(read());
        }
        read();
      },
      multiLineCommentAsterisk() {
        switch (c) {
          case \\"*\\":
            read();
            return;
          case \\"/\\":
            read();
            lexState = \\"default\\";
            return;
          case void 0:
            throw invalidChar(read());
        }
        read();
        lexState = \\"multiLineComment\\";
      },
      singleLineComment() {
        switch (c) {
          case \\"\\\\n\\":
          case \\"\\\\r\\":
          case \\"\\\\u2028\\":
          case \\"\\\\u2029\\":
            read();
            lexState = \\"default\\";
            return;
          case void 0:
            read();
            return newToken(\\"eof\\");
        }
        read();
      },
      value() {
        switch (c) {
          case \\"{\\":
          case \\"[\\":
            return newToken(\\"punctuator\\", read());
          case \\"n\\":
            read();
            literal(\\"ull\\");
            return newToken(\\"null\\", null);
          case \\"t\\":
            read();
            literal(\\"rue\\");
            return newToken(\\"boolean\\", true);
          case \\"f\\":
            read();
            literal(\\"alse\\");
            return newToken(\\"boolean\\", false);
          case \\"-\\":
          case \\"+\\":
            if (read() === \\"-\\") {
              sign = -1;
            }
            lexState = \\"sign\\";
            return;
          case \\".\\":
            buffer = read();
            lexState = \\"decimalPointLeading\\";
            return;
          case \\"0\\":
            buffer = read();
            lexState = \\"zero\\";
            return;
          case \\"1\\":
          case \\"2\\":
          case \\"3\\":
          case \\"4\\":
          case \\"5\\":
          case \\"6\\":
          case \\"7\\":
          case \\"8\\":
          case \\"9\\":
            buffer = read();
            lexState = \\"decimalInteger\\";
            return;
          case \\"I\\":
            read();
            literal(\\"nfinity\\");
            return newToken(\\"numeric\\", Infinity);
          case \\"N\\":
            read();
            literal(\\"aN\\");
            return newToken(\\"numeric\\", NaN);
          case '\\"':
          case \\"'\\":
            doubleQuote = read() === '\\"';
            buffer = \\"\\";
            lexState = \\"string\\";
            return;
        }
        throw invalidChar(read());
      },
      identifierNameStartEscape() {
        if (c !== \\"u\\") {
          throw invalidChar(read());
        }
        read();
        const u = unicodeEscape();
        switch (u) {
          case \\"$\\":
          case \\"_\\":
            break;
          default:
            if (!util.isIdStartChar(u)) {
              throw invalidIdentifier();
            }
            break;
        }
        buffer += u;
        lexState = \\"identifierName\\";
      },
      identifierName() {
        switch (c) {
          case \\"$\\":
          case \\"_\\":
          case \\"\\\\u200C\\":
          case \\"\\\\u200D\\":
            buffer += read();
            return;
          case \\"\\\\\\\\\\":
            read();
            lexState = \\"identifierNameEscape\\";
            return;
        }
        if (util.isIdContinueChar(c)) {
          buffer += read();
          return;
        }
        return newToken(\\"identifier\\", buffer);
      },
      identifierNameEscape() {
        if (c !== \\"u\\") {
          throw invalidChar(read());
        }
        read();
        const u = unicodeEscape();
        switch (u) {
          case \\"$\\":
          case \\"_\\":
          case \\"\\\\u200C\\":
          case \\"\\\\u200D\\":
            break;
          default:
            if (!util.isIdContinueChar(u)) {
              throw invalidIdentifier();
            }
            break;
        }
        buffer += u;
        lexState = \\"identifierName\\";
      },
      sign() {
        switch (c) {
          case \\".\\":
            buffer = read();
            lexState = \\"decimalPointLeading\\";
            return;
          case \\"0\\":
            buffer = read();
            lexState = \\"zero\\";
            return;
          case \\"1\\":
          case \\"2\\":
          case \\"3\\":
          case \\"4\\":
          case \\"5\\":
          case \\"6\\":
          case \\"7\\":
          case \\"8\\":
          case \\"9\\":
            buffer = read();
            lexState = \\"decimalInteger\\";
            return;
          case \\"I\\":
            read();
            literal(\\"nfinity\\");
            return newToken(\\"numeric\\", sign * Infinity);
          case \\"N\\":
            read();
            literal(\\"aN\\");
            return newToken(\\"numeric\\", NaN);
        }
        throw invalidChar(read());
      },
      zero() {
        switch (c) {
          case \\".\\":
            buffer += read();
            lexState = \\"decimalPoint\\";
            return;
          case \\"e\\":
          case \\"E\\":
            buffer += read();
            lexState = \\"decimalExponent\\";
            return;
          case \\"x\\":
          case \\"X\\":
            buffer += read();
            lexState = \\"hexadecimal\\";
            return;
        }
        return newToken(\\"numeric\\", sign * 0);
      },
      decimalInteger() {
        switch (c) {
          case \\".\\":
            buffer += read();
            lexState = \\"decimalPoint\\";
            return;
          case \\"e\\":
          case \\"E\\":
            buffer += read();
            lexState = \\"decimalExponent\\";
            return;
        }
        if (util.isDigit(c)) {
          buffer += read();
          return;
        }
        return newToken(\\"numeric\\", sign * Number(buffer));
      },
      decimalPointLeading() {
        if (util.isDigit(c)) {
          buffer += read();
          lexState = \\"decimalFraction\\";
          return;
        }
        throw invalidChar(read());
      },
      decimalPoint() {
        switch (c) {
          case \\"e\\":
          case \\"E\\":
            buffer += read();
            lexState = \\"decimalExponent\\";
            return;
        }
        if (util.isDigit(c)) {
          buffer += read();
          lexState = \\"decimalFraction\\";
          return;
        }
        return newToken(\\"numeric\\", sign * Number(buffer));
      },
      decimalFraction() {
        switch (c) {
          case \\"e\\":
          case \\"E\\":
            buffer += read();
            lexState = \\"decimalExponent\\";
            return;
        }
        if (util.isDigit(c)) {
          buffer += read();
          return;
        }
        return newToken(\\"numeric\\", sign * Number(buffer));
      },
      decimalExponent() {
        switch (c) {
          case \\"+\\":
          case \\"-\\":
            buffer += read();
            lexState = \\"decimalExponentSign\\";
            return;
        }
        if (util.isDigit(c)) {
          buffer += read();
          lexState = \\"decimalExponentInteger\\";
          return;
        }
        throw invalidChar(read());
      },
      decimalExponentSign() {
        if (util.isDigit(c)) {
          buffer += read();
          lexState = \\"decimalExponentInteger\\";
          return;
        }
        throw invalidChar(read());
      },
      decimalExponentInteger() {
        if (util.isDigit(c)) {
          buffer += read();
          return;
        }
        return newToken(\\"numeric\\", sign * Number(buffer));
      },
      hexadecimal() {
        if (util.isHexDigit(c)) {
          buffer += read();
          lexState = \\"hexadecimalInteger\\";
          return;
        }
        throw invalidChar(read());
      },
      hexadecimalInteger() {
        if (util.isHexDigit(c)) {
          buffer += read();
          return;
        }
        return newToken(\\"numeric\\", sign * Number(buffer));
      },
      string() {
        switch (c) {
          case \\"\\\\\\\\\\":
            read();
            buffer += escape();
            return;
          case '\\"':
            if (doubleQuote) {
              read();
              return newToken(\\"string\\", buffer);
            }
            buffer += read();
            return;
          case \\"'\\":
            if (!doubleQuote) {
              read();
              return newToken(\\"string\\", buffer);
            }
            buffer += read();
            return;
          case \\"\\\\n\\":
          case \\"\\\\r\\":
            throw invalidChar(read());
          case \\"\\\\u2028\\":
          case \\"\\\\u2029\\":
            separatorChar(c);
            break;
          case void 0:
            throw invalidChar(read());
        }
        buffer += read();
      },
      start() {
        switch (c) {
          case \\"{\\":
          case \\"[\\":
            return newToken(\\"punctuator\\", read());
        }
        lexState = \\"value\\";
      },
      beforePropertyName() {
        switch (c) {
          case \\"$\\":
          case \\"_\\":
            buffer = read();
            lexState = \\"identifierName\\";
            return;
          case \\"\\\\\\\\\\":
            read();
            lexState = \\"identifierNameStartEscape\\";
            return;
          case \\"}\\":
            return newToken(\\"punctuator\\", read());
          case '\\"':
          case \\"'\\":
            doubleQuote = read() === '\\"';
            lexState = \\"string\\";
            return;
        }
        if (util.isIdStartChar(c)) {
          buffer += read();
          lexState = \\"identifierName\\";
          return;
        }
        throw invalidChar(read());
      },
      afterPropertyName() {
        if (c === \\":\\") {
          return newToken(\\"punctuator\\", read());
        }
        throw invalidChar(read());
      },
      beforePropertyValue() {
        lexState = \\"value\\";
      },
      afterPropertyValue() {
        switch (c) {
          case \\",\\":
          case \\"}\\":
            return newToken(\\"punctuator\\", read());
        }
        throw invalidChar(read());
      },
      beforeArrayValue() {
        if (c === \\"]\\") {
          return newToken(\\"punctuator\\", read());
        }
        lexState = \\"value\\";
      },
      afterArrayValue() {
        switch (c) {
          case \\",\\":
          case \\"]\\":
            return newToken(\\"punctuator\\", read());
        }
        throw invalidChar(read());
      },
      end() {
        throw invalidChar(read());
      }
    };
    function newToken(type, value) {
      return {
        type,
        value,
        line,
        column
      };
    }
    function literal(s) {
      for (const c2 of s) {
        const p = peek();
        if (p !== c2) {
          throw invalidChar(read());
        }
        read();
      }
    }
    function escape() {
      const c2 = peek();
      switch (c2) {
        case \\"b\\":
          read();
          return \\"\\\\b\\";
        case \\"f\\":
          read();
          return \\"\\\\f\\";
        case \\"n\\":
          read();
          return \\"\\\\n\\";
        case \\"r\\":
          read();
          return \\"\\\\r\\";
        case \\"t\\":
          read();
          return \\"	\\";
        case \\"v\\":
          read();
          return \\"\\\\v\\";
        case \\"0\\":
          read();
          if (util.isDigit(peek())) {
            throw invalidChar(read());
          }
          return \\"\\\\0\\";
        case \\"x\\":
          read();
          return hexEscape();
        case \\"u\\":
          read();
          return unicodeEscape();
        case \\"\\\\n\\":
        case \\"\\\\u2028\\":
        case \\"\\\\u2029\\":
          read();
          return \\"\\";
        case \\"\\\\r\\":
          read();
          if (peek() === \\"\\\\n\\") {
            read();
          }
          return \\"\\";
        case \\"1\\":
        case \\"2\\":
        case \\"3\\":
        case \\"4\\":
        case \\"5\\":
        case \\"6\\":
        case \\"7\\":
        case \\"8\\":
        case \\"9\\":
          throw invalidChar(read());
        case void 0:
          throw invalidChar(read());
      }
      return read();
    }
    function hexEscape() {
      let buffer2 = \\"\\";
      let c2 = peek();
      if (!util.isHexDigit(c2)) {
        throw invalidChar(read());
      }
      buffer2 += read();
      c2 = peek();
      if (!util.isHexDigit(c2)) {
        throw invalidChar(read());
      }
      buffer2 += read();
      return String.fromCodePoint(parseInt(buffer2, 16));
    }
    function unicodeEscape() {
      let buffer2 = \\"\\";
      let count = 4;
      while (count-- > 0) {
        const c2 = peek();
        if (!util.isHexDigit(c2)) {
          throw invalidChar(read());
        }
        buffer2 += read();
      }
      return String.fromCodePoint(parseInt(buffer2, 16));
    }
    var parseStates = {
      start() {
        if (token.type === \\"eof\\") {
          throw invalidEOF();
        }
        push();
      },
      beforePropertyName() {
        switch (token.type) {
          case \\"identifier\\":
          case \\"string\\":
            key = token.value;
            parseState = \\"afterPropertyName\\";
            return;
          case \\"punctuator\\":
            pop();
            return;
          case \\"eof\\":
            throw invalidEOF();
        }
      },
      afterPropertyName() {
        if (token.type === \\"eof\\") {
          throw invalidEOF();
        }
        parseState = \\"beforePropertyValue\\";
      },
      beforePropertyValue() {
        if (token.type === \\"eof\\") {
          throw invalidEOF();
        }
        push();
      },
      beforeArrayValue() {
        if (token.type === \\"eof\\") {
          throw invalidEOF();
        }
        if (token.type === \\"punctuator\\" && token.value === \\"]\\") {
          pop();
          return;
        }
        push();
      },
      afterPropertyValue() {
        if (token.type === \\"eof\\") {
          throw invalidEOF();
        }
        switch (token.value) {
          case \\",\\":
            parseState = \\"beforePropertyName\\";
            return;
          case \\"}\\":
            pop();
        }
      },
      afterArrayValue() {
        if (token.type === \\"eof\\") {
          throw invalidEOF();
        }
        switch (token.value) {
          case \\",\\":
            parseState = \\"beforeArrayValue\\";
            return;
          case \\"]\\":
            pop();
        }
      },
      end() {
      }
    };
    function push() {
      let value;
      switch (token.type) {
        case \\"punctuator\\":
          switch (token.value) {
            case \\"{\\":
              value = {};
              break;
            case \\"[\\":
              value = [];
              break;
          }
          break;
        case \\"null\\":
        case \\"boolean\\":
        case \\"numeric\\":
        case \\"string\\":
          value = token.value;
          break;
      }
      if (root === void 0) {
        root = value;
      } else {
        const parent = stack[stack.length - 1];
        if (Array.isArray(parent)) {
          parent.push(value);
        } else {
          parent[key] = value;
        }
      }
      if (value !== null && typeof value === \\"object\\") {
        stack.push(value);
        if (Array.isArray(value)) {
          parseState = \\"beforeArrayValue\\";
        } else {
          parseState = \\"beforePropertyName\\";
        }
      } else {
        const current = stack[stack.length - 1];
        if (current == null) {
          parseState = \\"end\\";
        } else if (Array.isArray(current)) {
          parseState = \\"afterArrayValue\\";
        } else {
          parseState = \\"afterPropertyValue\\";
        }
      }
    }
    function pop() {
      stack.pop();
      const current = stack[stack.length - 1];
      if (current == null) {
        parseState = \\"end\\";
      } else if (Array.isArray(current)) {
        parseState = \\"afterArrayValue\\";
      } else {
        parseState = \\"afterPropertyValue\\";
      }
    }
    function invalidChar(c2) {
      if (c2 === void 0) {
        return syntaxError(\`JSON5: invalid end of input at \${line}:\${column}\`);
      }
      return syntaxError(\`JSON5: invalid character '\${formatChar(c2)}' at \${line}:\${column}\`);
    }
    function invalidEOF() {
      return syntaxError(\`JSON5: invalid end of input at \${line}:\${column}\`);
    }
    function invalidIdentifier() {
      column -= 5;
      return syntaxError(\`JSON5: invalid identifier character at \${line}:\${column}\`);
    }
    function separatorChar(c2) {
      console.warn(\`JSON5: '\${formatChar(c2)}' in strings is not valid ECMAScript; consider escaping\`);
    }
    function formatChar(c2) {
      const replacements = {
        \\"'\\": \\"\\\\\\\\'\\",
        '\\"': '\\\\\\\\\\"',
        \\"\\\\\\\\\\": \\"\\\\\\\\\\\\\\\\\\",
        \\"\\\\b\\": \\"\\\\\\\\b\\",
        \\"\\\\f\\": \\"\\\\\\\\f\\",
        \\"\\\\n\\": \\"\\\\\\\\n\\",
        \\"\\\\r\\": \\"\\\\\\\\r\\",
        \\"	\\": \\"\\\\\\\\t\\",
        \\"\\\\v\\": \\"\\\\\\\\v\\",
        \\"\\\\0\\": \\"\\\\\\\\0\\",
        \\"\\\\u2028\\": \\"\\\\\\\\u2028\\",
        \\"\\\\u2029\\": \\"\\\\\\\\u2029\\"
      };
      if (replacements[c2]) {
        return replacements[c2];
      }
      if (c2 < \\" \\") {
        const hexString = c2.charCodeAt(0).toString(16);
        return \\"\\\\\\\\x\\" + (\\"00\\" + hexString).substring(hexString.length);
      }
      return c2;
    }
    function syntaxError(message) {
      const err = new SyntaxError(message);
      err.lineNumber = line;
      err.columnNumber = column;
      return err;
    }
  }
});

// node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/stringify.js
var require_stringify = __commonJS({
  \\"node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/stringify.js\\"(exports, module2) {
    var util = require_util3();
    module2.exports = function stringify(value, replacer, space) {
      const stack = [];
      let indent = \\"\\";
      let propertyList;
      let replacerFunc;
      let gap = \\"\\";
      let quote;
      if (replacer != null && typeof replacer === \\"object\\" && !Array.isArray(replacer)) {
        space = replacer.space;
        quote = replacer.quote;
        replacer = replacer.replacer;
      }
      if (typeof replacer === \\"function\\") {
        replacerFunc = replacer;
      } else if (Array.isArray(replacer)) {
        propertyList = [];
        for (const v of replacer) {
          let item;
          if (typeof v === \\"string\\") {
            item = v;
          } else if (typeof v === \\"number\\" || v instanceof String || v instanceof Number) {
            item = String(v);
          }
          if (item !== void 0 && propertyList.indexOf(item) < 0) {
            propertyList.push(item);
          }
        }
      }
      if (space instanceof Number) {
        space = Number(space);
      } else if (space instanceof String) {
        space = String(space);
      }
      if (typeof space === \\"number\\") {
        if (space > 0) {
          space = Math.min(10, Math.floor(space));
          gap = \\"          \\".substr(0, space);
        }
      } else if (typeof space === \\"string\\") {
        gap = space.substr(0, 10);
      }
      return serializeProperty(\\"\\", { \\"\\": value });
      function serializeProperty(key, holder) {
        let value2 = holder[key];
        if (value2 != null) {
          if (typeof value2.toJSON5 === \\"function\\") {
            value2 = value2.toJSON5(key);
          } else if (typeof value2.toJSON === \\"function\\") {
            value2 = value2.toJSON(key);
          }
        }
        if (replacerFunc) {
          value2 = replacerFunc.call(holder, key, value2);
        }
        if (value2 instanceof Number) {
          value2 = Number(value2);
        } else if (value2 instanceof String) {
          value2 = String(value2);
        } else if (value2 instanceof Boolean) {
          value2 = value2.valueOf();
        }
        switch (value2) {
          case null:
            return \\"null\\";
          case true:
            return \\"true\\";
          case false:
            return \\"false\\";
        }
        if (typeof value2 === \\"string\\") {
          return quoteString(value2, false);
        }
        if (typeof value2 === \\"number\\") {
          return String(value2);
        }
        if (typeof value2 === \\"object\\") {
          return Array.isArray(value2) ? serializeArray(value2) : serializeObject(value2);
        }
        return void 0;
      }
      function quoteString(value2) {
        const quotes = {
          \\"'\\": 0.1,
          '\\"': 0.2
        };
        const replacements = {
          \\"'\\": \\"\\\\\\\\'\\",
          '\\"': '\\\\\\\\\\"',
          \\"\\\\\\\\\\": \\"\\\\\\\\\\\\\\\\\\",
          \\"\\\\b\\": \\"\\\\\\\\b\\",
          \\"\\\\f\\": \\"\\\\\\\\f\\",
          \\"\\\\n\\": \\"\\\\\\\\n\\",
          \\"\\\\r\\": \\"\\\\\\\\r\\",
          \\"	\\": \\"\\\\\\\\t\\",
          \\"\\\\v\\": \\"\\\\\\\\v\\",
          \\"\\\\0\\": \\"\\\\\\\\0\\",
          \\"\\\\u2028\\": \\"\\\\\\\\u2028\\",
          \\"\\\\u2029\\": \\"\\\\\\\\u2029\\"
        };
        let product = \\"\\";
        for (let i = 0; i < value2.length; i++) {
          const c = value2[i];
          switch (c) {
            case \\"'\\":
            case '\\"':
              quotes[c]++;
              product += c;
              continue;
            case \\"\\\\0\\":
              if (util.isDigit(value2[i + 1])) {
                product += \\"\\\\\\\\x00\\";
                continue;
              }
          }
          if (replacements[c]) {
            product += replacements[c];
            continue;
          }
          if (c < \\" \\") {
            let hexString = c.charCodeAt(0).toString(16);
            product += \\"\\\\\\\\x\\" + (\\"00\\" + hexString).substring(hexString.length);
            continue;
          }
          product += c;
        }
        const quoteChar = quote || Object.keys(quotes).reduce((a2, b) => quotes[a2] < quotes[b] ? a2 : b);
        product = product.replace(new RegExp(quoteChar, \\"g\\"), replacements[quoteChar]);
        return quoteChar + product + quoteChar;
      }
      function serializeObject(value2) {
        if (stack.indexOf(value2) >= 0) {
          throw TypeError(\\"Converting circular structure to JSON5\\");
        }
        stack.push(value2);
        let stepback = indent;
        indent = indent + gap;
        let keys = propertyList || Object.keys(value2);
        let partial = [];
        for (const key of keys) {
          const propertyString = serializeProperty(key, value2);
          if (propertyString !== void 0) {
            let member = serializeKey(key) + \\":\\";
            if (gap !== \\"\\") {
              member += \\" \\";
            }
            member += propertyString;
            partial.push(member);
          }
        }
        let final;
        if (partial.length === 0) {
          final = \\"{}\\";
        } else {
          let properties;
          if (gap === \\"\\") {
            properties = partial.join(\\",\\");
            final = \\"{\\" + properties + \\"}\\";
          } else {
            let separator = \\",\\\\n\\" + indent;
            properties = partial.join(separator);
            final = \\"{\\\\n\\" + indent + properties + \\",\\\\n\\" + stepback + \\"}\\";
          }
        }
        stack.pop();
        indent = stepback;
        return final;
      }
      function serializeKey(key) {
        if (key.length === 0) {
          return quoteString(key, true);
        }
        const firstChar = String.fromCodePoint(key.codePointAt(0));
        if (!util.isIdStartChar(firstChar)) {
          return quoteString(key, true);
        }
        for (let i = firstChar.length; i < key.length; i++) {
          if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {
            return quoteString(key, true);
          }
        }
        return key;
      }
      function serializeArray(value2) {
        if (stack.indexOf(value2) >= 0) {
          throw TypeError(\\"Converting circular structure to JSON5\\");
        }
        stack.push(value2);
        let stepback = indent;
        indent = indent + gap;
        let partial = [];
        for (let i = 0; i < value2.length; i++) {
          const propertyString = serializeProperty(String(i), value2);
          partial.push(propertyString !== void 0 ? propertyString : \\"null\\");
        }
        let final;
        if (partial.length === 0) {
          final = \\"[]\\";
        } else {
          if (gap === \\"\\") {
            let properties = partial.join(\\",\\");
            final = \\"[\\" + properties + \\"]\\";
          } else {
            let separator = \\",\\\\n\\" + indent;
            let properties = partial.join(separator);
            final = \\"[\\\\n\\" + indent + properties + \\",\\\\n\\" + stepback + \\"]\\";
          }
        }
        stack.pop();
        indent = stepback;
        return final;
      }
    };
  }
});

// node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/index.js
var require_lib18 = __commonJS({
  \\"node_modules/.pnpm/json5@2.2.0/node_modules/json5/lib/index.js\\"(exports, module2) {
    var parse = require_parse2();
    var stringify = require_stringify();
    var JSON5 = {
      parse,
      stringify
    };
    module2.exports = JSON5;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/cache-contexts.js
var require_cache_contexts = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/cache-contexts.js\\"() {
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/helpers/config-api.js
var require_config_api = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/helpers/config-api.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.makeConfigAPI = makeConfigAPI;
    exports.makePluginAPI = makePluginAPI;
    exports.makePresetAPI = makePresetAPI;
    function _semver() {
      const data = require_semver();
      _semver = function() {
        return data;
      };
      return data;
    }
    var _ = require_lib21();
    var _caching = require_caching();
    var Context = require_cache_contexts();
    function makeConfigAPI(cache) {
      const env = (value) => cache.using((data) => {
        if (typeof value === \\"undefined\\")
          return data.envName;
        if (typeof value === \\"function\\") {
          return (0, _caching.assertSimpleType)(value(data.envName));
        }
        if (!Array.isArray(value))
          value = [value];
        return value.some((entry) => {
          if (typeof entry !== \\"string\\") {
            throw new Error(\\"Unexpected non-string value\\");
          }
          return entry === data.envName;
        });
      });
      const caller = (cb) => cache.using((data) => (0, _caching.assertSimpleType)(cb(data.caller)));
      return {
        version: _.version,
        cache: cache.simple(),
        env,
        async: () => false,
        caller,
        assertVersion
      };
    }
    function makePresetAPI(cache) {
      const targets = () => JSON.parse(cache.using((data) => JSON.stringify(data.targets)));
      return Object.assign({}, makeConfigAPI(cache), {
        targets
      });
    }
    function makePluginAPI(cache) {
      const assumption = (name) => cache.using((data) => data.assumptions[name]);
      return Object.assign({}, makePresetAPI(cache), {
        assumption
      });
    }
    function assertVersion(range) {
      if (typeof range === \\"number\\") {
        if (!Number.isInteger(range)) {
          throw new Error(\\"Expected string or integer value.\\");
        }
        range = \`^\${range}.0.0-0\`;
      }
      if (typeof range !== \\"string\\") {
        throw new Error(\\"Expected string or integer value.\\");
      }
      if (_semver().satisfies(_.version, range))
        return;
      const limit = Error.stackTraceLimit;
      if (typeof limit === \\"number\\" && limit < 25) {
        Error.stackTraceLimit = 25;
      }
      const err = new Error(\`Requires Babel \\"\${range}\\", but was loaded with \\"\${_.version}\\". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention \\"@babel/core\\" or \\"babel-core\\" to see what is calling Babel.\`);
      if (typeof limit === \\"number\\") {
        Error.stackTraceLimit = limit;
      }
      throw Object.assign(err, {
        code: \\"BABEL_VERSION_UNSUPPORTED\\",
        version: _.version,
        range
      });
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/import.js
var require_import = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/import.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = import_;
    function import_(filepath) {
      return import(filepath);
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/module-types.js
var require_module_types = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/module-types.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = loadCjsOrMjsDefault;
    var _async = require_async();
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    function _url() {
      const data = require(\\"url\\");
      _url = function() {
        return data;
      };
      return data;
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\"next\\", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\"throw\\", err);
          }
          _next(void 0);
        });
      };
    }
    var import_;
    try {
      import_ = require_import().default;
    } catch (_unused) {
    }
    function* loadCjsOrMjsDefault(filepath, asyncError, fallbackToTranspiledModule = false) {
      switch (guessJSModuleType(filepath)) {
        case \\"cjs\\":
          return loadCjsDefault(filepath, fallbackToTranspiledModule);
        case \\"unknown\\":
          try {
            return loadCjsDefault(filepath, fallbackToTranspiledModule);
          } catch (e) {
            if (e.code !== \\"ERR_REQUIRE_ESM\\")
              throw e;
          }
        case \\"mjs\\":
          if (yield* (0, _async.isAsync)()) {
            return yield* (0, _async.waitFor)(loadMjsDefault(filepath));
          }
          throw new Error(asyncError);
      }
    }
    function guessJSModuleType(filename) {
      switch (_path().extname(filename)) {
        case \\".cjs\\":
          return \\"cjs\\";
        case \\".mjs\\":
          return \\"mjs\\";
        default:
          return \\"unknown\\";
      }
    }
    function loadCjsDefault(filepath, fallbackToTranspiledModule) {
      const module3 = require(filepath);
      return module3 != null && module3.__esModule ? module3.default || (fallbackToTranspiledModule ? module3 : void 0) : module3;
    }
    function loadMjsDefault(_x) {
      return _loadMjsDefault.apply(this, arguments);
    }
    function _loadMjsDefault() {
      _loadMjsDefault = _asyncToGenerator(function* (filepath) {
        if (!import_) {
          throw new Error(\\"Internal error: Native ECMAScript modules aren't supported by this platform.\\\\n\\");
        }
        const module3 = yield import_((0, _url().pathToFileURL)(filepath));
        return module3.default;
      });
      return _loadMjsDefault.apply(this, arguments);
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/pattern-to-regex.js
var require_pattern_to_regex = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/pattern-to-regex.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = pathToPattern;
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    var sep = \`\\\\\\\\\${_path().sep}\`;
    var endSep = \`(?:\${sep}|$)\`;
    var substitution = \`[^\${sep}]+\`;
    var starPat = \`(?:\${substitution}\${sep})\`;
    var starPatLast = \`(?:\${substitution}\${endSep})\`;
    var starStarPat = \`\${starPat}*?\`;
    var starStarPatLast = \`\${starPat}*?\${starPatLast}?\`;
    function escapeRegExp(string) {
      return string.replace(/[|\\\\\\\\{}()[\\\\]^$+*?.]/g, \\"\\\\\\\\$&\\");
    }
    function pathToPattern(pattern, dirname) {
      const parts = _path().resolve(dirname, pattern).split(_path().sep);
      return new RegExp([\\"^\\", ...parts.map((part, i) => {
        const last = i === parts.length - 1;
        if (part === \\"**\\")
          return last ? starStarPatLast : starStarPat;
        if (part === \\"*\\")
          return last ? starPatLast : starPat;
        if (part.indexOf(\\"*.\\") === 0) {
          return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);
        }
        return escapeRegExp(part) + (last ? endSep : sep);
      })].join(\\"\\"));
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/configuration.js
var require_configuration = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/configuration.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.ROOT_CONFIG_FILENAMES = void 0;
    exports.findConfigUpwards = findConfigUpwards;
    exports.findRelativeConfig = findRelativeConfig;
    exports.findRootConfig = findRootConfig;
    exports.loadConfig = loadConfig;
    exports.resolveShowConfigPath = resolveShowConfigPath;
    function _debug() {
      const data = require_src();
      _debug = function() {
        return data;
      };
      return data;
    }
    function _fs() {
      const data = require(\\"fs\\");
      _fs = function() {
        return data;
      };
      return data;
    }
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    function _json() {
      const data = require_lib18();
      _json = function() {
        return data;
      };
      return data;
    }
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _caching = require_caching();
    var _configApi = require_config_api();
    var _utils = require_utils2();
    var _moduleTypes = require_module_types();
    var _patternToRegex = require_pattern_to_regex();
    var fs = require_fs();
    var debug = _debug()(\\"babel:config:loading:files:configuration\\");
    var ROOT_CONFIG_FILENAMES = [\\"babel.config.js\\", \\"babel.config.cjs\\", \\"babel.config.mjs\\", \\"babel.config.json\\"];
    exports.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;
    var RELATIVE_CONFIG_FILENAMES = [\\".babelrc\\", \\".babelrc.js\\", \\".babelrc.cjs\\", \\".babelrc.mjs\\", \\".babelrc.json\\"];
    var BABELIGNORE_FILENAME = \\".babelignore\\";
    function findConfigUpwards(rootDir) {
      let dirname = rootDir;
      for (; ; ) {
        for (const filename of ROOT_CONFIG_FILENAMES) {
          if (_fs().existsSync(_path().join(dirname, filename))) {
            return dirname;
          }
        }
        const nextDir = _path().dirname(dirname);
        if (dirname === nextDir)
          break;
        dirname = nextDir;
      }
      return null;
    }
    function* findRelativeConfig(packageData, envName, caller) {
      let config = null;
      let ignore = null;
      const dirname = _path().dirname(packageData.filepath);
      for (const loc of packageData.directories) {
        if (!config) {
          var _packageData$pkg;
          config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, ((_packageData$pkg = packageData.pkg) == null ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
        }
        if (!ignore) {
          const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
          ignore = yield* readIgnoreConfig(ignoreLoc);
          if (ignore) {
            debug(\\"Found ignore %o from %o.\\", ignore.filepath, dirname);
          }
        }
      }
      return {
        config,
        ignore
      };
    }
    function findRootConfig(dirname, envName, caller) {
      return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);
    }
    function* loadOneConfig(names, dirname, envName, caller, previousConfig = null) {
      const configs = yield* _gensync().all(names.map((filename) => readConfig(_path().join(dirname, filename), envName, caller)));
      const config = configs.reduce((previousConfig2, config2) => {
        if (config2 && previousConfig2) {
          throw new Error(\`Multiple configuration files found. Please remove one:
 - \${_path().basename(previousConfig2.filepath)}
 - \${config2.filepath}
from \${dirname}\`);
        }
        return config2 || previousConfig2;
      }, previousConfig);
      if (config) {
        debug(\\"Found configuration %o from %o.\\", config.filepath, dirname);
      }
      return config;
    }
    function* loadConfig(name, dirname, envName, caller) {
      const filepath = (((v, w) => (v = v.split(\\".\\"), w = w.split(\\".\\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \\"8.9\\") ? require.resolve : (r, {
        paths: [b]
      }, M = require(\\"module\\")) => {
        let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
        if (f)
          return f;
        f = new Error(\`Cannot resolve module '\${r}'\`);
        f.code = \\"MODULE_NOT_FOUND\\";
        throw f;
      })(name, {
        paths: [dirname]
      });
      const conf = yield* readConfig(filepath, envName, caller);
      if (!conf) {
        throw new Error(\`Config file \${filepath} contains no configuration data\`);
      }
      debug(\\"Loaded config %o from %o.\\", name, dirname);
      return conf;
    }
    function readConfig(filepath, envName, caller) {
      const ext = _path().extname(filepath);
      return ext === \\".js\\" || ext === \\".cjs\\" || ext === \\".mjs\\" ? readConfigJS(filepath, {
        envName,
        caller
      }) : readConfigJSON5(filepath);
    }
    var LOADING_CONFIGS = /* @__PURE__ */ new Set();
    var readConfigJS = (0, _caching.makeStrongCache)(function* readConfigJS2(filepath, cache) {
      if (!_fs().existsSync(filepath)) {
        cache.never();
        return null;
      }
      if (LOADING_CONFIGS.has(filepath)) {
        cache.never();
        debug(\\"Auto-ignoring usage of config %o.\\", filepath);
        return {
          filepath,
          dirname: _path().dirname(filepath),
          options: {}
        };
      }
      let options;
      try {
        LOADING_CONFIGS.add(filepath);
        options = yield* (0, _moduleTypes.default)(filepath, \\"You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously.\\");
      } catch (err) {
        err.message = \`\${filepath}: Error while loading config - \${err.message}\`;
        throw err;
      } finally {
        LOADING_CONFIGS.delete(filepath);
      }
      let assertCache = false;
      if (typeof options === \\"function\\") {
        yield* [];
        options = options((0, _configApi.makeConfigAPI)(cache));
        assertCache = true;
      }
      if (!options || typeof options !== \\"object\\" || Array.isArray(options)) {
        throw new Error(\`\${filepath}: Configuration should be an exported JavaScript object.\`);
      }
      if (typeof options.then === \\"function\\") {
        throw new Error(\`You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.\`);
      }
      if (assertCache && !cache.configured())
        throwConfigError();
      return {
        filepath,
        dirname: _path().dirname(filepath),
        options
      };
    });
    var packageToBabelConfig = (0, _caching.makeWeakCacheSync)((file) => {
      const babel2 = file.options[\\"babel\\"];
      if (typeof babel2 === \\"undefined\\")
        return null;
      if (typeof babel2 !== \\"object\\" || Array.isArray(babel2) || babel2 === null) {
        throw new Error(\`\${file.filepath}: .babel property must be an object\`);
      }
      return {
        filepath: file.filepath,
        dirname: file.dirname,
        options: babel2
      };
    });
    var readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
      let options;
      try {
        options = _json().parse(content);
      } catch (err) {
        err.message = \`\${filepath}: Error while parsing config - \${err.message}\`;
        throw err;
      }
      if (!options)
        throw new Error(\`\${filepath}: No config detected\`);
      if (typeof options !== \\"object\\") {
        throw new Error(\`\${filepath}: Config returned typeof \${typeof options}\`);
      }
      if (Array.isArray(options)) {
        throw new Error(\`\${filepath}: Expected config object but found array\`);
      }
      delete options[\\"$schema\\"];
      return {
        filepath,
        dirname: _path().dirname(filepath),
        options
      };
    });
    var readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
      const ignoreDir = _path().dirname(filepath);
      const ignorePatterns = content.split(\\"\\\\n\\").map((line) => line.replace(/#(.*?)$/, \\"\\").trim()).filter((line) => !!line);
      for (const pattern of ignorePatterns) {
        if (pattern[0] === \\"!\\") {
          throw new Error(\`Negation of file paths is not supported.\`);
        }
      }
      return {
        filepath,
        dirname: _path().dirname(filepath),
        ignore: ignorePatterns.map((pattern) => (0, _patternToRegex.default)(pattern, ignoreDir))
      };
    });
    function* resolveShowConfigPath(dirname) {
      const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
      if (targetPath != null) {
        const absolutePath = _path().resolve(dirname, targetPath);
        const stats = yield* fs.stat(absolutePath);
        if (!stats.isFile()) {
          throw new Error(\`\${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.\`);
        }
        return absolutePath;
      }
      return null;
    }
    function throwConfigError() {
      throw new Error(\`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === \\"production\\");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \\"production\\");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};\`);
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/plugins.js
var require_plugins = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/plugins.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.loadPlugin = loadPlugin;
    exports.loadPreset = loadPreset;
    exports.resolvePlugin = resolvePlugin;
    exports.resolvePreset = resolvePreset;
    function _debug() {
      const data = require_src();
      _debug = function() {
        return data;
      };
      return data;
    }
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    var _moduleTypes = require_module_types();
    var debug = _debug()(\\"babel:config:loading:files:plugins\\");
    var EXACT_RE = /^module:/;
    var BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\\\\/|babel-plugin-)/;
    var BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\\\\/|babel-preset-)/;
    var BABEL_PLUGIN_ORG_RE = /^(@babel\\\\/)(?!plugin-|[^/]+\\\\/)/;
    var BABEL_PRESET_ORG_RE = /^(@babel\\\\/)(?!preset-|[^/]+\\\\/)/;
    var OTHER_PLUGIN_ORG_RE = /^(@(?!babel\\\\/)[^/]+\\\\/)(?![^/]*babel-plugin(?:-|\\\\/|$)|[^/]+\\\\/)/;
    var OTHER_PRESET_ORG_RE = /^(@(?!babel\\\\/)[^/]+\\\\/)(?![^/]*babel-preset(?:-|\\\\/|$)|[^/]+\\\\/)/;
    var OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;
    function resolvePlugin(name, dirname) {
      return resolveStandardizedName(\\"plugin\\", name, dirname);
    }
    function resolvePreset(name, dirname) {
      return resolveStandardizedName(\\"preset\\", name, dirname);
    }
    function* loadPlugin(name, dirname) {
      const filepath = resolvePlugin(name, dirname);
      if (!filepath) {
        throw new Error(\`Plugin \${name} not found relative to \${dirname}\`);
      }
      const value = yield* requireModule(\\"plugin\\", filepath);
      debug(\\"Loaded plugin %o from %o.\\", name, dirname);
      return {
        filepath,
        value
      };
    }
    function* loadPreset(name, dirname) {
      const filepath = resolvePreset(name, dirname);
      if (!filepath) {
        throw new Error(\`Preset \${name} not found relative to \${dirname}\`);
      }
      const value = yield* requireModule(\\"preset\\", filepath);
      debug(\\"Loaded preset %o from %o.\\", name, dirname);
      return {
        filepath,
        value
      };
    }
    function standardizeName(type, name) {
      if (_path().isAbsolute(name))
        return name;
      const isPreset = type === \\"preset\\";
      return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, \`babel-\${type}-\`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, \`$1\${type}-\`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, \`$1babel-\${type}-\`).replace(OTHER_ORG_DEFAULT_RE, \`$1/babel-\${type}\`).replace(EXACT_RE, \\"\\");
    }
    function resolveStandardizedName(type, name, dirname = process.cwd()) {
      const standardizedName = standardizeName(type, name);
      try {
        return (((v, w) => (v = v.split(\\".\\"), w = w.split(\\".\\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \\"8.9\\") ? require.resolve : (r, {
          paths: [b]
        }, M = require(\\"module\\")) => {
          let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
          if (f)
            return f;
          f = new Error(\`Cannot resolve module '\${r}'\`);
          f.code = \\"MODULE_NOT_FOUND\\";
          throw f;
        })(standardizedName, {
          paths: [dirname]
        });
      } catch (e) {
        if (e.code !== \\"MODULE_NOT_FOUND\\")
          throw e;
        if (standardizedName !== name) {
          let resolvedOriginal = false;
          try {
            (((v, w) => (v = v.split(\\".\\"), w = w.split(\\".\\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \\"8.9\\") ? require.resolve : (r, {
              paths: [b]
            }, M = require(\\"module\\")) => {
              let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
              if (f)
                return f;
              f = new Error(\`Cannot resolve module '\${r}'\`);
              f.code = \\"MODULE_NOT_FOUND\\";
              throw f;
            })(name, {
              paths: [dirname]
            });
            resolvedOriginal = true;
          } catch (_unused) {
          }
          if (resolvedOriginal) {
            e.message += \`
- If you want to resolve \\"\${name}\\", use \\"module:\${name}\\"\`;
          }
        }
        let resolvedBabel = false;
        try {
          (((v, w) => (v = v.split(\\".\\"), w = w.split(\\".\\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \\"8.9\\") ? require.resolve : (r, {
            paths: [b]
          }, M = require(\\"module\\")) => {
            let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
            if (f)
              return f;
            f = new Error(\`Cannot resolve module '\${r}'\`);
            f.code = \\"MODULE_NOT_FOUND\\";
            throw f;
          })(standardizeName(type, \\"@babel/\\" + name), {
            paths: [dirname]
          });
          resolvedBabel = true;
        } catch (_unused2) {
        }
        if (resolvedBabel) {
          e.message += \`
- Did you mean \\"@babel/\${name}\\"?\`;
        }
        let resolvedOppositeType = false;
        const oppositeType = type === \\"preset\\" ? \\"plugin\\" : \\"preset\\";
        try {
          (((v, w) => (v = v.split(\\".\\"), w = w.split(\\".\\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \\"8.9\\") ? require.resolve : (r, {
            paths: [b]
          }, M = require(\\"module\\")) => {
            let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
            if (f)
              return f;
            f = new Error(\`Cannot resolve module '\${r}'\`);
            f.code = \\"MODULE_NOT_FOUND\\";
            throw f;
          })(standardizeName(oppositeType, name), {
            paths: [dirname]
          });
          resolvedOppositeType = true;
        } catch (_unused3) {
        }
        if (resolvedOppositeType) {
          e.message += \`
- Did you accidentally pass a \${oppositeType} as a \${type}?\`;
        }
        throw e;
      }
    }
    var LOADING_MODULES = /* @__PURE__ */ new Set();
    function* requireModule(type, name) {
      if (LOADING_MODULES.has(name)) {
        throw new Error(\`Reentrant \${type} detected trying to load \\"\${name}\\". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your \\"ignore\\" list in your babelrc, or to a .babelignore.\`);
      }
      try {
        LOADING_MODULES.add(name);
        return yield* (0, _moduleTypes.default)(name, \`You appear to be using a native ECMAScript module \${type}, which is only supported when running Babel asynchronously.\`, true);
      } catch (err) {
        err.message = \`[BABEL]: \${err.message} (While processing: \${name})\`;
        throw err;
      } finally {
        LOADING_MODULES.delete(name);
      }
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/index.js
var require_files = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/files/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports, \\"ROOT_CONFIG_FILENAMES\\", {
      enumerable: true,
      get: function() {
        return _configuration.ROOT_CONFIG_FILENAMES;
      }
    });
    Object.defineProperty(exports, \\"findConfigUpwards\\", {
      enumerable: true,
      get: function() {
        return _configuration.findConfigUpwards;
      }
    });
    Object.defineProperty(exports, \\"findPackageData\\", {
      enumerable: true,
      get: function() {
        return _package.findPackageData;
      }
    });
    Object.defineProperty(exports, \\"findRelativeConfig\\", {
      enumerable: true,
      get: function() {
        return _configuration.findRelativeConfig;
      }
    });
    Object.defineProperty(exports, \\"findRootConfig\\", {
      enumerable: true,
      get: function() {
        return _configuration.findRootConfig;
      }
    });
    Object.defineProperty(exports, \\"loadConfig\\", {
      enumerable: true,
      get: function() {
        return _configuration.loadConfig;
      }
    });
    Object.defineProperty(exports, \\"loadPlugin\\", {
      enumerable: true,
      get: function() {
        return _plugins.loadPlugin;
      }
    });
    Object.defineProperty(exports, \\"loadPreset\\", {
      enumerable: true,
      get: function() {
        return _plugins.loadPreset;
      }
    });
    Object.defineProperty(exports, \\"resolvePlugin\\", {
      enumerable: true,
      get: function() {
        return _plugins.resolvePlugin;
      }
    });
    Object.defineProperty(exports, \\"resolvePreset\\", {
      enumerable: true,
      get: function() {
        return _plugins.resolvePreset;
      }
    });
    Object.defineProperty(exports, \\"resolveShowConfigPath\\", {
      enumerable: true,
      get: function() {
        return _configuration.resolveShowConfigPath;
      }
    });
    var _package = require_package();
    var _configuration = require_configuration();
    var _plugins = require_plugins();
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/helpers/environment.js
var require_environment = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/helpers/environment.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.getEnv = getEnv;
    function getEnv(defaultValue = \\"development\\") {
      return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/plugin.js
var require_plugin = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/plugin.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var Plugin = class {
      constructor(plugin, options, key) {
        this.key = void 0;
        this.manipulateOptions = void 0;
        this.post = void 0;
        this.pre = void 0;
        this.visitor = void 0;
        this.parserOverride = void 0;
        this.generatorOverride = void 0;
        this.options = void 0;
        this.key = plugin.name || key;
        this.manipulateOptions = plugin.manipulateOptions;
        this.post = plugin.post;
        this.pre = plugin.pre;
        this.visitor = plugin.visitor || {};
        this.parserOverride = plugin.parserOverride;
        this.generatorOverride = plugin.generatorOverride;
        this.options = options;
      }
    };
    exports.default = Plugin;
  }
});

// node_modules/.pnpm/node-releases@2.0.1/node_modules/node-releases/data/processed/envs.json
var require_envs = __commonJS({
  \\"node_modules/.pnpm/node-releases@2.0.1/node_modules/node-releases/data/processed/envs.json\\"(exports, module2) {
    module2.exports = [{ name: \\"nodejs\\", version: \\"0.2.0\\", date: \\"2011-08-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.3.0\\", date: \\"2011-08-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.4.0\\", date: \\"2011-08-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.5.0\\", date: \\"2011-08-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.6.0\\", date: \\"2011-11-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.7.0\\", date: \\"2012-01-17\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.8.0\\", date: \\"2012-06-22\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.9.0\\", date: \\"2012-07-20\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.10.0\\", date: \\"2013-03-11\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.11.0\\", date: \\"2013-03-28\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"0.12.0\\", date: \\"2015-02-06\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"4.0.0\\", date: \\"2015-09-08\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"4.1.0\\", date: \\"2015-09-17\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"4.2.0\\", date: \\"2015-10-12\\", lts: \\"Argon\\", security: false }, { name: \\"nodejs\\", version: \\"4.3.0\\", date: \\"2016-02-09\\", lts: \\"Argon\\", security: false }, { name: \\"nodejs\\", version: \\"4.4.0\\", date: \\"2016-03-08\\", lts: \\"Argon\\", security: false }, { name: \\"nodejs\\", version: \\"4.5.0\\", date: \\"2016-08-16\\", lts: \\"Argon\\", security: false }, { name: \\"nodejs\\", version: \\"4.6.0\\", date: \\"2016-09-27\\", lts: \\"Argon\\", security: true }, { name: \\"nodejs\\", version: \\"4.7.0\\", date: \\"2016-12-06\\", lts: \\"Argon\\", security: false }, { name: \\"nodejs\\", version: \\"4.8.0\\", date: \\"2017-02-21\\", lts: \\"Argon\\", security: false }, { name: \\"nodejs\\", version: \\"4.9.0\\", date: \\"2018-03-28\\", lts: \\"Argon\\", security: true }, { name: \\"nodejs\\", version: \\"5.0.0\\", date: \\"2015-10-29\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.1.0\\", date: \\"2015-11-17\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.2.0\\", date: \\"2015-12-09\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.3.0\\", date: \\"2015-12-15\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.4.0\\", date: \\"2016-01-06\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.5.0\\", date: \\"2016-01-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.6.0\\", date: \\"2016-02-09\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.7.0\\", date: \\"2016-02-23\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.8.0\\", date: \\"2016-03-09\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.9.0\\", date: \\"2016-03-16\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.10.0\\", date: \\"2016-04-01\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.11.0\\", date: \\"2016-04-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"5.12.0\\", date: \\"2016-06-23\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.0.0\\", date: \\"2016-04-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.1.0\\", date: \\"2016-05-05\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.2.0\\", date: \\"2016-05-17\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.3.0\\", date: \\"2016-07-06\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.4.0\\", date: \\"2016-08-12\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.5.0\\", date: \\"2016-08-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.6.0\\", date: \\"2016-09-14\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.7.0\\", date: \\"2016-09-27\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"6.8.0\\", date: \\"2016-10-12\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"6.9.0\\", date: \\"2016-10-18\\", lts: \\"Boron\\", security: false }, { name: \\"nodejs\\", version: \\"6.10.0\\", date: \\"2017-02-21\\", lts: \\"Boron\\", security: false }, { name: \\"nodejs\\", version: \\"6.11.0\\", date: \\"2017-06-06\\", lts: \\"Boron\\", security: false }, { name: \\"nodejs\\", version: \\"6.12.0\\", date: \\"2017-11-06\\", lts: \\"Boron\\", security: false }, { name: \\"nodejs\\", version: \\"6.13.0\\", date: \\"2018-02-10\\", lts: \\"Boron\\", security: false }, { name: \\"nodejs\\", version: \\"6.14.0\\", date: \\"2018-03-28\\", lts: \\"Boron\\", security: true }, { name: \\"nodejs\\", version: \\"6.15.0\\", date: \\"2018-11-27\\", lts: \\"Boron\\", security: true }, { name: \\"nodejs\\", version: \\"6.16.0\\", date: \\"2018-12-26\\", lts: \\"Boron\\", security: false }, { name: \\"nodejs\\", version: \\"6.17.0\\", date: \\"2019-02-28\\", lts: \\"Boron\\", security: true }, { name: \\"nodejs\\", version: \\"7.0.0\\", date: \\"2016-10-25\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.1.0\\", date: \\"2016-11-08\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.2.0\\", date: \\"2016-11-22\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.3.0\\", date: \\"2016-12-20\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.4.0\\", date: \\"2017-01-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.5.0\\", date: \\"2017-01-31\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.6.0\\", date: \\"2017-02-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.7.0\\", date: \\"2017-02-28\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.8.0\\", date: \\"2017-03-29\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.9.0\\", date: \\"2017-04-11\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"7.10.0\\", date: \\"2017-05-02\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.0.0\\", date: \\"2017-05-30\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.1.0\\", date: \\"2017-06-08\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.2.0\\", date: \\"2017-07-19\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.3.0\\", date: \\"2017-08-08\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.4.0\\", date: \\"2017-08-15\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.5.0\\", date: \\"2017-09-12\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.6.0\\", date: \\"2017-09-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.7.0\\", date: \\"2017-10-11\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.8.0\\", date: \\"2017-10-24\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"8.9.0\\", date: \\"2017-10-31\\", lts: \\"Carbon\\", security: false }, { name: \\"nodejs\\", version: \\"8.10.0\\", date: \\"2018-03-06\\", lts: \\"Carbon\\", security: false }, { name: \\"nodejs\\", version: \\"8.11.0\\", date: \\"2018-03-28\\", lts: \\"Carbon\\", security: true }, { name: \\"nodejs\\", version: \\"8.12.0\\", date: \\"2018-09-10\\", lts: \\"Carbon\\", security: false }, { name: \\"nodejs\\", version: \\"8.13.0\\", date: \\"2018-11-20\\", lts: \\"Carbon\\", security: false }, { name: \\"nodejs\\", version: \\"8.14.0\\", date: \\"2018-11-27\\", lts: \\"Carbon\\", security: true }, { name: \\"nodejs\\", version: \\"8.15.0\\", date: \\"2018-12-26\\", lts: \\"Carbon\\", security: false }, { name: \\"nodejs\\", version: \\"8.16.0\\", date: \\"2019-04-16\\", lts: \\"Carbon\\", security: false }, { name: \\"nodejs\\", version: \\"8.17.0\\", date: \\"2019-12-17\\", lts: \\"Carbon\\", security: true }, { name: \\"nodejs\\", version: \\"9.0.0\\", date: \\"2017-10-31\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.1.0\\", date: \\"2017-11-07\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.2.0\\", date: \\"2017-11-14\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.3.0\\", date: \\"2017-12-12\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.4.0\\", date: \\"2018-01-10\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.5.0\\", date: \\"2018-01-31\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.6.0\\", date: \\"2018-02-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.7.0\\", date: \\"2018-03-01\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.8.0\\", date: \\"2018-03-07\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.9.0\\", date: \\"2018-03-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"9.10.0\\", date: \\"2018-03-28\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"9.11.0\\", date: \\"2018-04-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.0.0\\", date: \\"2018-04-24\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.1.0\\", date: \\"2018-05-08\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.2.0\\", date: \\"2018-05-23\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.3.0\\", date: \\"2018-05-29\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.4.0\\", date: \\"2018-06-06\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.5.0\\", date: \\"2018-06-20\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.6.0\\", date: \\"2018-07-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.7.0\\", date: \\"2018-07-18\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.8.0\\", date: \\"2018-08-01\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.9.0\\", date: \\"2018-08-15\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.10.0\\", date: \\"2018-09-06\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.11.0\\", date: \\"2018-09-19\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.12.0\\", date: \\"2018-10-10\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"10.13.0\\", date: \\"2018-10-30\\", lts: \\"Dubnium\\", security: false }, { name: \\"nodejs\\", version: \\"10.14.0\\", date: \\"2018-11-27\\", lts: \\"Dubnium\\", security: true }, { name: \\"nodejs\\", version: \\"10.15.0\\", date: \\"2018-12-26\\", lts: \\"Dubnium\\", security: false }, { name: \\"nodejs\\", version: \\"10.16.0\\", date: \\"2019-05-28\\", lts: \\"Dubnium\\", security: false }, { name: \\"nodejs\\", version: \\"10.17.0\\", date: \\"2019-10-22\\", lts: \\"Dubnium\\", security: false }, { name: \\"nodejs\\", version: \\"10.18.0\\", date: \\"2019-12-17\\", lts: \\"Dubnium\\", security: true }, { name: \\"nodejs\\", version: \\"10.19.0\\", date: \\"2020-02-05\\", lts: \\"Dubnium\\", security: true }, { name: \\"nodejs\\", version: \\"10.20.0\\", date: \\"2020-03-26\\", lts: \\"Dubnium\\", security: false }, { name: \\"nodejs\\", version: \\"10.21.0\\", date: \\"2020-06-02\\", lts: \\"Dubnium\\", security: true }, { name: \\"nodejs\\", version: \\"10.22.0\\", date: \\"2020-07-21\\", lts: \\"Dubnium\\", security: false }, { name: \\"nodejs\\", version: \\"10.23.0\\", date: \\"2020-10-27\\", lts: \\"Dubnium\\", security: false }, { name: \\"nodejs\\", version: \\"10.24.0\\", date: \\"2021-02-23\\", lts: \\"Dubnium\\", security: true }, { name: \\"nodejs\\", version: \\"11.0.0\\", date: \\"2018-10-23\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.1.0\\", date: \\"2018-10-30\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.2.0\\", date: \\"2018-11-15\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.3.0\\", date: \\"2018-11-27\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"11.4.0\\", date: \\"2018-12-07\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.5.0\\", date: \\"2018-12-18\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.6.0\\", date: \\"2018-12-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.7.0\\", date: \\"2019-01-17\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.8.0\\", date: \\"2019-01-24\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.9.0\\", date: \\"2019-01-30\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.10.0\\", date: \\"2019-02-14\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.11.0\\", date: \\"2019-03-05\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.12.0\\", date: \\"2019-03-14\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.13.0\\", date: \\"2019-03-28\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.14.0\\", date: \\"2019-04-10\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"11.15.0\\", date: \\"2019-04-30\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.0.0\\", date: \\"2019-04-23\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.1.0\\", date: \\"2019-04-29\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.2.0\\", date: \\"2019-05-07\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.3.0\\", date: \\"2019-05-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.4.0\\", date: \\"2019-06-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.5.0\\", date: \\"2019-06-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.6.0\\", date: \\"2019-07-03\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.7.0\\", date: \\"2019-07-23\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.8.0\\", date: \\"2019-08-06\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.9.0\\", date: \\"2019-08-20\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.10.0\\", date: \\"2019-09-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.11.0\\", date: \\"2019-09-25\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.12.0\\", date: \\"2019-10-11\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"12.13.0\\", date: \\"2019-10-21\\", lts: \\"Erbium\\", security: false }, { name: \\"nodejs\\", version: \\"12.14.0\\", date: \\"2019-12-17\\", lts: \\"Erbium\\", security: true }, { name: \\"nodejs\\", version: \\"12.15.0\\", date: \\"2020-02-05\\", lts: \\"Erbium\\", security: true }, { name: \\"nodejs\\", version: \\"12.16.0\\", date: \\"2020-02-11\\", lts: \\"Erbium\\", security: false }, { name: \\"nodejs\\", version: \\"12.17.0\\", date: \\"2020-05-26\\", lts: \\"Erbium\\", security: false }, { name: \\"nodejs\\", version: \\"12.18.0\\", date: \\"2020-06-02\\", lts: \\"Erbium\\", security: true }, { name: \\"nodejs\\", version: \\"12.19.0\\", date: \\"2020-10-06\\", lts: \\"Erbium\\", security: false }, { name: \\"nodejs\\", version: \\"12.20.0\\", date: \\"2020-11-24\\", lts: \\"Erbium\\", security: false }, { name: \\"nodejs\\", version: \\"12.21.0\\", date: \\"2021-02-23\\", lts: \\"Erbium\\", security: true }, { name: \\"nodejs\\", version: \\"12.22.0\\", date: \\"2021-03-30\\", lts: \\"Erbium\\", security: false }, { name: \\"nodejs\\", version: \\"13.0.0\\", date: \\"2019-10-22\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.1.0\\", date: \\"2019-11-05\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.2.0\\", date: \\"2019-11-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.3.0\\", date: \\"2019-12-03\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.4.0\\", date: \\"2019-12-17\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"13.5.0\\", date: \\"2019-12-18\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.6.0\\", date: \\"2020-01-07\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.7.0\\", date: \\"2020-01-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.8.0\\", date: \\"2020-02-05\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"13.9.0\\", date: \\"2020-02-18\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.10.0\\", date: \\"2020-03-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.11.0\\", date: \\"2020-03-12\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.12.0\\", date: \\"2020-03-26\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.13.0\\", date: \\"2020-04-14\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"13.14.0\\", date: \\"2020-04-29\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.0.0\\", date: \\"2020-04-21\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.1.0\\", date: \\"2020-04-29\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.2.0\\", date: \\"2020-05-05\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.3.0\\", date: \\"2020-05-19\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.4.0\\", date: \\"2020-06-02\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"14.5.0\\", date: \\"2020-06-30\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.6.0\\", date: \\"2020-07-20\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.7.0\\", date: \\"2020-07-29\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.8.0\\", date: \\"2020-08-11\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.9.0\\", date: \\"2020-08-27\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.10.0\\", date: \\"2020-09-08\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.11.0\\", date: \\"2020-09-15\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"14.12.0\\", date: \\"2020-09-22\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.13.0\\", date: \\"2020-09-29\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.14.0\\", date: \\"2020-10-15\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"14.15.0\\", date: \\"2020-10-27\\", lts: \\"Fermium\\", security: false }, { name: \\"nodejs\\", version: \\"14.16.0\\", date: \\"2021-02-23\\", lts: \\"Fermium\\", security: true }, { name: \\"nodejs\\", version: \\"14.17.0\\", date: \\"2021-05-11\\", lts: \\"Fermium\\", security: false }, { name: \\"nodejs\\", version: \\"14.18.0\\", date: \\"2021-09-28\\", lts: \\"Fermium\\", security: false }, { name: \\"nodejs\\", version: \\"15.0.0\\", date: \\"2020-10-20\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.1.0\\", date: \\"2020-11-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.2.0\\", date: \\"2020-11-10\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.3.0\\", date: \\"2020-11-24\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.4.0\\", date: \\"2020-12-09\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.5.0\\", date: \\"2020-12-22\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.6.0\\", date: \\"2021-01-14\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.7.0\\", date: \\"2021-01-25\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.8.0\\", date: \\"2021-02-02\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.9.0\\", date: \\"2021-02-18\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.10.0\\", date: \\"2021-02-23\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"15.11.0\\", date: \\"2021-03-03\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.12.0\\", date: \\"2021-03-17\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.13.0\\", date: \\"2021-03-31\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"15.14.0\\", date: \\"2021-04-06\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.0.0\\", date: \\"2021-04-20\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.1.0\\", date: \\"2021-05-04\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.2.0\\", date: \\"2021-05-19\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.3.0\\", date: \\"2021-06-03\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.4.0\\", date: \\"2021-06-23\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.5.0\\", date: \\"2021-07-14\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.6.0\\", date: \\"2021-07-29\\", lts: false, security: true }, { name: \\"nodejs\\", version: \\"16.7.0\\", date: \\"2021-08-18\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.8.0\\", date: \\"2021-08-25\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.9.0\\", date: \\"2021-09-07\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.10.0\\", date: \\"2021-09-22\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.11.0\\", date: \\"2021-10-08\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"16.12.0\\", date: \\"2021-10-20\\", lts: false, security: false }, { name: \\"nodejs\\", version: \\"17.0.0\\", date: \\"2021-10-19\\", lts: false, security: false }];
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/data/browsers.js
var require_browsers = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/data/browsers.js\\"(exports, module2) {
    module2.exports = { A: \\"ie\\", B: \\"edge\\", C: \\"firefox\\", D: \\"chrome\\", E: \\"safari\\", F: \\"opera\\", G: \\"ios_saf\\", H: \\"op_mini\\", I: \\"android\\", J: \\"bb\\", K: \\"op_mob\\", L: \\"and_chr\\", M: \\"and_ff\\", N: \\"ie_mob\\", O: \\"and_uc\\", P: \\"samsung\\", Q: \\"and_qq\\", R: \\"baidu\\", S: \\"kaios\\" };
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/browsers.js
var require_browsers2 = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/browsers.js\\"(exports, module2) {
    module2.exports.browsers = require_browsers();
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/data/browserVersions.js
var require_browserVersions = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/data/browserVersions.js\\"(exports, module2) {
    module2.exports = { \\"0\\": \\"37\\", \\"1\\": \\"38\\", \\"2\\": \\"39\\", \\"3\\": \\"40\\", \\"4\\": \\"41\\", \\"5\\": \\"42\\", \\"6\\": \\"43\\", \\"7\\": \\"44\\", \\"8\\": \\"45\\", \\"9\\": \\"46\\", A: \\"10\\", B: \\"11\\", C: \\"12\\", D: \\"7\\", E: \\"8\\", F: \\"9\\", G: \\"15\\", H: \\"97\\", I: \\"4\\", J: \\"6\\", K: \\"13\\", L: \\"14\\", M: \\"16\\", N: \\"17\\", O: \\"18\\", P: \\"79\\", Q: \\"80\\", R: \\"81\\", S: \\"95\\", T: \\"64\\", U: \\"83\\", V: \\"84\\", W: \\"85\\", X: \\"86\\", Y: \\"87\\", Z: \\"88\\", a: \\"89\\", b: \\"90\\", c: \\"91\\", d: \\"92\\", e: \\"93\\", f: \\"94\\", g: \\"96\\", h: \\"5\\", i: \\"19\\", j: \\"20\\", k: \\"21\\", l: \\"22\\", m: \\"23\\", n: \\"24\\", o: \\"25\\", p: \\"26\\", q: \\"27\\", r: \\"28\\", s: \\"29\\", t: \\"30\\", u: \\"31\\", v: \\"32\\", w: \\"33\\", x: \\"34\\", y: \\"35\\", z: \\"36\\", AB: \\"47\\", BB: \\"48\\", CB: \\"49\\", DB: \\"50\\", EB: \\"51\\", FB: \\"52\\", GB: \\"53\\", HB: \\"54\\", IB: \\"55\\", JB: \\"56\\", KB: \\"57\\", LB: \\"58\\", MB: \\"60\\", NB: \\"62\\", OB: \\"63\\", PB: \\"65\\", QB: \\"66\\", RB: \\"67\\", SB: \\"68\\", TB: \\"69\\", UB: \\"70\\", VB: \\"71\\", WB: \\"72\\", XB: \\"73\\", YB: \\"74\\", ZB: \\"75\\", aB: \\"76\\", bB: \\"77\\", cB: \\"78\\", dB: \\"11.1\\", eB: \\"12.1\\", fB: \\"3\\", gB: \\"59\\", hB: \\"61\\", iB: \\"82\\", jB: \\"98\\", kB: \\"3.2\\", lB: \\"10.1\\", mB: \\"15.2-15.3\\", nB: \\"15.4\\", oB: \\"11.5\\", pB: \\"4.2-4.3\\", qB: \\"5.5\\", rB: \\"2\\", sB: \\"3.5\\", tB: \\"3.6\\", uB: \\"99\\", vB: \\"100\\", wB: \\"3.1\\", xB: \\"5.1\\", yB: \\"6.1\\", zB: \\"7.1\\", \\"0B\\": \\"9.1\\", \\"1B\\": \\"13.1\\", \\"2B\\": \\"14.1\\", \\"3B\\": \\"15.1\\", \\"4B\\": \\"TP\\", \\"5B\\": \\"9.5-9.6\\", \\"6B\\": \\"10.0-10.1\\", \\"7B\\": \\"10.5\\", \\"8B\\": \\"10.6\\", \\"9B\\": \\"11.6\\", AC: \\"4.0-4.1\\", BC: \\"5.0-5.1\\", CC: \\"6.0-6.1\\", DC: \\"7.0-7.1\\", EC: \\"8.1-8.4\\", FC: \\"9.0-9.2\\", GC: \\"9.3\\", HC: \\"10.0-10.2\\", IC: \\"10.3\\", JC: \\"11.0-11.2\\", KC: \\"11.3-11.4\\", LC: \\"12.0-12.1\\", MC: \\"12.2-12.5\\", NC: \\"13.0-13.1\\", OC: \\"13.2\\", PC: \\"13.3\\", QC: \\"13.4-13.7\\", RC: \\"14.0-14.4\\", SC: \\"14.5-14.8\\", TC: \\"15.0-15.1\\", UC: \\"all\\", VC: \\"2.1\\", WC: \\"2.2\\", XC: \\"2.3\\", YC: \\"4.1\\", ZC: \\"4.4\\", aC: \\"4.4.3-4.4.4\\", bC: \\"12.12\\", cC: \\"5.0-5.4\\", dC: \\"6.2-6.4\\", eC: \\"7.2-7.4\\", fC: \\"8.2\\", gC: \\"9.2\\", hC: \\"11.1-11.2\\", iC: \\"12.0\\", jC: \\"13.0\\", kC: \\"14.0\\", lC: \\"15.0\\", mC: \\"16.0\\", nC: \\"10.4\\", oC: \\"7.12\\", pC: \\"2.5\\" };
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/browserVersions.js
var require_browserVersions2 = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/browserVersions.js\\"(exports, module2) {
    module2.exports.browserVersions = require_browserVersions();
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/data/agents.js
var require_agents = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/data/agents.js\\"(exports, module2) {
    module2.exports = { A: { A: { J: 0.0131217, D: 621152e-8, E: 0.0293123, F: 0.0732808, A: 0.0146562, B: 0.659527, qB: 9298e-6 }, B: \\"msqB\\", \\"J\\", \\"D\\", \\"E\\", \\"F\\", \\"A\\", \\"B\\", \\"\\", \\"\\", \\"\\"], E: \\"IE\\", F: { qB: 962323200, J: 998870400, D: 1161129600, E: 1237420800, F: 1300060800, A: 1346716800, B: 1381968e3 } }, B: { A: { C: 8536e-6, K: 4267e-6, L: 4268e-6, G: 4268e-6, M: 8536e-6, N: 8536e-6, O: 0.029876, P: 0, Q: 4298e-6, R: 944e-5, U: 4043e-6, V: 8536e-6, W: 8536e-6, X: 8536e-6, Y: 0.012804, Z: 4318e-6, a: 8536e-6, b: 4268e-6, c: 8536e-6, d: 0.017072, e: 0.012804, f: 0.025608, S: 0.145112, g: 3.66194, H: 0 }, B: \\"webkita\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"S\\", \\"g\\", \\"H\\", \\"\\", \\"\\", \\"\\"], E: \\"Edge\\", F: { C: 1438128e3, K: 1447286400, L: 1470096e3, G: 1491868800, M: 1508198400, N: 1525046400, O: 1542067200, P: 1579046400, Q: 1581033600, R: 1586736e3, U: 1590019200, V: 1594857600, W: 1598486400, X: 1602201600, Y: 1605830400, Z: 161136e4, a: 1614816e3, b: 1618358400, c: 1622073600, d: 1626912e3, e: 1630627200, f: 1632441600, S: 1634774400, g: 1637539200, H: 1641427200 }, D: { C: \\"ms\\", K: \\"ms\\", L: \\"ms\\", G: \\"ms\\", M: \\"ms\\", N: \\"ms\\", O: \\"ms\\" } }, C: { A: { \\"0\\": 4783e-6, \\"1\\": 4271e-6, \\"2\\": 4783e-6, \\"3\\": 487e-5, \\"4\\": 5029e-6, \\"5\\": 47e-4, \\"6\\": 0.034144, \\"7\\": 8536e-6, \\"8\\": 4356e-6, \\"9\\": 4525e-6, rB: 4318e-6, fB: 4271e-6, I: 0.025608, h: 4879e-6, J: 0.020136, D: 5725e-6, E: 4525e-6, F: 533e-5, A: 4283e-6, B: 4318e-6, C: 4471e-6, K: 4486e-6, L: 453e-5, G: 4293e-6, M: 4417e-6, N: 4425e-6, O: 4293e-6, i: 4443e-6, j: 4283e-6, k: 4293e-6, l: 0.013698, m: 4293e-6, n: 8786e-6, o: 4268e-6, p: 4317e-6, q: 4393e-6, r: 4418e-6, s: 8834e-6, t: 4293e-6, u: 8928e-6, v: 4471e-6, w: 9284e-6, x: 4707e-6, y: 9076e-6, z: 4268e-6, AB: 4293e-6, BB: 4268e-6, CB: 4538e-6, DB: 8282e-6, EB: 4268e-6, FB: 0.068288, GB: 4335e-6, HB: 8586e-6, IB: 0.034144, JB: 0.017072, KB: 4425e-6, LB: 4356e-6, gB: 4268e-6, MB: 8536e-6, hB: 4356e-6, NB: 4425e-6, OB: 4268e-6, T: 415e-5, PB: 4267e-6, QB: 8712e-6, RB: 4267e-6, SB: 8536e-6, TB: 415e-5, UB: 4293e-6, VB: 4425e-6, WB: 0.012804, XB: 415e-5, YB: 415e-5, ZB: 4318e-6, aB: 4356e-6, bB: 4268e-6, cB: 0.068288, P: 8536e-6, Q: 8536e-6, R: 0.017072, iB: 4268e-6, U: 4268e-6, V: 0.017072, W: 4268e-6, X: 4268e-6, Y: 0.012804, Z: 0.017072, a: 0.02134, b: 0.02134, c: 0.098164, d: 0.017072, e: 0.029876, f: 0.93896, S: 1.9334, g: 0.017072, H: 0, jB: 0, sB: 8786e-6, tB: 487e-5 }, B: \\"moz\\", C: [\\"rB\\", \\"fB\\", \\"sB\\", \\"tB\\", \\"I\\", \\"h\\", \\"J\\", \\"D\\", \\"E\\", \\"F\\", \\"A\\", \\"B\\", \\"C\\", \\"K\\", \\"L\\", \\"G\\", \\"M\\", \\"N\\", \\"O\\", \\"i\\", \\"j\\", \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", \\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\", \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\", \\"z\\", \\"0\\", \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"AB\\", \\"BB\\", \\"CB\\", \\"DB\\", \\"EB\\", \\"FB\\", \\"GB\\", \\"HB\\", \\"IB\\", \\"JB\\", \\"KB\\", \\"LB\\", \\"gB\\", \\"MB\\", \\"hB\\", \\"NB\\", \\"OB\\", \\"T\\", \\"PB\\", \\"QB\\", \\"RB\\", \\"SB\\", \\"TB\\", \\"UB\\", \\"VB\\", \\"WB\\", \\"XB\\", \\"YB\\", \\"ZB\\", \\"aB\\", \\"bB\\", \\"cB\\", \\"P\\", \\"Q\\", \\"R\\", \\"iB\\", \\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"Y\\", \\"Z\\", \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"S\\", \\"g\\", \\"H\\", \\"jB\\", \\"\\"], E: \\"Firefox\\", F: { \\"0\\": 1428278400, \\"1\\": 1431475200, \\"2\\": 1435881600, \\"3\\": 1439251200, \\"4\\": 144288e4, \\"5\\": 1446508800, \\"6\\": 1450137600, \\"7\\": 1453852800, \\"8\\": 1457395200, \\"9\\": 1461628800, rB: 1161648e3, fB: 1213660800, sB: 124632e4, tB: 1264032e3, I: 1300752e3, h: 1308614400, J: 1313452800, D: 1317081600, E: 1317081600, F: 1320710400, A: 1324339200, B: 1327968e3, C: 1331596800, K: 1335225600, L: 1338854400, G: 1342483200, M: 1346112e3, N: 1349740800, O: 1353628800, i: 1357603200, j: 1361232e3, k: 1364860800, l: 1368489600, m: 1372118400, n: 1375747200, o: 1379376e3, p: 1386633600, q: 1391472e3, r: 1395100800, s: 1398729600, t: 1402358400, u: 1405987200, v: 1409616e3, w: 1413244800, x: 1417392e3, y: 1421107200, z: 1424736e3, AB: 1465257600, BB: 1470096e3, CB: 1474329600, DB: 1479168e3, EB: 1485216e3, FB: 1488844800, GB: 149256e4, HB: 1497312e3, IB: 1502150400, JB: 1506556800, KB: 1510617600, LB: 1516665600, gB: 1520985600, MB: 1525824e3, hB: 1529971200, NB: 1536105600, OB: 1540252800, T: 1544486400, PB: 154872e4, QB: 1552953600, RB: 1558396800, SB: 1562630400, TB: 1567468800, UB: 1571788800, VB: 1575331200, WB: 1578355200, XB: 1581379200, YB: 1583798400, ZB: 1586304e3, aB: 1588636800, bB: 1591056e3, cB: 1593475200, P: 1595894400, Q: 1598313600, R: 1600732800, iB: 1603152e3, U: 1605571200, V: 1607990400, W: 1611619200, X: 1614038400, Y: 1616457600, Z: 1618790400, a: 1622505600, b: 1626134400, c: 1628553600, d: 1630972800, e: 1633392e3, f: 1635811200, S: 1638835200, g: 1641859200, H: null, jB: null } }, D: { A: { \\"0\\": 4464e-6, \\"1\\": 0.025608, \\"2\\": 4464e-6, \\"3\\": 0.012804, \\"4\\": 0.0236, \\"5\\": 4293e-6, \\"6\\": 8536e-6, \\"7\\": 4465e-6, \\"8\\": 4642e-6, \\"9\\": 4891e-6, I: 4706e-6, h: 4879e-6, J: 4879e-6, D: 5591e-6, E: 5591e-6, F: 5591e-6, A: 4534e-6, B: 4464e-6, C: 0.010424, K: 83e-4, L: 4706e-6, G: 0.015087, M: 4393e-6, N: 4393e-6, O: 8652e-6, i: 4293e-6, j: 4393e-6, k: 4317e-6, l: 8536e-6, m: 8786e-6, n: 8536e-6, o: 4461e-6, p: 4141e-6, q: 4326e-6, r: 47e-4, s: 4538e-6, t: 4293e-6, u: 8596e-6, v: 4566e-6, w: 4268e-6, x: 8536e-6, y: 8536e-6, z: 4335e-6, AB: 0.012804, BB: 0.025608, CB: 0.08536, DB: 4293e-6, EB: 4268e-6, FB: 4268e-6, GB: 0.012804, HB: 8536e-6, IB: 8536e-6, JB: 0.046948, KB: 8536e-6, LB: 8536e-6, gB: 4268e-6, MB: 8536e-6, hB: 8536e-6, NB: 8536e-6, OB: 0.012804, T: 0.02134, PB: 0.017072, QB: 0.025608, RB: 0.012804, SB: 0.012804, TB: 0.059752, UB: 0.04268, VB: 0.017072, WB: 0.046948, XB: 0.012804, YB: 0.025608, ZB: 0.06402, aB: 0.068288, bB: 0.025608, cB: 0.034144, P: 0.19206, Q: 0.06402, R: 0.046948, U: 0.093896, V: 0.076824, W: 0.098164, X: 0.08536, Y: 0.19206, Z: 0.051216, a: 0.068288, b: 0.06402, c: 0.17072, d: 0.25608, e: 0.307296, f: 0.763972, S: 0.670076, g: 21.7284, H: 0.02134, jB: 8536e-6, uB: 8536e-6, vB: 0 }, B: \\"webkit\\", C: [\\"\\", \\"\\", \\"\\", \\"\\", \\"I\\", \\"h\\", \\"J\\", \\"D\\", \\"E\\", \\"F\\", \\"A\\", \\"B\\", \\"C\\", \\"K\\", \\"L\\", \\"G\\", \\"M\\", \\"N\\", \\"O\\", \\"i\\", \\"j\\", \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", \\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\", \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\", \\"z\\", \\"0\\", \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"AB\\", \\"BB\\", \\"CB\\", \\"DB\\", \\"EB\\", \\"FB\\", \\"GB\\", \\"HB\\", \\"IB\\", \\"JB\\", \\"KB\\", \\"LB\\", \\"gB\\", \\"MB\\", \\"hB\\", \\"NB\\", \\"OB\\", \\"T\\", \\"PB\\", \\"QB\\", \\"RB\\", \\"SB\\", \\"TB\\", \\"UB\\", \\"VB\\", \\"WB\\", \\"XB\\", \\"YB\\", \\"ZB\\", \\"aB\\", \\"bB\\", \\"cB\\", \\"P\\", \\"Q\\", \\"R\\", \\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"Y\\", \\"Z\\", \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"S\\", \\"g\\", \\"H\\", \\"jB\\", \\"uB\\", \\"vB\\"], E: \\"Chrome\\", F: { \\"0\\": 1409011200, \\"1\\": 141264e4, \\"2\\": 1416268800, \\"3\\": 1421798400, \\"4\\": 1425513600, \\"5\\": 1429401600, \\"6\\": 143208e4, \\"7\\": 1437523200, \\"8\\": 1441152e3, \\"9\\": 1444780800, I: 1264377600, h: 1274745600, J: 1283385600, D: 1287619200, E: 1291248e3, F: 1296777600, A: 1299542400, B: 1303862400, C: 1307404800, K: 1312243200, L: 1316131200, G: 1316131200, M: 1319500800, N: 1323734400, O: 1328659200, i: 1332892800, j: 133704e4, k: 1340668800, l: 1343692800, m: 1348531200, n: 1352246400, o: 1357862400, p: 1361404800, q: 1364428800, r: 1369094400, s: 1374105600, t: 1376956800, u: 1384214400, v: 1389657600, w: 1392940800, x: 1397001600, y: 1400544e3, z: 1405468800, AB: 1449014400, BB: 1453248e3, CB: 1456963200, DB: 1460592e3, EB: 1464134400, FB: 1469059200, GB: 1472601600, HB: 1476230400, IB: 1480550400, JB: 1485302400, KB: 1489017600, LB: 149256e4, gB: 1496707200, MB: 1500940800, hB: 1504569600, NB: 1508198400, OB: 1512518400, T: 1516752e3, PB: 1520294400, QB: 1523923200, RB: 1527552e3, SB: 1532390400, TB: 1536019200, UB: 1539648e3, VB: 1543968e3, WB: 154872e4, XB: 1552348800, YB: 1555977600, ZB: 1559606400, aB: 1564444800, bB: 1568073600, cB: 1571702400, P: 1575936e3, Q: 1580860800, R: 1586304e3, U: 1589846400, V: 1594684800, W: 1598313600, X: 1601942400, Y: 1605571200, Z: 1611014400, a: 1614556800, b: 1618272e3, c: 1621987200, d: 1626739200, e: 1630368e3, f: 1632268800, S: 1634601600, g: 1637020800, H: 1641340800, jB: null, uB: null, vB: null } }, E: { A: { I: 0, h: 4293e-6, J: 4656e-6, D: 4465e-6, E: 4356e-6, F: 4891e-6, A: 4425e-6, B: 4318e-6, C: 8536e-6, K: 0.059752, L: 0.290224, G: 0.29876, wB: 0, kB: 8692e-6, xB: 0.012804, yB: 456e-5, zB: 4283e-6, \\"0B\\": 0.017072, lB: 0.012804, dB: 0.038412, eB: 0.068288, \\"1B\\": 0.51216, \\"2B\\": 1.22492, \\"3B\\": 1.29747, mB: 0.179256, nB: 0, \\"4B\\": 0 }, B: \\"webkitwB\\", \\"kB\\", \\"I\\", \\"h\\", \\"xB\\", \\"J\\", \\"yB\\", \\"D\\", \\"zB\\", \\"E\\", \\"F\\", \\"0B\\", \\"A\\", \\"lB\\", \\"B\\", \\"dB\\", \\"C\\", \\"eB\\", \\"K\\", \\"1B\\", \\"L\\", \\"2B\\", \\"G\\", \\"3B\\", \\"mB\\", \\"nB\\", \\"4B\\", \\"\\"], E: \\"Safari\\", F: { wB: 1205798400, kB: 1226534400, I: 1244419200, h: 1275868800, xB: 131112e4, J: 1343174400, yB: 13824e5, D: 13824e5, zB: 1410998400, E: 1413417600, F: 1443657600, \\"0B\\": 1458518400, A: 1474329600, lB: 1490572800, B: 1505779200, dB: 1522281600, C: 1537142400, eB: 1553472e3, K: 1568851200, \\"1B\\": 1585008e3, L: 1600214400, \\"2B\\": 1619395200, G: 1632096e3, \\"3B\\": 1635292800, mB: 1639353600, nB: null, \\"4B\\": null } }, F: { A: { \\"0\\": 4283e-6, \\"1\\": 4367e-6, \\"2\\": 4534e-6, \\"3\\": 4268e-6, \\"4\\": 4227e-6, \\"5\\": 4418e-6, \\"6\\": 4293e-6, \\"7\\": 4227e-6, \\"8\\": 4725e-6, \\"9\\": 8536e-6, F: 82e-4, B: 0.016581, C: 4317e-6, G: 685e-5, M: 685e-5, N: 685e-5, O: 5014e-6, i: 6015e-6, j: 4879e-6, k: 6597e-6, l: 6597e-6, m: 0.013434, n: 6702e-6, o: 6015e-6, p: 5595e-6, q: 4393e-6, r: 8652e-6, s: 4879e-6, t: 4879e-6, u: 4268e-6, v: 5152e-6, w: 5014e-6, x: 9758e-6, y: 4879e-6, z: 4268e-6, AB: 8942e-6, BB: 4707e-6, CB: 4827e-6, DB: 4707e-6, EB: 4707e-6, FB: 4326e-6, GB: 8922e-6, HB: 0.014349, IB: 4425e-6, JB: 472e-5, KB: 4425e-6, LB: 4425e-6, MB: 472e-5, NB: 4532e-6, OB: 4566e-6, T: 0.02283, PB: 867e-5, QB: 4656e-6, RB: 4642e-6, SB: 4318e-6, TB: 944e-5, UB: 4293e-6, VB: 4293e-6, WB: 4298e-6, XB: 0.096692, YB: 4201e-6, ZB: 4141e-6, aB: 8536e-6, bB: 4318e-6, cB: 4356e-6, P: 8536e-6, Q: 0.02134, R: 0.5335, iB: 0.55484, \\"5B\\": 685e-5, \\"6B\\": 0, \\"7B\\": 8392e-6, \\"8B\\": 4706e-6, dB: 6229e-6, oB: 4879e-6, \\"9B\\": 8786e-6, eB: 472e-5 }, B: \\"webkit\\", C: [\\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"F\\", \\"5B\\", \\"6B\\", \\"7B\\", \\"8B\\", \\"B\\", \\"dB\\", \\"oB\\", \\"9B\\", \\"C\\", \\"eB\\", \\"G\\", \\"M\\", \\"N\\", \\"O\\", \\"i\\", \\"j\\", \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", \\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\", \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\", \\"z\\", \\"0\\", \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"AB\\", \\"BB\\", \\"CB\\", \\"DB\\", \\"EB\\", \\"FB\\", \\"GB\\", \\"HB\\", \\"IB\\", \\"JB\\", \\"KB\\", \\"LB\\", \\"MB\\", \\"NB\\", \\"OB\\", \\"T\\", \\"PB\\", \\"QB\\", \\"RB\\", \\"SB\\", \\"TB\\", \\"UB\\", \\"VB\\", \\"WB\\", \\"XB\\", \\"YB\\", \\"ZB\\", \\"aB\\", \\"bB\\", \\"cB\\", \\"P\\", \\"Q\\", \\"R\\", \\"iB\\", \\"\\", \\"\\", \\"\\"], E: \\"Opera\\", F: { \\"0\\": 146232e4, \\"1\\": 1465344e3, \\"2\\": 1470096e3, \\"3\\": 1474329600, \\"4\\": 1477267200, \\"5\\": 1481587200, \\"6\\": 1486425600, \\"7\\": 1490054400, \\"8\\": 1494374400, \\"9\\": 1498003200, F: 1150761600, \\"5B\\": 1223424e3, \\"6B\\": 1251763200, \\"7B\\": 1267488e3, \\"8B\\": 1277942400, B: 1292457600, dB: 1302566400, oB: 1309219200, \\"9B\\": 1323129600, C: 1323129600, eB: 1352073600, G: 1372723200, M: 1377561600, N: 1381104e3, O: 1386288e3, i: 1390867200, j: 1393891200, k: 1399334400, l: 1401753600, m: 1405987200, n: 1409616e3, o: 1413331200, p: 1417132800, q: 1422316800, r: 1425945600, s: 1430179200, t: 1433808e3, u: 1438646400, v: 1442448e3, w: 1445904e3, x: 1449100800, y: 1454371200, z: 1457308800, AB: 1502236800, BB: 1506470400, CB: 1510099200, DB: 1515024e3, EB: 1517961600, FB: 1521676800, GB: 1525910400, HB: 1530144e3, IB: 1534982400, JB: 1537833600, KB: 1543363200, LB: 1548201600, MB: 1554768e3, NB: 1561593600, OB: 1566259200, T: 1570406400, PB: 1573689600, QB: 1578441600, RB: 1583971200, SB: 1587513600, TB: 1592956800, UB: 1595894400, VB: 1600128e3, WB: 1603238400, XB: 161352e4, YB: 1612224e3, ZB: 1616544e3, aB: 1619568e3, bB: 1623715200, cB: 1627948800, P: 1631577600, Q: 1633392e3, R: 1635984e3, iB: 1638403200 }, D: { F: \\"o\\", B: \\"o\\", C: \\"o\\", \\"5B\\": \\"o\\", \\"6B\\": \\"o\\", \\"7B\\": \\"o\\", \\"8B\\": \\"o\\", dB: \\"o\\", oB: \\"o\\", \\"9B\\": \\"o\\", eB: \\"o\\" } }, G: { A: { E: 0, kB: 0, AC: 0, pB: 303749e-8, BC: 607498e-8, CC: 0.0577123, DC: 0.0212624, EC: 0.01215, FC: 0.0182249, GC: 0.101756, HC: 0.0288562, IC: 0.123018, JC: 0.0728998, KC: 0.0455623, LC: 0.0455623, MC: 0.631798, NC: 0.0349311, OC: 0.0167062, PC: 0.0926434, QC: 0.300711, RC: 0.970478, SC: 4.48182, TC: 7.45096, mB: 0.662173, nB: 0 }, B: \\"webkitkB\\", \\"AC\\", \\"pB\\", \\"BC\\", \\"CC\\", \\"DC\\", \\"E\\", \\"EC\\", \\"FC\\", \\"GC\\", \\"HC\\", \\"IC\\", \\"JC\\", \\"KC\\", \\"LC\\", \\"MC\\", \\"NC\\", \\"OC\\", \\"PC\\", \\"QC\\", \\"RC\\", \\"SC\\", \\"TC\\", \\"mB\\", \\"nB\\", \\"\\", \\"\\"], E: \\"Safari on iOS\\", F: { kB: 1270252800, AC: 1283904e3, pB: 1299628800, BC: 1331078400, CC: 1359331200, DC: 1394409600, E: 1410912e3, EC: 1413763200, FC: 1442361600, GC: 1458518400, HC: 1473724800, IC: 1490572800, JC: 1505779200, KC: 1522281600, LC: 1537142400, MC: 1553472e3, NC: 1568851200, OC: 1572220800, PC: 1580169600, QC: 1585008e3, RC: 1600214400, SC: 1619395200, TC: 1632096e3, mB: 1639353600, nB: null } }, H: { A: { UC: 1.06363 }, B: \\"opera Mini\\", F: { UC: 1426464e3 } }, I: { A: { fB: 0, I: 0.0320682, H: 0, VC: 0, WC: 0, XC: 0, YC: 0.0178157, pB: 0.0605733, ZC: 0, aC: 0.285051 }, B: \\"webkitfB\\", \\"I\\", \\"YC\\", \\"pB\\", \\"ZC\\", \\"aC\\", \\"H\\", \\"\\", \\"\\", \\"\\"], E: \\"Android Browser\\", F: { VC: 1256515200, WC: 1274313600, XC: 1291593600, fB: 1298332800, I: 1318896e3, YC: 1341792e3, pB: 1374624e3, ZC: 1386547200, aC: 1401667200, H: 1641340800 } }, J: { A: { D: 0, A: 0 }, B: \\"webkitlackberry Browser\\", F: { D: 1325376e3, A: 1359504e3 } }, K: { A: { A: 0, B: 0, C: 0, T: 0.0111391, dB: 0, oB: 0, eB: 0 }, B: \\"odB\\", \\"oB\\", \\"C\\", \\"eB\\", \\"T\\", \\"\\", \\"\\", \\"\\"], E: \\"Opera Mobile\\", F: { A: 1287100800, B: 1300752e3, dB: 1314835200, oB: 1318291200, C: 1330300800, eB: 1349740800, T: 1613433600 }, D: { T: \\"webkit\\" } }, L: { A: { H: 38.3274 }, B: \\"webkithrome for Android\\", F: { H: 1641340800 } }, M: { A: { S: 0.298064 }, B: \\"mozirefox for Android\\", F: { S: 1638835200 } }, N: { A: { A: 0.0115934, B: 0.022664 }, B: \\"msobile\\", F: { A: 1340150400, B: 1353456e3 } }, O: { A: { bC: 0.957244 }, B: \\"webkitbC\\", \\"\\", \\"\\", \\"\\"], E: \\"UC Browser for Android\\", F: { bC: 1471392e3 }, D: { bC: \\"webkit\\" } }, P: { A: { I: 0.228839, cC: 0.0103543, dC: 0.010304, eC: 0.0728124, fC: 0.0103584, gC: 0.0312053, lB: 0.0105043, hC: 0.0832142, iC: 0.0312053, jC: 0.135223, kC: 0.145625, lC: 0.343259, mC: 0 }, B: \\"webkitcC\\", \\"dC\\", \\"eC\\", \\"fC\\", \\"gC\\", \\"lB\\", \\"hC\\", \\"iC\\", \\"jC\\", \\"kC\\", \\"lC\\", \\"mC\\", \\"\\", \\"\\", \\"\\"], E: \\"Samsung Internet\\", F: { I: 1461024e3, cC: 1481846400, dC: 1509408e3, eC: 1528329600, fC: 1546128e3, gC: 1554163200, lB: 1567900800, hC: 1582588800, iC: 1593475200, jC: 1605657600, kC: 1618531200, lC: 1629072e3, mC: 1640736e3 } }, Q: { A: { nC: 0.177692 }, B: \\"webkitnC\\", \\"\\", \\"\\", \\"\\"], E: \\"QQ Browser\\", F: { nC: 1589846400 } }, R: { A: { oC: 0 }, B: \\"webkitoC\\", \\"\\", \\"\\", \\"\\"], E: \\"Baidu Browser\\", F: { oC: 1491004800 } }, S: { A: { pC: 0.074516 }, B: \\"mozpC\\", \\"\\", \\"\\", \\"\\"], E: \\"KaiOS Browser\\", F: { pC: 1527811200 } } };
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/agents.js
var require_agents2 = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/agents.js\\"(exports, module2) {
    \\"use strict\\";
    var browsers = require_browsers2().browsers;
    var versions = require_browserVersions2().browserVersions;
    var agentsData = require_agents();
    function unpackBrowserVersions(versionsData) {
      return Object.keys(versionsData).reduce((usage, version) => {
        usage[versions[version]] = versionsData[version];
        return usage;
      }, {});
    }
    module2.exports.agents = Object.keys(agentsData).reduce((map, key) => {
      let versionsData = agentsData[key];
      map[browsers[key]] = Object.keys(versionsData).reduce((data, entry) => {
        if (entry === \\"A\\") {
          data.usage_global = unpackBrowserVersions(versionsData[entry]);
        } else if (entry === \\"C\\") {
          data.versions = versionsData[entry].reduce((list, version) => {
            if (version === \\"\\") {
              list.push(null);
            } else {
              list.push(versions[version]);
            }
            return list;
          }, []);
        } else if (entry === \\"D\\") {
          data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
        } else if (entry === \\"E\\") {
          data.browser = versionsData[entry];
        } else if (entry === \\"F\\") {
          data.release_date = Object.keys(versionsData[entry]).reduce((map2, key2) => {
            map2[versions[key2]] = versionsData[entry][key2];
            return map2;
          }, {});
        } else {
          data.prefix = versionsData[entry];
        }
        return data;
      }, {});
      return map;
    }, {});
  }
});

// node_modules/.pnpm/node-releases@2.0.1/node_modules/node-releases/data/release-schedule/release-schedule.json
var require_release_schedule = __commonJS({
  \\"node_modules/.pnpm/node-releases@2.0.1/node_modules/node-releases/data/release-schedule/release-schedule.json\\"(exports, module2) {
    module2.exports = { \\"v0.8\\": { start: \\"2012-06-25\\", end: \\"2014-07-31\\" }, \\"v0.10\\": { start: \\"2013-03-11\\", end: \\"2016-10-31\\" }, \\"v0.12\\": { start: \\"2015-02-06\\", end: \\"2016-12-31\\" }, v4: { start: \\"2015-09-08\\", lts: \\"2015-10-12\\", maintenance: \\"2017-04-01\\", end: \\"2018-04-30\\", codename: \\"Argon\\" }, v5: { start: \\"2015-10-29\\", maintenance: \\"2016-04-30\\", end: \\"2016-06-30\\" }, v6: { start: \\"2016-04-26\\", lts: \\"2016-10-18\\", maintenance: \\"2018-04-30\\", end: \\"2019-04-30\\", codename: \\"Boron\\" }, v7: { start: \\"2016-10-25\\", maintenance: \\"2017-04-30\\", end: \\"2017-06-30\\" }, v8: { start: \\"2017-05-30\\", lts: \\"2017-10-31\\", maintenance: \\"2019-01-01\\", end: \\"2019-12-31\\", codename: \\"Carbon\\" }, v9: { start: \\"2017-10-01\\", maintenance: \\"2018-04-01\\", end: \\"2018-06-30\\" }, v10: { start: \\"2018-04-24\\", lts: \\"2018-10-30\\", maintenance: \\"2020-05-19\\", end: \\"2021-04-30\\", codename: \\"Dubnium\\" }, v11: { start: \\"2018-10-23\\", maintenance: \\"2019-04-22\\", end: \\"2019-06-01\\" }, v12: { start: \\"2019-04-23\\", lts: \\"2019-10-21\\", maintenance: \\"2020-11-30\\", end: \\"2022-04-30\\", codename: \\"Erbium\\" }, v13: { start: \\"2019-10-22\\", maintenance: \\"2020-04-01\\", end: \\"2020-06-01\\" }, v14: { start: \\"2020-04-21\\", lts: \\"2020-10-27\\", maintenance: \\"2021-10-19\\", end: \\"2023-04-30\\", codename: \\"Fermium\\" }, v15: { start: \\"2020-10-20\\", maintenance: \\"2021-04-01\\", end: \\"2021-06-01\\" }, v16: { start: \\"2021-04-20\\", lts: \\"2021-10-26\\", maintenance: \\"2022-10-18\\", end: \\"2024-04-30\\", codename: \\"\\" }, v17: { start: \\"2021-10-19\\", maintenance: \\"2022-04-01\\", end: \\"2022-06-01\\" }, v18: { start: \\"2022-04-19\\", lts: \\"2022-10-25\\", maintenance: \\"2023-10-18\\", end: \\"2025-04-30\\", codename: \\"\\" } };
  }
});

// node_modules/.pnpm/electron-to-chromium@1.4.59/node_modules/electron-to-chromium/versions.js
var require_versions = __commonJS({
  \\"node_modules/.pnpm/electron-to-chromium@1.4.59/node_modules/electron-to-chromium/versions.js\\"(exports, module2) {
    module2.exports = {
      \\"0.20\\": \\"39\\",
      \\"0.21\\": \\"41\\",
      \\"0.22\\": \\"41\\",
      \\"0.23\\": \\"41\\",
      \\"0.24\\": \\"41\\",
      \\"0.25\\": \\"42\\",
      \\"0.26\\": \\"42\\",
      \\"0.27\\": \\"43\\",
      \\"0.28\\": \\"43\\",
      \\"0.29\\": \\"43\\",
      \\"0.30\\": \\"44\\",
      \\"0.31\\": \\"45\\",
      \\"0.32\\": \\"45\\",
      \\"0.33\\": \\"45\\",
      \\"0.34\\": \\"45\\",
      \\"0.35\\": \\"45\\",
      \\"0.36\\": \\"47\\",
      \\"0.37\\": \\"49\\",
      \\"1.0\\": \\"49\\",
      \\"1.1\\": \\"50\\",
      \\"1.2\\": \\"51\\",
      \\"1.3\\": \\"52\\",
      \\"1.4\\": \\"53\\",
      \\"1.5\\": \\"54\\",
      \\"1.6\\": \\"56\\",
      \\"1.7\\": \\"58\\",
      \\"1.8\\": \\"59\\",
      \\"2.0\\": \\"61\\",
      \\"2.1\\": \\"61\\",
      \\"3.0\\": \\"66\\",
      \\"3.1\\": \\"66\\",
      \\"4.0\\": \\"69\\",
      \\"4.1\\": \\"69\\",
      \\"4.2\\": \\"69\\",
      \\"5.0\\": \\"73\\",
      \\"6.0\\": \\"76\\",
      \\"6.1\\": \\"76\\",
      \\"7.0\\": \\"78\\",
      \\"7.1\\": \\"78\\",
      \\"7.2\\": \\"78\\",
      \\"7.3\\": \\"78\\",
      \\"8.0\\": \\"80\\",
      \\"8.1\\": \\"80\\",
      \\"8.2\\": \\"80\\",
      \\"8.3\\": \\"80\\",
      \\"8.4\\": \\"80\\",
      \\"8.5\\": \\"80\\",
      \\"9.0\\": \\"83\\",
      \\"9.1\\": \\"83\\",
      \\"9.2\\": \\"83\\",
      \\"9.3\\": \\"83\\",
      \\"9.4\\": \\"83\\",
      \\"10.0\\": \\"85\\",
      \\"10.1\\": \\"85\\",
      \\"10.2\\": \\"85\\",
      \\"10.3\\": \\"85\\",
      \\"10.4\\": \\"85\\",
      \\"11.0\\": \\"87\\",
      \\"11.1\\": \\"87\\",
      \\"11.2\\": \\"87\\",
      \\"11.3\\": \\"87\\",
      \\"11.4\\": \\"87\\",
      \\"11.5\\": \\"87\\",
      \\"12.0\\": \\"89\\",
      \\"12.1\\": \\"89\\",
      \\"12.2\\": \\"89\\",
      \\"13.0\\": \\"91\\",
      \\"13.1\\": \\"91\\",
      \\"13.2\\": \\"91\\",
      \\"13.3\\": \\"91\\",
      \\"13.4\\": \\"91\\",
      \\"13.5\\": \\"91\\",
      \\"13.6\\": \\"91\\",
      \\"14.0\\": \\"93\\",
      \\"14.1\\": \\"93\\",
      \\"14.2\\": \\"93\\",
      \\"15.0\\": \\"94\\",
      \\"15.1\\": \\"94\\",
      \\"15.2\\": \\"94\\",
      \\"15.3\\": \\"94\\",
      \\"16.0\\": \\"96\\",
      \\"17.0\\": \\"98\\"
    };
  }
});

// node_modules/.pnpm/browserslist@4.19.1/node_modules/browserslist/error.js
var require_error = __commonJS({
  \\"node_modules/.pnpm/browserslist@4.19.1/node_modules/browserslist/error.js\\"(exports, module2) {
    function BrowserslistError(message) {
      this.name = \\"BrowserslistError\\";
      this.message = message;
      this.browserslist = true;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, BrowserslistError);
      }
    }
    BrowserslistError.prototype = Error.prototype;
    module2.exports = BrowserslistError;
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/lib/statuses.js
var require_statuses = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/lib/statuses.js\\"(exports, module2) {
    module2.exports = {
      1: \\"ls\\",
      2: \\"rec\\",
      3: \\"pr\\",
      4: \\"cr\\",
      5: \\"wd\\",
      6: \\"other\\",
      7: \\"unoff\\"
    };
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/lib/supported.js
var require_supported = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/lib/supported.js\\"(exports, module2) {
    module2.exports = {
      y: 1 << 0,
      n: 1 << 1,
      a: 1 << 2,
      p: 1 << 3,
      u: 1 << 4,
      x: 1 << 5,
      d: 1 << 6
    };
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/feature.js
var require_feature = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/feature.js\\"(exports, module2) {
    \\"use strict\\";
    var statuses = require_statuses();
    var supported = require_supported();
    var browsers = require_browsers2().browsers;
    var versions = require_browserVersions2().browserVersions;
    var MATH2LOG = Math.log(2);
    function unpackSupport(cipher) {
      let stats = Object.keys(supported).reduce((list, support) => {
        if (cipher & supported[support])
          list.push(support);
        return list;
      }, []);
      let notes = cipher >> 7;
      let notesArray = [];
      while (notes) {
        let note = Math.floor(Math.log(notes) / MATH2LOG) + 1;
        notesArray.unshift(\`#\${note}\`);
        notes -= Math.pow(2, note - 1);
      }
      return stats.concat(notesArray).join(\\" \\");
    }
    function unpackFeature(packed) {
      let unpacked = { status: statuses[packed.B], title: packed.C };
      unpacked.stats = Object.keys(packed.A).reduce((browserStats, key) => {
        let browser = packed.A[key];
        browserStats[browsers[key]] = Object.keys(browser).reduce((stats, support) => {
          let packedVersions = browser[support].split(\\" \\");
          let unpacked2 = unpackSupport(support);
          packedVersions.forEach((v) => stats[versions[v]] = unpacked2);
          return stats;
        }, {});
        return browserStats;
      }, {});
      return unpacked;
    }
    module2.exports = unpackFeature;
    module2.exports.default = unpackFeature;
  }
});

// node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/region.js
var require_region = __commonJS({
  \\"node_modules/.pnpm/caniuse-lite@1.0.30001304/node_modules/caniuse-lite/dist/unpacker/region.js\\"(exports, module2) {
    \\"use strict\\";
    var browsers = require_browsers2().browsers;
    function unpackRegion(packed) {
      return Object.keys(packed).reduce((list, browser) => {
        let data = packed[browser];
        list[browsers[browser]] = Object.keys(data).reduce((memo, key) => {
          let stats = data[key];
          if (key === \\"_\\") {
            stats.split(\\" \\").forEach((version) => memo[version] = null);
          } else {
            memo[key] = stats;
          }
          return memo;
        }, {});
        return list;
      }, {});
    }
    module2.exports = unpackRegion;
    module2.exports.default = unpackRegion;
  }
});

// node_modules/.pnpm/browserslist@4.19.1/node_modules/browserslist/node.js
var require_node3 = __commonJS({
  \\"node_modules/.pnpm/browserslist@4.19.1/node_modules/browserslist/node.js\\"(exports, module2) {
    var feature = require_feature().default;
    var region = require_region().default;
    var path = require(\\"path\\");
    var fs = require(\\"fs\\");
    var BrowserslistError = require_error();
    var IS_SECTION = /^\\\\s*\\\\[(.+)]\\\\s*$/;
    var CONFIG_PATTERN = /^browserslist-config-/;
    var SCOPED_CONFIG__PATTERN = /@[^/]+\\\\/browserslist-config(-|$|\\\\/)/;
    var TIME_TO_UPDATE_CANIUSE = 6 * 30 * 24 * 60 * 60 * 1e3;
    var FORMAT = \\"Browserslist config should be a string or an array of strings with browser queries\\";
    var dataTimeChecked = false;
    var filenessCache = {};
    var configCache = {};
    function checkExtend(name) {
      var use = \\" Use \`dangerousExtend\` option to disable.\\";
      if (!CONFIG_PATTERN.test(name) && !SCOPED_CONFIG__PATTERN.test(name)) {
        throw new BrowserslistError(\\"Browserslist config needs \`browserslist-config-\` prefix. \\" + use);
      }
      if (name.replace(/^@[^/]+\\\\//, \\"\\").indexOf(\\".\\") !== -1) {
        throw new BrowserslistError(\\"\`.\` not allowed in Browserslist config name. \\" + use);
      }
      if (name.indexOf(\\"node_modules\\") !== -1) {
        throw new BrowserslistError(\\"\`node_modules\` not allowed in Browserslist config.\\" + use);
      }
    }
    function isFile(file) {
      if (file in filenessCache) {
        return filenessCache[file];
      }
      var result = fs.existsSync(file) && fs.statSync(file).isFile();
      if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
        filenessCache[file] = result;
      }
      return result;
    }
    function eachParent(file, callback) {
      var dir = isFile(file) ? path.dirname(file) : file;
      var loc = path.resolve(dir);
      do {
        var result = callback(loc);
        if (typeof result !== \\"undefined\\")
          return result;
      } while (loc !== (loc = path.dirname(loc)));
      return void 0;
    }
    function check(section) {
      if (Array.isArray(section)) {
        for (var i = 0; i < section.length; i++) {
          if (typeof section[i] !== \\"string\\") {
            throw new BrowserslistError(FORMAT);
          }
        }
      } else if (typeof section !== \\"string\\") {
        throw new BrowserslistError(FORMAT);
      }
    }
    function pickEnv(config, opts) {
      if (typeof config !== \\"object\\")
        return config;
      var name;
      if (typeof opts.env === \\"string\\") {
        name = opts.env;
      } else if (process.env.BROWSERSLIST_ENV) {
        name = process.env.BROWSERSLIST_ENV;
      } else if (process.env.NODE_ENV) {
        name = process.env.NODE_ENV;
      } else {
        name = \\"production\\";
      }
      if (opts.throwOnMissing) {
        if (name && name !== \\"defaults\\" && !config[name]) {
          throw new BrowserslistError(\\"Missing config for Browserslist environment \`\\" + name + \\"\`\\");
        }
      }
      return config[name] || config.defaults;
    }
    function parsePackage(file) {
      var config = JSON.parse(fs.readFileSync(file));
      if (config.browserlist && !config.browserslist) {
        throw new BrowserslistError(\\"\`browserlist\` key instead of \`browserslist\` in \\" + file);
      }
      var list = config.browserslist;
      if (Array.isArray(list) || typeof list === \\"string\\") {
        list = { defaults: list };
      }
      for (var i in list) {
        check(list[i]);
      }
      return list;
    }
    function latestReleaseTime(agents) {
      var latest = 0;
      for (var name in agents) {
        var dates = agents[name].releaseDate || {};
        for (var key in dates) {
          if (latest < dates[key]) {
            latest = dates[key];
          }
        }
      }
      return latest * 1e3;
    }
    function normalizeStats(data, stats) {
      if (!data) {
        data = {};
      }
      if (stats && \\"dataByBrowser\\" in stats) {
        stats = stats.dataByBrowser;
      }
      if (typeof stats !== \\"object\\")
        return void 0;
      var normalized = {};
      for (var i in stats) {
        var versions = Object.keys(stats[i]);
        if (versions.length === 1 && data[i] && data[i].versions.length === 1) {
          var normal = data[i].versions[0];
          normalized[i] = {};
          normalized[i][normal] = stats[i][versions[0]];
        } else {
          normalized[i] = stats[i];
        }
      }
      return normalized;
    }
    function normalizeUsageData(usageData, data) {
      for (var browser in usageData) {
        var browserUsage = usageData[browser];
        if (\\"0\\" in browserUsage) {
          var versions = data[browser].versions;
          browserUsage[versions[versions.length - 1]] = browserUsage[0];
          delete browserUsage[0];
        }
      }
    }
    module2.exports = {
      loadQueries: function loadQueries(ctx, name) {
        if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
          checkExtend(name);
        }
        var queries = require(require.resolve(name, { paths: [\\".\\", ctx.path] }));
        if (queries) {
          if (Array.isArray(queries)) {
            return queries;
          } else if (typeof queries === \\"object\\") {
            if (!queries.defaults)
              queries.defaults = [];
            return pickEnv(queries, ctx, name);
          }
        }
        throw new BrowserslistError(\\"\`\\" + name + \\"\` config exports not an array of queries or an object of envs\\");
      },
      loadStat: function loadStat(ctx, name, data) {
        if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
          checkExtend(name);
        }
        var stats = require(require.resolve(path.join(name, \\"browserslist-stats.json\\"), { paths: [\\".\\"] }));
        return normalizeStats(data, stats);
      },
      getStat: function getStat(opts, data) {
        var stats;
        if (opts.stats) {
          stats = opts.stats;
        } else if (process.env.BROWSERSLIST_STATS) {
          stats = process.env.BROWSERSLIST_STATS;
        } else if (opts.path && path.resolve && fs.existsSync) {
          stats = eachParent(opts.path, function(dir) {
            var file = path.join(dir, \\"browserslist-stats.json\\");
            return isFile(file) ? file : void 0;
          });
        }
        if (typeof stats === \\"string\\") {
          try {
            stats = JSON.parse(fs.readFileSync(stats));
          } catch (e) {
            throw new BrowserslistError(\\"Can't read \\" + stats);
          }
        }
        return normalizeStats(data, stats);
      },
      loadConfig: function loadConfig(opts) {
        if (process.env.BROWSERSLIST) {
          return process.env.BROWSERSLIST;
        } else if (opts.config || process.env.BROWSERSLIST_CONFIG) {
          var file = opts.config || process.env.BROWSERSLIST_CONFIG;
          if (path.basename(file) === \\"package.json\\") {
            return pickEnv(parsePackage(file), opts);
          } else {
            return pickEnv(module2.exports.readConfig(file), opts);
          }
        } else if (opts.path) {
          return pickEnv(module2.exports.findConfig(opts.path), opts);
        } else {
          return void 0;
        }
      },
      loadCountry: function loadCountry(usage, country, data) {
        var code = country.replace(/[^\\\\w-]/g, \\"\\");
        if (!usage[code]) {
          var compressed = require(\\"caniuse-lite/data/regions/\\" + code + \\".js\\");
          var usageData = region(compressed);
          normalizeUsageData(usageData, data);
          usage[country] = {};
          for (var i in usageData) {
            for (var j in usageData[i]) {
              usage[country][i + \\" \\" + j] = usageData[i][j];
            }
          }
        }
      },
      loadFeature: function loadFeature(features, name) {
        name = name.replace(/[^\\\\w-]/g, \\"\\");
        if (features[name])
          return;
        var compressed = require(\\"caniuse-lite/data/features/\\" + name + \\".js\\");
        var stats = feature(compressed).stats;
        features[name] = {};
        for (var i in stats) {
          for (var j in stats[i]) {
            features[name][i + \\" \\" + j] = stats[i][j];
          }
        }
      },
      parseConfig: function parseConfig(string) {
        var result = { defaults: [] };
        var sections = [\\"defaults\\"];
        string.toString().replace(/#[^\\\\n]*/g, \\"\\").split(/\\\\n|,/).map(function(line) {
          return line.trim();
        }).filter(function(line) {
          return line !== \\"\\";
        }).forEach(function(line) {
          if (IS_SECTION.test(line)) {
            sections = line.match(IS_SECTION)[1].trim().split(\\" \\");
            sections.forEach(function(section) {
              if (result[section]) {
                throw new BrowserslistError(\\"Duplicate section \\" + section + \\" in Browserslist config\\");
              }
              result[section] = [];
            });
          } else {
            sections.forEach(function(section) {
              result[section].push(line);
            });
          }
        });
        return result;
      },
      readConfig: function readConfig(file) {
        if (!isFile(file)) {
          throw new BrowserslistError(\\"Can't read \\" + file + \\" config\\");
        }
        return module2.exports.parseConfig(fs.readFileSync(file));
      },
      findConfig: function findConfig(from) {
        from = path.resolve(from);
        var passed = [];
        var resolved = eachParent(from, function(dir) {
          if (dir in configCache) {
            return configCache[dir];
          }
          passed.push(dir);
          var config = path.join(dir, \\"browserslist\\");
          var pkg = path.join(dir, \\"package.json\\");
          var rc = path.join(dir, \\".browserslistrc\\");
          var pkgBrowserslist;
          if (isFile(pkg)) {
            try {
              pkgBrowserslist = parsePackage(pkg);
            } catch (e) {
              if (e.name === \\"BrowserslistError\\")
                throw e;
              console.warn(\\"[Browserslist] Could not parse \\" + pkg + \\". Ignoring it.\\");
            }
          }
          if (isFile(config) && pkgBrowserslist) {
            throw new BrowserslistError(dir + \\" contains both browserslist and package.json with browsers\\");
          } else if (isFile(rc) && pkgBrowserslist) {
            throw new BrowserslistError(dir + \\" contains both .browserslistrc and package.json with browsers\\");
          } else if (isFile(config) && isFile(rc)) {
            throw new BrowserslistError(dir + \\" contains both .browserslistrc and browserslist\\");
          } else if (isFile(config)) {
            return module2.exports.readConfig(config);
          } else if (isFile(rc)) {
            return module2.exports.readConfig(rc);
          } else {
            return pkgBrowserslist;
          }
        });
        if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
          passed.forEach(function(dir) {
            configCache[dir] = resolved;
          });
        }
        return resolved;
      },
      clearCaches: function clearCaches() {
        dataTimeChecked = false;
        filenessCache = {};
        configCache = {};
        this.cache = {};
      },
      oldDataWarning: function oldDataWarning(agentsObj) {
        if (dataTimeChecked)
          return;
        dataTimeChecked = true;
        if (process.env.BROWSERSLIST_IGNORE_OLD_DATA)
          return;
        var latest = latestReleaseTime(agentsObj);
        var halfYearAgo = Date.now() - TIME_TO_UPDATE_CANIUSE;
        if (latest !== 0 && latest < halfYearAgo) {
          console.warn(\\"Browserslist: caniuse-lite is outdated. Please run:\\\\n  npx browserslist@latest --update-db\\\\n  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating\\");
        }
      },
      currentNode: function currentNode() {
        return \\"node \\" + process.versions.node;
      }
    };
  }
});

// node_modules/.pnpm/browserslist@4.19.1/node_modules/browserslist/index.js
var require_browserslist = __commonJS({
  \\"node_modules/.pnpm/browserslist@4.19.1/node_modules/browserslist/index.js\\"(exports, module2) {
    var jsReleases = require_envs();
    var agents = require_agents2().agents;
    var jsEOL = require_release_schedule();
    var path = require(\\"path\\");
    var e2c = require_versions();
    var BrowserslistError = require_error();
    var env = require_node3();
    var YEAR = 365.259641 * 24 * 60 * 60 * 1e3;
    var ANDROID_EVERGREEN_FIRST = 37;
    var QUERY_OR = 1;
    var QUERY_AND = 2;
    function isVersionsMatch(versionA, versionB) {
      return (versionA + \\".\\").indexOf(versionB + \\".\\") === 0;
    }
    function isEolReleased(name) {
      var version = name.slice(1);
      return jsReleases.some(function(i) {
        return isVersionsMatch(i.version, version);
      });
    }
    function normalize(versions) {
      return versions.filter(function(version) {
        return typeof version === \\"string\\";
      });
    }
    function normalizeElectron(version) {
      var versionToUse = version;
      if (version.split(\\".\\").length === 3) {
        versionToUse = version.split(\\".\\").slice(0, -1).join(\\".\\");
      }
      return versionToUse;
    }
    function nameMapper(name) {
      return function mapName(version) {
        return name + \\" \\" + version;
      };
    }
    function getMajor(version) {
      return parseInt(version.split(\\".\\")[0]);
    }
    function getMajorVersions(released, number) {
      if (released.length === 0)
        return [];
      var majorVersions = uniq(released.map(getMajor));
      var minimum = majorVersions[majorVersions.length - number];
      if (!minimum) {
        return released;
      }
      var selected = [];
      for (var i = released.length - 1; i >= 0; i--) {
        if (minimum > getMajor(released[i]))
          break;
        selected.unshift(released[i]);
      }
      return selected;
    }
    function uniq(array) {
      var filtered = [];
      for (var i = 0; i < array.length; i++) {
        if (filtered.indexOf(array[i]) === -1)
          filtered.push(array[i]);
      }
      return filtered;
    }
    function fillUsage(result, name, data) {
      for (var i in data) {
        result[name + \\" \\" + i] = data[i];
      }
    }
    function generateFilter(sign, version) {
      version = parseFloat(version);
      if (sign === \\">\\") {
        return function(v) {
          return parseFloat(v) > version;
        };
      } else if (sign === \\">=\\") {
        return function(v) {
          return parseFloat(v) >= version;
        };
      } else if (sign === \\"<\\") {
        return function(v) {
          return parseFloat(v) < version;
        };
      } else {
        return function(v) {
          return parseFloat(v) <= version;
        };
      }
    }
    function generateSemverFilter(sign, version) {
      version = version.split(\\".\\").map(parseSimpleInt);
      version[1] = version[1] || 0;
      version[2] = version[2] || 0;
      if (sign === \\">\\") {
        return function(v) {
          v = v.split(\\".\\").map(parseSimpleInt);
          return compareSemver(v, version) > 0;
        };
      } else if (sign === \\">=\\") {
        return function(v) {
          v = v.split(\\".\\").map(parseSimpleInt);
          return compareSemver(v, version) >= 0;
        };
      } else if (sign === \\"<\\") {
        return function(v) {
          v = v.split(\\".\\").map(parseSimpleInt);
          return compareSemver(version, v) > 0;
        };
      } else {
        return function(v) {
          v = v.split(\\".\\").map(parseSimpleInt);
          return compareSemver(version, v) >= 0;
        };
      }
    }
    function parseSimpleInt(x) {
      return parseInt(x);
    }
    function compare(a2, b) {
      if (a2 < b)
        return -1;
      if (a2 > b)
        return 1;
      return 0;
    }
    function compareSemver(a2, b) {
      return compare(parseInt(a2[0]), parseInt(b[0])) || compare(parseInt(a2[1] || \\"0\\"), parseInt(b[1] || \\"0\\")) || compare(parseInt(a2[2] || \\"0\\"), parseInt(b[2] || \\"0\\"));
    }
    function semverFilterLoose(operator, range) {
      range = range.split(\\".\\").map(parseSimpleInt);
      if (typeof range[1] === \\"undefined\\") {
        range[1] = \\"x\\";
      }
      switch (operator) {
        case \\"<=\\":
          return function(version) {
            version = version.split(\\".\\").map(parseSimpleInt);
            return compareSemverLoose(version, range) <= 0;
          };
        case \\">=\\":
        default:
          return function(version) {
            version = version.split(\\".\\").map(parseSimpleInt);
            return compareSemverLoose(version, range) >= 0;
          };
      }
    }
    function compareSemverLoose(version, range) {
      if (version[0] !== range[0]) {
        return version[0] < range[0] ? -1 : 1;
      }
      if (range[1] === \\"x\\") {
        return 0;
      }
      if (version[1] !== range[1]) {
        return version[1] < range[1] ? -1 : 1;
      }
      return 0;
    }
    function resolveVersion(data, version) {
      if (data.versions.indexOf(version) !== -1) {
        return version;
      } else if (browserslist.versionAliases[data.name][version]) {
        return browserslist.versionAliases[data.name][version];
      } else {
        return false;
      }
    }
    function normalizeVersion(data, version) {
      var resolved = resolveVersion(data, version);
      if (resolved) {
        return resolved;
      } else if (data.versions.length === 1) {
        return data.versions[0];
      } else {
        return false;
      }
    }
    function filterByYear(since, context) {
      since = since / 1e3;
      return Object.keys(agents).reduce(function(selected, name) {
        var data = byName(name, context);
        if (!data)
          return selected;
        var versions = Object.keys(data.releaseDate).filter(function(v) {
          var date = data.releaseDate[v];
          return date !== null && date >= since;
        });
        return selected.concat(versions.map(nameMapper(data.name)));
      }, []);
    }
    function cloneData(data) {
      return {
        name: data.name,
        versions: data.versions,
        released: data.released,
        releaseDate: data.releaseDate
      };
    }
    function mapVersions(data, map) {
      data.versions = data.versions.map(function(i2) {
        return map[i2] || i2;
      });
      data.released = data.versions.map(function(i2) {
        return map[i2] || i2;
      });
      var fixedDate = {};
      for (var i in data.releaseDate) {
        fixedDate[map[i] || i] = data.releaseDate[i];
      }
      data.releaseDate = fixedDate;
      return data;
    }
    function byName(name, context) {
      name = name.toLowerCase();
      name = browserslist.aliases[name] || name;
      if (context.mobileToDesktop && browserslist.desktopNames[name]) {
        var desktop = browserslist.data[browserslist.desktopNames[name]];
        if (name === \\"android\\") {
          return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);
        } else {
          var cloned = cloneData(desktop);
          cloned.name = name;
          if (name === \\"op_mob\\") {
            cloned = mapVersions(cloned, { \\"10.0-10.1\\": \\"10\\" });
          }
          return cloned;
        }
      }
      return browserslist.data[name];
    }
    function normalizeAndroidVersions(androidVersions, chromeVersions) {
      var firstEvergreen = ANDROID_EVERGREEN_FIRST;
      var last = chromeVersions[chromeVersions.length - 1];
      return androidVersions.filter(function(version) {
        return /^(?:[2-4]\\\\.|[34]$)/.test(version);
      }).concat(chromeVersions.slice(firstEvergreen - last - 1));
    }
    function normalizeAndroidData(android, chrome) {
      android.released = normalizeAndroidVersions(android.released, chrome.released);
      android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
      return android;
    }
    function checkName(name, context) {
      var data = byName(name, context);
      if (!data)
        throw new BrowserslistError(\\"Unknown browser \\" + name);
      return data;
    }
    function unknownQuery(query) {
      return new BrowserslistError(\\"Unknown browser query \`\\" + query + \\"\`. Maybe you are using old Browserslist or made typo in query.\\");
    }
    function filterAndroid(list, versions, context) {
      if (context.mobileToDesktop)
        return list;
      var released = browserslist.data.android.released;
      var last = released[released.length - 1];
      var diff = last - ANDROID_EVERGREEN_FIRST - versions;
      if (diff > 0) {
        return list.slice(-1);
      } else {
        return list.slice(diff - 1);
      }
    }
    function resolve(queries, context) {
      if (Array.isArray(queries)) {
        queries = flatten(queries.map(parse));
      } else {
        queries = parse(queries);
      }
      return queries.reduce(function(result, query, index) {
        var selection = query.queryString;
        var isExclude = selection.indexOf(\\"not \\") === 0;
        if (isExclude) {
          if (index === 0) {
            throw new BrowserslistError(\\"Write any browsers query (for instance, \`defaults\`) before \`\\" + selection + \\"\`\\");
          }
          selection = selection.slice(4);
        }
        for (var i = 0; i < QUERIES.length; i++) {
          var type = QUERIES[i];
          var match = selection.match(type.regexp);
          if (match) {
            var args = [context].concat(match.slice(1));
            var array = type.select.apply(browserslist, args).map(function(j) {
              var parts = j.split(\\" \\");
              if (parts[1] === \\"0\\") {
                return parts[0] + \\" \\" + byName(parts[0], context).versions[0];
              } else {
                return j;
              }
            });
            switch (query.type) {
              case QUERY_AND:
                if (isExclude) {
                  return result.filter(function(j) {
                    return array.indexOf(j) === -1;
                  });
                } else {
                  return result.filter(function(j) {
                    return array.indexOf(j) !== -1;
                  });
                }
              case QUERY_OR:
              default:
                if (isExclude) {
                  var filter = {};
                  array.forEach(function(j) {
                    filter[j] = true;
                  });
                  return result.filter(function(j) {
                    return !filter[j];
                  });
                }
                return result.concat(array);
            }
          }
        }
        throw unknownQuery(selection);
      }, []);
    }
    var cache = {};
    function browserslist(queries, opts) {
      if (typeof opts === \\"undefined\\")
        opts = {};
      if (typeof opts.path === \\"undefined\\") {
        opts.path = path.resolve ? path.resolve(\\".\\") : \\".\\";
      }
      if (typeof queries === \\"undefined\\" || queries === null) {
        var config = browserslist.loadConfig(opts);
        if (config) {
          queries = config;
        } else {
          queries = browserslist.defaults;
        }
      }
      if (!(typeof queries === \\"string\\" || Array.isArray(queries))) {
        throw new BrowserslistError(\\"Browser queries must be an array or string. Got \\" + typeof queries + \\".\\");
      }
      var context = {
        ignoreUnknownVersions: opts.ignoreUnknownVersions,
        dangerousExtend: opts.dangerousExtend,
        mobileToDesktop: opts.mobileToDesktop,
        path: opts.path,
        env: opts.env
      };
      env.oldDataWarning(browserslist.data);
      var stats = env.getStat(opts, browserslist.data);
      if (stats) {
        context.customUsage = {};
        for (var browser in stats) {
          fillUsage(context.customUsage, browser, stats[browser]);
        }
      }
      var cacheKey = JSON.stringify([queries, context]);
      if (cache[cacheKey])
        return cache[cacheKey];
      var result = uniq(resolve(queries, context)).sort(function(name1, name2) {
        name1 = name1.split(\\" \\");
        name2 = name2.split(\\" \\");
        if (name1[0] === name2[0]) {
          var version1 = name1[1].split(\\"-\\")[0];
          var version2 = name2[1].split(\\"-\\")[0];
          return compareSemver(version2.split(\\".\\"), version1.split(\\".\\"));
        } else {
          return compare(name1[0], name2[0]);
        }
      });
      if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
        cache[cacheKey] = result;
      }
      return result;
    }
    function parse(queries) {
      var qs = [];
      do {
        queries = doMatch(queries, qs);
      } while (queries);
      return qs;
    }
    function doMatch(string, qs) {
      var or = /^(?:,\\\\s*|\\\\s+or\\\\s+)(.*)/i;
      var and = /^\\\\s+and\\\\s+(.*)/i;
      return find(string, function(parsed, n, max) {
        if (and.test(parsed)) {
          qs.unshift({ type: QUERY_AND, queryString: parsed.match(and)[1] });
          return true;
        } else if (or.test(parsed)) {
          qs.unshift({ type: QUERY_OR, queryString: parsed.match(or)[1] });
          return true;
        } else if (n === max) {
          qs.unshift({ type: QUERY_OR, queryString: parsed.trim() });
          return true;
        }
        return false;
      });
    }
    function find(string, predicate) {
      for (var n = 1, max = string.length; n <= max; n++) {
        var parsed = string.substr(-n, n);
        if (predicate(parsed, n, max)) {
          return string.slice(0, -n);
        }
      }
      return \\"\\";
    }
    function flatten(array) {
      if (!Array.isArray(array))
        return [array];
      return array.reduce(function(a2, b) {
        return a2.concat(flatten(b));
      }, []);
    }
    browserslist.cache = {};
    browserslist.data = {};
    browserslist.usage = {
      global: {},
      custom: null
    };
    browserslist.defaults = [\\"> 0.5%\\", \\"last 2 versions\\", \\"Firefox ESR\\", \\"not dead\\"];
    browserslist.aliases = {
      fx: \\"firefox\\",
      ff: \\"firefox\\",
      ios: \\"ios_saf\\",
      explorer: \\"ie\\",
      blackberry: \\"bb\\",
      explorermobile: \\"ie_mob\\",
      operamini: \\"op_mini\\",
      operamobile: \\"op_mob\\",
      chromeandroid: \\"and_chr\\",
      firefoxandroid: \\"and_ff\\",
      ucandroid: \\"and_uc\\",
      qqandroid: \\"and_qq\\"
    };
    browserslist.desktopNames = {
      and_chr: \\"chrome\\",
      and_ff: \\"firefox\\",
      ie_mob: \\"ie\\",
      op_mob: \\"opera\\",
      android: \\"chrome\\"
    };
    browserslist.versionAliases = {};
    browserslist.clearCaches = env.clearCaches;
    browserslist.parseConfig = env.parseConfig;
    browserslist.readConfig = env.readConfig;
    browserslist.findConfig = env.findConfig;
    browserslist.loadConfig = env.loadConfig;
    browserslist.coverage = function(browsers, stats) {
      var data;
      if (typeof stats === \\"undefined\\") {
        data = browserslist.usage.global;
      } else if (stats === \\"my stats\\") {
        var opts = {};
        opts.path = path.resolve ? path.resolve(\\".\\") : \\".\\";
        var customStats = env.getStat(opts);
        if (!customStats) {
          throw new BrowserslistError(\\"Custom usage statistics was not provided\\");
        }
        data = {};
        for (var browser in customStats) {
          fillUsage(data, browser, customStats[browser]);
        }
      } else if (typeof stats === \\"string\\") {
        if (stats.length > 2) {
          stats = stats.toLowerCase();
        } else {
          stats = stats.toUpperCase();
        }
        env.loadCountry(browserslist.usage, stats, browserslist.data);
        data = browserslist.usage[stats];
      } else {
        if (\\"dataByBrowser\\" in stats) {
          stats = stats.dataByBrowser;
        }
        data = {};
        for (var name in stats) {
          for (var version in stats[name]) {
            data[name + \\" \\" + version] = stats[name][version];
          }
        }
      }
      return browsers.reduce(function(all, i) {
        var usage = data[i];
        if (usage === void 0) {
          usage = data[i.replace(/ \\\\S+$/, \\" 0\\")];
        }
        return all + (usage || 0);
      }, 0);
    };
    function nodeQuery(context, version) {
      var nodeReleases = jsReleases.filter(function(i) {
        return i.name === \\"nodejs\\";
      });
      var matched = nodeReleases.filter(function(i) {
        return isVersionsMatch(i.version, version);
      });
      if (matched.length === 0) {
        if (context.ignoreUnknownVersions) {
          return [];
        } else {
          throw new BrowserslistError(\\"Unknown version \\" + version + \\" of Node.js\\");
        }
      }
      return [\\"node \\" + matched[matched.length - 1].version];
    }
    function sinceQuery(context, year, month, date) {
      year = parseInt(year);
      month = parseInt(month || \\"01\\") - 1;
      date = parseInt(date || \\"01\\");
      return filterByYear(Date.UTC(year, month, date, 0, 0, 0), context);
    }
    function coverQuery(context, coverage, statMode) {
      coverage = parseFloat(coverage);
      var usage = browserslist.usage.global;
      if (statMode) {
        if (statMode.match(/^my\\\\s+stats$/i)) {
          if (!context.customUsage) {
            throw new BrowserslistError(\\"Custom usage statistics was not provided\\");
          }
          usage = context.customUsage;
        } else {
          var place;
          if (statMode.length === 2) {
            place = statMode.toUpperCase();
          } else {
            place = statMode.toLowerCase();
          }
          env.loadCountry(browserslist.usage, place, browserslist.data);
          usage = browserslist.usage[place];
        }
      }
      var versions = Object.keys(usage).sort(function(a2, b) {
        return usage[b] - usage[a2];
      });
      var coveraged = 0;
      var result = [];
      var version;
      for (var i = 0; i < versions.length; i++) {
        version = versions[i];
        if (usage[version] === 0)
          break;
        coveraged += usage[version];
        result.push(version);
        if (coveraged >= coverage)
          break;
      }
      return result;
    }
    var QUERIES = [
      {
        regexp: /^last\\\\s+(\\\\d+)\\\\s+major\\\\s+versions?$/i,
        select: function(context, versions) {
          return Object.keys(agents).reduce(function(selected, name) {
            var data = byName(name, context);
            if (!data)
              return selected;
            var list = getMajorVersions(data.released, versions);
            list = list.map(nameMapper(data.name));
            if (data.name === \\"android\\") {
              list = filterAndroid(list, versions, context);
            }
            return selected.concat(list);
          }, []);
        }
      },
      {
        regexp: /^last\\\\s+(\\\\d+)\\\\s+versions?$/i,
        select: function(context, versions) {
          return Object.keys(agents).reduce(function(selected, name) {
            var data = byName(name, context);
            if (!data)
              return selected;
            var list = data.released.slice(-versions);
            list = list.map(nameMapper(data.name));
            if (data.name === \\"android\\") {
              list = filterAndroid(list, versions, context);
            }
            return selected.concat(list);
          }, []);
        }
      },
      {
        regexp: /^last\\\\s+(\\\\d+)\\\\s+electron\\\\s+major\\\\s+versions?$/i,
        select: function(context, versions) {
          var validVersions = getMajorVersions(Object.keys(e2c), versions);
          return validVersions.map(function(i) {
            return \\"chrome \\" + e2c[i];
          });
        }
      },
      {
        regexp: /^last\\\\s+(\\\\d+)\\\\s+(\\\\w+)\\\\s+major\\\\s+versions?$/i,
        select: function(context, versions, name) {
          var data = checkName(name, context);
          var validVersions = getMajorVersions(data.released, versions);
          var list = validVersions.map(nameMapper(data.name));
          if (data.name === \\"android\\") {
            list = filterAndroid(list, versions, context);
          }
          return list;
        }
      },
      {
        regexp: /^last\\\\s+(\\\\d+)\\\\s+electron\\\\s+versions?$/i,
        select: function(context, versions) {
          return Object.keys(e2c).slice(-versions).map(function(i) {
            return \\"chrome \\" + e2c[i];
          });
        }
      },
      {
        regexp: /^last\\\\s+(\\\\d+)\\\\s+(\\\\w+)\\\\s+versions?$/i,
        select: function(context, versions, name) {
          var data = checkName(name, context);
          var list = data.released.slice(-versions).map(nameMapper(data.name));
          if (data.name === \\"android\\") {
            list = filterAndroid(list, versions, context);
          }
          return list;
        }
      },
      {
        regexp: /^unreleased\\\\s+versions$/i,
        select: function(context) {
          return Object.keys(agents).reduce(function(selected, name) {
            var data = byName(name, context);
            if (!data)
              return selected;
            var list = data.versions.filter(function(v) {
              return data.released.indexOf(v) === -1;
            });
            list = list.map(nameMapper(data.name));
            return selected.concat(list);
          }, []);
        }
      },
      {
        regexp: /^unreleased\\\\s+electron\\\\s+versions?$/i,
        select: function() {
          return [];
        }
      },
      {
        regexp: /^unreleased\\\\s+(\\\\w+)\\\\s+versions?$/i,
        select: function(context, name) {
          var data = checkName(name, context);
          return data.versions.filter(function(v) {
            return data.released.indexOf(v) === -1;
          }).map(nameMapper(data.name));
        }
      },
      {
        regexp: /^last\\\\s+(\\\\d*.?\\\\d+)\\\\s+years?$/i,
        select: function(context, years) {
          return filterByYear(Date.now() - YEAR * years, context);
        }
      },
      {
        regexp: /^since (\\\\d+)$/i,
        select: sinceQuery
      },
      {
        regexp: /^since (\\\\d+)-(\\\\d+)$/i,
        select: sinceQuery
      },
      {
        regexp: /^since (\\\\d+)-(\\\\d+)-(\\\\d+)$/i,
        select: sinceQuery
      },
      {
        regexp: /^(>=?|<=?)\\\\s*(\\\\d+|\\\\d+\\\\.\\\\d+|\\\\.\\\\d+)%$/,
        select: function(context, sign, popularity) {
          popularity = parseFloat(popularity);
          var usage = browserslist.usage.global;
          return Object.keys(usage).reduce(function(result, version) {
            if (sign === \\">\\") {
              if (usage[version] > popularity) {
                result.push(version);
              }
            } else if (sign === \\"<\\") {
              if (usage[version] < popularity) {
                result.push(version);
              }
            } else if (sign === \\"<=\\") {
              if (usage[version] <= popularity) {
                result.push(version);
              }
            } else if (usage[version] >= popularity) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      {
        regexp: /^(>=?|<=?)\\\\s*(\\\\d+|\\\\d+\\\\.\\\\d+|\\\\.\\\\d+)%\\\\s+in\\\\s+my\\\\s+stats$/,
        select: function(context, sign, popularity) {
          popularity = parseFloat(popularity);
          if (!context.customUsage) {
            throw new BrowserslistError(\\"Custom usage statistics was not provided\\");
          }
          var usage = context.customUsage;
          return Object.keys(usage).reduce(function(result, version) {
            var percentage = usage[version];
            if (percentage == null) {
              return result;
            }
            if (sign === \\">\\") {
              if (percentage > popularity) {
                result.push(version);
              }
            } else if (sign === \\"<\\") {
              if (percentage < popularity) {
                result.push(version);
              }
            } else if (sign === \\"<=\\") {
              if (percentage <= popularity) {
                result.push(version);
              }
            } else if (percentage >= popularity) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      {
        regexp: /^(>=?|<=?)\\\\s*(\\\\d+|\\\\d+\\\\.\\\\d+|\\\\.\\\\d+)%\\\\s+in\\\\s+(\\\\S+)\\\\s+stats$/,
        select: function(context, sign, popularity, name) {
          popularity = parseFloat(popularity);
          var stats = env.loadStat(context, name, browserslist.data);
          if (stats) {
            context.customUsage = {};
            for (var browser in stats) {
              fillUsage(context.customUsage, browser, stats[browser]);
            }
          }
          if (!context.customUsage) {
            throw new BrowserslistError(\\"Custom usage statistics was not provided\\");
          }
          var usage = context.customUsage;
          return Object.keys(usage).reduce(function(result, version) {
            var percentage = usage[version];
            if (percentage == null) {
              return result;
            }
            if (sign === \\">\\") {
              if (percentage > popularity) {
                result.push(version);
              }
            } else if (sign === \\"<\\") {
              if (percentage < popularity) {
                result.push(version);
              }
            } else if (sign === \\"<=\\") {
              if (percentage <= popularity) {
                result.push(version);
              }
            } else if (percentage >= popularity) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      {
        regexp: /^(>=?|<=?)\\\\s*(\\\\d+|\\\\d+\\\\.\\\\d+|\\\\.\\\\d+)%\\\\s+in\\\\s+((alt-)?\\\\w\\\\w)$/,
        select: function(context, sign, popularity, place) {
          popularity = parseFloat(popularity);
          if (place.length === 2) {
            place = place.toUpperCase();
          } else {
            place = place.toLowerCase();
          }
          env.loadCountry(browserslist.usage, place, browserslist.data);
          var usage = browserslist.usage[place];
          return Object.keys(usage).reduce(function(result, version) {
            var percentage = usage[version];
            if (percentage == null) {
              return result;
            }
            if (sign === \\">\\") {
              if (percentage > popularity) {
                result.push(version);
              }
            } else if (sign === \\"<\\") {
              if (percentage < popularity) {
                result.push(version);
              }
            } else if (sign === \\"<=\\") {
              if (percentage <= popularity) {
                result.push(version);
              }
            } else if (percentage >= popularity) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      {
        regexp: /^cover\\\\s+(\\\\d+|\\\\d+\\\\.\\\\d+|\\\\.\\\\d+)%$/i,
        select: coverQuery
      },
      {
        regexp: /^cover\\\\s+(\\\\d+|\\\\d+\\\\.\\\\d+|\\\\.\\\\d+)%\\\\s+in\\\\s+(my\\\\s+stats|(alt-)?\\\\w\\\\w)$/i,
        select: coverQuery
      },
      {
        regexp: /^supports\\\\s+([\\\\w-]+)$/,
        select: function(context, feature) {
          env.loadFeature(browserslist.cache, feature);
          var features = browserslist.cache[feature];
          return Object.keys(features).reduce(function(result, version) {
            var flags = features[version];
            if (flags.indexOf(\\"y\\") >= 0 || flags.indexOf(\\"a\\") >= 0) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      {
        regexp: /^electron\\\\s+([\\\\d.]+)\\\\s*-\\\\s*([\\\\d.]+)$/i,
        select: function(context, from, to) {
          var fromToUse = normalizeElectron(from);
          var toToUse = normalizeElectron(to);
          if (!e2c[fromToUse]) {
            throw new BrowserslistError(\\"Unknown version \\" + from + \\" of electron\\");
          }
          if (!e2c[toToUse]) {
            throw new BrowserslistError(\\"Unknown version \\" + to + \\" of electron\\");
          }
          from = parseFloat(from);
          to = parseFloat(to);
          return Object.keys(e2c).filter(function(i) {
            var parsed = parseFloat(i);
            return parsed >= from && parsed <= to;
          }).map(function(i) {
            return \\"chrome \\" + e2c[i];
          });
        }
      },
      {
        regexp: /^node\\\\s+([\\\\d.]+)\\\\s*-\\\\s*([\\\\d.]+)$/i,
        select: function(context, from, to) {
          var nodeVersions = jsReleases.filter(function(i) {
            return i.name === \\"nodejs\\";
          }).map(function(i) {
            return i.version;
          });
          return nodeVersions.filter(semverFilterLoose(\\">=\\", from)).filter(semverFilterLoose(\\"<=\\", to)).map(function(v) {
            return \\"node \\" + v;
          });
        }
      },
      {
        regexp: /^(\\\\w+)\\\\s+([\\\\d.]+)\\\\s*-\\\\s*([\\\\d.]+)$/i,
        select: function(context, name, from, to) {
          var data = checkName(name, context);
          from = parseFloat(normalizeVersion(data, from) || from);
          to = parseFloat(normalizeVersion(data, to) || to);
          function filter(v) {
            var parsed = parseFloat(v);
            return parsed >= from && parsed <= to;
          }
          return data.released.filter(filter).map(nameMapper(data.name));
        }
      },
      {
        regexp: /^electron\\\\s*(>=?|<=?)\\\\s*([\\\\d.]+)$/i,
        select: function(context, sign, version) {
          var versionToUse = normalizeElectron(version);
          return Object.keys(e2c).filter(generateFilter(sign, versionToUse)).map(function(i) {
            return \\"chrome \\" + e2c[i];
          });
        }
      },
      {
        regexp: /^node\\\\s*(>=?|<=?)\\\\s*([\\\\d.]+)$/i,
        select: function(context, sign, version) {
          var nodeVersions = jsReleases.filter(function(i) {
            return i.name === \\"nodejs\\";
          }).map(function(i) {
            return i.version;
          });
          return nodeVersions.filter(generateSemverFilter(sign, version)).map(function(v) {
            return \\"node \\" + v;
          });
        }
      },
      {
        regexp: /^(\\\\w+)\\\\s*(>=?|<=?)\\\\s*([\\\\d.]+)$/,
        select: function(context, name, sign, version) {
          var data = checkName(name, context);
          var alias = browserslist.versionAliases[data.name][version];
          if (alias) {
            version = alias;
          }
          return data.released.filter(generateFilter(sign, version)).map(function(v) {
            return data.name + \\" \\" + v;
          });
        }
      },
      {
        regexp: /^(firefox|ff|fx)\\\\s+esr$/i,
        select: function() {
          return [\\"firefox 78\\", \\"firefox 91\\"];
        }
      },
      {
        regexp: /(operamini|op_mini)\\\\s+all/i,
        select: function() {
          return [\\"op_mini all\\"];
        }
      },
      {
        regexp: /^electron\\\\s+([\\\\d.]+)$/i,
        select: function(context, version) {
          var versionToUse = normalizeElectron(version);
          var chrome = e2c[versionToUse];
          if (!chrome) {
            throw new BrowserslistError(\\"Unknown version \\" + version + \\" of electron\\");
          }
          return [\\"chrome \\" + chrome];
        }
      },
      {
        regexp: /^node\\\\s+(\\\\d+)$/i,
        select: nodeQuery
      },
      {
        regexp: /^node\\\\s+(\\\\d+\\\\.\\\\d+)$/i,
        select: nodeQuery
      },
      {
        regexp: /^node\\\\s+(\\\\d+\\\\.\\\\d+\\\\.\\\\d+)$/i,
        select: nodeQuery
      },
      {
        regexp: /^current\\\\s+node$/i,
        select: function(context) {
          return [env.currentNode(resolve, context)];
        }
      },
      {
        regexp: /^maintained\\\\s+node\\\\s+versions$/i,
        select: function(context) {
          var now = Date.now();
          var queries = Object.keys(jsEOL).filter(function(key) {
            return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);
          }).map(function(key) {
            return \\"node \\" + key.slice(1);
          });
          return resolve(queries, context);
        }
      },
      {
        regexp: /^phantomjs\\\\s+1.9$/i,
        select: function() {
          return [\\"safari 5\\"];
        }
      },
      {
        regexp: /^phantomjs\\\\s+2.1$/i,
        select: function() {
          return [\\"safari 6\\"];
        }
      },
      {
        regexp: /^(\\\\w+)\\\\s+(tp|[\\\\d.]+)$/i,
        select: function(context, name, version) {
          if (/^tp$/i.test(version))
            version = \\"TP\\";
          var data = checkName(name, context);
          var alias = normalizeVersion(data, version);
          if (alias) {
            version = alias;
          } else {
            if (version.indexOf(\\".\\") === -1) {
              alias = version + \\".0\\";
            } else {
              alias = version.replace(/\\\\.0$/, \\"\\");
            }
            alias = normalizeVersion(data, alias);
            if (alias) {
              version = alias;
            } else if (context.ignoreUnknownVersions) {
              return [];
            } else {
              throw new BrowserslistError(\\"Unknown version \\" + version + \\" of \\" + name);
            }
          }
          return [data.name + \\" \\" + version];
        }
      },
      {
        regexp: /^browserslist config$/i,
        select: function(context) {
          return browserslist(void 0, context);
        }
      },
      {
        regexp: /^extends (.+)$/i,
        select: function(context, name) {
          return resolve(env.loadQueries(context, name), context);
        }
      },
      {
        regexp: /^defaults$/i,
        select: function(context) {
          return resolve(browserslist.defaults, context);
        }
      },
      {
        regexp: /^dead$/i,
        select: function(context) {
          var dead = [
            \\"ie <= 10\\",
            \\"ie_mob <= 11\\",
            \\"bb <= 10\\",
            \\"op_mob <= 12.1\\",
            \\"samsung 4\\"
          ];
          return resolve(dead, context);
        }
      },
      {
        regexp: /^(\\\\w+)$/i,
        select: function(context, name) {
          if (byName(name, context)) {
            throw new BrowserslistError(\\"Specify versions in Browserslist query for browser \\" + name);
          } else {
            throw unknownQuery(name);
          }
        }
      }
    ];
    (function() {
      for (var name in agents) {
        var browser = agents[name];
        browserslist.data[name] = {
          name,
          versions: normalize(agents[name].versions),
          released: normalize(agents[name].versions.slice(0, -3)),
          releaseDate: agents[name].release_date
        };
        fillUsage(browserslist.usage.global, name, browser.usage_global);
        browserslist.versionAliases[name] = {};
        for (var i = 0; i < browser.versions.length; i++) {
          var full = browser.versions[i];
          if (!full)
            continue;
          if (full.indexOf(\\"-\\") !== -1) {
            var interval = full.split(\\"-\\");
            for (var j = 0; j < interval.length; j++) {
              browserslist.versionAliases[name][interval[j]] = full;
            }
          }
        }
      }
      browserslist.versionAliases.op_mob[\\"59\\"] = \\"58\\";
    })();
    module2.exports = browserslist;
  }
});

// node_modules/.pnpm/@babel+helper-validator-option@7.16.7/node_modules/@babel/helper-validator-option/lib/find-suggestion.js
var require_find_suggestion = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-validator-option@7.16.7/node_modules/@babel/helper-validator-option/lib/find-suggestion.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.findSuggestion = findSuggestion;
    var {
      min
    } = Math;
    function levenshtein(a2, b) {
      let t = [], u = [], i, j;
      const m = a2.length, n = b.length;
      if (!m) {
        return n;
      }
      if (!n) {
        return m;
      }
      for (j = 0; j <= n; j++) {
        t[j] = j;
      }
      for (i = 1; i <= m; i++) {
        for (u = [i], j = 1; j <= n; j++) {
          u[j] = a2[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;
        }
        t = u;
      }
      return u[n];
    }
    function findSuggestion(str, arr) {
      const distances = arr.map((el) => levenshtein(el, str));
      return arr[distances.indexOf(min(...distances))];
    }
  }
});

// node_modules/.pnpm/@babel+helper-validator-option@7.16.7/node_modules/@babel/helper-validator-option/lib/validator.js
var require_validator = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-validator-option@7.16.7/node_modules/@babel/helper-validator-option/lib/validator.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.OptionValidator = void 0;
    var _findSuggestion = require_find_suggestion();
    var OptionValidator = class {
      constructor(descriptor) {
        this.descriptor = descriptor;
      }
      validateTopLevelOptions(options, TopLevelOptionShape) {
        const validOptionNames = Object.keys(TopLevelOptionShape);
        for (const option of Object.keys(options)) {
          if (!validOptionNames.includes(option)) {
            throw new Error(this.formatMessage(\`'\${option}' is not a valid top-level option.
- Did you mean '\${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?\`));
          }
        }
      }
      validateBooleanOption(name, value, defaultValue) {
        if (value === void 0) {
          return defaultValue;
        } else {
          this.invariant(typeof value === \\"boolean\\", \`'\${name}' option must be a boolean.\`);
        }
        return value;
      }
      validateStringOption(name, value, defaultValue) {
        if (value === void 0) {
          return defaultValue;
        } else {
          this.invariant(typeof value === \\"string\\", \`'\${name}' option must be a string.\`);
        }
        return value;
      }
      invariant(condition, message) {
        if (!condition) {
          throw new Error(this.formatMessage(message));
        }
      }
      formatMessage(message) {
        return \`\${this.descriptor}: \${message}\`;
      }
    };
    exports.OptionValidator = OptionValidator;
  }
});

// node_modules/.pnpm/@babel+helper-validator-option@7.16.7/node_modules/@babel/helper-validator-option/lib/index.js
var require_lib19 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-validator-option@7.16.7/node_modules/@babel/helper-validator-option/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports, \\"OptionValidator\\", {
      enumerable: true,
      get: function() {
        return _validator.OptionValidator;
      }
    });
    Object.defineProperty(exports, \\"findSuggestion\\", {
      enumerable: true,
      get: function() {
        return _findSuggestion.findSuggestion;
      }
    });
    var _validator = require_validator();
    var _findSuggestion = require_find_suggestion();
  }
});

// node_modules/.pnpm/@babel+compat-data@7.16.8/node_modules/@babel/compat-data/data/native-modules.json
var require_native_modules = __commonJS({
  \\"node_modules/.pnpm/@babel+compat-data@7.16.8/node_modules/@babel/compat-data/data/native-modules.json\\"(exports, module2) {
    module2.exports = {
      \\"es6.module\\": {
        chrome: \\"61\\",
        and_chr: \\"61\\",
        edge: \\"16\\",
        firefox: \\"60\\",
        and_ff: \\"60\\",
        node: \\"13.2.0\\",
        opera: \\"48\\",
        op_mob: \\"48\\",
        safari: \\"10.1\\",
        ios: \\"10.3\\",
        samsung: \\"8.2\\",
        android: \\"61\\",
        electron: \\"2.0\\",
        ios_saf: \\"10.3\\"
      }
    };
  }
});

// node_modules/.pnpm/@babel+compat-data@7.16.8/node_modules/@babel/compat-data/native-modules.js
var require_native_modules2 = __commonJS({
  \\"node_modules/.pnpm/@babel+compat-data@7.16.8/node_modules/@babel/compat-data/native-modules.js\\"(exports, module2) {
    module2.exports = require_native_modules();
  }
});

// node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/targets.js
var require_targets = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/targets.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.unreleasedLabels = exports.browserNameMap = void 0;
    var unreleasedLabels = {
      safari: \\"tp\\"
    };
    exports.unreleasedLabels = unreleasedLabels;
    var browserNameMap = {
      and_chr: \\"chrome\\",
      and_ff: \\"firefox\\",
      android: \\"android\\",
      chrome: \\"chrome\\",
      edge: \\"edge\\",
      firefox: \\"firefox\\",
      ie: \\"ie\\",
      ie_mob: \\"ie\\",
      ios_saf: \\"ios\\",
      node: \\"node\\",
      op_mob: \\"opera\\",
      opera: \\"opera\\",
      safari: \\"safari\\",
      samsung: \\"samsung\\"
    };
    exports.browserNameMap = browserNameMap;
  }
});

// node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/utils.js
var require_utils3 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/utils.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.getHighestUnreleased = getHighestUnreleased;
    exports.getLowestImplementedVersion = getLowestImplementedVersion;
    exports.getLowestUnreleased = getLowestUnreleased;
    exports.isUnreleasedVersion = isUnreleasedVersion;
    exports.semverMin = semverMin;
    exports.semverify = semverify;
    var _semver = require_semver();
    var _helperValidatorOption = require_lib19();
    var _targets = require_targets();
    var versionRegExp = /^(\\\\d+|\\\\d+.\\\\d+)$/;
    var v = new _helperValidatorOption.OptionValidator(\\"@babel/helper-compilation-targets\\");
    function semverMin(first, second) {
      return first && _semver.lt(first, second) ? first : second;
    }
    function semverify(version) {
      if (typeof version === \\"string\\" && _semver.valid(version)) {
        return version;
      }
      v.invariant(typeof version === \\"number\\" || typeof version === \\"string\\" && versionRegExp.test(version), \`'\${version}' is not a valid version\`);
      const split = version.toString().split(\\".\\");
      while (split.length < 3) {
        split.push(\\"0\\");
      }
      return split.join(\\".\\");
    }
    function isUnreleasedVersion(version, env) {
      const unreleasedLabel = _targets.unreleasedLabels[env];
      return !!unreleasedLabel && unreleasedLabel === version.toString().toLowerCase();
    }
    function getLowestUnreleased(a2, b, env) {
      const unreleasedLabel = _targets.unreleasedLabels[env];
      const hasUnreleased = [a2, b].some((item) => item === unreleasedLabel);
      if (hasUnreleased) {
        return a2 === hasUnreleased ? b : a2 || b;
      }
      return semverMin(a2, b);
    }
    function getHighestUnreleased(a2, b, env) {
      return getLowestUnreleased(a2, b, env) === a2 ? b : a2;
    }
    function getLowestImplementedVersion(plugin, environment) {
      const result = plugin[environment];
      if (!result && environment === \\"android\\") {
        return plugin.chrome;
      }
      return result;
    }
  }
});

// node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/options.js
var require_options2 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/options.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.TargetNames = void 0;
    var TargetNames = {
      node: \\"node\\",
      chrome: \\"chrome\\",
      opera: \\"opera\\",
      edge: \\"edge\\",
      firefox: \\"firefox\\",
      safari: \\"safari\\",
      ie: \\"ie\\",
      ios: \\"ios\\",
      android: \\"android\\",
      electron: \\"electron\\",
      samsung: \\"samsung\\",
      rhino: \\"rhino\\"
    };
    exports.TargetNames = TargetNames;
  }
});

// node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/pretty.js
var require_pretty = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/pretty.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.prettifyTargets = prettifyTargets;
    exports.prettifyVersion = prettifyVersion;
    var _semver = require_semver();
    var _targets = require_targets();
    function prettifyVersion(version) {
      if (typeof version !== \\"string\\") {
        return version;
      }
      const parts = [_semver.major(version)];
      const minor = _semver.minor(version);
      const patch = _semver.patch(version);
      if (minor || patch) {
        parts.push(minor);
      }
      if (patch) {
        parts.push(patch);
      }
      return parts.join(\\".\\");
    }
    function prettifyTargets(targets) {
      return Object.keys(targets).reduce((results, target) => {
        let value = targets[target];
        const unreleasedLabel = _targets.unreleasedLabels[target];
        if (typeof value === \\"string\\" && unreleasedLabel !== value) {
          value = prettifyVersion(value);
        }
        results[target] = value;
        return results;
      }, {});
    }
  }
});

// node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/debug.js
var require_debug = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/debug.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.getInclusionReasons = getInclusionReasons;
    var _semver = require_semver();
    var _pretty = require_pretty();
    var _utils = require_utils3();
    function getInclusionReasons(item, targetVersions, list) {
      const minVersions = list[item] || {};
      return Object.keys(targetVersions).reduce((result, env) => {
        const minVersion = (0, _utils.getLowestImplementedVersion)(minVersions, env);
        const targetVersion = targetVersions[env];
        if (!minVersion) {
          result[env] = (0, _pretty.prettifyVersion)(targetVersion);
        } else {
          const minIsUnreleased = (0, _utils.isUnreleasedVersion)(minVersion, env);
          const targetIsUnreleased = (0, _utils.isUnreleasedVersion)(targetVersion, env);
          if (!targetIsUnreleased && (minIsUnreleased || _semver.lt(targetVersion.toString(), (0, _utils.semverify)(minVersion)))) {
            result[env] = (0, _pretty.prettifyVersion)(targetVersion);
          }
        }
        return result;
      }, {});
    }
  }
});

// node_modules/.pnpm/@babel+compat-data@7.16.8/node_modules/@babel/compat-data/data/plugins.json
var require_plugins2 = __commonJS({
  \\"node_modules/.pnpm/@babel+compat-data@7.16.8/node_modules/@babel/compat-data/data/plugins.json\\"(exports, module2) {
    module2.exports = {
      \\"proposal-class-static-block\\": {
        chrome: \\"94\\",
        opera: \\"80\\",
        edge: \\"94\\",
        firefox: \\"93\\",
        node: \\"16.11\\"
      },
      \\"proposal-private-property-in-object\\": {
        chrome: \\"91\\",
        opera: \\"77\\",
        edge: \\"91\\",
        firefox: \\"90\\",
        safari: \\"15\\",
        node: \\"16.9\\",
        ios: \\"15\\",
        electron: \\"13.0\\"
      },
      \\"proposal-class-properties\\": {
        chrome: \\"74\\",
        opera: \\"62\\",
        edge: \\"79\\",
        firefox: \\"90\\",
        safari: \\"14.1\\",
        node: \\"12\\",
        ios: \\"15\\",
        samsung: \\"11\\",
        electron: \\"6.0\\"
      },
      \\"proposal-private-methods\\": {
        chrome: \\"84\\",
        opera: \\"70\\",
        edge: \\"84\\",
        firefox: \\"90\\",
        safari: \\"15\\",
        node: \\"14.6\\",
        ios: \\"15\\",
        samsung: \\"14\\",
        electron: \\"10.0\\"
      },
      \\"proposal-numeric-separator\\": {
        chrome: \\"75\\",
        opera: \\"62\\",
        edge: \\"79\\",
        firefox: \\"70\\",
        safari: \\"13\\",
        node: \\"12.5\\",
        ios: \\"13\\",
        samsung: \\"11\\",
        electron: \\"6.0\\"
      },
      \\"proposal-logical-assignment-operators\\": {
        chrome: \\"85\\",
        opera: \\"71\\",
        edge: \\"85\\",
        firefox: \\"79\\",
        safari: \\"14\\",
        node: \\"15\\",
        ios: \\"14\\",
        samsung: \\"14\\",
        electron: \\"10.0\\"
      },
      \\"proposal-nullish-coalescing-operator\\": {
        chrome: \\"80\\",
        opera: \\"67\\",
        edge: \\"80\\",
        firefox: \\"72\\",
        safari: \\"13.1\\",
        node: \\"14\\",
        ios: \\"13.4\\",
        samsung: \\"13\\",
        electron: \\"8.0\\"
      },
      \\"proposal-optional-chaining\\": {
        chrome: \\"91\\",
        opera: \\"77\\",
        edge: \\"91\\",
        firefox: \\"74\\",
        safari: \\"13.1\\",
        node: \\"16.9\\",
        ios: \\"13.4\\",
        electron: \\"13.0\\"
      },
      \\"proposal-json-strings\\": {
        chrome: \\"66\\",
        opera: \\"53\\",
        edge: \\"79\\",
        firefox: \\"62\\",
        safari: \\"12\\",
        node: \\"10\\",
        ios: \\"12\\",
        samsung: \\"9\\",
        electron: \\"3.0\\"
      },
      \\"proposal-optional-catch-binding\\": {
        chrome: \\"66\\",
        opera: \\"53\\",
        edge: \\"79\\",
        firefox: \\"58\\",
        safari: \\"11.1\\",
        node: \\"10\\",
        ios: \\"11.3\\",
        samsung: \\"9\\",
        electron: \\"3.0\\"
      },
      \\"transform-parameters\\": {
        chrome: \\"49\\",
        opera: \\"36\\",
        edge: \\"18\\",
        firefox: \\"53\\",
        node: \\"6\\",
        samsung: \\"5\\",
        electron: \\"0.37\\"
      },
      \\"proposal-async-generator-functions\\": {
        chrome: \\"63\\",
        opera: \\"50\\",
        edge: \\"79\\",
        firefox: \\"57\\",
        safari: \\"12\\",
        node: \\"10\\",
        ios: \\"12\\",
        samsung: \\"8\\",
        electron: \\"3.0\\"
      },
      \\"proposal-object-rest-spread\\": {
        chrome: \\"60\\",
        opera: \\"47\\",
        edge: \\"79\\",
        firefox: \\"55\\",
        safari: \\"11.1\\",
        node: \\"8.3\\",
        ios: \\"11.3\\",
        samsung: \\"8\\",
        electron: \\"2.0\\"
      },
      \\"transform-dotall-regex\\": {
        chrome: \\"62\\",
        opera: \\"49\\",
        edge: \\"79\\",
        firefox: \\"78\\",
        safari: \\"11.1\\",
        node: \\"8.10\\",
        ios: \\"11.3\\",
        samsung: \\"8\\",
        electron: \\"3.0\\"
      },
      \\"proposal-unicode-property-regex\\": {
        chrome: \\"64\\",
        opera: \\"51\\",
        edge: \\"79\\",
        firefox: \\"78\\",
        safari: \\"11.1\\",
        node: \\"10\\",
        ios: \\"11.3\\",
        samsung: \\"9\\",
        electron: \\"3.0\\"
      },
      \\"transform-named-capturing-groups-regex\\": {
        chrome: \\"64\\",
        opera: \\"51\\",
        edge: \\"79\\",
        firefox: \\"78\\",
        safari: \\"11.1\\",
        node: \\"10\\",
        ios: \\"11.3\\",
        samsung: \\"9\\",
        electron: \\"3.0\\"
      },
      \\"transform-async-to-generator\\": {
        chrome: \\"55\\",
        opera: \\"42\\",
        edge: \\"15\\",
        firefox: \\"52\\",
        safari: \\"11\\",
        node: \\"7.6\\",
        ios: \\"11\\",
        samsung: \\"6\\",
        electron: \\"1.6\\"
      },
      \\"transform-exponentiation-operator\\": {
        chrome: \\"52\\",
        opera: \\"39\\",
        edge: \\"14\\",
        firefox: \\"52\\",
        safari: \\"10.1\\",
        node: \\"7\\",
        ios: \\"10.3\\",
        samsung: \\"6\\",
        electron: \\"1.3\\"
      },
      \\"transform-template-literals\\": {
        chrome: \\"41\\",
        opera: \\"28\\",
        edge: \\"13\\",
        firefox: \\"34\\",
        safari: \\"13\\",
        node: \\"4\\",
        ios: \\"13\\",
        samsung: \\"3.4\\",
        electron: \\"0.21\\"
      },
      \\"transform-literals\\": {
        chrome: \\"44\\",
        opera: \\"31\\",
        edge: \\"12\\",
        firefox: \\"53\\",
        safari: \\"9\\",
        node: \\"4\\",
        ios: \\"9\\",
        samsung: \\"4\\",
        electron: \\"0.30\\"
      },
      \\"transform-function-name\\": {
        chrome: \\"51\\",
        opera: \\"38\\",
        edge: \\"79\\",
        firefox: \\"53\\",
        safari: \\"10\\",
        node: \\"6.5\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"1.2\\"
      },
      \\"transform-arrow-functions\\": {
        chrome: \\"47\\",
        opera: \\"34\\",
        edge: \\"13\\",
        firefox: \\"43\\",
        safari: \\"10\\",
        node: \\"6\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        rhino: \\"1.7.13\\",
        electron: \\"0.36\\"
      },
      \\"transform-block-scoped-functions\\": {
        chrome: \\"41\\",
        opera: \\"28\\",
        edge: \\"12\\",
        firefox: \\"46\\",
        safari: \\"10\\",
        node: \\"4\\",
        ie: \\"11\\",
        ios: \\"10\\",
        samsung: \\"3.4\\",
        electron: \\"0.21\\"
      },
      \\"transform-classes\\": {
        chrome: \\"46\\",
        opera: \\"33\\",
        edge: \\"13\\",
        firefox: \\"45\\",
        safari: \\"10\\",
        node: \\"5\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"0.36\\"
      },
      \\"transform-object-super\\": {
        chrome: \\"46\\",
        opera: \\"33\\",
        edge: \\"13\\",
        firefox: \\"45\\",
        safari: \\"10\\",
        node: \\"5\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"0.36\\"
      },
      \\"transform-shorthand-properties\\": {
        chrome: \\"43\\",
        opera: \\"30\\",
        edge: \\"12\\",
        firefox: \\"33\\",
        safari: \\"9\\",
        node: \\"4\\",
        ios: \\"9\\",
        samsung: \\"4\\",
        electron: \\"0.27\\"
      },
      \\"transform-duplicate-keys\\": {
        chrome: \\"42\\",
        opera: \\"29\\",
        edge: \\"12\\",
        firefox: \\"34\\",
        safari: \\"9\\",
        node: \\"4\\",
        ios: \\"9\\",
        samsung: \\"3.4\\",
        electron: \\"0.25\\"
      },
      \\"transform-computed-properties\\": {
        chrome: \\"44\\",
        opera: \\"31\\",
        edge: \\"12\\",
        firefox: \\"34\\",
        safari: \\"7.1\\",
        node: \\"4\\",
        ios: \\"8\\",
        samsung: \\"4\\",
        electron: \\"0.30\\"
      },
      \\"transform-for-of\\": {
        chrome: \\"51\\",
        opera: \\"38\\",
        edge: \\"15\\",
        firefox: \\"53\\",
        safari: \\"10\\",
        node: \\"6.5\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"1.2\\"
      },
      \\"transform-sticky-regex\\": {
        chrome: \\"49\\",
        opera: \\"36\\",
        edge: \\"13\\",
        firefox: \\"3\\",
        safari: \\"10\\",
        node: \\"6\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"0.37\\"
      },
      \\"transform-unicode-escapes\\": {
        chrome: \\"44\\",
        opera: \\"31\\",
        edge: \\"12\\",
        firefox: \\"53\\",
        safari: \\"9\\",
        node: \\"4\\",
        ios: \\"9\\",
        samsung: \\"4\\",
        electron: \\"0.30\\"
      },
      \\"transform-unicode-regex\\": {
        chrome: \\"50\\",
        opera: \\"37\\",
        edge: \\"13\\",
        firefox: \\"46\\",
        safari: \\"12\\",
        node: \\"6\\",
        ios: \\"12\\",
        samsung: \\"5\\",
        electron: \\"1.1\\"
      },
      \\"transform-spread\\": {
        chrome: \\"46\\",
        opera: \\"33\\",
        edge: \\"13\\",
        firefox: \\"45\\",
        safari: \\"10\\",
        node: \\"5\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"0.36\\"
      },
      \\"transform-destructuring\\": {
        chrome: \\"51\\",
        opera: \\"38\\",
        edge: \\"15\\",
        firefox: \\"53\\",
        safari: \\"10\\",
        node: \\"6.5\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"1.2\\"
      },
      \\"transform-block-scoping\\": {
        chrome: \\"49\\",
        opera: \\"36\\",
        edge: \\"14\\",
        firefox: \\"51\\",
        safari: \\"11\\",
        node: \\"6\\",
        ios: \\"11\\",
        samsung: \\"5\\",
        electron: \\"0.37\\"
      },
      \\"transform-typeof-symbol\\": {
        chrome: \\"38\\",
        opera: \\"25\\",
        edge: \\"12\\",
        firefox: \\"36\\",
        safari: \\"9\\",
        node: \\"0.12\\",
        ios: \\"9\\",
        samsung: \\"3\\",
        rhino: \\"1.7.13\\",
        electron: \\"0.20\\"
      },
      \\"transform-new-target\\": {
        chrome: \\"46\\",
        opera: \\"33\\",
        edge: \\"14\\",
        firefox: \\"41\\",
        safari: \\"10\\",
        node: \\"5\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"0.36\\"
      },
      \\"transform-regenerator\\": {
        chrome: \\"50\\",
        opera: \\"37\\",
        edge: \\"13\\",
        firefox: \\"53\\",
        safari: \\"10\\",
        node: \\"6\\",
        ios: \\"10\\",
        samsung: \\"5\\",
        electron: \\"1.1\\"
      },
      \\"transform-member-expression-literals\\": {
        chrome: \\"7\\",
        opera: \\"12\\",
        edge: \\"12\\",
        firefox: \\"2\\",
        safari: \\"5.1\\",
        node: \\"0.10\\",
        ie: \\"9\\",
        android: \\"4\\",
        ios: \\"6\\",
        phantom: \\"2\\",
        samsung: \\"1\\",
        rhino: \\"1.7.13\\",
        electron: \\"0.20\\"
      },
      \\"transform-property-literals\\": {
        chrome: \\"7\\",
        opera: \\"12\\",
        edge: \\"12\\",
        firefox: \\"2\\",
        safari: \\"5.1\\",
        node: \\"0.10\\",
        ie: \\"9\\",
        android: \\"4\\",
        ios: \\"6\\",
        phantom: \\"2\\",
        samsung: \\"1\\",
        rhino: \\"1.7.13\\",
        electron: \\"0.20\\"
      },
      \\"transform-reserved-words\\": {
        chrome: \\"13\\",
        opera: \\"10.50\\",
        edge: \\"12\\",
        firefox: \\"2\\",
        safari: \\"3.1\\",
        node: \\"0.10\\",
        ie: \\"9\\",
        android: \\"4.4\\",
        ios: \\"6\\",
        phantom: \\"2\\",
        samsung: \\"1\\",
        rhino: \\"1.7.13\\",
        electron: \\"0.20\\"
      },
      \\"proposal-export-namespace-from\\": {
        chrome: \\"72\\",
        and_chr: \\"72\\",
        edge: \\"79\\",
        firefox: \\"80\\",
        and_ff: \\"80\\",
        node: \\"13.2\\",
        opera: \\"60\\",
        op_mob: \\"51\\",
        samsung: \\"11.0\\",
        android: \\"72\\",
        electron: \\"5.0\\"
      }
    };
  }
});

// node_modules/.pnpm/@babel+compat-data@7.16.8/node_modules/@babel/compat-data/plugins.js
var require_plugins3 = __commonJS({
  \\"node_modules/.pnpm/@babel+compat-data@7.16.8/node_modules/@babel/compat-data/plugins.js\\"(exports, module2) {
    module2.exports = require_plugins2();
  }
});

// node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/filter-items.js
var require_filter_items = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/filter-items.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = filterItems;
    exports.isRequired = isRequired;
    exports.targetsSupported = targetsSupported;
    var _semver = require_semver();
    var _plugins = require_plugins3();
    var _utils = require_utils3();
    function targetsSupported(target, support) {
      const targetEnvironments = Object.keys(target);
      if (targetEnvironments.length === 0) {
        return false;
      }
      const unsupportedEnvironments = targetEnvironments.filter((environment) => {
        const lowestImplementedVersion = (0, _utils.getLowestImplementedVersion)(support, environment);
        if (!lowestImplementedVersion) {
          return true;
        }
        const lowestTargetedVersion = target[environment];
        if ((0, _utils.isUnreleasedVersion)(lowestTargetedVersion, environment)) {
          return false;
        }
        if ((0, _utils.isUnreleasedVersion)(lowestImplementedVersion, environment)) {
          return true;
        }
        if (!_semver.valid(lowestTargetedVersion.toString())) {
          throw new Error(\`Invalid version passed for target \\"\${environment}\\": \\"\${lowestTargetedVersion}\\". Versions must be in semver format (major.minor.patch)\`);
        }
        return _semver.gt((0, _utils.semverify)(lowestImplementedVersion), lowestTargetedVersion.toString());
      });
      return unsupportedEnvironments.length === 0;
    }
    function isRequired(name, targets, {
      compatData = _plugins,
      includes,
      excludes
    } = {}) {
      if (excludes != null && excludes.has(name))
        return false;
      if (includes != null && includes.has(name))
        return true;
      return !targetsSupported(targets, compatData[name]);
    }
    function filterItems(list, includes, excludes, targets, defaultIncludes, defaultExcludes, pluginSyntaxMap) {
      const result = /* @__PURE__ */ new Set();
      const options = {
        compatData: list,
        includes,
        excludes
      };
      for (const item in list) {
        if (isRequired(item, targets, options)) {
          result.add(item);
        } else if (pluginSyntaxMap) {
          const shippedProposalsSyntax = pluginSyntaxMap.get(item);
          if (shippedProposalsSyntax) {
            result.add(shippedProposalsSyntax);
          }
        }
      }
      if (defaultIncludes) {
        defaultIncludes.forEach((item) => !excludes.has(item) && result.add(item));
      }
      if (defaultExcludes) {
        defaultExcludes.forEach((item) => !includes.has(item) && result.delete(item));
      }
      return result;
    }
  }
});

// node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/index.js
var require_lib20 = __commonJS({
  \\"node_modules/.pnpm/@babel+helper-compilation-targets@7.16.7_@babel+core@7.16.7/node_modules/@babel/helper-compilation-targets/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports, \\"TargetNames\\", {
      enumerable: true,
      get: function() {
        return _options.TargetNames;
      }
    });
    exports.default = getTargets;
    Object.defineProperty(exports, \\"filterItems\\", {
      enumerable: true,
      get: function() {
        return _filterItems.default;
      }
    });
    Object.defineProperty(exports, \\"getInclusionReasons\\", {
      enumerable: true,
      get: function() {
        return _debug.getInclusionReasons;
      }
    });
    exports.isBrowsersQueryValid = isBrowsersQueryValid;
    Object.defineProperty(exports, \\"isRequired\\", {
      enumerable: true,
      get: function() {
        return _filterItems.isRequired;
      }
    });
    Object.defineProperty(exports, \\"prettifyTargets\\", {
      enumerable: true,
      get: function() {
        return _pretty.prettifyTargets;
      }
    });
    Object.defineProperty(exports, \\"unreleasedLabels\\", {
      enumerable: true,
      get: function() {
        return _targets.unreleasedLabels;
      }
    });
    var _browserslist = require_browserslist();
    var _helperValidatorOption = require_lib19();
    var _nativeModules = require_native_modules2();
    var _utils = require_utils3();
    var _targets = require_targets();
    var _options = require_options2();
    var _pretty = require_pretty();
    var _debug = require_debug();
    var _filterItems = require_filter_items();
    var ESM_SUPPORT = _nativeModules[\\"es6.module\\"];
    var v = new _helperValidatorOption.OptionValidator(\\"@babel/helper-compilation-targets\\");
    function validateTargetNames(targets) {
      const validTargets = Object.keys(_options.TargetNames);
      for (const target of Object.keys(targets)) {
        if (!(target in _options.TargetNames)) {
          throw new Error(v.formatMessage(\`'\${target}' is not a valid target
- Did you mean '\${(0, _helperValidatorOption.findSuggestion)(target, validTargets)}'?\`));
        }
      }
      return targets;
    }
    function isBrowsersQueryValid(browsers) {
      return typeof browsers === \\"string\\" || Array.isArray(browsers) && browsers.every((b) => typeof b === \\"string\\");
    }
    function validateBrowsers(browsers) {
      v.invariant(browsers === void 0 || isBrowsersQueryValid(browsers), \`'\${String(browsers)}' is not a valid browserslist query\`);
      return browsers;
    }
    function getLowestVersions(browsers) {
      return browsers.reduce((all, browser) => {
        const [browserName, browserVersion] = browser.split(\\" \\");
        const normalizedBrowserName = _targets.browserNameMap[browserName];
        if (!normalizedBrowserName) {
          return all;
        }
        try {
          const splitVersion = browserVersion.split(\\"-\\")[0].toLowerCase();
          const isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, browserName);
          if (!all[normalizedBrowserName]) {
            all[normalizedBrowserName] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);
            return all;
          }
          const version = all[normalizedBrowserName];
          const isUnreleased = (0, _utils.isUnreleasedVersion)(version, browserName);
          if (isUnreleased && isSplitUnreleased) {
            all[normalizedBrowserName] = (0, _utils.getLowestUnreleased)(version, splitVersion, browserName);
          } else if (isUnreleased) {
            all[normalizedBrowserName] = (0, _utils.semverify)(splitVersion);
          } else if (!isUnreleased && !isSplitUnreleased) {
            const parsedBrowserVersion = (0, _utils.semverify)(splitVersion);
            all[normalizedBrowserName] = (0, _utils.semverMin)(version, parsedBrowserVersion);
          }
        } catch (e) {
        }
        return all;
      }, {});
    }
    function outputDecimalWarning(decimalTargets) {
      if (!decimalTargets.length) {
        return;
      }
      console.warn(\\"Warning, the following targets are using a decimal version:\\\\n\\");
      decimalTargets.forEach(({
        target,
        value
      }) => console.warn(\`  \${target}: \${value}\`));
      console.warn(\`
We recommend using a string for minor/patch versions to avoid numbers like 6.10
getting parsed as 6.1, which can lead to unexpected behavior.
\`);
    }
    function semverifyTarget(target, value) {
      try {
        return (0, _utils.semverify)(value);
      } catch (error) {
        throw new Error(v.formatMessage(\`'\${value}' is not a valid value for 'targets.\${target}'.\`));
      }
    }
    var targetParserMap = {
      __default(target, value) {
        const version = (0, _utils.isUnreleasedVersion)(value, target) ? value.toLowerCase() : semverifyTarget(target, value);
        return [target, version];
      },
      node(target, value) {
        const parsed = value === true || value === \\"current\\" ? process.versions.node : semverifyTarget(target, value);
        return [target, parsed];
      }
    };
    function generateTargets(inputTargets) {
      const input = Object.assign({}, inputTargets);
      delete input.esmodules;
      delete input.browsers;
      return input;
    }
    function resolveTargets(queries, env) {
      const resolved = _browserslist(queries, {
        mobileToDesktop: true,
        env
      });
      return getLowestVersions(resolved);
    }
    function getTargets(inputTargets = {}, options = {}) {
      var _browsers;
      let {
        browsers,
        esmodules
      } = inputTargets;
      const {
        configPath = \\".\\"
      } = options;
      validateBrowsers(browsers);
      const input = generateTargets(inputTargets);
      let targets = validateTargetNames(input);
      const shouldParseBrowsers = !!browsers;
      const hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;
      const shouldSearchForConfig = !options.ignoreBrowserslistConfig && !hasTargets;
      if (!browsers && shouldSearchForConfig) {
        browsers = _browserslist.loadConfig({
          config: options.configFile,
          path: configPath,
          env: options.browserslistEnv
        });
        if (browsers == null) {
          {
            browsers = [];
          }
        }
      }
      if (esmodules && (esmodules !== \\"intersect\\" || !((_browsers = browsers) != null && _browsers.length))) {
        browsers = Object.keys(ESM_SUPPORT).map((browser) => \`\${browser} >= \${ESM_SUPPORT[browser]}\`).join(\\", \\");
        esmodules = false;
      }
      if (browsers) {
        const queryBrowsers = resolveTargets(browsers, options.browserslistEnv);
        if (esmodules === \\"intersect\\") {
          for (const browser of Object.keys(queryBrowsers)) {
            const version = queryBrowsers[browser];
            if (ESM_SUPPORT[browser]) {
              queryBrowsers[browser] = (0, _utils.getHighestUnreleased)(version, (0, _utils.semverify)(ESM_SUPPORT[browser]), browser);
            } else {
              delete queryBrowsers[browser];
            }
          }
        }
        targets = Object.assign(queryBrowsers, targets);
      }
      const result = {};
      const decimalWarnings = [];
      for (const target of Object.keys(targets).sort()) {
        var _targetParserMap$targ;
        const value = targets[target];
        if (typeof value === \\"number\\" && value % 1 !== 0) {
          decimalWarnings.push({
            target,
            value
          });
        }
        const parser = (_targetParserMap$targ = targetParserMap[target]) != null ? _targetParserMap$targ : targetParserMap.__default;
        const [parsedTarget, parsedValue] = parser(target, value);
        if (parsedValue) {
          result[parsedTarget] = parsedValue;
        }
      }
      outputDecimalWarning(decimalWarnings);
      return result;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/resolve-targets.js
var require_resolve_targets = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/resolve-targets.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
    exports.resolveTargets = resolveTargets;
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    function _helperCompilationTargets() {
      const data = require_lib20();
      _helperCompilationTargets = function() {
        return data;
      };
      return data;
    }
    function resolveBrowserslistConfigFile(browserslistConfigFile, configFileDir) {
      return _path().resolve(configFileDir, browserslistConfigFile);
    }
    function resolveTargets(options, root) {
      let targets = options.targets;
      if (typeof targets === \\"string\\" || Array.isArray(targets)) {
        targets = {
          browsers: targets
        };
      }
      if (targets && targets.esmodules) {
        targets = Object.assign({}, targets, {
          esmodules: \\"intersect\\"
        });
      }
      const {
        browserslistConfigFile
      } = options;
      let configFile;
      let ignoreBrowserslistConfig = false;
      if (typeof browserslistConfigFile === \\"string\\") {
        configFile = browserslistConfigFile;
      } else {
        ignoreBrowserslistConfig = browserslistConfigFile === false;
      }
      return (0, _helperCompilationTargets().default)(targets, {
        ignoreBrowserslistConfig,
        configFile,
        configPath: root,
        browserslistEnv: options.browserslistEnv
      });
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/config-descriptors.js
var require_config_descriptors = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/config-descriptors.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.createCachedDescriptors = createCachedDescriptors;
    exports.createDescriptor = createDescriptor;
    exports.createUncachedDescriptors = createUncachedDescriptors;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _files = require_files();
    var _item = require_item();
    var _caching = require_caching();
    var _resolveTargets = require_resolve_targets();
    function isEqualDescriptor(a2, b) {
      return a2.name === b.name && a2.value === b.value && a2.options === b.options && a2.dirname === b.dirname && a2.alias === b.alias && a2.ownPass === b.ownPass && (a2.file && a2.file.request) === (b.file && b.file.request) && (a2.file && a2.file.resolved) === (b.file && b.file.resolved);
    }
    function* handlerOf(value) {
      return value;
    }
    function optionsWithResolvedBrowserslistConfigFile(options, dirname) {
      if (typeof options.browserslistConfigFile === \\"string\\") {
        options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname);
      }
      return options;
    }
    function createCachedDescriptors(dirname, options, alias) {
      const {
        plugins,
        presets,
        passPerPreset
      } = options;
      return {
        options: optionsWithResolvedBrowserslistConfigFile(options, dirname),
        plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname)(alias) : () => handlerOf([]),
        presets: presets ? () => createCachedPresetDescriptors(presets, dirname)(alias)(!!passPerPreset) : () => handlerOf([])
      };
    }
    function createUncachedDescriptors(dirname, options, alias) {
      let plugins;
      let presets;
      return {
        options: optionsWithResolvedBrowserslistConfigFile(options, dirname),
        *plugins() {
          if (!plugins) {
            plugins = yield* createPluginDescriptors(options.plugins || [], dirname, alias);
          }
          return plugins;
        },
        *presets() {
          if (!presets) {
            presets = yield* createPresetDescriptors(options.presets || [], dirname, alias, !!options.passPerPreset);
          }
          return presets;
        }
      };
    }
    var PRESET_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap();
    var createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
      const dirname = cache.using((dir) => dir);
      return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
        const descriptors = yield* createPresetDescriptors(items, dirname, alias, passPerPreset);
        return descriptors.map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
      }));
    });
    var PLUGIN_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap();
    var createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
      const dirname = cache.using((dir) => dir);
      return (0, _caching.makeStrongCache)(function* (alias) {
        const descriptors = yield* createPluginDescriptors(items, dirname, alias);
        return descriptors.map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
      });
    });
    var DEFAULT_OPTIONS = {};
    function loadCachedDescriptor(cache, desc) {
      const {
        value,
        options = DEFAULT_OPTIONS
      } = desc;
      if (options === false)
        return desc;
      let cacheByOptions = cache.get(value);
      if (!cacheByOptions) {
        cacheByOptions = /* @__PURE__ */ new WeakMap();
        cache.set(value, cacheByOptions);
      }
      let possibilities = cacheByOptions.get(options);
      if (!possibilities) {
        possibilities = [];
        cacheByOptions.set(options, possibilities);
      }
      if (possibilities.indexOf(desc) === -1) {
        const matches = possibilities.filter((possibility) => isEqualDescriptor(possibility, desc));
        if (matches.length > 0) {
          return matches[0];
        }
        possibilities.push(desc);
      }
      return desc;
    }
    function* createPresetDescriptors(items, dirname, alias, passPerPreset) {
      return yield* createDescriptors(\\"preset\\", items, dirname, alias, passPerPreset);
    }
    function* createPluginDescriptors(items, dirname, alias) {
      return yield* createDescriptors(\\"plugin\\", items, dirname, alias);
    }
    function* createDescriptors(type, items, dirname, alias, ownPass) {
      const descriptors = yield* _gensync().all(items.map((item, index) => createDescriptor(item, dirname, {
        type,
        alias: \`\${alias}$\${index}\`,
        ownPass: !!ownPass
      })));
      assertNoDuplicates(descriptors);
      return descriptors;
    }
    function* createDescriptor(pair, dirname, {
      type,
      alias,
      ownPass
    }) {
      const desc = (0, _item.getItemDescriptor)(pair);
      if (desc) {
        return desc;
      }
      let name;
      let options;
      let value = pair;
      if (Array.isArray(value)) {
        if (value.length === 3) {
          [value, options, name] = value;
        } else {
          [value, options] = value;
        }
      }
      let file = void 0;
      let filepath = null;
      if (typeof value === \\"string\\") {
        if (typeof type !== \\"string\\") {
          throw new Error(\\"To resolve a string-based item, the type of item must be given\\");
        }
        const resolver = type === \\"plugin\\" ? _files.loadPlugin : _files.loadPreset;
        const request = value;
        ({
          filepath,
          value
        } = yield* resolver(value, dirname));
        file = {
          request,
          resolved: filepath
        };
      }
      if (!value) {
        throw new Error(\`Unexpected falsy value: \${String(value)}\`);
      }
      if (typeof value === \\"object\\" && value.__esModule) {
        if (value.default) {
          value = value.default;
        } else {
          throw new Error(\\"Must export a default export when using ES6 modules.\\");
        }
      }
      if (typeof value !== \\"object\\" && typeof value !== \\"function\\") {
        throw new Error(\`Unsupported format: \${typeof value}. Expected an object or a function.\`);
      }
      if (filepath !== null && typeof value === \\"object\\" && value) {
        throw new Error(\`Plugin/Preset files are not allowed to export objects, only functions. In \${filepath}\`);
      }
      return {
        name,
        alias: filepath || alias,
        value,
        options,
        dirname,
        ownPass,
        file
      };
    }
    function assertNoDuplicates(items) {
      const map = /* @__PURE__ */ new Map();
      for (const item of items) {
        if (typeof item.value !== \\"function\\")
          continue;
        let nameMap = map.get(item.value);
        if (!nameMap) {
          nameMap = /* @__PURE__ */ new Set();
          map.set(item.value, nameMap);
        }
        if (nameMap.has(item.name)) {
          const conflicts = items.filter((i) => i.value === item.value);
          throw new Error([\`Duplicate plugin/preset detected.\`, \`If you'd like to use two separate instances of a plugin,\`, \`they need separate names, e.g.\`, \`\`, \`  plugins: [\`, \`    ['some-plugin', {}],\`, \`    ['some-plugin', {}, 'some unique name'],\`, \`  ]\`, \`\`, \`Duplicates detected are:\`, \`\${JSON.stringify(conflicts, null, 2)}\`].join(\\"\\\\n\\"));
        }
        nameMap.add(item.name);
      }
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/item.js
var require_item = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/item.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.createConfigItem = createConfigItem;
    exports.createItemFromDescriptor = createItemFromDescriptor;
    exports.getItemDescriptor = getItemDescriptor;
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    var _configDescriptors = require_config_descriptors();
    function createItemFromDescriptor(desc) {
      return new ConfigItem(desc);
    }
    function* createConfigItem(value, {
      dirname = \\".\\",
      type
    } = {}) {
      const descriptor = yield* (0, _configDescriptors.createDescriptor)(value, _path().resolve(dirname), {
        type,
        alias: \\"programmatic item\\"
      });
      return createItemFromDescriptor(descriptor);
    }
    function getItemDescriptor(item) {
      if (item != null && item[CONFIG_ITEM_BRAND]) {
        return item._descriptor;
      }
      return void 0;
    }
    var CONFIG_ITEM_BRAND = Symbol.for(\\"@babel/core@7 - ConfigItem\\");
    var ConfigItem = class {
      constructor(descriptor) {
        this._descriptor = void 0;
        this[CONFIG_ITEM_BRAND] = true;
        this.value = void 0;
        this.options = void 0;
        this.dirname = void 0;
        this.name = void 0;
        this.file = void 0;
        this._descriptor = descriptor;
        Object.defineProperty(this, \\"_descriptor\\", {
          enumerable: false
        });
        Object.defineProperty(this, CONFIG_ITEM_BRAND, {
          enumerable: false
        });
        this.value = this._descriptor.value;
        this.options = this._descriptor.options;
        this.dirname = this._descriptor.dirname;
        this.name = this._descriptor.name;
        this.file = this._descriptor.file ? {
          request: this._descriptor.file.request,
          resolved: this._descriptor.file.resolved
        } : void 0;
        Object.freeze(this);
      }
    };
    Object.freeze(ConfigItem.prototype);
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/validation/removed.js
var require_removed = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/validation/removed.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      auxiliaryComment: {
        message: \\"Use \`auxiliaryCommentBefore\` or \`auxiliaryCommentAfter\`\\"
      },
      blacklist: {
        message: \\"Put the specific transforms you want in the \`plugins\` option\\"
      },
      breakConfig: {
        message: \\"This is not a necessary option in Babel 6\\"
      },
      experimental: {
        message: \\"Put the specific transforms you want in the \`plugins\` option\\"
      },
      externalHelpers: {
        message: \\"Use the \`external-helpers\` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/\\"
      },
      extra: {
        message: \\"\\"
      },
      jsxPragma: {
        message: \\"use the \`pragma\` option in the \`react-jsx\` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/\\"
      },
      loose: {
        message: \\"Specify the \`loose\` option for the relevant plugin you are using or use a preset that sets the option.\\"
      },
      metadataUsedHelpers: {
        message: \\"Not required anymore as this is enabled by default\\"
      },
      modules: {
        message: \\"Use the corresponding module transform plugin in the \`plugins\` option. Check out http://babeljs.io/docs/plugins/#modules\\"
      },
      nonStandard: {
        message: \\"Use the \`react-jsx\` and \`flow-strip-types\` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/\\"
      },
      optional: {
        message: \\"Put the specific transforms you want in the \`plugins\` option\\"
      },
      sourceMapName: {
        message: \\"The \`sourceMapName\` option has been removed because it makes more sense for the tooling that calls Babel to assign \`map.file\` themselves.\\"
      },
      stage: {
        message: \\"Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets\\"
      },
      whitelist: {
        message: \\"Put the specific transforms you want in the \`plugins\` option\\"
      },
      resolveModuleSource: {
        version: 6,
        message: \\"Use \`babel-plugin-module-resolver@3\`'s 'resolvePath' options\\"
      },
      metadata: {
        version: 6,
        message: \\"Generated plugin metadata is always included in the output result\\"
      },
      sourceMapTarget: {
        version: 6,
        message: \\"The \`sourceMapTarget\` option has been removed because it makes more sense for the tooling that calls Babel to assign \`map.file\` themselves.\\"
      }
    };
    exports.default = _default;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/validation/option-assertions.js
var require_option_assertions = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/validation/option-assertions.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.access = access;
    exports.assertArray = assertArray;
    exports.assertAssumptions = assertAssumptions;
    exports.assertBabelrcSearch = assertBabelrcSearch;
    exports.assertBoolean = assertBoolean;
    exports.assertCallerMetadata = assertCallerMetadata;
    exports.assertCompact = assertCompact;
    exports.assertConfigApplicableTest = assertConfigApplicableTest;
    exports.assertConfigFileSearch = assertConfigFileSearch;
    exports.assertFunction = assertFunction;
    exports.assertIgnoreList = assertIgnoreList;
    exports.assertInputSourceMap = assertInputSourceMap;
    exports.assertObject = assertObject;
    exports.assertPluginList = assertPluginList;
    exports.assertRootMode = assertRootMode;
    exports.assertSourceMaps = assertSourceMaps;
    exports.assertSourceType = assertSourceType;
    exports.assertString = assertString;
    exports.assertTargets = assertTargets;
    exports.msg = msg;
    function _helperCompilationTargets() {
      const data = require_lib20();
      _helperCompilationTargets = function() {
        return data;
      };
      return data;
    }
    var _options = require_options3();
    function msg(loc) {
      switch (loc.type) {
        case \\"root\\":
          return \`\`;
        case \\"env\\":
          return \`\${msg(loc.parent)}.env[\\"\${loc.name}\\"]\`;
        case \\"overrides\\":
          return \`\${msg(loc.parent)}.overrides[\${loc.index}]\`;
        case \\"option\\":
          return \`\${msg(loc.parent)}.\${loc.name}\`;
        case \\"access\\":
          return \`\${msg(loc.parent)}[\${JSON.stringify(loc.name)}]\`;
        default:
          throw new Error(\`Assertion failure: Unknown type \${loc.type}\`);
      }
    }
    function access(loc, name) {
      return {
        type: \\"access\\",
        name,
        parent: loc
      };
    }
    function assertRootMode(loc, value) {
      if (value !== void 0 && value !== \\"root\\" && value !== \\"upward\\" && value !== \\"upward-optional\\") {
        throw new Error(\`\${msg(loc)} must be a \\"root\\", \\"upward\\", \\"upward-optional\\" or undefined\`);
      }
      return value;
    }
    function assertSourceMaps(loc, value) {
      if (value !== void 0 && typeof value !== \\"boolean\\" && value !== \\"inline\\" && value !== \\"both\\") {
        throw new Error(\`\${msg(loc)} must be a boolean, \\"inline\\", \\"both\\", or undefined\`);
      }
      return value;
    }
    function assertCompact(loc, value) {
      if (value !== void 0 && typeof value !== \\"boolean\\" && value !== \\"auto\\") {
        throw new Error(\`\${msg(loc)} must be a boolean, \\"auto\\", or undefined\`);
      }
      return value;
    }
    function assertSourceType(loc, value) {
      if (value !== void 0 && value !== \\"module\\" && value !== \\"script\\" && value !== \\"unambiguous\\") {
        throw new Error(\`\${msg(loc)} must be \\"module\\", \\"script\\", \\"unambiguous\\", or undefined\`);
      }
      return value;
    }
    function assertCallerMetadata(loc, value) {
      const obj = assertObject(loc, value);
      if (obj) {
        if (typeof obj.name !== \\"string\\") {
          throw new Error(\`\${msg(loc)} set but does not contain \\"name\\" property string\`);
        }
        for (const prop of Object.keys(obj)) {
          const propLoc = access(loc, prop);
          const value2 = obj[prop];
          if (value2 != null && typeof value2 !== \\"boolean\\" && typeof value2 !== \\"string\\" && typeof value2 !== \\"number\\") {
            throw new Error(\`\${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.\`);
          }
        }
      }
      return value;
    }
    function assertInputSourceMap(loc, value) {
      if (value !== void 0 && typeof value !== \\"boolean\\" && (typeof value !== \\"object\\" || !value)) {
        throw new Error(\`\${msg(loc)} must be a boolean, object, or undefined\`);
      }
      return value;
    }
    function assertString(loc, value) {
      if (value !== void 0 && typeof value !== \\"string\\") {
        throw new Error(\`\${msg(loc)} must be a string, or undefined\`);
      }
      return value;
    }
    function assertFunction(loc, value) {
      if (value !== void 0 && typeof value !== \\"function\\") {
        throw new Error(\`\${msg(loc)} must be a function, or undefined\`);
      }
      return value;
    }
    function assertBoolean(loc, value) {
      if (value !== void 0 && typeof value !== \\"boolean\\") {
        throw new Error(\`\${msg(loc)} must be a boolean, or undefined\`);
      }
      return value;
    }
    function assertObject(loc, value) {
      if (value !== void 0 && (typeof value !== \\"object\\" || Array.isArray(value) || !value)) {
        throw new Error(\`\${msg(loc)} must be an object, or undefined\`);
      }
      return value;
    }
    function assertArray(loc, value) {
      if (value != null && !Array.isArray(value)) {
        throw new Error(\`\${msg(loc)} must be an array, or undefined\`);
      }
      return value;
    }
    function assertIgnoreList(loc, value) {
      const arr = assertArray(loc, value);
      if (arr) {
        arr.forEach((item, i) => assertIgnoreItem(access(loc, i), item));
      }
      return arr;
    }
    function assertIgnoreItem(loc, value) {
      if (typeof value !== \\"string\\" && typeof value !== \\"function\\" && !(value instanceof RegExp)) {
        throw new Error(\`\${msg(loc)} must be an array of string/Function/RegExp values, or undefined\`);
      }
      return value;
    }
    function assertConfigApplicableTest(loc, value) {
      if (value === void 0)
        return value;
      if (Array.isArray(value)) {
        value.forEach((item, i) => {
          if (!checkValidTest(item)) {
            throw new Error(\`\${msg(access(loc, i))} must be a string/Function/RegExp.\`);
          }
        });
      } else if (!checkValidTest(value)) {
        throw new Error(\`\${msg(loc)} must be a string/Function/RegExp, or an array of those\`);
      }
      return value;
    }
    function checkValidTest(value) {
      return typeof value === \\"string\\" || typeof value === \\"function\\" || value instanceof RegExp;
    }
    function assertConfigFileSearch(loc, value) {
      if (value !== void 0 && typeof value !== \\"boolean\\" && typeof value !== \\"string\\") {
        throw new Error(\`\${msg(loc)} must be a undefined, a boolean, a string, got \${JSON.stringify(value)}\`);
      }
      return value;
    }
    function assertBabelrcSearch(loc, value) {
      if (value === void 0 || typeof value === \\"boolean\\")
        return value;
      if (Array.isArray(value)) {
        value.forEach((item, i) => {
          if (!checkValidTest(item)) {
            throw new Error(\`\${msg(access(loc, i))} must be a string/Function/RegExp.\`);
          }
        });
      } else if (!checkValidTest(value)) {
        throw new Error(\`\${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got \${JSON.stringify(value)}\`);
      }
      return value;
    }
    function assertPluginList(loc, value) {
      const arr = assertArray(loc, value);
      if (arr) {
        arr.forEach((item, i) => assertPluginItem(access(loc, i), item));
      }
      return arr;
    }
    function assertPluginItem(loc, value) {
      if (Array.isArray(value)) {
        if (value.length === 0) {
          throw new Error(\`\${msg(loc)} must include an object\`);
        }
        if (value.length > 3) {
          throw new Error(\`\${msg(loc)} may only be a two-tuple or three-tuple\`);
        }
        assertPluginTarget(access(loc, 0), value[0]);
        if (value.length > 1) {
          const opts = value[1];
          if (opts !== void 0 && opts !== false && (typeof opts !== \\"object\\" || Array.isArray(opts) || opts === null)) {
            throw new Error(\`\${msg(access(loc, 1))} must be an object, false, or undefined\`);
          }
        }
        if (value.length === 3) {
          const name = value[2];
          if (name !== void 0 && typeof name !== \\"string\\") {
            throw new Error(\`\${msg(access(loc, 2))} must be a string, or undefined\`);
          }
        }
      } else {
        assertPluginTarget(loc, value);
      }
      return value;
    }
    function assertPluginTarget(loc, value) {
      if ((typeof value !== \\"object\\" || !value) && typeof value !== \\"string\\" && typeof value !== \\"function\\") {
        throw new Error(\`\${msg(loc)} must be a string, object, function\`);
      }
      return value;
    }
    function assertTargets(loc, value) {
      if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value))
        return value;
      if (typeof value !== \\"object\\" || !value || Array.isArray(value)) {
        throw new Error(\`\${msg(loc)} must be a string, an array of strings or an object\`);
      }
      const browsersLoc = access(loc, \\"browsers\\");
      const esmodulesLoc = access(loc, \\"esmodules\\");
      assertBrowsersList(browsersLoc, value.browsers);
      assertBoolean(esmodulesLoc, value.esmodules);
      for (const key of Object.keys(value)) {
        const val = value[key];
        const subLoc = access(loc, key);
        if (key === \\"esmodules\\")
          assertBoolean(subLoc, val);
        else if (key === \\"browsers\\")
          assertBrowsersList(subLoc, val);
        else if (!Object.hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
          const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(\\", \\");
          throw new Error(\`\${msg(subLoc)} is not a valid target. Supported targets are \${validTargets}\`);
        } else
          assertBrowserVersion(subLoc, val);
      }
      return value;
    }
    function assertBrowsersList(loc, value) {
      if (value !== void 0 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value)) {
        throw new Error(\`\${msg(loc)} must be undefined, a string or an array of strings\`);
      }
    }
    function assertBrowserVersion(loc, value) {
      if (typeof value === \\"number\\" && Math.round(value) === value)
        return;
      if (typeof value === \\"string\\")
        return;
      throw new Error(\`\${msg(loc)} must be a string or an integer number\`);
    }
    function assertAssumptions(loc, value) {
      if (value === void 0)
        return;
      if (typeof value !== \\"object\\" || value === null) {
        throw new Error(\`\${msg(loc)} must be an object or undefined.\`);
      }
      let root = loc;
      do {
        root = root.parent;
      } while (root.type !== \\"root\\");
      const inPreset = root.source === \\"preset\\";
      for (const name of Object.keys(value)) {
        const subLoc = access(loc, name);
        if (!_options.assumptionsNames.has(name)) {
          throw new Error(\`\${msg(subLoc)} is not a supported assumption.\`);
        }
        if (typeof value[name] !== \\"boolean\\") {
          throw new Error(\`\${msg(subLoc)} must be a boolean.\`);
        }
        if (inPreset && value[name] === false) {
          throw new Error(\`\${msg(subLoc)} cannot be set to 'false' inside presets.\`);
        }
      }
      return value;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/validation/options.js
var require_options3 = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/validation/options.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.assumptionsNames = void 0;
    exports.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;
    exports.validate = validate;
    var _plugin = require_plugin();
    var _removed = require_removed();
    var _optionAssertions = require_option_assertions();
    var ROOT_VALIDATORS = {
      cwd: _optionAssertions.assertString,
      root: _optionAssertions.assertString,
      rootMode: _optionAssertions.assertRootMode,
      configFile: _optionAssertions.assertConfigFileSearch,
      caller: _optionAssertions.assertCallerMetadata,
      filename: _optionAssertions.assertString,
      filenameRelative: _optionAssertions.assertString,
      code: _optionAssertions.assertBoolean,
      ast: _optionAssertions.assertBoolean,
      cloneInputAst: _optionAssertions.assertBoolean,
      envName: _optionAssertions.assertString
    };
    var BABELRC_VALIDATORS = {
      babelrc: _optionAssertions.assertBoolean,
      babelrcRoots: _optionAssertions.assertBabelrcSearch
    };
    var NONPRESET_VALIDATORS = {
      extends: _optionAssertions.assertString,
      ignore: _optionAssertions.assertIgnoreList,
      only: _optionAssertions.assertIgnoreList,
      targets: _optionAssertions.assertTargets,
      browserslistConfigFile: _optionAssertions.assertConfigFileSearch,
      browserslistEnv: _optionAssertions.assertString
    };
    var COMMON_VALIDATORS = {
      inputSourceMap: _optionAssertions.assertInputSourceMap,
      presets: _optionAssertions.assertPluginList,
      plugins: _optionAssertions.assertPluginList,
      passPerPreset: _optionAssertions.assertBoolean,
      assumptions: _optionAssertions.assertAssumptions,
      env: assertEnvSet,
      overrides: assertOverridesList,
      test: _optionAssertions.assertConfigApplicableTest,
      include: _optionAssertions.assertConfigApplicableTest,
      exclude: _optionAssertions.assertConfigApplicableTest,
      retainLines: _optionAssertions.assertBoolean,
      comments: _optionAssertions.assertBoolean,
      shouldPrintComment: _optionAssertions.assertFunction,
      compact: _optionAssertions.assertCompact,
      minified: _optionAssertions.assertBoolean,
      auxiliaryCommentBefore: _optionAssertions.assertString,
      auxiliaryCommentAfter: _optionAssertions.assertString,
      sourceType: _optionAssertions.assertSourceType,
      wrapPluginVisitorMethod: _optionAssertions.assertFunction,
      highlightCode: _optionAssertions.assertBoolean,
      sourceMaps: _optionAssertions.assertSourceMaps,
      sourceMap: _optionAssertions.assertSourceMaps,
      sourceFileName: _optionAssertions.assertString,
      sourceRoot: _optionAssertions.assertString,
      parserOpts: _optionAssertions.assertObject,
      generatorOpts: _optionAssertions.assertObject
    };
    {
      Object.assign(COMMON_VALIDATORS, {
        getModuleId: _optionAssertions.assertFunction,
        moduleRoot: _optionAssertions.assertString,
        moduleIds: _optionAssertions.assertBoolean,
        moduleId: _optionAssertions.assertString
      });
    }
    var assumptionsNames = /* @__PURE__ */ new Set([\\"arrayLikeIsIterable\\", \\"constantReexports\\", \\"constantSuper\\", \\"enumerableModuleMeta\\", \\"ignoreFunctionLength\\", \\"ignoreToPrimitiveHint\\", \\"iterableIsArray\\", \\"mutableTemplateObject\\", \\"noClassCalls\\", \\"noDocumentAll\\", \\"noIncompleteNsImportDetection\\", \\"noNewArrows\\", \\"objectRestNoSymbols\\", \\"privateFieldsAsProperties\\", \\"pureGetters\\", \\"setClassMethods\\", \\"setComputedProperties\\", \\"setPublicClassFields\\", \\"setSpreadProperties\\", \\"skipForOfIteratorClosing\\", \\"superIsCallableConstructor\\"]);
    exports.assumptionsNames = assumptionsNames;
    function getSource(loc) {
      return loc.type === \\"root\\" ? loc.source : getSource(loc.parent);
    }
    function validate(type, opts) {
      return validateNested({
        type: \\"root\\",
        source: type
      }, opts);
    }
    function validateNested(loc, opts) {
      const type = getSource(loc);
      assertNoDuplicateSourcemap(opts);
      Object.keys(opts).forEach((key) => {
        const optLoc = {
          type: \\"option\\",
          name: key,
          parent: loc
        };
        if (type === \\"preset\\" && NONPRESET_VALIDATORS[key]) {
          throw new Error(\`\${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options\`);
        }
        if (type !== \\"arguments\\" && ROOT_VALIDATORS[key]) {
          throw new Error(\`\${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options\`);
        }
        if (type !== \\"arguments\\" && type !== \\"configfile\\" && BABELRC_VALIDATORS[key]) {
          if (type === \\"babelrcfile\\" || type === \\"extendsfile\\") {
            throw new Error(\`\${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or \\"extends\\"ed files, only in root programmatic options, or babel.config.js/config file options\`);
          }
          throw new Error(\`\${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options\`);
        }
        const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;
        validator(optLoc, opts[key]);
      });
      return opts;
    }
    function throwUnknownError(loc) {
      const key = loc.name;
      if (_removed.default[key]) {
        const {
          message,
          version = 5
        } = _removed.default[key];
        throw new Error(\`Using removed Babel \${version} option: \${(0, _optionAssertions.msg)(loc)} - \${message}\`);
      } else {
        const unknownOptErr = new Error(\`Unknown option: \${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\`);
        unknownOptErr.code = \\"BABEL_UNKNOWN_OPTION\\";
        throw unknownOptErr;
      }
    }
    function has(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function assertNoDuplicateSourcemap(opts) {
      if (has(opts, \\"sourceMap\\") && has(opts, \\"sourceMaps\\")) {
        throw new Error(\\".sourceMap is an alias for .sourceMaps, cannot use both\\");
      }
    }
    function assertEnvSet(loc, value) {
      if (loc.parent.type === \\"env\\") {
        throw new Error(\`\${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block\`);
      }
      const parent = loc.parent;
      const obj = (0, _optionAssertions.assertObject)(loc, value);
      if (obj) {
        for (const envName of Object.keys(obj)) {
          const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
          if (!env)
            continue;
          const envLoc = {
            type: \\"env\\",
            name: envName,
            parent
          };
          validateNested(envLoc, env);
        }
      }
      return obj;
    }
    function assertOverridesList(loc, value) {
      if (loc.parent.type === \\"env\\") {
        throw new Error(\`\${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block\`);
      }
      if (loc.parent.type === \\"overrides\\") {
        throw new Error(\`\${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block\`);
      }
      const parent = loc.parent;
      const arr = (0, _optionAssertions.assertArray)(loc, value);
      if (arr) {
        for (const [index, item] of arr.entries()) {
          const objLoc = (0, _optionAssertions.access)(loc, index);
          const env = (0, _optionAssertions.assertObject)(objLoc, item);
          if (!env)
            throw new Error(\`\${(0, _optionAssertions.msg)(objLoc)} must be an object\`);
          const overridesLoc = {
            type: \\"overrides\\",
            index,
            parent
          };
          validateNested(overridesLoc, env);
        }
      }
      return arr;
    }
    function checkNoUnwrappedItemOptionPairs(items, index, type, e) {
      if (index === 0)
        return;
      const lastItem = items[index - 1];
      const thisItem = items[index];
      if (lastItem.file && lastItem.options === void 0 && typeof thisItem.value === \\"object\\") {
        e.message += \`
- Maybe you meant to use
\\"\${type}s\\": [
  [\\"\${lastItem.file.request}\\", \${JSON.stringify(thisItem.value, void 0, 2)}]
]
To be a valid \${type}, its name and options should be wrapped in a pair of brackets\`;
      }
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/printer.js
var require_printer2 = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/printer.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.ConfigPrinter = exports.ChainFormatter = void 0;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var ChainFormatter = {
      Programmatic: 0,
      Config: 1
    };
    exports.ChainFormatter = ChainFormatter;
    var Formatter = {
      title(type, callerName, filepath) {
        let title = \\"\\";
        if (type === ChainFormatter.Programmatic) {
          title = \\"programmatic options\\";
          if (callerName) {
            title += \\" from \\" + callerName;
          }
        } else {
          title = \\"config \\" + filepath;
        }
        return title;
      },
      loc(index, envName) {
        let loc = \\"\\";
        if (index != null) {
          loc += \`.overrides[\${index}]\`;
        }
        if (envName != null) {
          loc += \`.env[\\"\${envName}\\"]\`;
        }
        return loc;
      },
      *optionsAndDescriptors(opt) {
        const content = Object.assign({}, opt.options);
        delete content.overrides;
        delete content.env;
        const pluginDescriptors = [...yield* opt.plugins()];
        if (pluginDescriptors.length) {
          content.plugins = pluginDescriptors.map((d) => descriptorToConfig(d));
        }
        const presetDescriptors = [...yield* opt.presets()];
        if (presetDescriptors.length) {
          content.presets = [...presetDescriptors].map((d) => descriptorToConfig(d));
        }
        return JSON.stringify(content, void 0, 2);
      }
    };
    function descriptorToConfig(d) {
      var _d$file;
      let name = (_d$file = d.file) == null ? void 0 : _d$file.request;
      if (name == null) {
        if (typeof d.value === \\"object\\") {
          name = d.value;
        } else if (typeof d.value === \\"function\\") {
          name = \`[Function: \${d.value.toString().substr(0, 50)} ... ]\`;
        }
      }
      if (name == null) {
        name = \\"[Unknown]\\";
      }
      if (d.options === void 0) {
        return name;
      } else if (d.name == null) {
        return [name, d.options];
      } else {
        return [name, d.options, d.name];
      }
    }
    var ConfigPrinter = class {
      constructor() {
        this._stack = [];
      }
      configure(enabled, type, {
        callerName,
        filepath
      }) {
        if (!enabled)
          return () => {
          };
        return (content, index, envName) => {
          this._stack.push({
            type,
            callerName,
            filepath,
            content,
            index,
            envName
          });
        };
      }
      static *format(config) {
        let title = Formatter.title(config.type, config.callerName, config.filepath);
        const loc = Formatter.loc(config.index, config.envName);
        if (loc)
          title += \` \${loc}\`;
        const content = yield* Formatter.optionsAndDescriptors(config.content);
        return \`\${title}
\${content}\`;
      }
      *output() {
        if (this._stack.length === 0)
          return \\"\\";
        const configs = yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)));
        return configs.join(\\"\\\\n\\\\n\\");
      }
    };
    exports.ConfigPrinter = ConfigPrinter;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/config-chain.js
var require_config_chain = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/config-chain.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.buildPresetChain = buildPresetChain;
    exports.buildPresetChainWalker = void 0;
    exports.buildRootChain = buildRootChain;
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    function _debug() {
      const data = require_src();
      _debug = function() {
        return data;
      };
      return data;
    }
    var _options = require_options3();
    var _patternToRegex = require_pattern_to_regex();
    var _printer = require_printer2();
    var _files = require_files();
    var _caching = require_caching();
    var _configDescriptors = require_config_descriptors();
    var debug = _debug()(\\"babel:config:config-chain\\");
    function* buildPresetChain(arg, context) {
      const chain = yield* buildPresetChainWalker(arg, context);
      if (!chain)
        return null;
      return {
        plugins: dedupDescriptors(chain.plugins),
        presets: dedupDescriptors(chain.presets),
        options: chain.options.map((o) => normalizeOptions(o)),
        files: /* @__PURE__ */ new Set()
      };
    }
    var buildPresetChainWalker = makeChainWalker({
      root: (preset) => loadPresetDescriptors(preset),
      env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),
      overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index),
      overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName),
      createLogger: () => () => {
      }
    });
    exports.buildPresetChainWalker = buildPresetChainWalker;
    var loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors));
    var loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName)));
    var loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index)));
    var loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));
    function* buildRootChain(opts, context) {
      let configReport, babelRcReport;
      const programmaticLogger = new _printer.ConfigPrinter();
      const programmaticChain = yield* loadProgrammaticChain({
        options: opts,
        dirname: context.cwd
      }, context, void 0, programmaticLogger);
      if (!programmaticChain)
        return null;
      const programmaticReport = yield* programmaticLogger.output();
      let configFile;
      if (typeof opts.configFile === \\"string\\") {
        configFile = yield* (0, _files.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller);
      } else if (opts.configFile !== false) {
        configFile = yield* (0, _files.findRootConfig)(context.root, context.envName, context.caller);
      }
      let {
        babelrc,
        babelrcRoots
      } = opts;
      let babelrcRootsDirectory = context.cwd;
      const configFileChain = emptyChain();
      const configFileLogger = new _printer.ConfigPrinter();
      if (configFile) {
        const validatedFile = validateConfigFile(configFile);
        const result = yield* loadFileChain(validatedFile, context, void 0, configFileLogger);
        if (!result)
          return null;
        configReport = yield* configFileLogger.output();
        if (babelrc === void 0) {
          babelrc = validatedFile.options.babelrc;
        }
        if (babelrcRoots === void 0) {
          babelrcRootsDirectory = validatedFile.dirname;
          babelrcRoots = validatedFile.options.babelrcRoots;
        }
        mergeChain(configFileChain, result);
      }
      let ignoreFile, babelrcFile;
      let isIgnored = false;
      const fileChain = emptyChain();
      if ((babelrc === true || babelrc === void 0) && typeof context.filename === \\"string\\") {
        const pkgData = yield* (0, _files.findPackageData)(context.filename);
        if (pkgData && babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
          ({
            ignore: ignoreFile,
            config: babelrcFile
          } = yield* (0, _files.findRelativeConfig)(pkgData, context.envName, context.caller));
          if (ignoreFile) {
            fileChain.files.add(ignoreFile.filepath);
          }
          if (ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)) {
            isIgnored = true;
          }
          if (babelrcFile && !isIgnored) {
            const validatedFile = validateBabelrcFile(babelrcFile);
            const babelrcLogger = new _printer.ConfigPrinter();
            const result = yield* loadFileChain(validatedFile, context, void 0, babelrcLogger);
            if (!result) {
              isIgnored = true;
            } else {
              babelRcReport = yield* babelrcLogger.output();
              mergeChain(fileChain, result);
            }
          }
          if (babelrcFile && isIgnored) {
            fileChain.files.add(babelrcFile.filepath);
          }
        }
      }
      if (context.showConfig) {
        console.log(\`Babel configs on \\"\${context.filename}\\" (ascending priority):
\` + [configReport, babelRcReport, programmaticReport].filter((x) => !!x).join(\\"\\\\n\\\\n\\") + \\"\\\\n-----End Babel configs-----\\");
      }
      const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
      return {
        plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),
        presets: isIgnored ? [] : dedupDescriptors(chain.presets),
        options: isIgnored ? [] : chain.options.map((o) => normalizeOptions(o)),
        fileHandling: isIgnored ? \\"ignored\\" : \\"transpile\\",
        ignore: ignoreFile || void 0,
        babelrc: babelrcFile || void 0,
        config: configFile || void 0,
        files: chain.files
      };
    }
    function babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory) {
      if (typeof babelrcRoots === \\"boolean\\")
        return babelrcRoots;
      const absoluteRoot = context.root;
      if (babelrcRoots === void 0) {
        return pkgData.directories.indexOf(absoluteRoot) !== -1;
      }
      let babelrcPatterns = babelrcRoots;
      if (!Array.isArray(babelrcPatterns)) {
        babelrcPatterns = [babelrcPatterns];
      }
      babelrcPatterns = babelrcPatterns.map((pat) => {
        return typeof pat === \\"string\\" ? _path().resolve(babelrcRootsDirectory, pat) : pat;
      });
      if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {
        return pkgData.directories.indexOf(absoluteRoot) !== -1;
      }
      return babelrcPatterns.some((pat) => {
        if (typeof pat === \\"string\\") {
          pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory);
        }
        return pkgData.directories.some((directory) => {
          return matchPattern(pat, babelrcRootsDirectory, directory, context);
        });
      });
    }
    var validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({
      filepath: file.filepath,
      dirname: file.dirname,
      options: (0, _options.validate)(\\"configfile\\", file.options)
    }));
    var validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({
      filepath: file.filepath,
      dirname: file.dirname,
      options: (0, _options.validate)(\\"babelrcfile\\", file.options)
    }));
    var validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({
      filepath: file.filepath,
      dirname: file.dirname,
      options: (0, _options.validate)(\\"extendsfile\\", file.options)
    }));
    var loadProgrammaticChain = makeChainWalker({
      root: (input) => buildRootDescriptors(input, \\"base\\", _configDescriptors.createCachedDescriptors),
      env: (input, envName) => buildEnvDescriptors(input, \\"base\\", _configDescriptors.createCachedDescriptors, envName),
      overrides: (input, index) => buildOverrideDescriptors(input, \\"base\\", _configDescriptors.createCachedDescriptors, index),
      overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, \\"base\\", _configDescriptors.createCachedDescriptors, index, envName),
      createLogger: (input, context, baseLogger) => buildProgrammaticLogger(input, context, baseLogger)
    });
    var loadFileChainWalker = makeChainWalker({
      root: (file) => loadFileDescriptors(file),
      env: (file, envName) => loadFileEnvDescriptors(file)(envName),
      overrides: (file, index) => loadFileOverridesDescriptors(file)(index),
      overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName),
      createLogger: (file, context, baseLogger) => buildFileLogger(file.filepath, context, baseLogger)
    });
    function* loadFileChain(input, context, files, baseLogger) {
      const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
      if (chain) {
        chain.files.add(input.filepath);
      }
      return chain;
    }
    var loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors));
    var loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName)));
    var loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index)));
    var loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));
    function buildFileLogger(filepath, context, baseLogger) {
      if (!baseLogger) {
        return () => {
        };
      }
      return baseLogger.configure(context.showConfig, _printer.ChainFormatter.Config, {
        filepath
      });
    }
    function buildRootDescriptors({
      dirname,
      options
    }, alias, descriptors) {
      return descriptors(dirname, options, alias);
    }
    function buildProgrammaticLogger(_, context, baseLogger) {
      var _context$caller;
      if (!baseLogger) {
        return () => {
        };
      }
      return baseLogger.configure(context.showConfig, _printer.ChainFormatter.Programmatic, {
        callerName: (_context$caller = context.caller) == null ? void 0 : _context$caller.name
      });
    }
    function buildEnvDescriptors({
      dirname,
      options
    }, alias, descriptors, envName) {
      const opts = options.env && options.env[envName];
      return opts ? descriptors(dirname, opts, \`\${alias}.env[\\"\${envName}\\"]\`) : null;
    }
    function buildOverrideDescriptors({
      dirname,
      options
    }, alias, descriptors, index) {
      const opts = options.overrides && options.overrides[index];
      if (!opts)
        throw new Error(\\"Assertion failure - missing override\\");
      return descriptors(dirname, opts, \`\${alias}.overrides[\${index}]\`);
    }
    function buildOverrideEnvDescriptors({
      dirname,
      options
    }, alias, descriptors, index, envName) {
      const override = options.overrides && options.overrides[index];
      if (!override)
        throw new Error(\\"Assertion failure - missing override\\");
      const opts = override.env && override.env[envName];
      return opts ? descriptors(dirname, opts, \`\${alias}.overrides[\${index}].env[\\"\${envName}\\"]\`) : null;
    }
    function makeChainWalker({
      root,
      env,
      overrides,
      overridesEnv,
      createLogger
    }) {
      return function* (input, context, files = /* @__PURE__ */ new Set(), baseLogger) {
        const {
          dirname
        } = input;
        const flattenedConfigs = [];
        const rootOpts = root(input);
        if (configIsApplicable(rootOpts, dirname, context)) {
          flattenedConfigs.push({
            config: rootOpts,
            envName: void 0,
            index: void 0
          });
          const envOpts = env(input, context.envName);
          if (envOpts && configIsApplicable(envOpts, dirname, context)) {
            flattenedConfigs.push({
              config: envOpts,
              envName: context.envName,
              index: void 0
            });
          }
          (rootOpts.options.overrides || []).forEach((_, index) => {
            const overrideOps = overrides(input, index);
            if (configIsApplicable(overrideOps, dirname, context)) {
              flattenedConfigs.push({
                config: overrideOps,
                index,
                envName: void 0
              });
              const overrideEnvOpts = overridesEnv(input, index, context.envName);
              if (overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context)) {
                flattenedConfigs.push({
                  config: overrideEnvOpts,
                  index,
                  envName: context.envName
                });
              }
            }
          });
        }
        if (flattenedConfigs.some(({
          config: {
            options: {
              ignore,
              only
            }
          }
        }) => shouldIgnore(context, ignore, only, dirname))) {
          return null;
        }
        const chain = emptyChain();
        const logger = createLogger(input, context, baseLogger);
        for (const {
          config,
          index,
          envName
        } of flattenedConfigs) {
          if (!(yield* mergeExtendsChain(chain, config.options, dirname, context, files, baseLogger))) {
            return null;
          }
          logger(config, index, envName);
          yield* mergeChainOpts(chain, config);
        }
        return chain;
      };
    }
    function* mergeExtendsChain(chain, opts, dirname, context, files, baseLogger) {
      if (opts.extends === void 0)
        return true;
      const file = yield* (0, _files.loadConfig)(opts.extends, dirname, context.envName, context.caller);
      if (files.has(file)) {
        throw new Error(\`Configuration cycle detected loading \${file.filepath}.
File already loaded following the config chain:
\` + Array.from(files, (file2) => \` - \${file2.filepath}\`).join(\\"\\\\n\\"));
      }
      files.add(file);
      const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
      files.delete(file);
      if (!fileChain)
        return false;
      mergeChain(chain, fileChain);
      return true;
    }
    function mergeChain(target, source) {
      target.options.push(...source.options);
      target.plugins.push(...source.plugins);
      target.presets.push(...source.presets);
      for (const file of source.files) {
        target.files.add(file);
      }
      return target;
    }
    function* mergeChainOpts(target, {
      options,
      plugins,
      presets
    }) {
      target.options.push(options);
      target.plugins.push(...yield* plugins());
      target.presets.push(...yield* presets());
      return target;
    }
    function emptyChain() {
      return {
        options: [],
        presets: [],
        plugins: [],
        files: /* @__PURE__ */ new Set()
      };
    }
    function normalizeOptions(opts) {
      const options = Object.assign({}, opts);
      delete options.extends;
      delete options.env;
      delete options.overrides;
      delete options.plugins;
      delete options.presets;
      delete options.passPerPreset;
      delete options.ignore;
      delete options.only;
      delete options.test;
      delete options.include;
      delete options.exclude;
      if (Object.prototype.hasOwnProperty.call(options, \\"sourceMap\\")) {
        options.sourceMaps = options.sourceMap;
        delete options.sourceMap;
      }
      return options;
    }
    function dedupDescriptors(items) {
      const map = /* @__PURE__ */ new Map();
      const descriptors = [];
      for (const item of items) {
        if (typeof item.value === \\"function\\") {
          const fnKey = item.value;
          let nameMap = map.get(fnKey);
          if (!nameMap) {
            nameMap = /* @__PURE__ */ new Map();
            map.set(fnKey, nameMap);
          }
          let desc = nameMap.get(item.name);
          if (!desc) {
            desc = {
              value: item
            };
            descriptors.push(desc);
            if (!item.ownPass)
              nameMap.set(item.name, desc);
          } else {
            desc.value = item;
          }
        } else {
          descriptors.push({
            value: item
          });
        }
      }
      return descriptors.reduce((acc, desc) => {
        acc.push(desc.value);
        return acc;
      }, []);
    }
    function configIsApplicable({
      options
    }, dirname, context) {
      return (options.test === void 0 || configFieldIsApplicable(context, options.test, dirname)) && (options.include === void 0 || configFieldIsApplicable(context, options.include, dirname)) && (options.exclude === void 0 || !configFieldIsApplicable(context, options.exclude, dirname));
    }
    function configFieldIsApplicable(context, test, dirname) {
      const patterns = Array.isArray(test) ? test : [test];
      return matchesPatterns(context, patterns, dirname);
    }
    function ignoreListReplacer(_key, value) {
      if (value instanceof RegExp) {
        return String(value);
      }
      return value;
    }
    function shouldIgnore(context, ignore, only, dirname) {
      if (ignore && matchesPatterns(context, ignore, dirname)) {
        var _context$filename;
        const message = \`No config is applied to \\"\${(_context$filename = context.filename) != null ? _context$filename : \\"(unknown)\\"}\\" because it matches one of \\\\\`ignore: \${JSON.stringify(ignore, ignoreListReplacer)}\\\\\` from \\"\${dirname}\\"\`;
        debug(message);
        if (context.showConfig) {
          console.log(message);
        }
        return true;
      }
      if (only && !matchesPatterns(context, only, dirname)) {
        var _context$filename2;
        const message = \`No config is applied to \\"\${(_context$filename2 = context.filename) != null ? _context$filename2 : \\"(unknown)\\"}\\" because it fails to match one of \\\\\`only: \${JSON.stringify(only, ignoreListReplacer)}\\\\\` from \\"\${dirname}\\"\`;
        debug(message);
        if (context.showConfig) {
          console.log(message);
        }
        return true;
      }
      return false;
    }
    function matchesPatterns(context, patterns, dirname) {
      return patterns.some((pattern) => matchPattern(pattern, dirname, context.filename, context));
    }
    function matchPattern(pattern, dirname, pathToTest, context) {
      if (typeof pattern === \\"function\\") {
        return !!pattern(pathToTest, {
          dirname,
          envName: context.envName,
          caller: context.caller
        });
      }
      if (typeof pathToTest !== \\"string\\") {
        throw new Error(\`Configuration contains string/RegExp pattern, but no filename was passed to Babel\`);
      }
      if (typeof pattern === \\"string\\") {
        pattern = (0, _patternToRegex.default)(pattern, dirname);
      }
      return pattern.test(pathToTest);
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/validation/plugins.js
var require_plugins4 = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/validation/plugins.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.validatePluginObject = validatePluginObject;
    var _optionAssertions = require_option_assertions();
    var VALIDATORS = {
      name: _optionAssertions.assertString,
      manipulateOptions: _optionAssertions.assertFunction,
      pre: _optionAssertions.assertFunction,
      post: _optionAssertions.assertFunction,
      inherits: _optionAssertions.assertFunction,
      visitor: assertVisitorMap,
      parserOverride: _optionAssertions.assertFunction,
      generatorOverride: _optionAssertions.assertFunction
    };
    function assertVisitorMap(loc, value) {
      const obj = (0, _optionAssertions.assertObject)(loc, value);
      if (obj) {
        Object.keys(obj).forEach((prop) => assertVisitorHandler(prop, obj[prop]));
        if (obj.enter || obj.exit) {
          throw new Error(\`\${(0, _optionAssertions.msg)(loc)} cannot contain catch-all \\"enter\\" or \\"exit\\" handlers. Please target individual nodes.\`);
        }
      }
      return obj;
    }
    function assertVisitorHandler(key, value) {
      if (value && typeof value === \\"object\\") {
        Object.keys(value).forEach((handler) => {
          if (handler !== \\"enter\\" && handler !== \\"exit\\") {
            throw new Error(\`.visitor[\\"\${key}\\"] may only have .enter and/or .exit handlers.\`);
          }
        });
      } else if (typeof value !== \\"function\\") {
        throw new Error(\`.visitor[\\"\${key}\\"] must be a function\`);
      }
      return value;
    }
    function validatePluginObject(obj) {
      const rootPath = {
        type: \\"root\\",
        source: \\"plugin\\"
      };
      Object.keys(obj).forEach((key) => {
        const validator = VALIDATORS[key];
        if (validator) {
          const optLoc = {
            type: \\"option\\",
            name: key,
            parent: rootPath
          };
          validator(optLoc, obj[key]);
        } else {
          const invalidPluginPropertyError = new Error(\`.\${key} is not a valid Plugin property\`);
          invalidPluginPropertyError.code = \\"BABEL_UNKNOWN_PLUGIN_PROPERTY\\";
          throw invalidPluginPropertyError;
        }
      });
      return obj;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/partial.js
var require_partial = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/partial.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = loadPrivatePartialConfig;
    exports.loadPartialConfig = void 0;
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _plugin = require_plugin();
    var _util = require_util2();
    var _item = require_item();
    var _configChain = require_config_chain();
    var _environment = require_environment();
    var _options = require_options3();
    var _files = require_files();
    var _resolveTargets = require_resolve_targets();
    var _excluded = [\\"showIgnoredFiles\\"];
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function resolveRootMode(rootDir, rootMode) {
      switch (rootMode) {
        case \\"root\\":
          return rootDir;
        case \\"upward-optional\\": {
          const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);
          return upwardRootDir === null ? rootDir : upwardRootDir;
        }
        case \\"upward\\": {
          const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);
          if (upwardRootDir !== null)
            return upwardRootDir;
          throw Object.assign(new Error(\`Babel was run with rootMode:\\"upward\\" but a root could not be found when searching upward from \\"\${rootDir}\\".
One of the following config files must be in the directory tree: \\"\${_files.ROOT_CONFIG_FILENAMES.join(\\", \\")}\\".\`), {
            code: \\"BABEL_ROOT_NOT_FOUND\\",
            dirname: rootDir
          });
        }
        default:
          throw new Error(\`Assertion failure - unknown rootMode value.\`);
      }
    }
    function* loadPrivatePartialConfig(inputOpts) {
      if (inputOpts != null && (typeof inputOpts !== \\"object\\" || Array.isArray(inputOpts))) {
        throw new Error(\\"Babel options must be an object, null, or undefined\\");
      }
      const args = inputOpts ? (0, _options.validate)(\\"arguments\\", inputOpts) : {};
      const {
        envName = (0, _environment.getEnv)(),
        cwd = \\".\\",
        root: rootDir = \\".\\",
        rootMode = \\"root\\",
        caller,
        cloneInputAst = true
      } = args;
      const absoluteCwd = _path().resolve(cwd);
      const absoluteRootDir = resolveRootMode(_path().resolve(absoluteCwd, rootDir), rootMode);
      const filename = typeof args.filename === \\"string\\" ? _path().resolve(cwd, args.filename) : void 0;
      const showConfigPath = yield* (0, _files.resolveShowConfigPath)(absoluteCwd);
      const context = {
        filename,
        cwd: absoluteCwd,
        root: absoluteRootDir,
        envName,
        caller,
        showConfig: showConfigPath === filename
      };
      const configChain = yield* (0, _configChain.buildRootChain)(args, context);
      if (!configChain)
        return null;
      const merged = {
        assumptions: {}
      };
      configChain.options.forEach((opts) => {
        (0, _util.mergeOptions)(merged, opts);
      });
      const options = Object.assign({}, merged, {
        targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),
        cloneInputAst,
        babelrc: false,
        configFile: false,
        browserslistConfigFile: false,
        passPerPreset: false,
        envName: context.envName,
        cwd: context.cwd,
        root: context.root,
        rootMode: \\"root\\",
        filename: typeof context.filename === \\"string\\" ? context.filename : void 0,
        plugins: configChain.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)),
        presets: configChain.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor))
      });
      return {
        options,
        context,
        fileHandling: configChain.fileHandling,
        ignore: configChain.ignore,
        babelrc: configChain.babelrc,
        config: configChain.config,
        files: configChain.files
      };
    }
    var loadPartialConfig = _gensync()(function* (opts) {
      let showIgnoredFiles = false;
      if (typeof opts === \\"object\\" && opts !== null && !Array.isArray(opts)) {
        var _opts = opts;
        ({
          showIgnoredFiles
        } = _opts);
        opts = _objectWithoutPropertiesLoose(_opts, _excluded);
        _opts;
      }
      const result = yield* loadPrivatePartialConfig(opts);
      if (!result)
        return null;
      const {
        options,
        babelrc,
        ignore,
        config,
        fileHandling,
        files
      } = result;
      if (fileHandling === \\"ignored\\" && !showIgnoredFiles) {
        return null;
      }
      (options.plugins || []).forEach((item) => {
        if (item.value instanceof _plugin.default) {
          throw new Error(\\"Passing cached plugin instances is not supported in babel.loadPartialConfig()\\");
        }
      });
      return new PartialConfig(options, babelrc ? babelrc.filepath : void 0, ignore ? ignore.filepath : void 0, config ? config.filepath : void 0, fileHandling, files);
    });
    exports.loadPartialConfig = loadPartialConfig;
    var PartialConfig = class {
      constructor(options, babelrc, ignore, config, fileHandling, files) {
        this.options = void 0;
        this.babelrc = void 0;
        this.babelignore = void 0;
        this.config = void 0;
        this.fileHandling = void 0;
        this.files = void 0;
        this.options = options;
        this.babelignore = ignore;
        this.babelrc = babelrc;
        this.config = config;
        this.fileHandling = fileHandling;
        this.files = files;
        Object.freeze(this);
      }
      hasFilesystemConfig() {
        return this.babelrc !== void 0 || this.config !== void 0;
      }
    };
    Object.freeze(PartialConfig.prototype);
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/full.js
var require_full = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/full.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _async = require_async();
    var _util = require_util2();
    var context = require_lib21();
    var _plugin = require_plugin();
    var _item = require_item();
    var _configChain = require_config_chain();
    function _traverse() {
      const data = require_lib13();
      _traverse = function() {
        return data;
      };
      return data;
    }
    var _caching = require_caching();
    var _options = require_options3();
    var _plugins = require_plugins4();
    var _configApi = require_config_api();
    var _partial = require_partial();
    var Context = require_cache_contexts();
    var _default = _gensync()(function* loadFullConfig(inputOpts) {
      var _opts$assumptions;
      const result = yield* (0, _partial.default)(inputOpts);
      if (!result) {
        return null;
      }
      const {
        options,
        context: context2,
        fileHandling
      } = result;
      if (fileHandling === \\"ignored\\") {
        return null;
      }
      const optionDefaults = {};
      const {
        plugins,
        presets
      } = options;
      if (!plugins || !presets) {
        throw new Error(\\"Assertion failure - plugins and presets exist\\");
      }
      const presetContext = Object.assign({}, context2, {
        targets: options.targets
      });
      const toDescriptor = (item) => {
        const desc = (0, _item.getItemDescriptor)(item);
        if (!desc) {
          throw new Error(\\"Assertion failure - must be config item\\");
        }
        return desc;
      };
      const presetsDescriptors = presets.map(toDescriptor);
      const initialPluginsDescriptors = plugins.map(toDescriptor);
      const pluginDescriptorsByPass = [[]];
      const passes = [];
      const ignored = yield* enhanceError(context2, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
        const presets2 = [];
        for (let i = 0; i < rawPresets.length; i++) {
          const descriptor = rawPresets[i];
          if (descriptor.options !== false) {
            try {
              if (descriptor.ownPass) {
                presets2.push({
                  preset: yield* loadPresetDescriptor(descriptor, presetContext),
                  pass: []
                });
              } else {
                presets2.unshift({
                  preset: yield* loadPresetDescriptor(descriptor, presetContext),
                  pass: pluginDescriptorsPass
                });
              }
            } catch (e) {
              if (e.code === \\"BABEL_UNKNOWN_OPTION\\") {
                (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, \\"preset\\", e);
              }
              throw e;
            }
          }
        }
        if (presets2.length > 0) {
          pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o) => o.pass).filter((p) => p !== pluginDescriptorsPass));
          for (const {
            preset,
            pass
          } of presets2) {
            if (!preset)
              return true;
            pass.push(...preset.plugins);
            const ignored2 = yield* recursePresetDescriptors(preset.presets, pass);
            if (ignored2)
              return true;
            preset.options.forEach((opts2) => {
              (0, _util.mergeOptions)(optionDefaults, opts2);
            });
          }
        }
      })(presetsDescriptors, pluginDescriptorsByPass[0]);
      if (ignored)
        return null;
      const opts = optionDefaults;
      (0, _util.mergeOptions)(opts, options);
      const pluginContext = Object.assign({}, presetContext, {
        assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {}
      });
      yield* enhanceError(context2, function* loadPluginDescriptors() {
        pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
        for (const descs of pluginDescriptorsByPass) {
          const pass = [];
          passes.push(pass);
          for (let i = 0; i < descs.length; i++) {
            const descriptor = descs[i];
            if (descriptor.options !== false) {
              try {
                pass.push(yield* loadPluginDescriptor(descriptor, pluginContext));
              } catch (e) {
                if (e.code === \\"BABEL_UNKNOWN_PLUGIN_PROPERTY\\") {
                  (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, \\"plugin\\", e);
                }
                throw e;
              }
            }
          }
        }
      })();
      opts.plugins = passes[0];
      opts.presets = passes.slice(1).filter((plugins2) => plugins2.length > 0).map((plugins2) => ({
        plugins: plugins2
      }));
      opts.passPerPreset = opts.presets.length > 0;
      return {
        options: opts,
        passes
      };
    });
    exports.default = _default;
    function enhanceError(context2, fn) {
      return function* (arg1, arg2) {
        try {
          return yield* fn(arg1, arg2);
        } catch (e) {
          if (!/^\\\\[BABEL\\\\]/.test(e.message)) {
            e.message = \`[BABEL] \${context2.filename || \\"unknown\\"}: \${e.message}\`;
          }
          throw e;
        }
      };
    }
    var makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({
      value,
      options,
      dirname,
      alias
    }, cache) {
      if (options === false)
        throw new Error(\\"Assertion failure\\");
      options = options || {};
      let item = value;
      if (typeof value === \\"function\\") {
        const factory = (0, _async.maybeAsync)(value, \`You appear to be using an async plugin/preset, but Babel has been called synchronously\`);
        const api = Object.assign({}, context, apiFactory(cache));
        try {
          item = yield* factory(api, options, dirname);
        } catch (e) {
          if (alias) {
            e.message += \` (While processing: \${JSON.stringify(alias)})\`;
          }
          throw e;
        }
      }
      if (!item || typeof item !== \\"object\\") {
        throw new Error(\\"Plugin/Preset did not return an object.\\");
      }
      if ((0, _async.isThenable)(item)) {
        yield* [];
        throw new Error(\`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with \\"await\\". (While processing: \${JSON.stringify(alias)})\`);
      }
      return {
        value: item,
        options,
        dirname,
        alias
      };
    });
    var pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI);
    var presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);
    function* loadPluginDescriptor(descriptor, context2) {
      if (descriptor.value instanceof _plugin.default) {
        if (descriptor.options) {
          throw new Error(\\"Passed options to an existing Plugin instance will not work.\\");
        }
        return descriptor.value;
      }
      return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context2), context2);
    }
    var instantiatePlugin = (0, _caching.makeWeakCache)(function* ({
      value,
      options,
      dirname,
      alias
    }, cache) {
      const pluginObj = (0, _plugins.validatePluginObject)(value);
      const plugin = Object.assign({}, pluginObj);
      if (plugin.visitor) {
        plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor));
      }
      if (plugin.inherits) {
        const inheritsDescriptor = {
          name: void 0,
          alias: \`\${alias}$inherits\`,
          value: plugin.inherits,
          options,
          dirname
        };
        const inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run) => {
          return cache.invalidate((data) => run(inheritsDescriptor, data));
        });
        plugin.pre = chain(inherits.pre, plugin.pre);
        plugin.post = chain(inherits.post, plugin.post);
        plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);
        plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]);
      }
      return new _plugin.default(plugin, options, alias);
    });
    var validateIfOptionNeedsFilename = (options, descriptor) => {
      if (options.test || options.include || options.exclude) {
        const formattedPresetName = descriptor.name ? \`\\"\${descriptor.name}\\"\` : \\"/* your preset */\\";
        throw new Error([\`Preset \${formattedPresetName} requires a filename to be set when babel is called directly,\`, \`\\\\\`\\\\\`\\\\\`\`, \`babel.transform(code, { filename: 'file.ts', presets: [\${formattedPresetName}] });\`, \`\\\\\`\\\\\`\\\\\`\`, \`See https://babeljs.io/docs/en/options#filename for more information.\`].join(\\"\\\\n\\"));
      }
    };
    var validatePreset = (preset, context2, descriptor) => {
      if (!context2.filename) {
        const {
          options
        } = preset;
        validateIfOptionNeedsFilename(options, descriptor);
        if (options.overrides) {
          options.overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
        }
      }
    };
    function* loadPresetDescriptor(descriptor, context2) {
      const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context2));
      validatePreset(preset, context2, descriptor);
      return yield* (0, _configChain.buildPresetChain)(preset, context2);
    }
    var instantiatePreset = (0, _caching.makeWeakCacheSync)(({
      value,
      dirname,
      alias
    }) => {
      return {
        options: (0, _options.validate)(\\"preset\\", value),
        alias,
        dirname
      };
    });
    function chain(a2, b) {
      const fns = [a2, b].filter(Boolean);
      if (fns.length <= 1)
        return fns[0];
      return function(...args) {
        for (const fn of fns) {
          fn.apply(this, args);
        }
      };
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/index.js
var require_config = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/config/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.createConfigItem = createConfigItem;
    exports.createConfigItemSync = exports.createConfigItemAsync = void 0;
    Object.defineProperty(exports, \\"default\\", {
      enumerable: true,
      get: function() {
        return _full.default;
      }
    });
    exports.loadPartialConfigSync = exports.loadPartialConfigAsync = exports.loadPartialConfig = exports.loadOptionsSync = exports.loadOptionsAsync = exports.loadOptions = void 0;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _full = require_full();
    var _partial = require_partial();
    var _item = require_item();
    var loadOptionsRunner = _gensync()(function* (opts) {
      var _config$options;
      const config = yield* (0, _full.default)(opts);
      return (_config$options = config == null ? void 0 : config.options) != null ? _config$options : null;
    });
    var createConfigItemRunner = _gensync()(_item.createConfigItem);
    var maybeErrback = (runner) => (opts, callback) => {
      if (callback === void 0 && typeof opts === \\"function\\") {
        callback = opts;
        opts = void 0;
      }
      return callback ? runner.errback(opts, callback) : runner.sync(opts);
    };
    var loadPartialConfig = maybeErrback(_partial.loadPartialConfig);
    exports.loadPartialConfig = loadPartialConfig;
    var loadPartialConfigSync = _partial.loadPartialConfig.sync;
    exports.loadPartialConfigSync = loadPartialConfigSync;
    var loadPartialConfigAsync = _partial.loadPartialConfig.async;
    exports.loadPartialConfigAsync = loadPartialConfigAsync;
    var loadOptions = maybeErrback(loadOptionsRunner);
    exports.loadOptions = loadOptions;
    var loadOptionsSync = loadOptionsRunner.sync;
    exports.loadOptionsSync = loadOptionsSync;
    var loadOptionsAsync = loadOptionsRunner.async;
    exports.loadOptionsAsync = loadOptionsAsync;
    var createConfigItemSync = createConfigItemRunner.sync;
    exports.createConfigItemSync = createConfigItemSync;
    var createConfigItemAsync = createConfigItemRunner.async;
    exports.createConfigItemAsync = createConfigItemAsync;
    function createConfigItem(target, options, callback) {
      if (callback !== void 0) {
        return createConfigItemRunner.errback(target, options, callback);
      } else if (typeof options === \\"function\\") {
        return createConfigItemRunner.errback(target, void 0, callback);
      } else {
        return createConfigItemRunner.sync(target, options);
      }
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/plugin-pass.js
var require_plugin_pass = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/plugin-pass.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = void 0;
    var PluginPass = class {
      constructor(file, key, options) {
        this._map = /* @__PURE__ */ new Map();
        this.key = void 0;
        this.file = void 0;
        this.opts = void 0;
        this.cwd = void 0;
        this.filename = void 0;
        this.key = key;
        this.file = file;
        this.opts = options || {};
        this.cwd = file.opts.cwd;
        this.filename = file.opts.filename;
      }
      set(key, val) {
        this._map.set(key, val);
      }
      get(key) {
        return this._map.get(key);
      }
      availableHelper(name, versionRange) {
        return this.file.availableHelper(name, versionRange);
      }
      addHelper(name) {
        return this.file.addHelper(name);
      }
      addImport() {
        return this.file.addImport();
      }
      buildCodeFrameError(node, msg, _Error) {
        return this.file.buildCodeFrameError(node, msg, _Error);
      }
    };
    exports.default = PluginPass;
    {
      PluginPass.prototype.getModuleName = function getModuleName() {
        return this.file.getModuleName();
      };
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js
var require_block_hoist_plugin = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = loadBlockHoistPlugin;
    function _traverse() {
      const data = require_lib13();
      _traverse = function() {
        return data;
      };
      return data;
    }
    var _plugin = require_plugin();
    var LOADED_PLUGIN;
    function loadBlockHoistPlugin() {
      if (!LOADED_PLUGIN) {
        LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, {
          visitor: _traverse().default.explode(blockHoistPlugin.visitor)
        }), {});
      }
      return LOADED_PLUGIN;
    }
    function priority(bodyNode) {
      const priority2 = bodyNode == null ? void 0 : bodyNode._blockHoist;
      if (priority2 == null)
        return 1;
      if (priority2 === true)
        return 2;
      return priority2;
    }
    function stableSort(body) {
      const buckets = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < body.length; i++) {
        const n = body[i];
        const p = priority(n);
        const bucket = buckets[p] || (buckets[p] = []);
        bucket.push(n);
      }
      const keys = Object.keys(buckets).map((k) => +k).sort((a2, b) => b - a2);
      let index = 0;
      for (const key of keys) {
        const bucket = buckets[key];
        for (const n of bucket) {
          body[index++] = n;
        }
      }
      return body;
    }
    var blockHoistPlugin = {
      name: \\"internal.blockHoist\\",
      visitor: {
        Block: {
          exit({
            node
          }) {
            const {
              body
            } = node;
            let max = Math.pow(2, 30) - 1;
            let hasChange = false;
            for (let i = 0; i < body.length; i++) {
              const n = body[i];
              const p = priority(n);
              if (p > max) {
                hasChange = true;
                break;
              }
              max = p;
            }
            if (!hasChange)
              return;
            node.body = stableSort(body.slice());
          }
        }
      }
    };
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/normalize-opts.js
var require_normalize_opts = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/normalize-opts.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = normalizeOptions;
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    function normalizeOptions(config) {
      const {
        filename,
        cwd,
        filenameRelative = typeof filename === \\"string\\" ? _path().relative(cwd, filename) : \\"unknown\\",
        sourceType = \\"module\\",
        inputSourceMap,
        sourceMaps = !!inputSourceMap,
        sourceRoot = config.options.moduleRoot,
        sourceFileName = _path().basename(filenameRelative),
        comments = true,
        compact = \\"auto\\"
      } = config.options;
      const opts = config.options;
      const options = Object.assign({}, opts, {
        parserOpts: Object.assign({
          sourceType: _path().extname(filenameRelative) === \\".mjs\\" ? \\"module\\" : sourceType,
          sourceFileName: filename,
          plugins: []
        }, opts.parserOpts),
        generatorOpts: Object.assign({
          filename,
          auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
          auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
          retainLines: opts.retainLines,
          comments,
          shouldPrintComment: opts.shouldPrintComment,
          compact,
          minified: opts.minified,
          sourceMaps,
          sourceRoot,
          sourceFileName
        }, opts.generatorOpts)
      });
      for (const plugins of config.passes) {
        for (const plugin of plugins) {
          if (plugin.manipulateOptions) {
            plugin.manipulateOptions(options, options.parserOpts);
          }
        }
      }
      return options;
    }
  }
});

// node_modules/.pnpm/safe-buffer@5.1.2/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  \\"node_modules/.pnpm/safe-buffer@5.1.2/node_modules/safe-buffer/index.js\\"(exports, module2) {
    var buffer = require(\\"buffer\\");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === \\"number\\") {
        throw new TypeError(\\"Argument must not be a number\\");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== \\"number\\") {
        throw new TypeError(\\"Argument must be a number\\");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === \\"string\\") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== \\"number\\") {
        throw new TypeError(\\"Argument must be a number\\");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== \\"number\\") {
        throw new TypeError(\\"Argument must be a number\\");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/.pnpm/convert-source-map@1.8.0/node_modules/convert-source-map/index.js
var require_convert_source_map = __commonJS({
  \\"node_modules/.pnpm/convert-source-map@1.8.0/node_modules/convert-source-map/index.js\\"(exports) {
    \\"use strict\\";
    var fs = require(\\"fs\\");
    var path = require(\\"path\\");
    var SafeBuffer = require_safe_buffer();
    Object.defineProperty(exports, \\"commentRegex\\", {
      get: function getCommentRegex() {
        return /^\\\\s*\\\\/(?:\\\\/|\\\\*)[@#]\\\\s+sourceMappingURL=data:(?:application|text)\\\\/json;(?:charset[:=]\\\\S+?;)?base64,(?:.*)$/mg;
      }
    });
    Object.defineProperty(exports, \\"mapFileCommentRegex\\", {
      get: function getMapFileCommentRegex() {
        return /(?:\\\\/\\\\/[@#][ \\\\t]+sourceMappingURL=([^\\\\s'\\"\`]+?)[ \\\\t]*$)|(?:\\\\/\\\\*[@#][ \\\\t]+sourceMappingURL=([^\\\\*]+?)[ \\\\t]*(?:\\\\*\\\\/){1}[ \\\\t]*$)/mg;
      }
    });
    function decodeBase64(base64) {
      return (SafeBuffer.Buffer.from(base64, \\"base64\\") || \\"\\").toString();
    }
    function stripComment(sm) {
      return sm.split(\\",\\").pop();
    }
    function readFromFileMap(sm, dir) {
      var r = exports.mapFileCommentRegex.exec(sm);
      var filename = r[1] || r[2];
      var filepath = path.resolve(dir, filename);
      try {
        return fs.readFileSync(filepath, \\"utf8\\");
      } catch (e) {
        throw new Error(\\"An error occurred while trying to read the map file at \\" + filepath + \\"\\\\n\\" + e);
      }
    }
    function Converter(sm, opts) {
      opts = opts || {};
      if (opts.isFileComment)
        sm = readFromFileMap(sm, opts.commentFileDir);
      if (opts.hasComment)
        sm = stripComment(sm);
      if (opts.isEncoded)
        sm = decodeBase64(sm);
      if (opts.isJSON || opts.isEncoded)
        sm = JSON.parse(sm);
      this.sourcemap = sm;
    }
    Converter.prototype.toJSON = function(space) {
      return JSON.stringify(this.sourcemap, null, space);
    };
    Converter.prototype.toBase64 = function() {
      var json = this.toJSON();
      return (SafeBuffer.Buffer.from(json, \\"utf8\\") || \\"\\").toString(\\"base64\\");
    };
    Converter.prototype.toComment = function(options) {
      var base64 = this.toBase64();
      var data = \\"sourceMappingURL=data:application/json;charset=utf-8;base64,\\" + base64;
      return options && options.multiline ? \\"/*# \\" + data + \\" */\\" : \\"//# \\" + data;
    };
    Converter.prototype.toObject = function() {
      return JSON.parse(this.toJSON());
    };
    Converter.prototype.addProperty = function(key, value) {
      if (this.sourcemap.hasOwnProperty(key))
        throw new Error('property \\"' + key + '\\" already exists on the sourcemap, use set property instead');
      return this.setProperty(key, value);
    };
    Converter.prototype.setProperty = function(key, value) {
      this.sourcemap[key] = value;
      return this;
    };
    Converter.prototype.getProperty = function(key) {
      return this.sourcemap[key];
    };
    exports.fromObject = function(obj) {
      return new Converter(obj);
    };
    exports.fromJSON = function(json) {
      return new Converter(json, { isJSON: true });
    };
    exports.fromBase64 = function(base64) {
      return new Converter(base64, { isEncoded: true });
    };
    exports.fromComment = function(comment) {
      comment = comment.replace(/^\\\\/\\\\*/g, \\"//\\").replace(/\\\\*\\\\/$/g, \\"\\");
      return new Converter(comment, { isEncoded: true, hasComment: true });
    };
    exports.fromMapFileComment = function(comment, dir) {
      return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
    };
    exports.fromSource = function(content) {
      var m = content.match(exports.commentRegex);
      return m ? exports.fromComment(m.pop()) : null;
    };
    exports.fromMapFileSource = function(content, dir) {
      var m = content.match(exports.mapFileCommentRegex);
      return m ? exports.fromMapFileComment(m.pop(), dir) : null;
    };
    exports.removeComments = function(src) {
      return src.replace(exports.commentRegex, \\"\\");
    };
    exports.removeMapFileComments = function(src) {
      return src.replace(exports.mapFileCommentRegex, \\"\\");
    };
    exports.generateMapFileComment = function(file, options) {
      var data = \\"sourceMappingURL=\\" + file;
      return options && options.multiline ? \\"/*# \\" + data + \\" */\\" : \\"//# \\" + data;
    };
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js
var require_missing_plugin_helper = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = generateMissingPluginMessage;
    var pluginNameMap = {
      asyncDoExpressions: {
        syntax: {
          name: \\"@babel/plugin-syntax-async-do-expressions\\",
          url: \\"https://git.io/JYer8\\"
        }
      },
      classProperties: {
        syntax: {
          name: \\"@babel/plugin-syntax-class-properties\\",
          url: \\"https://git.io/vb4yQ\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-class-properties\\",
          url: \\"https://git.io/vb4SL\\"
        }
      },
      classPrivateProperties: {
        syntax: {
          name: \\"@babel/plugin-syntax-class-properties\\",
          url: \\"https://git.io/vb4yQ\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-class-properties\\",
          url: \\"https://git.io/vb4SL\\"
        }
      },
      classPrivateMethods: {
        syntax: {
          name: \\"@babel/plugin-syntax-class-properties\\",
          url: \\"https://git.io/vb4yQ\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-private-methods\\",
          url: \\"https://git.io/JvpRG\\"
        }
      },
      classStaticBlock: {
        syntax: {
          name: \\"@babel/plugin-syntax-class-static-block\\",
          url: \\"https://git.io/JTLB6\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-class-static-block\\",
          url: \\"https://git.io/JTLBP\\"
        }
      },
      decimal: {
        syntax: {
          name: \\"@babel/plugin-syntax-decimal\\",
          url: \\"https://git.io/JfKOH\\"
        }
      },
      decorators: {
        syntax: {
          name: \\"@babel/plugin-syntax-decorators\\",
          url: \\"https://git.io/vb4y9\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-decorators\\",
          url: \\"https://git.io/vb4ST\\"
        }
      },
      doExpressions: {
        syntax: {
          name: \\"@babel/plugin-syntax-do-expressions\\",
          url: \\"https://git.io/vb4yh\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-do-expressions\\",
          url: \\"https://git.io/vb4S3\\"
        }
      },
      dynamicImport: {
        syntax: {
          name: \\"@babel/plugin-syntax-dynamic-import\\",
          url: \\"https://git.io/vb4Sv\\"
        }
      },
      exportDefaultFrom: {
        syntax: {
          name: \\"@babel/plugin-syntax-export-default-from\\",
          url: \\"https://git.io/vb4SO\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-export-default-from\\",
          url: \\"https://git.io/vb4yH\\"
        }
      },
      exportNamespaceFrom: {
        syntax: {
          name: \\"@babel/plugin-syntax-export-namespace-from\\",
          url: \\"https://git.io/vb4Sf\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-export-namespace-from\\",
          url: \\"https://git.io/vb4SG\\"
        }
      },
      flow: {
        syntax: {
          name: \\"@babel/plugin-syntax-flow\\",
          url: \\"https://git.io/vb4yb\\"
        },
        transform: {
          name: \\"@babel/preset-flow\\",
          url: \\"https://git.io/JfeDn\\"
        }
      },
      functionBind: {
        syntax: {
          name: \\"@babel/plugin-syntax-function-bind\\",
          url: \\"https://git.io/vb4y7\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-function-bind\\",
          url: \\"https://git.io/vb4St\\"
        }
      },
      functionSent: {
        syntax: {
          name: \\"@babel/plugin-syntax-function-sent\\",
          url: \\"https://git.io/vb4yN\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-function-sent\\",
          url: \\"https://git.io/vb4SZ\\"
        }
      },
      importMeta: {
        syntax: {
          name: \\"@babel/plugin-syntax-import-meta\\",
          url: \\"https://git.io/vbKK6\\"
        }
      },
      jsx: {
        syntax: {
          name: \\"@babel/plugin-syntax-jsx\\",
          url: \\"https://git.io/vb4yA\\"
        },
        transform: {
          name: \\"@babel/preset-react\\",
          url: \\"https://git.io/JfeDR\\"
        }
      },
      importAssertions: {
        syntax: {
          name: \\"@babel/plugin-syntax-import-assertions\\",
          url: \\"https://git.io/JUbkv\\"
        }
      },
      moduleStringNames: {
        syntax: {
          name: \\"@babel/plugin-syntax-module-string-names\\",
          url: \\"https://git.io/JTL8G\\"
        }
      },
      numericSeparator: {
        syntax: {
          name: \\"@babel/plugin-syntax-numeric-separator\\",
          url: \\"https://git.io/vb4Sq\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-numeric-separator\\",
          url: \\"https://git.io/vb4yS\\"
        }
      },
      optionalChaining: {
        syntax: {
          name: \\"@babel/plugin-syntax-optional-chaining\\",
          url: \\"https://git.io/vb4Sc\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-optional-chaining\\",
          url: \\"https://git.io/vb4Sk\\"
        }
      },
      pipelineOperator: {
        syntax: {
          name: \\"@babel/plugin-syntax-pipeline-operator\\",
          url: \\"https://git.io/vb4yj\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-pipeline-operator\\",
          url: \\"https://git.io/vb4SU\\"
        }
      },
      privateIn: {
        syntax: {
          name: \\"@babel/plugin-syntax-private-property-in-object\\",
          url: \\"https://git.io/JfK3q\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-private-property-in-object\\",
          url: \\"https://git.io/JfK3O\\"
        }
      },
      recordAndTuple: {
        syntax: {
          name: \\"@babel/plugin-syntax-record-and-tuple\\",
          url: \\"https://git.io/JvKp3\\"
        }
      },
      throwExpressions: {
        syntax: {
          name: \\"@babel/plugin-syntax-throw-expressions\\",
          url: \\"https://git.io/vb4SJ\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-throw-expressions\\",
          url: \\"https://git.io/vb4yF\\"
        }
      },
      typescript: {
        syntax: {
          name: \\"@babel/plugin-syntax-typescript\\",
          url: \\"https://git.io/vb4SC\\"
        },
        transform: {
          name: \\"@babel/preset-typescript\\",
          url: \\"https://git.io/JfeDz\\"
        }
      },
      asyncGenerators: {
        syntax: {
          name: \\"@babel/plugin-syntax-async-generators\\",
          url: \\"https://git.io/vb4SY\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-async-generator-functions\\",
          url: \\"https://git.io/vb4yp\\"
        }
      },
      logicalAssignment: {
        syntax: {
          name: \\"@babel/plugin-syntax-logical-assignment-operators\\",
          url: \\"https://git.io/vAlBp\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-logical-assignment-operators\\",
          url: \\"https://git.io/vAlRe\\"
        }
      },
      nullishCoalescingOperator: {
        syntax: {
          name: \\"@babel/plugin-syntax-nullish-coalescing-operator\\",
          url: \\"https://git.io/vb4yx\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-nullish-coalescing-operator\\",
          url: \\"https://git.io/vb4Se\\"
        }
      },
      objectRestSpread: {
        syntax: {
          name: \\"@babel/plugin-syntax-object-rest-spread\\",
          url: \\"https://git.io/vb4y5\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-object-rest-spread\\",
          url: \\"https://git.io/vb4Ss\\"
        }
      },
      optionalCatchBinding: {
        syntax: {
          name: \\"@babel/plugin-syntax-optional-catch-binding\\",
          url: \\"https://git.io/vb4Sn\\"
        },
        transform: {
          name: \\"@babel/plugin-proposal-optional-catch-binding\\",
          url: \\"https://git.io/vb4SI\\"
        }
      }
    };
    pluginNameMap.privateIn.syntax = pluginNameMap.privateIn.transform;
    var getNameURLCombination = ({
      name,
      url
    }) => \`\${name} (\${url})\`;
    function generateMissingPluginMessage(missingPluginName, loc, codeFrame) {
      let helpMessage = \`Support for the experimental syntax '\${missingPluginName}' isn't currently enabled (\${loc.line}:\${loc.column + 1}):

\` + codeFrame;
      const pluginInfo = pluginNameMap[missingPluginName];
      if (pluginInfo) {
        const {
          syntax: syntaxPlugin,
          transform: transformPlugin
        } = pluginInfo;
        if (syntaxPlugin) {
          const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
          if (transformPlugin) {
            const transformPluginInfo = getNameURLCombination(transformPlugin);
            const sectionType = transformPlugin.name.startsWith(\\"@babel/plugin\\") ? \\"plugins\\" : \\"presets\\";
            helpMessage += \`

Add \${transformPluginInfo} to the '\${sectionType}' section of your Babel config to enable transformation.
If you want to leave it as-is, add \${syntaxPluginInfo} to the 'plugins' section to enable parsing.\`;
          } else {
            helpMessage += \`

Add \${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.\`;
          }
        }
      }
      return helpMessage;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/parser/index.js
var require_parser = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/parser/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = parser;
    function _parser() {
      const data = require_lib7();
      _parser = function() {
        return data;
      };
      return data;
    }
    function _codeFrame() {
      const data = require_lib6();
      _codeFrame = function() {
        return data;
      };
      return data;
    }
    var _missingPluginHelper = require_missing_plugin_helper();
    function* parser(pluginPasses, {
      parserOpts,
      highlightCode = true,
      filename = \\"unknown\\"
    }, code) {
      try {
        const results = [];
        for (const plugins of pluginPasses) {
          for (const plugin of plugins) {
            const {
              parserOverride
            } = plugin;
            if (parserOverride) {
              const ast = parserOverride(code, parserOpts, _parser().parse);
              if (ast !== void 0)
                results.push(ast);
            }
          }
        }
        if (results.length === 0) {
          return (0, _parser().parse)(code, parserOpts);
        } else if (results.length === 1) {
          yield* [];
          if (typeof results[0].then === \\"function\\") {
            throw new Error(\`You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.\`);
          }
          return results[0];
        }
        throw new Error(\\"More than one plugin attempted to override parsing.\\");
      } catch (err) {
        if (err.code === \\"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\\") {
          err.message += \\"\\\\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.\\";
        }
        const {
          loc,
          missingPlugin
        } = err;
        if (loc) {
          const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {
            start: {
              line: loc.line,
              column: loc.column + 1
            }
          }, {
            highlightCode
          });
          if (missingPlugin) {
            err.message = \`\${filename}: \` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);
          } else {
            err.message = \`\${filename}: \${err.message}

\` + codeFrame;
          }
          err.code = \\"BABEL_PARSE_ERROR\\";
        }
        throw err;
      }
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/util/clone-deep-browser.js
var require_clone_deep_browser = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/util/clone-deep-browser.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = _default;
    var serialized = \\"$$ babel internal serialized type\\" + Math.random();
    function serialize(key, value) {
      if (typeof value !== \\"bigint\\")
        return value;
      return {
        [serialized]: \\"BigInt\\",
        value: value.toString()
      };
    }
    function revive(key, value) {
      if (!value || typeof value !== \\"object\\")
        return value;
      if (value[serialized] !== \\"BigInt\\")
        return value;
      return BigInt(value.value);
    }
    function _default(value) {
      return JSON.parse(JSON.stringify(value, serialize), revive);
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/util/clone-deep.js
var require_clone_deep = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/util/clone-deep.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = _default;
    function _v() {
      const data = require(\\"v8\\");
      _v = function() {
        return data;
      };
      return data;
    }
    var _cloneDeepBrowser = require_clone_deep_browser();
    function _default(value) {
      if (_v().deserialize && _v().serialize) {
        return _v().deserialize(_v().serialize(value));
      }
      return (0, _cloneDeepBrowser.default)(value);
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/normalize-file.js
var require_normalize_file = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/normalize-file.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = normalizeFile;
    function _fs() {
      const data = require(\\"fs\\");
      _fs = function() {
        return data;
      };
      return data;
    }
    function _path() {
      const data = require(\\"path\\");
      _path = function() {
        return data;
      };
      return data;
    }
    function _debug() {
      const data = require_src();
      _debug = function() {
        return data;
      };
      return data;
    }
    function _t() {
      const data = require_lib2();
      _t = function() {
        return data;
      };
      return data;
    }
    function _convertSourceMap() {
      const data = require_convert_source_map();
      _convertSourceMap = function() {
        return data;
      };
      return data;
    }
    var _file = require_file();
    var _parser = require_parser();
    var _cloneDeep = require_clone_deep();
    var {
      file,
      traverseFast
    } = _t();
    var debug = _debug()(\\"babel:transform:file\\");
    var LARGE_INPUT_SOURCEMAP_THRESHOLD = 1e6;
    function* normalizeFile(pluginPasses, options, code, ast) {
      code = \`\${code || \\"\\"}\`;
      if (ast) {
        if (ast.type === \\"Program\\") {
          ast = file(ast, [], []);
        } else if (ast.type !== \\"File\\") {
          throw new Error(\\"AST root must be a Program or File node\\");
        }
        if (options.cloneInputAst) {
          ast = (0, _cloneDeep.default)(ast);
        }
      } else {
        ast = yield* (0, _parser.default)(pluginPasses, options, code);
      }
      let inputMap = null;
      if (options.inputSourceMap !== false) {
        if (typeof options.inputSourceMap === \\"object\\") {
          inputMap = _convertSourceMap().fromObject(options.inputSourceMap);
        }
        if (!inputMap) {
          const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
          if (lastComment) {
            try {
              inputMap = _convertSourceMap().fromComment(lastComment);
            } catch (err) {
              debug(\\"discarding unknown inline input sourcemap\\", err);
            }
          }
        }
        if (!inputMap) {
          const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
          if (typeof options.filename === \\"string\\" && lastComment) {
            try {
              const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);
              const inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]));
              if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {
                debug(\\"skip merging input map > 1 MB\\");
              } else {
                inputMap = _convertSourceMap().fromJSON(inputMapContent);
              }
            } catch (err) {
              debug(\\"discarding unknown file input sourcemap\\", err);
            }
          } else if (lastComment) {
            debug(\\"discarding un-loadable file input sourcemap\\");
          }
        }
      }
      return new _file.default(options, {
        code,
        ast,
        inputMap
      });
    }
    var INLINE_SOURCEMAP_REGEX = /^[@#]\\\\s+sourceMappingURL=data:(?:application|text)\\\\/json;(?:charset[:=]\\\\S+?;)?base64,(?:.*)$/;
    var EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \\\\t]+sourceMappingURL=([^\\\\s'\\"\`]+)[ \\\\t]*$/;
    function extractCommentsFromList(regex, comments, lastComment) {
      if (comments) {
        comments = comments.filter(({
          value
        }) => {
          if (regex.test(value)) {
            lastComment = value;
            return false;
          }
          return true;
        });
      }
      return [comments, lastComment];
    }
    function extractComments(regex, ast) {
      let lastComment = null;
      traverseFast(ast, (node) => {
        [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment);
        [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment);
        [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
      });
      return lastComment;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/file/merge-map.js
var require_merge_map = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/file/merge-map.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = mergeSourceMap;
    function _sourceMap() {
      const data = require_source_map();
      _sourceMap = function() {
        return data;
      };
      return data;
    }
    function mergeSourceMap(inputMap, map) {
      const input = buildMappingData(inputMap);
      const output = buildMappingData(map);
      const mergedGenerator = new (_sourceMap()).SourceMapGenerator();
      for (const {
        source
      } of input.sources) {
        if (typeof source.content === \\"string\\") {
          mergedGenerator.setSourceContent(source.path, source.content);
        }
      }
      if (output.sources.length === 1) {
        const defaultSource = output.sources[0];
        const insertedMappings = /* @__PURE__ */ new Map();
        eachInputGeneratedRange(input, (generated, original, source) => {
          eachOverlappingGeneratedOutputRange(defaultSource, generated, (item) => {
            const key = makeMappingKey(item);
            if (insertedMappings.has(key))
              return;
            insertedMappings.set(key, item);
            mergedGenerator.addMapping({
              source: source.path,
              original: {
                line: original.line,
                column: original.columnStart
              },
              generated: {
                line: item.line,
                column: item.columnStart
              },
              name: original.name
            });
          });
        });
        for (const item of insertedMappings.values()) {
          if (item.columnEnd === Infinity) {
            continue;
          }
          const clearItem = {
            line: item.line,
            columnStart: item.columnEnd
          };
          const key = makeMappingKey(clearItem);
          if (insertedMappings.has(key)) {
            continue;
          }
          mergedGenerator.addMapping({
            generated: {
              line: clearItem.line,
              column: clearItem.columnStart
            }
          });
        }
      }
      const result = mergedGenerator.toJSON();
      if (typeof input.sourceRoot === \\"string\\") {
        result.sourceRoot = input.sourceRoot;
      }
      return result;
    }
    function makeMappingKey(item) {
      return \`\${item.line}/\${item.columnStart}\`;
    }
    function eachOverlappingGeneratedOutputRange(outputFile, inputGeneratedRange, callback) {
      const overlappingOriginal = filterApplicableOriginalRanges(outputFile, inputGeneratedRange);
      for (const {
        generated
      } of overlappingOriginal) {
        for (const item of generated) {
          callback(item);
        }
      }
    }
    function filterApplicableOriginalRanges({
      mappings
    }, {
      line,
      columnStart,
      columnEnd
    }) {
      return filterSortedArray(mappings, ({
        original: outOriginal
      }) => {
        if (line > outOriginal.line)
          return -1;
        if (line < outOriginal.line)
          return 1;
        if (columnStart >= outOriginal.columnEnd)
          return -1;
        if (columnEnd <= outOriginal.columnStart)
          return 1;
        return 0;
      });
    }
    function eachInputGeneratedRange(map, callback) {
      for (const {
        source,
        mappings
      } of map.sources) {
        for (const {
          original,
          generated
        } of mappings) {
          for (const item of generated) {
            callback(item, original, source);
          }
        }
      }
    }
    function buildMappingData(map) {
      const consumer = new (_sourceMap()).SourceMapConsumer(Object.assign({}, map, {
        sourceRoot: null
      }));
      const sources = /* @__PURE__ */ new Map();
      const mappings = /* @__PURE__ */ new Map();
      let last = null;
      consumer.computeColumnSpans();
      consumer.eachMapping((m) => {
        if (m.originalLine === null)
          return;
        let source = sources.get(m.source);
        if (!source) {
          source = {
            path: m.source,
            content: consumer.sourceContentFor(m.source, true)
          };
          sources.set(m.source, source);
        }
        let sourceData = mappings.get(source);
        if (!sourceData) {
          sourceData = {
            source,
            mappings: []
          };
          mappings.set(source, sourceData);
        }
        const obj = {
          line: m.originalLine,
          columnStart: m.originalColumn,
          columnEnd: Infinity,
          name: m.name
        };
        if (last && last.source === source && last.mapping.line === m.originalLine) {
          last.mapping.columnEnd = m.originalColumn;
        }
        last = {
          source,
          mapping: obj
        };
        sourceData.mappings.push({
          original: obj,
          generated: consumer.allGeneratedPositionsFor({
            source: m.source,
            line: m.originalLine,
            column: m.originalColumn
          }).map((item) => ({
            line: item.line,
            columnStart: item.column,
            columnEnd: item.lastColumn + 1
          }))
        });
      }, null, _sourceMap().SourceMapConsumer.ORIGINAL_ORDER);
      return {
        file: map.file,
        sourceRoot: map.sourceRoot,
        sources: Array.from(mappings.values())
      };
    }
    function findInsertionLocation(array, callback) {
      let left = 0;
      let right = array.length;
      while (left < right) {
        const mid = Math.floor((left + right) / 2);
        const item = array[mid];
        const result = callback(item);
        if (result === 0) {
          left = mid;
          break;
        }
        if (result >= 0) {
          right = mid;
        } else {
          left = mid + 1;
        }
      }
      let i = left;
      if (i < array.length) {
        while (i >= 0 && callback(array[i]) >= 0) {
          i--;
        }
        return i + 1;
      }
      return i;
    }
    function filterSortedArray(array, callback) {
      const start = findInsertionLocation(array, callback);
      const results = [];
      for (let i = start; i < array.length && callback(array[i]) === 0; i++) {
        results.push(array[i]);
      }
      return results;
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/file/generate.js
var require_generate = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/file/generate.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.default = generateCode;
    function _convertSourceMap() {
      const data = require_convert_source_map();
      _convertSourceMap = function() {
        return data;
      };
      return data;
    }
    function _generator() {
      const data = require_lib4();
      _generator = function() {
        return data;
      };
      return data;
    }
    var _mergeMap = require_merge_map();
    function generateCode(pluginPasses, file) {
      const {
        opts,
        ast,
        code,
        inputMap
      } = file;
      const results = [];
      for (const plugins of pluginPasses) {
        for (const plugin of plugins) {
          const {
            generatorOverride
          } = plugin;
          if (generatorOverride) {
            const result2 = generatorOverride(ast, opts.generatorOpts, code, _generator().default);
            if (result2 !== void 0)
              results.push(result2);
          }
        }
      }
      let result;
      if (results.length === 0) {
        result = (0, _generator().default)(ast, opts.generatorOpts, code);
      } else if (results.length === 1) {
        result = results[0];
        if (typeof result.then === \\"function\\") {
          throw new Error(\`You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.\`);
        }
      } else {
        throw new Error(\\"More than one plugin attempted to override codegen.\\");
      }
      let {
        code: outputCode,
        map: outputMap
      } = result;
      if (outputMap && inputMap) {
        outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap);
      }
      if (opts.sourceMaps === \\"inline\\" || opts.sourceMaps === \\"both\\") {
        outputCode += \\"\\\\n\\" + _convertSourceMap().fromObject(outputMap).toComment();
      }
      if (opts.sourceMaps === \\"inline\\") {
        outputMap = null;
      }
      return {
        outputCode,
        outputMap
      };
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/index.js
var require_transformation = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transformation/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.run = run;
    function _traverse() {
      const data = require_lib13();
      _traverse = function() {
        return data;
      };
      return data;
    }
    var _pluginPass = require_plugin_pass();
    var _blockHoistPlugin = require_block_hoist_plugin();
    var _normalizeOpts = require_normalize_opts();
    var _normalizeFile = require_normalize_file();
    var _generate = require_generate();
    function* run(config, code, ast) {
      const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast);
      const opts = file.opts;
      try {
        yield* transformFile(file, config.passes);
      } catch (e) {
        var _opts$filename;
        e.message = \`\${(_opts$filename = opts.filename) != null ? _opts$filename : \\"unknown\\"}: \${e.message}\`;
        if (!e.code) {
          e.code = \\"BABEL_TRANSFORM_ERROR\\";
        }
        throw e;
      }
      let outputCode, outputMap;
      try {
        if (opts.code !== false) {
          ({
            outputCode,
            outputMap
          } = (0, _generate.default)(config.passes, file));
        }
      } catch (e) {
        var _opts$filename2;
        e.message = \`\${(_opts$filename2 = opts.filename) != null ? _opts$filename2 : \\"unknown\\"}: \${e.message}\`;
        if (!e.code) {
          e.code = \\"BABEL_GENERATE_ERROR\\";
        }
        throw e;
      }
      return {
        metadata: file.metadata,
        options: opts,
        ast: opts.ast === true ? file.ast : null,
        code: outputCode === void 0 ? null : outputCode,
        map: outputMap === void 0 ? null : outputMap,
        sourceType: file.ast.program.sourceType
      };
    }
    function* transformFile(file, pluginPasses) {
      for (const pluginPairs of pluginPasses) {
        const passPairs = [];
        const passes = [];
        const visitors = [];
        for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
          const pass = new _pluginPass.default(file, plugin.key, plugin.options);
          passPairs.push([plugin, pass]);
          passes.push(pass);
          visitors.push(plugin.visitor);
        }
        for (const [plugin, pass] of passPairs) {
          const fn = plugin.pre;
          if (fn) {
            const result = fn.call(pass, file);
            yield* [];
            if (isThenable(result)) {
              throw new Error(\`You appear to be using an plugin with an async .pre, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.\`);
            }
          }
        }
        const visitor = _traverse().default.visitors.merge(visitors, passes, file.opts.wrapPluginVisitorMethod);
        (0, _traverse().default)(file.ast, visitor, file.scope);
        for (const [plugin, pass] of passPairs) {
          const fn = plugin.post;
          if (fn) {
            const result = fn.call(pass, file);
            yield* [];
            if (isThenable(result)) {
              throw new Error(\`You appear to be using an plugin with an async .post, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.\`);
            }
          }
        }
      }
    }
    function isThenable(val) {
      return !!val && (typeof val === \\"object\\" || typeof val === \\"function\\") && !!val.then && typeof val.then === \\"function\\";
    }
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transform.js
var require_transform = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transform.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.transformSync = exports.transformAsync = exports.transform = void 0;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _config = require_config();
    var _transformation = require_transformation();
    var transformRunner = _gensync()(function* transform2(code, opts) {
      const config = yield* (0, _config.default)(opts);
      if (config === null)
        return null;
      return yield* (0, _transformation.run)(config, code);
    });
    var transform = function transform2(code, opts, callback) {
      if (typeof opts === \\"function\\") {
        callback = opts;
        opts = void 0;
      }
      if (callback === void 0)
        return transformRunner.sync(code, opts);
      transformRunner.errback(code, opts, callback);
    };
    exports.transform = transform;
    var transformSync = transformRunner.sync;
    exports.transformSync = transformSync;
    var transformAsync = transformRunner.async;
    exports.transformAsync = transformAsync;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transform-file.js
var require_transform_file = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transform-file.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.transformFileSync = exports.transformFileAsync = exports.transformFile = void 0;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _config = require_config();
    var _transformation = require_transformation();
    var fs = require_fs();
    var transformFileRunner = _gensync()(function* (filename, opts) {
      const options = Object.assign({}, opts, {
        filename
      });
      const config = yield* (0, _config.default)(options);
      if (config === null)
        return null;
      const code = yield* fs.readFile(filename, \\"utf8\\");
      return yield* (0, _transformation.run)(config, code);
    });
    var transformFile = transformFileRunner.errback;
    exports.transformFile = transformFile;
    var transformFileSync = transformFileRunner.sync;
    exports.transformFileSync = transformFileSync;
    var transformFileAsync = transformFileRunner.async;
    exports.transformFileAsync = transformFileAsync;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transform-ast.js
var require_transform_ast = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/transform-ast.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.transformFromAstSync = exports.transformFromAstAsync = exports.transformFromAst = void 0;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _config = require_config();
    var _transformation = require_transformation();
    var transformFromAstRunner = _gensync()(function* (ast, code, opts) {
      const config = yield* (0, _config.default)(opts);
      if (config === null)
        return null;
      if (!ast)
        throw new Error(\\"No AST given\\");
      return yield* (0, _transformation.run)(config, code, ast);
    });
    var transformFromAst = function transformFromAst2(ast, code, opts, callback) {
      if (typeof opts === \\"function\\") {
        callback = opts;
        opts = void 0;
      }
      if (callback === void 0) {
        return transformFromAstRunner.sync(ast, code, opts);
      }
      transformFromAstRunner.errback(ast, code, opts, callback);
    };
    exports.transformFromAst = transformFromAst;
    var transformFromAstSync = transformFromAstRunner.sync;
    exports.transformFromAstSync = transformFromAstSync;
    var transformFromAstAsync = transformFromAstRunner.async;
    exports.transformFromAstAsync = transformFromAstAsync;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/parse.js
var require_parse3 = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/parse.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.parseSync = exports.parseAsync = exports.parse = void 0;
    function _gensync() {
      const data = require_gensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _config = require_config();
    var _parser = require_parser();
    var _normalizeOpts = require_normalize_opts();
    var parseRunner = _gensync()(function* parse2(code, opts) {
      const config = yield* (0, _config.default)(opts);
      if (config === null) {
        return null;
      }
      return yield* (0, _parser.default)(config.passes, (0, _normalizeOpts.default)(config), code);
    });
    var parse = function parse2(code, opts, callback) {
      if (typeof opts === \\"function\\") {
        callback = opts;
        opts = void 0;
      }
      if (callback === void 0)
        return parseRunner.sync(code, opts);
      parseRunner.errback(code, opts, callback);
    };
    exports.parse = parse;
    var parseSync = parseRunner.sync;
    exports.parseSync = parseSync;
    var parseAsync = parseRunner.async;
    exports.parseAsync = parseAsync;
  }
});

// node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/index.js
var require_lib21 = __commonJS({
  \\"node_modules/.pnpm/@babel+core@7.16.7/node_modules/@babel/core/lib/index.js\\"(exports) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
      value: true
    });
    exports.DEFAULT_EXTENSIONS = void 0;
    Object.defineProperty(exports, \\"File\\", {
      enumerable: true,
      get: function() {
        return _file.default;
      }
    });
    exports.OptionManager = void 0;
    exports.Plugin = Plugin;
    Object.defineProperty(exports, \\"buildExternalHelpers\\", {
      enumerable: true,
      get: function() {
        return _buildExternalHelpers.default;
      }
    });
    Object.defineProperty(exports, \\"createConfigItem\\", {
      enumerable: true,
      get: function() {
        return _config.createConfigItem;
      }
    });
    Object.defineProperty(exports, \\"createConfigItemAsync\\", {
      enumerable: true,
      get: function() {
        return _config.createConfigItemAsync;
      }
    });
    Object.defineProperty(exports, \\"createConfigItemSync\\", {
      enumerable: true,
      get: function() {
        return _config.createConfigItemSync;
      }
    });
    Object.defineProperty(exports, \\"getEnv\\", {
      enumerable: true,
      get: function() {
        return _environment.getEnv;
      }
    });
    Object.defineProperty(exports, \\"loadOptions\\", {
      enumerable: true,
      get: function() {
        return _config.loadOptions;
      }
    });
    Object.defineProperty(exports, \\"loadOptionsAsync\\", {
      enumerable: true,
      get: function() {
        return _config.loadOptionsAsync;
      }
    });
    Object.defineProperty(exports, \\"loadOptionsSync\\", {
      enumerable: true,
      get: function() {
        return _config.loadOptionsSync;
      }
    });
    Object.defineProperty(exports, \\"loadPartialConfig\\", {
      enumerable: true,
      get: function() {
        return _config.loadPartialConfig;
      }
    });
    Object.defineProperty(exports, \\"loadPartialConfigAsync\\", {
      enumerable: true,
      get: function() {
        return _config.loadPartialConfigAsync;
      }
    });
    Object.defineProperty(exports, \\"loadPartialConfigSync\\", {
      enumerable: true,
      get: function() {
        return _config.loadPartialConfigSync;
      }
    });
    Object.defineProperty(exports, \\"parse\\", {
      enumerable: true,
      get: function() {
        return _parse.parse;
      }
    });
    Object.defineProperty(exports, \\"parseAsync\\", {
      enumerable: true,
      get: function() {
        return _parse.parseAsync;
      }
    });
    Object.defineProperty(exports, \\"parseSync\\", {
      enumerable: true,
      get: function() {
        return _parse.parseSync;
      }
    });
    Object.defineProperty(exports, \\"resolvePlugin\\", {
      enumerable: true,
      get: function() {
        return _files.resolvePlugin;
      }
    });
    Object.defineProperty(exports, \\"resolvePreset\\", {
      enumerable: true,
      get: function() {
        return _files.resolvePreset;
      }
    });
    Object.defineProperty(exports, \\"template\\", {
      enumerable: true,
      get: function() {
        return _template().default;
      }
    });
    Object.defineProperty(exports, \\"tokTypes\\", {
      enumerable: true,
      get: function() {
        return _parser().tokTypes;
      }
    });
    Object.defineProperty(exports, \\"transform\\", {
      enumerable: true,
      get: function() {
        return _transform.transform;
      }
    });
    Object.defineProperty(exports, \\"transformAsync\\", {
      enumerable: true,
      get: function() {
        return _transform.transformAsync;
      }
    });
    Object.defineProperty(exports, \\"transformFile\\", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFile;
      }
    });
    Object.defineProperty(exports, \\"transformFileAsync\\", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFileAsync;
      }
    });
    Object.defineProperty(exports, \\"transformFileSync\\", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFileSync;
      }
    });
    Object.defineProperty(exports, \\"transformFromAst\\", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAst;
      }
    });
    Object.defineProperty(exports, \\"transformFromAstAsync\\", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAstAsync;
      }
    });
    Object.defineProperty(exports, \\"transformFromAstSync\\", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAstSync;
      }
    });
    Object.defineProperty(exports, \\"transformSync\\", {
      enumerable: true,
      get: function() {
        return _transform.transformSync;
      }
    });
    Object.defineProperty(exports, \\"traverse\\", {
      enumerable: true,
      get: function() {
        return _traverse().default;
      }
    });
    exports.version = exports.types = void 0;
    var _file = require_file();
    var _buildExternalHelpers = require_build_external_helpers();
    var _files = require_files();
    var _environment = require_environment();
    function _types() {
      const data = require_lib2();
      _types = function() {
        return data;
      };
      return data;
    }
    Object.defineProperty(exports, \\"types\\", {
      enumerable: true,
      get: function() {
        return _types();
      }
    });
    function _parser() {
      const data = require_lib7();
      _parser = function() {
        return data;
      };
      return data;
    }
    function _traverse() {
      const data = require_lib13();
      _traverse = function() {
        return data;
      };
      return data;
    }
    function _template() {
      const data = require_lib11();
      _template = function() {
        return data;
      };
      return data;
    }
    var _config = require_config();
    var _transform = require_transform();
    var _transformFile = require_transform_file();
    var _transformAst = require_transform_ast();
    var _parse = require_parse3();
    var version = \\"7.16.7\\";
    exports.version = version;
    var DEFAULT_EXTENSIONS = Object.freeze([\\".js\\", \\".jsx\\", \\".es6\\", \\".es\\", \\".mjs\\", \\".cjs\\"]);
    exports.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;
    var OptionManager = class {
      init(opts) {
        return (0, _config.loadOptions)(opts);
      }
    };
    exports.OptionManager = OptionManager;
    function Plugin(alias) {
      throw new Error(\`The (\${alias}) Babel 5 plugin is being run with an unsupported Babel version.\`);
    }
  }
});

// src/__test__/index.ts
var test_exports = {};
__export(test_exports, {
  a: () => a
});
var import_core = __toESM(require_lib21());
console.log(\\"this is a fake module\\", import_core.default);
var a = 1;
module.exports = __toCommonJS(test_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  a
});
",
    "path": "index.js",
  },
  Object {
    "content": "[
  {
    \\"name\\": \\"ansi-styles\\",
    \\"version\\": \\"3.2.1\\",
    \\"licenseText\\": \\"MIT License\\\\n\\\\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/chalk/ansi-styles.git\\"
  },
  {
    \\"name\\": \\"browserslist\\",
    \\"version\\": \\"4.19.1\\",
    \\"licenseText\\": \\"The MIT License (MIT)\\\\n\\\\nCopyright 2014 Andrey Sitnik <andrey@sitnik.ru> and other contributors\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\\\nthis software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in\\\\nthe Software without restriction, including without limitation the rights to\\\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\\\\nthe Software, and to permit persons to whom the Software is furnished to do so,\\\\nsubject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all\\\\ncopies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\\\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\\\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\\\\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\\\\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Andrey Sitnik <andrey@sitnik.ru>\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/browserslist/browserslist.git\\"
  },
  {
    \\"name\\": \\"caniuse-lite\\",
    \\"version\\": \\"1.0.30001304\\",
    \\"licenseText\\": \\"Attribution 4.0 International\\\\n\\\\n=======================================================================\\\\n\\\\nCreative Commons Corporation (\\\\\\"Creative Commons\\\\\\") is not a law firm and\\\\ndoes not provide legal services or legal advice. Distribution of\\\\nCreative Commons public licenses does not create a lawyer-client or\\\\nother relationship. Creative Commons makes its licenses and related\\\\ninformation available on an \\\\\\"as-is\\\\\\" basis. Creative Commons gives no\\\\nwarranties regarding its licenses, any material licensed under their\\\\nterms and conditions, or any related information. Creative Commons\\\\ndisclaims all liability for damages resulting from their use to the\\\\nfullest extent possible.\\\\n\\\\nUsing Creative Commons Public Licenses\\\\n\\\\nCreative Commons public licenses provide a standard set of terms and\\\\nconditions that creators and other rights holders may use to share\\\\noriginal works of authorship and other material subject to copyright\\\\nand certain other rights specified in the public license below. The\\\\nfollowing considerations are for informational purposes only, are not\\\\nexhaustive, and do not form part of our licenses.\\\\n\\\\n     Considerations for licensors: Our public licenses are\\\\n     intended for use by those authorized to give the public\\\\n     permission to use material in ways otherwise restricted by\\\\n     copyright and certain other rights. Our licenses are\\\\n     irrevocable. Licensors should read and understand the terms\\\\n     and conditions of the license they choose before applying it.\\\\n     Licensors should also secure all rights necessary before\\\\n     applying our licenses so that the public can reuse the\\\\n     material as expected. Licensors should clearly mark any\\\\n     material not subject to the license. This includes other CC-\\\\n     licensed material, or material used under an exception or\\\\n     limitation to copyright. More considerations for licensors:\\\\n\\\\twiki.creativecommons.org/Considerations_for_licensors\\\\n\\\\n     Considerations for the public: By using one of our public\\\\n     licenses, a licensor grants the public permission to use the\\\\n     licensed material under specified terms and conditions. If\\\\n     the licensor's permission is not necessary for any reason--for\\\\n     example, because of any applicable exception or limitation to\\\\n     copyright--then that use is not regulated by the license. Our\\\\n     licenses grant only permissions under copyright and certain\\\\n     other rights that a licensor has authority to grant. Use of\\\\n     the licensed material may still be restricted for other\\\\n     reasons, including because others have copyright or other\\\\n     rights in the material. A licensor may make special requests,\\\\n     such as asking that all changes be marked or described.\\\\n     Although not required by our licenses, you are encouraged to\\\\n     respect those requests where reasonable. More_considerations\\\\n     for the public: \\\\n\\\\twiki.creativecommons.org/Considerations_for_licensees\\\\n\\\\n=======================================================================\\\\n\\\\nCreative Commons Attribution 4.0 International Public License\\\\n\\\\nBy exercising the Licensed Rights (defined below), You accept and agree\\\\nto be bound by the terms and conditions of this Creative Commons\\\\nAttribution 4.0 International Public License (\\\\\\"Public License\\\\\\"). To the\\\\nextent this Public License may be interpreted as a contract, You are\\\\ngranted the Licensed Rights in consideration of Your acceptance of\\\\nthese terms and conditions, and the Licensor grants You such rights in\\\\nconsideration of benefits the Licensor receives from making the\\\\nLicensed Material available under these terms and conditions.\\\\n\\\\n\\\\nSection 1 -- Definitions.\\\\n\\\\n  a. Adapted Material means material subject to Copyright and Similar\\\\n     Rights that is derived from or based upon the Licensed Material\\\\n     and in which the Licensed Material is translated, altered,\\\\n     arranged, transformed, or otherwise modified in a manner requiring\\\\n     permission under the Copyright and Similar Rights held by the\\\\n     Licensor. For purposes of this Public License, where the Licensed\\\\n     Material is a musical work, performance, or sound recording,\\\\n     Adapted Material is always produced where the Licensed Material is\\\\n     synched in timed relation with a moving image.\\\\n\\\\n  b. Adapter's License means the license You apply to Your Copyright\\\\n     and Similar Rights in Your contributions to Adapted Material in\\\\n     accordance with the terms and conditions of this Public License.\\\\n\\\\n  c. Copyright and Similar Rights means copyright and/or similar rights\\\\n     closely related to copyright including, without limitation,\\\\n     performance, broadcast, sound recording, and Sui Generis Database\\\\n     Rights, without regard to how the rights are labeled or\\\\n     categorized. For purposes of this Public License, the rights\\\\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\\\\n     Rights.\\\\n\\\\n  d. Effective Technological Measures means those measures that, in the\\\\n     absence of proper authority, may not be circumvented under laws\\\\n     fulfilling obligations under Article 11 of the WIPO Copyright\\\\n     Treaty adopted on December 20, 1996, and/or similar international\\\\n     agreements.\\\\n\\\\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\\\\n     any other exception or limitation to Copyright and Similar Rights\\\\n     that applies to Your use of the Licensed Material.\\\\n\\\\n  f. Licensed Material means the artistic or literary work, database,\\\\n     or other material to which the Licensor applied this Public\\\\n     License.\\\\n\\\\n  g. Licensed Rights means the rights granted to You subject to the\\\\n     terms and conditions of this Public License, which are limited to\\\\n     all Copyright and Similar Rights that apply to Your use of the\\\\n     Licensed Material and that the Licensor has authority to license.\\\\n\\\\n  h. Licensor means the individual(s) or entity(ies) granting rights\\\\n     under this Public License.\\\\n\\\\n  i. Share means to provide material to the public by any means or\\\\n     process that requires permission under the Licensed Rights, such\\\\n     as reproduction, public display, public performance, distribution,\\\\n     dissemination, communication, or importation, and to make material\\\\n     available to the public including in ways that members of the\\\\n     public may access the material from a place and at a time\\\\n     individually chosen by them.\\\\n\\\\n  j. Sui Generis Database Rights means rights other than copyright\\\\n     resulting from Directive 96/9/EC of the European Parliament and of\\\\n     the Council of 11 March 1996 on the legal protection of databases,\\\\n     as amended and/or succeeded, as well as other essentially\\\\n     equivalent rights anywhere in the world.\\\\n\\\\n  k. You means the individual or entity exercising the Licensed Rights\\\\n     under this Public License. Your has a corresponding meaning.\\\\n\\\\n\\\\nSection 2 -- Scope.\\\\n\\\\n  a. License grant.\\\\n\\\\n       1. Subject to the terms and conditions of this Public License,\\\\n          the Licensor hereby grants You a worldwide, royalty-free,\\\\n          non-sublicensable, non-exclusive, irrevocable license to\\\\n          exercise the Licensed Rights in the Licensed Material to:\\\\n\\\\n            a. reproduce and Share the Licensed Material, in whole or\\\\n               in part; and\\\\n\\\\n            b. produce, reproduce, and Share Adapted Material.\\\\n\\\\n       2. Exceptions and Limitations. For the avoidance of doubt, where\\\\n          Exceptions and Limitations apply to Your use, this Public\\\\n          License does not apply, and You do not need to comply with\\\\n          its terms and conditions.\\\\n\\\\n       3. Term. The term of this Public License is specified in Section\\\\n          6(a).\\\\n\\\\n       4. Media and formats; technical modifications allowed. The\\\\n          Licensor authorizes You to exercise the Licensed Rights in\\\\n          all media and formats whether now known or hereafter created,\\\\n          and to make technical modifications necessary to do so. The\\\\n          Licensor waives and/or agrees not to assert any right or\\\\n          authority to forbid You from making technical modifications\\\\n          necessary to exercise the Licensed Rights, including\\\\n          technical modifications necessary to circumvent Effective\\\\n          Technological Measures. For purposes of this Public License,\\\\n          simply making modifications authorized by this Section 2(a)\\\\n          (4) never produces Adapted Material.\\\\n\\\\n       5. Downstream recipients.\\\\n\\\\n            a. Offer from the Licensor -- Licensed Material. Every\\\\n               recipient of the Licensed Material automatically\\\\n               receives an offer from the Licensor to exercise the\\\\n               Licensed Rights under the terms and conditions of this\\\\n               Public License.\\\\n\\\\n            b. No downstream restrictions. You may not offer or impose\\\\n               any additional or different terms or conditions on, or\\\\n               apply any Effective Technological Measures to, the\\\\n               Licensed Material if doing so restricts exercise of the\\\\n               Licensed Rights by any recipient of the Licensed\\\\n               Material.\\\\n\\\\n       6. No endorsement. Nothing in this Public License constitutes or\\\\n          may be construed as permission to assert or imply that You\\\\n          are, or that Your use of the Licensed Material is, connected\\\\n          with, or sponsored, endorsed, or granted official status by,\\\\n          the Licensor or others designated to receive attribution as\\\\n          provided in Section 3(a)(1)(A)(i).\\\\n\\\\n  b. Other rights.\\\\n\\\\n       1. Moral rights, such as the right of integrity, are not\\\\n          licensed under this Public License, nor are publicity,\\\\n          privacy, and/or other similar personality rights; however, to\\\\n          the extent possible, the Licensor waives and/or agrees not to\\\\n          assert any such rights held by the Licensor to the limited\\\\n          extent necessary to allow You to exercise the Licensed\\\\n          Rights, but not otherwise.\\\\n\\\\n       2. Patent and trademark rights are not licensed under this\\\\n          Public License.\\\\n\\\\n       3. To the extent possible, the Licensor waives any right to\\\\n          collect royalties from You for the exercise of the Licensed\\\\n          Rights, whether directly or through a collecting society\\\\n          under any voluntary or waivable statutory or compulsory\\\\n          licensing scheme. In all other cases the Licensor expressly\\\\n          reserves any right to collect such royalties.\\\\n\\\\n\\\\nSection 3 -- License Conditions.\\\\n\\\\nYour exercise of the Licensed Rights is expressly made subject to the\\\\nfollowing conditions.\\\\n\\\\n  a. Attribution.\\\\n\\\\n       1. If You Share the Licensed Material (including in modified\\\\n          form), You must:\\\\n\\\\n            a. retain the following if it is supplied by the Licensor\\\\n               with the Licensed Material:\\\\n\\\\n                 i. identification of the creator(s) of the Licensed\\\\n                    Material and any others designated to receive\\\\n                    attribution, in any reasonable manner requested by\\\\n                    the Licensor (including by pseudonym if\\\\n                    designated);\\\\n\\\\n                ii. a copyright notice;\\\\n\\\\n               iii. a notice that refers to this Public License;\\\\n\\\\n                iv. a notice that refers to the disclaimer of\\\\n                    warranties;\\\\n\\\\n                 v. a URI or hyperlink to the Licensed Material to the\\\\n                    extent reasonably practicable;\\\\n\\\\n            b. indicate if You modified the Licensed Material and\\\\n               retain an indication of any previous modifications; and\\\\n\\\\n            c. indicate the Licensed Material is licensed under this\\\\n               Public License, and include the text of, or the URI or\\\\n               hyperlink to, this Public License.\\\\n\\\\n       2. You may satisfy the conditions in Section 3(a)(1) in any\\\\n          reasonable manner based on the medium, means, and context in\\\\n          which You Share the Licensed Material. For example, it may be\\\\n          reasonable to satisfy the conditions by providing a URI or\\\\n          hyperlink to a resource that includes the required\\\\n          information.\\\\n\\\\n       3. If requested by the Licensor, You must remove any of the\\\\n          information required by Section 3(a)(1)(A) to the extent\\\\n          reasonably practicable.\\\\n\\\\n       4. If You Share Adapted Material You produce, the Adapter's\\\\n          License You apply must not prevent recipients of the Adapted\\\\n          Material from complying with this Public License.\\\\n\\\\n\\\\nSection 4 -- Sui Generis Database Rights.\\\\n\\\\nWhere the Licensed Rights include Sui Generis Database Rights that\\\\napply to Your use of the Licensed Material:\\\\n\\\\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\\\\n     to extract, reuse, reproduce, and Share all or a substantial\\\\n     portion of the contents of the database;\\\\n\\\\n  b. if You include all or a substantial portion of the database\\\\n     contents in a database in which You have Sui Generis Database\\\\n     Rights, then the database in which You have Sui Generis Database\\\\n     Rights (but not its individual contents) is Adapted Material; and\\\\n\\\\n  c. You must comply with the conditions in Section 3(a) if You Share\\\\n     all or a substantial portion of the contents of the database.\\\\n\\\\nFor the avoidance of doubt, this Section 4 supplements and does not\\\\nreplace Your obligations under this Public License where the Licensed\\\\nRights include other Copyright and Similar Rights.\\\\n\\\\n\\\\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\\\\n\\\\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\\\\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\\\\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\\\\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\\\\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\\\\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\\\\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\\\\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\\\\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\\\\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\\\\n\\\\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\\\\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\\\\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\\\\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\\\\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\\\\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\\\\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\\\\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\\\\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\\\\n\\\\n  c. The disclaimer of warranties and limitation of liability provided\\\\n     above shall be interpreted in a manner that, to the extent\\\\n     possible, most closely approximates an absolute disclaimer and\\\\n     waiver of all liability.\\\\n\\\\n\\\\nSection 6 -- Term and Termination.\\\\n\\\\n  a. This Public License applies for the term of the Copyright and\\\\n     Similar Rights licensed here. However, if You fail to comply with\\\\n     this Public License, then Your rights under this Public License\\\\n     terminate automatically.\\\\n\\\\n  b. Where Your right to use the Licensed Material has terminated under\\\\n     Section 6(a), it reinstates:\\\\n\\\\n       1. automatically as of the date the violation is cured, provided\\\\n          it is cured within 30 days of Your discovery of the\\\\n          violation; or\\\\n\\\\n       2. upon express reinstatement by the Licensor.\\\\n\\\\n     For the avoidance of doubt, this Section 6(b) does not affect any\\\\n     right the Licensor may have to seek remedies for Your violations\\\\n     of this Public License.\\\\n\\\\n  c. For the avoidance of doubt, the Licensor may also offer the\\\\n     Licensed Material under separate terms or conditions or stop\\\\n     distributing the Licensed Material at any time; however, doing so\\\\n     will not terminate this Public License.\\\\n\\\\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\\\\n     License.\\\\n\\\\n\\\\nSection 7 -- Other Terms and Conditions.\\\\n\\\\n  a. The Licensor shall not be bound by any additional or different\\\\n     terms or conditions communicated by You unless expressly agreed.\\\\n\\\\n  b. Any arrangements, understandings, or agreements regarding the\\\\n     Licensed Material not stated herein are separate from and\\\\n     independent of the terms and conditions of this Public License.\\\\n\\\\n\\\\nSection 8 -- Interpretation.\\\\n\\\\n  a. For the avoidance of doubt, this Public License does not, and\\\\n     shall not be interpreted to, reduce, limit, restrict, or impose\\\\n     conditions on any use of the Licensed Material that could lawfully\\\\n     be made without permission under this Public License.\\\\n\\\\n  b. To the extent possible, if any provision of this Public License is\\\\n     deemed unenforceable, it shall be automatically reformed to the\\\\n     minimum extent necessary to make it enforceable. If the provision\\\\n     cannot be reformed, it shall be severed from this Public License\\\\n     without affecting the enforceability of the remaining terms and\\\\n     conditions.\\\\n\\\\n  c. No term or condition of this Public License will be waived and no\\\\n     failure to comply consented to unless expressly agreed to by the\\\\n     Licensor.\\\\n\\\\n  d. Nothing in this Public License constitutes or may be interpreted\\\\n     as a limitation upon, or waiver of, any privileges and immunities\\\\n     that apply to the Licensor or You, including from the legal\\\\n     processes of any jurisdiction or authority.\\\\n\\\\n\\\\n=======================================================================\\\\n\\\\nCreative Commons is not a party to its public\\\\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\\\\nits public licenses to material it publishes and in those instances\\\\nwill be considered the “Licensor.” The text of the Creative Commons\\\\npublic licenses is dedicated to the public domain under the CC0 Public\\\\nDomain Dedication. Except for the limited purpose of indicating that\\\\nmaterial is shared under a Creative Commons public license or as\\\\notherwise permitted by the Creative Commons policies published at\\\\ncreativecommons.org/policies, Creative Commons does not authorize the\\\\nuse of the trademark \\\\\\"Creative Commons\\\\\\" or any other trademark or logo\\\\nof Creative Commons without its prior written consent including,\\\\nwithout limitation, in connection with any unauthorized modifications\\\\nto any of its public licenses or any other arrangements,\\\\nunderstandings, or agreements concerning use of licensed material. For\\\\nthe avoidance of doubt, this paragraph does not form part of the\\\\npublic licenses.\\\\n\\\\nCreative Commons may be contacted at creativecommons.org.\\\\n\\",
    \\"author\\": \\"Ben Briggs <beneb.info@gmail.com> (http://beneb.info)\\",
    \\"license\\": \\"CC-BY-4.0\\",
    \\"repository\\": \\"git+https://github.com/browserslist/caniuse-lite.git\\"
  },
  {
    \\"name\\": \\"chalk\\",
    \\"version\\": \\"2.4.2\\",
    \\"licenseText\\": \\"MIT License\\\\n\\\\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/chalk/chalk.git\\"
  },
  {
    \\"name\\": \\"color-convert\\",
    \\"version\\": \\"1.9.3\\",
    \\"licenseText\\": \\"Copyright (c) 2011-2016 Heather Arthur <fayearthur@gmail.com>\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining\\\\na copy of this software and associated documentation files (the\\\\n\\\\\\"Software\\\\\\"), to deal in the Software without restriction, including\\\\nwithout limitation the rights to use, copy, modify, merge, publish,\\\\ndistribute, sublicense, and/or sell copies of the Software, and to\\\\npermit persons to whom the Software is furnished to do so, subject to\\\\nthe following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be\\\\nincluded in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND,\\\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\\\\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\\\\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\\\\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\\\\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\\\n\\",
    \\"author\\": \\"Heather Arthur <fayearthur@gmail.com>\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/Qix-/color-convert.git\\"
  },
  {
    \\"name\\": \\"color-name\\",
    \\"version\\": \\"1.1.3\\",
    \\"licenseText\\": \\"The MIT License (MIT)\\\\r\\\\nCopyright (c) 2015 Dmitry Ivanov\\\\r\\\\n\\\\r\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\\\r\\\\n\\\\r\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\\\r\\\\n\\\\r\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\",
    \\"author\\": \\"DY <dfcreative@gmail.com>\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+ssh://git@github.com/dfcreative/color-name.git\\"
  },
  {
    \\"name\\": \\"convert-source-map\\",
    \\"version\\": \\"1.8.0\\",
    \\"licenseText\\": \\"Copyright 2013 Thorsten Lorenz. \\\\nAll rights reserved.\\\\n\\\\nPermission is hereby granted, free of charge, to any person\\\\nobtaining a copy of this software and associated documentation\\\\nfiles (the \\\\\\"Software\\\\\\"), to deal in the Software without\\\\nrestriction, including without limitation the rights to use,\\\\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\\\\ncopies of the Software, and to permit persons to whom the\\\\nSoftware is furnished to do so, subject to the following\\\\nconditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be\\\\nincluded in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND,\\\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\\\\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\\\\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\\\\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\\\\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\\\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\\\\nOTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Thorsten Lorenz <thlorenz@gmx.de> (http://thlorenz.com)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git://github.com/thlorenz/convert-source-map.git\\"
  },
  {
    \\"name\\": \\"debug\\",
    \\"version\\": \\"4.3.3\\",
    \\"licenseText\\": \\"(The MIT License)\\\\n\\\\nCopyright (c) 2014-2017 TJ Holowaychuk <tj@vision-media.ca>\\\\nCopyright (c) 2018-2021 Josh Junon\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software\\\\nand associated documentation files (the 'Software'), to deal in the Software without restriction,\\\\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\\\\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\\\\nsubject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial\\\\nportions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\\\\nLIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\\\\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\\\n\\",
    \\"author\\": \\"Josh Junon <josh.junon@protonmail.com>\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git://github.com/debug-js/debug.git\\"
  },
  {
    \\"name\\": \\"electron-to-chromium\\",
    \\"version\\": \\"1.4.59\\",
    \\"licenseText\\": \\"Copyright 2018 Kilian Valkhof\\\\n\\\\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\\\n\\",
    \\"author\\": \\"Kilian Valkhof\\",
    \\"license\\": \\"ISC\\",
    \\"repository\\": \\"git+https://github.com/kilian/electron-to-chromium.git\\"
  },
  {
    \\"name\\": \\"escape-string-regexp\\",
    \\"version\\": \\"1.0.5\\",
    \\"licenseText\\": \\"The MIT License (MIT)\\\\n\\\\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\\\nof this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal\\\\nin the Software without restriction, including without limitation the rights\\\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\\\ncopies of the Software, and to permit persons to whom the Software is\\\\nfurnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in\\\\nall copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\\\nTHE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/sindresorhus/escape-string-regexp.git\\"
  },
  {
    \\"name\\": \\"gensync\\",
    \\"version\\": \\"1.0.0-beta.2\\",
    \\"licenseText\\": \\"Copyright 2018 Logan Smyth <loganfsmyth@gmail.com>\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Logan Smyth <loganfsmyth@gmail.com>\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/loganfsmyth/gensync.git\\"
  },
  {
    \\"name\\": \\"globals\\",
    \\"version\\": \\"11.12.0\\",
    \\"licenseText\\": \\"MIT License\\\\n\\\\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/sindresorhus/globals.git\\"
  },
  {
    \\"name\\": \\"has-flag\\",
    \\"version\\": \\"4.0.0\\",
    \\"licenseText\\": \\"MIT License\\\\n\\\\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/sindresorhus/has-flag.git\\"
  },
  {
    \\"name\\": \\"js-tokens\\",
    \\"version\\": \\"4.0.0\\",
    \\"licenseText\\": \\"The MIT License (MIT)\\\\n\\\\nCopyright (c) 2014, 2015, 2016, 2017, 2018 Simon Lydell\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\\\nof this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal\\\\nin the Software without restriction, including without limitation the rights\\\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\\\ncopies of the Software, and to permit persons to whom the Software is\\\\nfurnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in\\\\nall copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\\\nTHE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Simon Lydell\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/lydell/js-tokens.git\\"
  },
  {
    \\"name\\": \\"jsesc\\",
    \\"version\\": \\"2.5.2\\",
    \\"licenseText\\": \\"Copyright Mathias Bynens <https://mathiasbynens.be/>\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining\\\\na copy of this software and associated documentation files (the\\\\n\\\\\\"Software\\\\\\"), to deal in the Software without restriction, including\\\\nwithout limitation the rights to use, copy, modify, merge, publish,\\\\ndistribute, sublicense, and/or sell copies of the Software, and to\\\\npermit persons to whom the Software is furnished to do so, subject to\\\\nthe following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be\\\\nincluded in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND,\\\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\\\\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\\\\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\\\\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\\\\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Mathias Bynens (https://mathiasbynens.be/)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/mathiasbynens/jsesc.git\\"
  },
  {
    \\"name\\": \\"json5\\",
    \\"version\\": \\"2.2.0\\",
    \\"licenseText\\": \\"MIT License\\\\n\\\\nCopyright (c) 2012-2018 Aseem Kishore, and [others].\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\\\nof this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal\\\\nin the Software without restriction, including without limitation the rights\\\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\\\ncopies of the Software, and to permit persons to whom the Software is\\\\nfurnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all\\\\ncopies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\\\nSOFTWARE.\\\\n\\\\n[others]: https://github.com/json5/json5/contributors\\\\n\\",
    \\"author\\": \\"Aseem Kishore <aseem.kishore@gmail.com>\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/json5/json5.git\\"
  },
  {
    \\"name\\": \\"ms\\",
    \\"version\\": \\"2.1.2\\",
    \\"licenseText\\": \\"The MIT License (MIT)\\\\n\\\\nCopyright (c) 2016 Zeit, Inc.\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\\\nof this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal\\\\nin the Software without restriction, including without limitation the rights\\\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\\\ncopies of the Software, and to permit persons to whom the Software is\\\\nfurnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all\\\\ncopies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\\\nSOFTWARE.\\\\n\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/zeit/ms.git\\"
  },
  {
    \\"name\\": \\"node-releases\\",
    \\"version\\": \\"2.0.1\\",
    \\"licenseText\\": \\"The MIT License\\\\n\\\\nCopyright (c) 2017 Sergey Rubanov (https://github.com/chicoxyzzy)\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\\\nof this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal\\\\nin the Software without restriction, including without limitation the rights\\\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\\\ncopies of the Software, and to permit persons to whom the Software is\\\\nfurnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in\\\\nall copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\\\nTHE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Sergey Rubanov <chi187@gmail.com>\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/chicoxyzzy/node-releases.git\\"
  },
  {
    \\"name\\": \\"safe-buffer\\",
    \\"version\\": \\"5.1.2\\",
    \\"licenseText\\": \\"The MIT License (MIT)\\\\n\\\\nCopyright (c) Feross Aboukhadijeh\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\\\nof this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal\\\\nin the Software without restriction, including without limitation the rights\\\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\\\ncopies of the Software, and to permit persons to whom the Software is\\\\nfurnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in\\\\nall copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\\\nTHE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Feross Aboukhadijeh <feross@feross.org> (http://feross.org)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git://github.com/feross/safe-buffer.git\\"
  },
  {
    \\"name\\": \\"semver\\",
    \\"version\\": \\"6.3.0\\",
    \\"licenseText\\": \\"The ISC License\\\\n\\\\nCopyright (c) Isaac Z. Schlueter and Contributors\\\\n\\\\nPermission to use, copy, modify, and/or distribute this software for any\\\\npurpose with or without fee is hereby granted, provided that the above\\\\ncopyright notice and this permission notice appear in all copies.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\\\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\\\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\\\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\\\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\\\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\\\\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\\\n\\",
    \\"license\\": \\"ISC\\",
    \\"repository\\": \\"git+https://github.com/npm/node-semver.git\\"
  },
  {
    \\"name\\": \\"source-map\\",
    \\"version\\": \\"0.5.7\\",
    \\"licenseText\\": \\"\\\\nCopyright (c) 2009-2011, Mozilla Foundation and contributors\\\\nAll rights reserved.\\\\n\\\\nRedistribution and use in source and binary forms, with or without\\\\nmodification, are permitted provided that the following conditions are met:\\\\n\\\\n* Redistributions of source code must retain the above copyright notice, this\\\\n  list of conditions and the following disclaimer.\\\\n\\\\n* Redistributions in binary form must reproduce the above copyright notice,\\\\n  this list of conditions and the following disclaimer in the documentation\\\\n  and/or other materials provided with the distribution.\\\\n\\\\n* Neither the names of the Mozilla Foundation nor the names of project\\\\n  contributors may be used to endorse or promote products derived from this\\\\n  software without specific prior written permission.\\\\n\\\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\\\\"AS IS\\\\\\" AND\\\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\\\n\\",
    \\"author\\": \\"Nick Fitzgerald <nfitzgerald@mozilla.com>\\",
    \\"license\\": \\"BSD-3-Clause\\",
    \\"repository\\": \\"git+ssh://git@github.com/mozilla/source-map.git\\"
  },
  {
    \\"name\\": \\"supports-color\\",
    \\"version\\": \\"7.2.0\\",
    \\"licenseText\\": \\"MIT License\\\\n\\\\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/chalk/supports-color.git\\"
  },
  {
    \\"name\\": \\"to-fast-properties\\",
    \\"version\\": \\"2.0.0\\",
    \\"licenseText\\": \\"MIT License\\\\n\\\\nCopyright (c) 2014 Petka Antonov\\\\n              2015 Sindre Sorhus\\\\n\\\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\\\\"Software\\\\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\\\n\\\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\\\n\\\\nTHE SOFTWARE IS PROVIDED \\\\\\"AS IS\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\\\n\\",
    \\"author\\": \\"Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\\",
    \\"license\\": \\"MIT\\",
    \\"repository\\": \\"git+https://github.com/sindresorhus/to-fast-properties.git\\"
  }
]",
    "path": "oss-licenses.json",
  },
  Object {
    "content": "{
  \\"MIT\\": 19,
  \\"CC-BY-4.0\\": 1,
  \\"ISC\\": 2,
  \\"BSD-3-Clause\\": 1
}",
    "path": "oss-summary.json",
  },
]
`;
